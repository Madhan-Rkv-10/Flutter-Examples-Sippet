{
  
    " Flutter AboutListTile Example": {
        "scope": "dart",
        "prefix": "flutter-listtile-about",
        "body": [
          "void main() => runApp(const AboutListTileExampleApp());",
          "",
          "class AboutListTileExampleApp extends StatelessWidget {",
          "  const AboutListTileExampleApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return const MaterialApp(",
          "      home: AboutListTileExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class AboutListTileExample extends StatelessWidget {",
          "  const AboutListTileExample({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    final ThemeData theme = Theme.of(context);",
          "    final TextStyle textStyle = theme.textTheme.bodyMedium!;",
          "    final List<Widget> aboutBoxChildren = <Widget>[",
          "      const SizedBox(height: 24),",
          "      RichText(",
          "        text: TextSpan(",
          "          children: <TextSpan>[",
          "            TextSpan(",
          "                style: textStyle,",
          "                text: \"Flutter is Google's UI toolkit for building beautiful, \"",
          "                    'natively compiled applications for mobile, web, and desktop '",
          "                    'from a single codebase. Learn more about Flutter at '),",
          "            TextSpan(",
          "                style: textStyle.copyWith(color: theme.colorScheme.primary),",
          "                text: 'https://flutter.dev'),",
          "            TextSpan(style: textStyle, text: '.'),",
          "          ],",
          "        ),",
          "      ),",
          "    ];",
          "",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('Show About Example'),",
          "      ),",
          "      drawer: Drawer(",
          "        child: SingleChildScrollView(",
          "          child: SafeArea(",
          "            child: AboutListTile(",
          "              icon: const Icon(Icons.info),",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              aboutBoxChildren: aboutBoxChildren,",
          "            ),",
          "          ),",
          "        ),",
          "      ),",
          "      body: Center(",
          "        child: ElevatedButton(",
          "          child: const Text('Show About Example'),",
          "          onPressed: () {",
          "            showAboutDialog(",
          "              context: context,",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              children: aboutBoxChildren,",
          "            );",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AboutListTile Example "
      },
      "Dart Flutter ActionChip Example": {
        "scope": "dart",
        "prefix": "flutter-chip-action",
        "body": [
          "// Flutter code sample [ActionChip].",
          "import 'package:flutter/material.dart';",
          "",
          "void main() => runApp(const ChipApp());",
          "",
          "class ChipApp extends StatelessWidget {",
          "  const ChipApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
          "      home: const ActionChipExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class ActionChipExample extends StatefulWidget {",
          "  const ActionChipExample({super.key});",
          "",
          "  @override",
          "  State<ActionChipExample> createState() => _ActionChipExampleState();",
          "}",
          "",
          "class _ActionChipExampleState extends State<ActionChipExample> {",
          "  bool favorite = false;",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('ActionChip Sample'),",
          "      ),",
          "      body: Center(",
          "        child: ActionChip(",
          "          avatar: Icon(favorite ? Icons.favorite : Icons.favorite_border),",
          "          label: const Text('Save to favorites'),",
          "          onPressed: () {",
          "            setState(() {",
          "              favorite = !favorite;",
          "            });",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter ActionChip Example (Dart)"
      },

      "Flutter AnimatedIcon Example": {
        "scope": "dart",
        "prefix": "flutter-animated-icon",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "void main() {",
          "  runApp(const AnimatedIconApp());",
          "}",
          "",
          "class AnimatedIconApp extends StatelessWidget {",
          "  const AnimatedIconApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const Scaffold(",
          "        body: AnimatedIconExample(),",
          "      ),",
          "    );",
          "  }",
          "}",
          "",
          "class AnimatedIconExample extends StatefulWidget {",
          "  const AnimatedIconExample({super.key});",
          "",
          "  @override",
          "  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();",
          "}",
          "",
          "class _AnimatedIconExampleState extends State<AnimatedIconExample> with SingleTickerProviderStateMixin {",
          "  late AnimationController controller;",
          "  late Animation<double> animation;",
          "",
          "  @override",
          "  void initState() {",
          "    super.initState();",
          "    controller = AnimationController(",
          "      vsync: this,",
          "      duration: const Duration(seconds: 2),",
          "    )",
          "      ..forward()",
          "      ..repeat(reverse: true);",
          "    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);",
          "  }",
          "",
          "  @override",
          "  void dispose() {",
          "    controller.dispose();",
          "    super.dispose();",
          "  }",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      body: Center(",
          "        child: AnimatedIcon(",
          "          icon: AnimatedIcons.menu_arrow,",
          "          progress: animation,",
          "          size: 72.0,",
          "          semanticLabel: 'Show menu',",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AnimatedIcon Example "
      },
      "Dart Flutter AnimatedIcons Example": {
        "scope": "dart",
        "prefix": "flutter-animated-icons",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "// Define a map of AnimatedIcons.",
          "final Map<String, AnimatedIconData> iconsList = <String, AnimatedIconData>{",
          "  'add_event': AnimatedIcons.add_event,",
          "  'arrow_menu': AnimatedIcons.arrow_menu,",
          "  'close_menu': AnimatedIcons.close_menu,",
          "  'ellipsis_search': AnimatedIcons.ellipsis_search,",
          "  'event_add': AnimatedIcons.event_add,",
          "  'home_menu': AnimatedIcons.home_menu,",
          "  'list_view': AnimatedIcons.list_view,",
          "  'menu_arrow': AnimatedIcons.menu_arrow,",
          "  'menu_close': AnimatedIcons.menu_close,",
          "  'menu_home': AnimatedIcons.menu_home,",
          "  'pause_play': AnimatedIcons.pause_play,",
          "  'play_pause': AnimatedIcons.play_pause,",
          "  'search_ellipsis': AnimatedIcons.search_ellipsis,",
          "  'view_list': AnimatedIcons.view_list,",
          "};",
          "",
          "void main() {",
          "  runApp(const AnimatedIconApp());",
          "}",
          "",
          "class AnimatedIconApp extends StatelessWidget {",
          "  const AnimatedIconApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const Scaffold(",
          "        body: AnimatedIconExample(),",
          "      ),",
          "    );",
          "  }",
          "}",
          "",
          "class AnimatedIconExample extends StatefulWidget {",
          "  const AnimatedIconExample({super.key});",
          "",
          "  @override",
          "  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();",
          "}",
          "",
          "class _AnimatedIconExampleState extends State<AnimatedIconExample> with SingleTickerProviderStateMixin {",
          "  late AnimationController controller;",
          "  late Animation<double> animation;",
          "",
          "  @override",
          "  void initState() {",
          "    super.initState();",
          "    controller = AnimationController(",
          "      vsync: this,",
          "      duration: const Duration(seconds: 2),",
          "    )",
          "      ..forward()",
          "      ..repeat(reverse: true);",
          "    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);",
          "  }",
          "",
          "  @override",
          "  void dispose() {",
          "    controller.dispose();",
          "    super.dispose();",
          "  }",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      body: GridView(",
          "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
          "          crossAxisCount: 4,",
          "        ),",
          "        children: iconsList.entries.map((MapEntry<String, AnimatedIconData> entry) {",
          "          return Card(",
          "            child: Center(",
          "              child: Column(",
          "                mainAxisAlignment: MainAxisAlignment.center,",
          "                children: <Widget>[",
          "                  AnimatedIcon(",
          "                    icon: entry.value,",
          "                    progress: animation,",
          "                    size: 72.0,",
          "                    semanticLabel: entry.key,",
          "                  ),",
          "                  const SizedBox(height: 8.0),",
          "                  Text(entry.key),",
          "                ],",
          "              ),",
          "            ),",
          "          );",
          "        }).toList(),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AnimatedIcons Example "
      },
      "Dart Flutter AppBar Example": {
        "scope": "dart",
        "prefix": "flutter-app-bar",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "// Create a list of integers.",
          "final List<int> _items = List<int>.generate(51, (int index) => index);",
          "",
          "void main() => runApp(const AppBarApp());",
          "",
          "class AppBarApp extends StatelessWidget {",
          "  const AppBarApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const AppBarExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class AppBarExample extends StatefulWidget {",
          "  const AppBarExample({super.key});",
          "",
          "  @override",
          "  State<AppBarExample> createState() => _AppBarExampleState();",
          "}",
          "",
          "class _AppBarExampleState extends State<AppBarExample> {",
          "  bool shadowColor = false;",
          "  double? scrolledUnderElevation;",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    final ColorScheme colorScheme = Theme.of(context).colorScheme;",
          "    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);",
          "    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);",
          "",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('AppBar Demo'),",
          "        scrolledUnderElevation: scrolledUnderElevation,",
          "        shadowColor: shadowColor ? Theme.of(context).colorScheme.shadow : null,",
          "      ),",
          "      body: GridView.builder(",
          "        itemCount: _items.length,",
          "        padding: const EdgeInsets.all(8.0),",
          "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
          "          crossAxisCount: 3,",
          "          childAspectRatio: 2.0,",
          "          mainAxisSpacing: 10.0,",
          "          crossAxisSpacing: 10.0,",
          "        ),",
          "        itemBuilder: (BuildContext context, int index) {",
          "          if (index == 0) {",
          "            return Center(",
          "              child: Text(",
          "                'Scroll to see the AppBar in effect.',",
          "                style: Theme.of(context).textTheme.labelLarge,",
          "                textAlign: TextAlign.center,",
          "              ),",
          "            );",
          "          }",
          "          return Container(",
          "            alignment: Alignment.center,",
          "            decoration: BoxDecoration(",
          "              borderRadius: BorderRadius.circular(20.0),",
          "              color: _items[index].isOdd ? oddItemColor : evenItemColor,",
          "            ),",
          "            child: Text('Item $index'),",
          "          );",
          "        },",
          "      ),",
          "      bottomNavigationBar: BottomAppBar(",
          "        child: Padding(",
          "          padding: const EdgeInsets.all(8),",
          "          child: OverflowBar(",
          "            overflowAlignment: OverflowBarAlignment.center,",
          "            alignment: MainAxisAlignment.center,",
          "            overflowSpacing: 2.0,",
          "            children: <Widget>[",
          "              ElevatedButton.icon(",
          "                onPressed: () {",
          "                  setState(() {",
          "                    shadowColor = !shadowColor;",
          "                  });",
          "                },",
          "                icon: Icon(",
          "                  shadowColor ? Icons.visibility_off : Icons.visibility,",
          "                ),",
          "                label: const Text('shadow color'),",
          "              ),",
          "              const SizedBox(width: 5),",
          "              ElevatedButton(",
          "                onPressed: () {",
          "                  if (scrolledUnderElevation == null) {",
          "                    setState(() {",
          "                      // Default elevation is 3.0, increment by 1.0.",
          "                      scrolledUnderElevation = 4.0;",
          "                    });",
          "                  } else {",
          "                    setState(() {",
          "                      scrolledUnderElevation = scrolledUnderElevation! + 1.0;",
          "                    });",
          "                  }",
          "                },",
          "                child: Text(",
          "                  'scrolledUnderElevation: ${scrolledUnderElevation ?? 'default'}',",
          "                ),",
          "              ),",
          "            ],",
          "          ),",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AppBar Example "
      },
      {
        "EditableTextToolbarBuilder Example": {
          "scope": "dart",  // Specify the scope for Dart files
          "prefix": "flutter-editable-toolbar-builder",  // Choose a prefix to trigger the snippet
          "body": [
            "import 'package:flutter/foundation.dart';",
            "import 'package:flutter/material.dart';",
            "import 'package:flutter/services.dart';",
            "",
            "void main() => runApp(const EditableTextToolbarBuilderExampleApp());",
            "class EditableTextToolbarBuilderExampleApp extends StatefulWidget {",
            "  const EditableTextToolbarBuilderExampleApp({super.key});",
            "  @override",
            "  State<EditableTextToolbarBuilderExampleApp> createState() => _EditableTextToolbarBuilderExampleAppState();",
            "}",
            "class _EditableTextToolbarBuilderExampleAppState extends State<EditableTextToolbarBuilderExampleApp> {",
            "  final TextEditingController _controller = TextEditingController(",
            "    text: 'Right click (desktop) or long press (mobile) to see the menu with a custom toolbar.',",
            "  );",
            "",
            "  @override",
            "  void initState() {",
            "    super.initState();",
            "    // On web, disable the browser's context menu since this example uses a custom",
            "    // Flutter-rendered context menu.",
            "    if (kIsWeb) {",
            "      BrowserContextMenu.disableContextMenu();",
            "    }",
            "  }",
            "",
            "  @override",
            "  void dispose() {",
            "    if (kIsWeb) {",
            "      BrowserContextMenu.enableContextMenu();",
            "    }",
            "    super.dispose();",
            "  }",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return MaterialApp(",
            "      home: Scaffold(",
            "        appBar: AppBar(",
            "          title: const Text('Custom toolbar, default-looking buttons'),",
            "        ),",
            "        body: Center(",
            "          child: Column(",
            "            children: <Widget>[",
            "              const SizedBox(height: 20.0),",
            "              TextField(",
            "                controller: _controller,",
            "                contextMenuBuilder: (BuildContext context, EditableTextState editableTextState) {",
            "                  return _MyTextSelectionToolbar(",
            "                    anchor: editableTextState.contextMenuAnchors.primaryAnchor,",
            "                    // getAdaptiveButtons creates the default button widgets for",
            "                    // the current platform.",
            "                    children: AdaptiveTextSelectionToolbar.getAdaptiveButtons(",
            "                      context,",
            "                      // These buttons just close the menu when clicked.",
            "                      <ContextMenuButtonItem>[",
            "                        ContextMenuButtonItem(",
            "                          label: 'One',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Two',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Three',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Four',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Five',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                      ],",
            "                    ).toList(),",
            "                  );",
            "                },",
            "              ),",
            "            ],",
            "          ),",
            "        ),",
            "      ),",
            "    );",
            "  }",
            "}",
            "",
            "class _MyTextSelectionToolbar extends StatelessWidget {",
            "  const _MyTextSelectionToolbar({",
            "    required this.anchor,",
            "    required this.children,",
            "  });",
            "",
            "  final Offset anchor;",
            "  final List<Widget> children;",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Stack(",
            "      children: <Widget>[",
            "        Positioned(",
            "          top: anchor.dy,",
            "          left: anchor.dx,",
            "          child: Container(",
            "            width: 200.0,",
            "            height: 200.0,",
            "            color: Colors.cyanAccent.withOpacity(0.5),",
            "            child: GridView.count(",
            "              padding: const EdgeInsets.all(12.0),",
            "              crossAxisCount: 2,",
            "              children: children,",
            "            ),",
            "          ),",
            "        ),",
            "      ],",
            "    );",
            "  }",
            "}",
          ],
          "description": "Flutter editable toggle button snippet"
        }
      },
      {
  "flutter Autocomplete Example": {
    "scope": "dart", 
    "prefix": "flutter-autocomplete-example",  
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "const Duration fakeAPIDuration = Duration(seconds: 1);",
      "",
      "void main() => runApp(const AutocompleteExampleApp());",
      "",
      "class AutocompleteExampleApp extends StatelessWidget {",
      "  const AutocompleteExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Autocomplete - async'),",
      "        ),",
      "        body: Center(",
      "          child: Column(",
      "            mainAxisAlignment: MainAxisAlignment.center,",
      "            children: <Widget>[",
      "              Text('Type below to autocomplete the following possible results: \${_FakeAPI._kOptions}.'),",
      "              const _AsyncAutocomplete(),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _AsyncAutocomplete extends StatefulWidget {",
      "  const _AsyncAutocomplete();",
      "",
      "  @override",
      "  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();",
      "}",
      "",
      "class _AsyncAutocompleteState extends State<_AsyncAutocomplete> {",
      "  String? _searchingWithQuery;",
      "  late Iterable<String> _lastOptions = <String>[];",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Autocomplete<String>(",
      "      optionsBuilder: (TextEditingValue textEditingValue) async {",
      "        _searchingWithQuery = textEditingValue.text;",
      "        final Iterable<String> options = await _FakeAPI.search(_searchingWithQuery!);",
      "        if (_searchingWithQuery != textEditingValue.text) {",
      "          return _lastOptions;",
      "        }",
      "        _lastOptions = options;",
      "        return options;",
      "      },",
      "      onSelected: (String selection) {",
      "        debugPrint('You just selected $selection');",
      "      },",
      "    );",
      "  }",
      "}",
      "",
      "class _FakeAPI {",
      "  static const List<String> _kOptions = <String>[",
      "    'aardvark',",
      "    'bobcat',",
      "    'chameleon',",
      "  ];",
      "",
      "  static Future<Iterable<String>> search(String query) async {",
      "    await Future<void>.delayed(fakeAPIDuration);",
      "    if (query == '') {",
      "      return const Iterable<String>.empty();",
      "    }",
      "    return _kOptions.where((String option) {",
      "      return option.contains(query.toLowerCase());",
      "    });",
      "  }",
      "}",
    ],
    "description": "Flutter Autocomplete Example"
  }
},
{
  "Flutter Async Autocomplete Example": {
    "scope": "dart",  // Specify the scope for Dart files
    "prefix": "flutter-asyncautocomplete-example",  // Choose a prefix to trigger the snippet
    "body": [
      "import 'dart:async';",
      "import 'package:flutter/material.dart';",
      "",
      "const Duration fakeAPIDuration = Duration(seconds: 1);",
      "const Duration debounceDuration = Duration(milliseconds: 500);",
      "",
      "void main() => runApp(const AutocompleteExampleApp());",
      "",
      "class AutocompleteExampleApp extends StatelessWidget {",
      "  const AutocompleteExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Autocomplete - async and debouncing'),",
      "        ),",
      "        body: Center(",
      "          child: Column(",
      "            mainAxisAlignment: MainAxisAlignment.center,",
      "            children: <Widget>[",
      "              Text('Type below to autocomplete the following possible results: \${_FakeAPI._kOptions}.'),",
      "              const _AsyncAutocomplete(),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _AsyncAutocomplete extends StatefulWidget {",
      "  const _AsyncAutocomplete();",
      "",
      "  @override",
      "  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();",
      "}",
      "",
      "class _AsyncAutocompleteState extends State<_AsyncAutocomplete> {",
      "  String? _currentQuery;",
      "  late Iterable<String> _lastOptions = <String>[];",
      "",
      "  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;",
      "",
      "  Future<Iterable<String>?> _search(String query) async {",
      "    _currentQuery = query;",
      "    final Iterable<String> options = await _FakeAPI.search(_currentQuery!);",
      "    if (_currentQuery != query) {",
      "      return null;",
      "    }",
      "    _currentQuery = null;",
      "    return options;",
      "  }",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Autocomplete<String>(",
      "      optionsBuilder: (TextEditingValue textEditingValue) async {",
      "        final Iterable<String>? options = await _debouncedSearch(textEditingValue.text);",
      "        if (options == null) {",
      "          return _lastOptions;",
      "        }",
      "        _lastOptions = options;",
      "        return options;",
      "      },",
      "      onSelected: (String selection) {",
      "        debugPrint('You just selected $selection');",
      "      },",
      "    );",
      "  }",
      "}",
      "",
      "class _FakeAPI {",
      "  static const List<String> _kOptions = <String>[",
      "    'aardvark',",
      "    'bobcat',",
      "    'chameleon',",
      "  ];",
      "",
      "  static Future<Iterable<String>> search(String query) async {",
      "    await Future<void>.delayed(fakeAPIDuration);",
      "    if (query == '') {",
      "      return const Iterable<String>.empty();",
      "    }",
      "    return _kOptions.where((String option) {",
      "      return option.contains(query.toLowerCase());",
      "    });",
      "  }",
      "}",
      "",
      "typedef _Debounceable<S, T> = Future<S?> Function(T parameter);",
      "",
      "_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {",
      "  _DebounceTimer? debounceTimer;",
      "  return (T parameter) async {",
      "    if (debounceTimer != null && !debounceTimer!.isCompleted) {",
      "      debounceTimer!.cancel();",
      "    }",
      "    debounceTimer = _DebounceTimer();",
      "    try {",
      "      await debounceTimer!.future;",
      "    } catch (error) {",
      "      if (error is _CancelException) {",
      "        return null;",
      "      }",
      "      rethrow;",
      "    }",
      "    return function(parameter);",
      "  };",
      "}",
      "",
      "class _DebounceTimer {",
      "  _DebounceTimer() {",
      "    _timer = Timer(debounceDuration, _onComplete);",
      "  }",
      "",
      "  late final Timer _timer;",
      "  final Completer<void> _completer = Completer<void>();",
      "",
      "  void _onComplete() {",
      "    _completer.complete();",
      "  }",
      "",
      "  Future<void> get future => _completer.future;",
      "",
      "  bool get isCompleted => _completer.isCompleted;",
      "",
      "  void cancel() {",
      "    _timer.cancel();",
      "    _completer.completeError(const _CancelException());",
      "  }",
      "}",
      "",
      "class _CancelException implements Exception {",
       "  const _CancelException();",
      "}",
    ],
    "description": "flutter Async Autocomplete Example"
  }
},
{
  "Flutter Material Banner Example": {
    "prefix": "flutter-banner-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const MaterialBannerExampleApp());",
      "",
      "class MaterialBannerExampleApp extends StatelessWidget {",
      "  const MaterialBannerExampleApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const MaterialApp(",
      "      home: MaterialBannerExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class MaterialBannerExample extends StatelessWidget {",
      "  const MaterialBannerExample({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('The MaterialBanner is below'),",
      "      ),",
      "      body: Center(",
      "        child: ElevatedButton(",
      "          child: const Text('Show MaterialBanner'),",
      "          onPressed: () => ScaffoldMessenger.of(context).showMaterialBanner(",
      "            const MaterialBanner(",
      "              content: Text('Hello, I am a Material Banner'),",
      "              leading: Icon(Icons.agriculture_outlined),",
      "              backgroundColor: Colors.green,",
      "              actions: <Widget>[",
      "                TextButton(",
      "                  onPressed: null,",
      "                  child: Text('DISMISS'),",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Material Banner Example in Dart"
  },
  {
    "Flutter BottomAppBar Demo": {
      "scope": "dart",
      "prefix": "flutter-bottomappbar-demo",
      "body": [
        "import 'package:flutter/material.dart';",
        "",
        "void main() {",
        "  runApp(const BottomAppBarDemo());",
        "}",
        "",
        "class BottomAppBarDemo extends StatefulWidget {",
        "  const BottomAppBarDemo({super.key});",
        "",
        "  @override",
        "  State createState() => _BottomAppBarDemoState();",
        "}",
        "",
        "class _BottomAppBarDemoState extends State<BottomAppBarDemo> {",
        "  bool _showFab = true;",
        "  bool _showNotch = true;",
        "  FloatingActionButtonLocation _fabLocation = FloatingActionButtonLocation.endDocked;",
        "",
        "  void _onShowNotchChanged(bool value) {",
        "    setState(() {",
        "      _showNotch = value;",
        "    });",
        "  }",
        "",
        "  void _onShowFabChanged(bool value) {",
        "    setState(() {",
        "      _showFab = value;",
        "    });",
        "  }",
        "",
        "  void _onFabLocationChanged(FloatingActionButtonLocation? value) {",
        "    setState(() {",
        "      _fabLocation = value ?? FloatingActionButtonLocation.endDocked;",
        "    });",
        "  }",
        "",
        "  @override",
        "  Widget build(BuildContext context) {",
        "    return MaterialApp(",
        "      home: Scaffold(",
        "        appBar: AppBar(",
        "          automaticallyImplyLeading: false,",
        "          title: const Text('Bottom App Bar Demo'),",
        "        ),",
        "        body: ListView(",
        "          padding: const EdgeInsets.only(bottom: 88),",
        "          children: <Widget>[",
        "            SwitchListTile(",
        "              title: const Text(",
        "                'Floating Action Button',",
        "              ),",
        "              value: _showFab,",
        "              onChanged: _onShowFabChanged,",
        "            ),",
        "            SwitchListTile(",
        "              title: const Text('Notch'),",
        "              value: _showNotch,",
        "              onChanged: _onShowNotchChanged,",
        "            ),",
        "            const Padding(",
        "              padding: EdgeInsets.all(16),",
        "              child: Text('Floating action button position'),",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Docked - End'),",
        "              value: FloatingActionButtonLocation.endDocked,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Docked - Center'),",
        "              value: FloatingActionButtonLocation.centerDocked,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Floating - End'),",
        "              value: FloatingActionButtonLocation.endFloat,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Floating - Center'),",
        "              value: FloatingActionButtonLocation.centerFloat,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "          ],",
        "        ),",
        "        floatingActionButton: _showFab",
        "            ? FloatingActionButton(",
        "                onPressed: () {},",
        "                tooltip: 'Create',",
        "                child: const Icon(Icons.add),",
        "              )",
        "            : null,",
        "        floatingActionButtonLocation: _fabLocation,",
        "        bottomNavigationBar: _DemoBottomAppBar(",
        "          fabLocation: _fabLocation,",
        "          shape: _showNotch ? const CircularNotchedRectangle() : null,",
        "        ),",
        "      ),",
        "    );",
        "  }",
        "}",
        "",
        "class _DemoBottomAppBar extends StatelessWidget {",
        "  const _DemoBottomAppBar({",
        "    this.fabLocation = FloatingActionButtonLocation.endDocked,",
        "    this.shape = const CircularNotchedRectangle(),",
        "  });",
        "",
        "  final FloatingActionButtonLocation fabLocation;",
        "  final NotchedShape? shape;",
        "",
        "  static final List<FloatingActionButtonLocation> centerLocations = <FloatingActionButtonLocation>[",
        "    FloatingActionButtonLocation.centerDocked,",
        "    FloatingActionButtonLocation.centerFloat,",
        "  ];",
        "",
        "  @override",
        "  Widget build(BuildContext context) {",
        "    return BottomAppBar(",
        "      shape: shape,",
        "      color: Colors.blue,",
        "      child: IconTheme(",
        "        data: IconThemeData(color: Theme.of(context).colorScheme.onPrimary),",
        "        child: Row(",
        "          children: <Widget>[",
        "            IconButton(",
        "              tooltip: 'Open navigation menu',",
        "              icon: const Icon(Icons.menu),",
        "              onPressed: () {},",
        "            ),",
        "            if (centerLocations.contains(fabLocation)) const Spacer(),",
        "            IconButton(",
        "              tooltip: 'Search',",
        "              icon: const Icon(Icons.search),",
        "              onPressed: () {},",
        "            ),",
        "            IconButton(",
        "              tooltip: 'Favorite',",
        "              icon: const Icon(Icons.favorite),",
        "              onPressed: () {},",
        "            ),",
        "          ],",
        "        ),",
        "      ),",
        "    );",
        "  }",
        "}"
      ],
      "description": "Flutter BottomAppBar Demo in Dart"
    }
  },
  
  
},
{
  "Flutter BottomAppBar Demo Two": {
    "scope": "dart",
    "prefix": "flutter-bottomappbar-demo-two",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter/rendering.dart';",
      "",
      "void main() {",
      "  runApp(const BottomAppBarDemoTwo());",
      "}",
      "",
      "class BottomAppBarDemoTwo extends StatefulWidget {",
      "  const BottomAppBarDemoTwo({super.key});",
      "",
      "  @override",
      "  State createState() => _BottomAppBarDemoTwoState();",
      "}",
      "",
      "class _BottomAppBarDemoTwoState extends State<BottomAppBarDemoTwo> {",
      "  static const List<Color> colors = <Color>[",
      "    Colors.yellow,",
      "    Colors.orange,",
      "    Colors.pink,",
      "    Colors.purple,",
      "    Colors.cyan,",
      "  ];",
      "",
      "  static final List<Widget> items = List<Widget>.generate(",
      "    colors.length,",
      "    (int index) => Container(color: colors[index], height: 150.0),",
      "  ).reversed.toList();",
      "",
      "  late ScrollController _controller;",
      "  bool _showFab = true;",
      "  bool _isElevated = true;",
      "  bool _isVisible = true;",
      "",
      "  FloatingActionButtonLocation get _fabLocation =>",
      "      _isVisible ? FloatingActionButtonLocation.endContained : FloatingActionButtonLocation.endFloat;",
      "",
      "  void _listen() {",
      "    final ScrollDirection direction = _controller.position.userScrollDirection;",
      "    if (direction == ScrollDirection.forward) {",
      "      _show();",
      "    } else if (direction == ScrollDirection.reverse) {",
      "      _hide();",
      "    }",
      "  }",
      "",
      "  void _show() {",
      "    if (!_isVisible) {",
      "      setState(() => _isVisible = true);",
      "    }",
      "  }",
      "",
      "  void _hide() {",
      "    if (_isVisible) {",
      "      setState(() => _isVisible = false);",
      "    }",
      "  }",
      "",
      "  void _onShowFabChanged(bool value) {",
      "    setState(() {",
      "      _showFab = value;",
      "    });",
      "  }",
      "",
      "  void _onElevatedChanged(bool value) {",
      "    setState(() {",
      "      _isElevated = value;",
      "    });",
      "  }",
      "",
      "  void _addNewItem() {",
      "    setState(() {",
      "      items.insert(",
      "        0,",
      "        Container(color: colors[items.length % 5], height: 150.0),",
      "      );",
      "    });",
      "  }",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _controller = ScrollController();",
      "    _controller.addListener(_listen);",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _controller.removeListener(_listen);",
      "    _controller.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true),",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Bottom App Bar Demo'),",
      "        ),",
      "        body: Column(",
      "          children: <Widget>[",
      "            SwitchListTile(",
      "              title: const Text('Floating Action Button'),",
      "              value: _showFab,",
      "              onChanged: _onShowFabChanged,",
      "            ),",
      "            SwitchListTile(",
      "              title: const Text('Bottom App Bar Elevation'),",
      "              value: _isElevated,",
      "              onChanged: _onElevatedChanged,",
      "            ),",
      "            Expanded(",
      "              child: ListView(",
      "                controller: _controller,",
      "                children: items.toList(),",
      "              ),",
      "            ),",
      "          ],",
      "        ),",
      "        floatingActionButton: _showFab",
      "            ? FloatingActionButton(",
      "                onPressed: _addNewItem,",
      "                tooltip: 'Add New Item',",
      "                elevation: _isVisible ? 0.0 : null,",
      "                child: const Icon(Icons.add),",
      "              )",
      "            : null,",
      "        floatingActionButtonLocation: _fabLocation,",
      "        bottomNavigationBar: _DemoBottomAppBar(isElevated: _isElevated, isVisible: _isVisible),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _DemoBottomAppBar extends StatelessWidget {",
      "  const _DemoBottomAppBar({",
      "    required this.isElevated,",
      "    required this.isVisible,",
      "  });",
      "",
      "  final bool isElevated;",
      "  final bool isVisible;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return AnimatedContainer(",
      "      duration: const Duration(milliseconds: 200),",
      "      height: isVisible ? 80.0 : 0,",
      "      child: BottomAppBar(",
      "        elevation: isElevated ? null : 0.0,",
      "        child: Row(",
      "          children: <Widget>[",
      "            IconButton(",
      "              tooltip: 'Open popup menu',",
      "              icon: const Icon(Icons.more_vert),",
      "              onPressed: () {",
      "                final SnackBar snackBar = SnackBar(",
      "                  content: const Text('Yay! A SnackBar!'),",
      "                  action: SnackBarAction(",
      "                    label: 'Undo',",
      "                    onPressed: () {},",
      "                  ),",
      "                );",
      "",
      "                // Find the ScaffoldMessenger in the widget tree",
      "                // and use it to show a SnackBar.",
      "                ScaffoldMessenger.of(context).showSnackBar(snackBar);",
      "              },",
      "            ),",
      "            IconButton(",
      "              tooltip: 'Search',",
      "              icon: const Icon(Icons.search),",
      "              onPressed: () {},",
      "            ),",
      "            IconButton(",
      "              tooltip: 'Favorite',",
      "              icon: const Icon(Icons.favorite),",
      "              onPressed: () {},",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter BottomAppBar Demo Two in Dart"
  }
},
{
  "Flutter BottomNavigationBar Example": {
    "scope": "dart",
    "prefix": "flutter-bottomnavbar-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const BottomNavigationBarExampleApp());",
      "",
      "class BottomNavigationBarExampleApp extends StatelessWidget {",
      "  const BottomNavigationBarExampleApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const MaterialApp(",
      "      home: BottomNavigationBarExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class BottomNavigationBarExample extends StatefulWidget {",
      "  const BottomNavigationBarExample({super.key});",
      "",
      "  @override",
      "  State<BottomNavigationBarExample> createState() => _BottomNavigationBarExampleState();",
      "}",
      "",
      "class _BottomNavigationBarExampleState extends State<BottomNavigationBarExample> {",
      "  int _selectedIndex = 0;",
      "  static const TextStyle optionStyle = TextStyle(fontSize: 30, fontWeight: FontWeight.bold);",
      "  static const List<Widget> _widgetOptions = <Widget>[",
      "    Text(",
      "      'Index 0: Home',",
      "      style: optionStyle,",
      "    ),",
      "    Text(",
      "      'Index 1: Business',",
      "      style: optionStyle,",
      "    ),",
      "    Text(",
      "      'Index 2: School',",
      "      style: optionStyle,",
      "    ),",
      "    Text(",
      "      'Index 3: Settings',",
      "      style: optionStyle,",
      "    ),",
      "  ];",
      "",
      "  void _onItemTapped(int index) {",
      "    setState(() {",
      "      _selectedIndex = index;",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('BottomNavigationBar Sample'),",
      "      ),",
      "      body: Center(",
      "        child: _widgetOptions.elementAt(_selectedIndex),",
      "      ),",
      "      bottomNavigationBar: BottomNavigationBar(",
      "        items: const <BottomNavigationBarItem>[",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.home),",
      "            label: 'Home',",
      "            backgroundColor: Colors.red,",
      "          ),",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.business),",
      "            label: 'Business',",
      "            backgroundColor: Colors.green,",
      "          ),",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.school),",
      "            label: 'School',",
      "            backgroundColor: Colors.purple,",
      "          ),",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.settings),",
      "            label: 'Settings',",
      "            backgroundColor: Colors.pink,",
      "          ),",
      "        ],",
      "        currentIndex: _selectedIndex,",
      "        selectedItemColor: Colors.amber[800],",
      "        onTap: _onItemTapped,",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter BottomNavigationBar Example in Flutter"
  }
}
,{
  "Flutter Modal BottomSheet Example": {
    "scope":"dart",
    "prefix": "flutter-modal-bottomsheet-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const BottomSheetApp());",
      "",
      "class BottomSheetApp extends StatelessWidget {",
      "  const BottomSheetApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Bottom Sheet Sample')),",
      "        body: const BottomSheetExample(),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class BottomSheetExample extends StatelessWidget {",
      "  const BottomSheetExample({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: ElevatedButton(",
      "        child: const Text('showModalBottomSheet'),",
      "        onPressed: () {",
      "          showModalBottomSheet<void>(",
      "            context: context,",
      "            builder: (BuildContext context) {",
      "              return Container(",
      "                height: 200,",
      "                color: Colors.amber,",
      "                child: Center(",
      "                  child: Column(",
      "                    mainAxisAlignment: MainAxisAlignment.center,",
      "                    mainAxisSize: MainAxisSize.min,",
      "                    children: <Widget>[",
      "                      const Text('Modal BottomSheet'),",
      "                      ElevatedButton(",
      "                        child: const Text('Close BottomSheet'),",
      "                        onPressed: () => Navigator.pop(context),",
      "                      ),",
      "                    ],",
      "                  ),",
      "                ),",
      "              );",
      "            },",
      "          );",
      "        },",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Modal BottomSheet Example in Flutter"
  }
},
{
  "Flutter Button App": {
    "scope": "dart",
    "prefix": "flutter-buttons-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() {",
      "  runApp(const ButtonApp());",
      "}",
      "",
      "class ButtonApp extends StatelessWidget {",
      "  const ButtonApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(",
      "        colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.deepPurple),",
      "        useMaterial3: true,",
      "      ),",
      "      title: 'Button Types',",
      "      home: const Scaffold(",
      "        body: ButtonTypesExample(),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class ButtonTypesExample extends StatelessWidget {",
      "  const ButtonTypesExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const Padding(",
      "      padding: EdgeInsets.all(4.0),",
      "      child: Row(",
      "        children: <Widget>[",
      "          Spacer(),",
      "          ButtonTypesGroup(enabled: true),",
      "          ButtonTypesGroup(enabled: false),",
      "          Spacer(),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class ButtonTypesGroup extends StatelessWidget {",
      "  const ButtonTypesGroup({Key? key, required this.enabled}) : super(key: key);",
      "",
      "  final bool enabled;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final VoidCallback? onPressed = enabled ? () {} : null;",
      "    return Padding(",
      "      padding: const EdgeInsets.all(4.0),",
      "      child: Column(",
      "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
      "        children: <Widget>[",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter button app template."
  }
},
{
  "Flutter Card Example": {
    "scope": "dart",
    "prefix": "flutter-card-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const CardExampleApp());",
      "",
      "class CardExampleApp extends StatelessWidget {",
      "  const CardExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Card Sample')),",
      "        body: const CardExample(),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class CardExample extends StatelessWidget {",
      "  const CardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Card(",
      "        child: Column(",
      "          mainAxisSize: MainAxisSize.min,",
      "          children: <Widget>[",
      "            const ListTile(",
      "              leading: Icon(Icons.album),",
      "              title: Text('The Enchanted Nightingale'),",
      "              subtitle: Text('Music by Julie Gable. Lyrics by Sidney Stein.'),",
      "            ),",
      "            Row(",
      "              mainAxisAlignment: MainAxisAlignment.end,",
      "              children: <Widget>[",
      "                TextButton(",
      "                  child: const Text('BUY TICKETS'),",
      "                  onPressed: () {/* ... */},",
      "                ),",
      "                const SizedBox(width: 8),",
      "                TextButton(",
      "                  child: const Text('LISTEN'),",
      "                  onPressed: () {/* ... */},",
      "                ),",
      "                const SizedBox(width: 8),",
      "              ],",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Card example."
  }
},
{
  "Flutter Card Examples": {
    "scope": "dart",
    "prefix": "flutter-card-examples",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() {",
      "  runApp(const CardExamplesApp());",
      "}",
      "",
      "class CardExamplesApp extends StatelessWidget {",
      "  const CardExamplesApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Card Examples')),",
      "        body: const Column(",
      "          children: <Widget>[",
      "            Spacer(),",
      "            ElevatedCardExample(),",
      "            FilledCardExample(),",
      "            OutlinedCardExample(),",
      "            Spacer(),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class ElevatedCardExample extends StatelessWidget {",
      "  const ElevatedCardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const Center(",
      "      child: Card(",
      "        child: SizedBox(",
      "          width: 300,",
      "          height: 100,",
      "          child: Center(child: Text('Elevated Card')),"
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class FilledCardExample extends StatelessWidget {",
      "  const FilledCardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Card(",
      "        elevation: 0,",
      "        color: Theme.of(context).colorScheme.surfaceVariant,",
      "        child: const SizedBox(",
      "          width: 300,",
      "          height: 100,",
      "          child: Center(child: Text('Filled Card')),"
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class OutlinedCardExample extends StatelessWidget {",
      "  const OutlinedCardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Card(",
      "        elevation: 0,",
      "        shape: RoundedRectangleBorder(",
      "          side: BorderSide(",
      "            color: Theme.of(context).colorScheme.outline,",
      "          ),",
      "          borderRadius: const BorderRadius.all(Radius.circular(12)),",
      "        ),",
      "        child: const SizedBox(",
      "          width: 300,",
      "          height: 100,",
      "          child: Center(child: Text('Outlined Card')),"
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Card examples."
  }
},
{
  "Flutter Checkbox Example": {
    "scope": "dart",
    "prefix": "flutter-checkbox-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const CheckboxExampleApp());",
      "",
      "class CheckboxExampleApp extends StatelessWidget {",
      "  const CheckboxExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true, colorSchemeSeed: const Color(0xff6750a4)),",
      "      title: 'Checkbox Sample',",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Checkbox Sample')),",
      "        body: const Center(",
      "          child: CheckboxExample(),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class CheckboxExample extends StatefulWidget {",
      "  const CheckboxExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<CheckboxExample> createState() => _CheckboxExampleState();",
      "}",
      "",
      "class _CheckboxExampleState extends State<CheckboxExample> {",
      "  bool? isChecked = true;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Column(",
      "      mainAxisAlignment: MainAxisAlignment.center,",
      "      children: <Widget>[",
      "        Checkbox(",
      "          tristate: true,",
      "          value: isChecked,",
      "          onChanged: (bool? value) {",
      "            setState(() {",
      "              isChecked = value;",
      "            });",
      "          },",
      "        ),",
      "        Checkbox(",
      "          isError: true,",
      "          tristate: true,",
      "          value: isChecked,",
      "          onChanged: (bool? value) {",
      "            setState(() {",
      "              isChecked = value;",
      "            });",
      "          },",
      "        ),",
      "        Checkbox(",
      "          isError: true,",
      "          tristate: true,",
      "          value: isChecked,",
      "          onChanged: null,",
      "        ),",
      "      ],",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Checkbox example."
  }
},
{
  "Flutter Custom Labeled Checkbox Example": {
    "scope": "dart",
    "prefix": "flutter-custom-labeled-checkbox",
    "body": [
      "import 'package:flutter/gestures.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const LabeledCheckboxApp());",
      "",
      "class LabeledCheckboxApp extends StatelessWidget {",
      "  const LabeledCheckboxApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true),",
      "      home: const LabeledCheckboxExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class LinkedLabelCheckbox extends StatelessWidget {",
      "  const LinkedLabelCheckbox({",
      "    Key? key,",
      "    required this.label,",
      "    required this.padding,",
      "    required this.value,",
      "    required this.onChanged,",
      "  });",
      "",
      "  final String label;",
      "  final EdgeInsets padding;",
      "  final bool value;",
      "  final ValueChanged<bool> onChanged;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Padding(",
      "      padding: padding,",
      "      child: Row(",
      "        children: <Widget>[",
      "          Expanded(",
      "            child: RichText(",
      "              text: TextSpan(",
      "                text: label,",
      "                style: const TextStyle(",
      "                  color: Colors.blueAccent,",
      "                  decoration: TextDecoration.underline,",
      "                ),",
      "                recognizer: TapGestureRecognizer()",
      "                  ..onTap = () {",
      "                    debugPrint('Label has been tapped.');",
      "                  },",
      "              ),",
      "            ),",
      "          ),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class LabeledCheckboxExample extends StatefulWidget {",
      "  const LabeledCheckboxExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<LabeledCheckboxExample> createState() => _LabeledCheckboxExampleState();",
      "}",
      "",
      "class _LabeledCheckboxExampleState extends State<LabeledCheckboxExample> {",
      "  bool _isSelected = false;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(title: const Text('Custom Labeled Checkbox Sample')),",
      "      body: Center(",
      "        child: LinkedLabelCheckbox(",
      "          label: 'Linked, tappable label text',",
      "          padding: const EdgeInsets.symmetric(horizontal: 20.0),",
      "          value: _isSelected,",
      "          onChanged: (bool newValue) {",
      "            setState(() {",
      "              _isSelected = newValue;",
      "            });",
      "          },",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Custom Labeled Checkbox example."
  }
},
{
  "Flutter CheckboxListTile Example": {
    "scope": "dart",
    "prefix": "flutter-listtile-checkbox-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const CheckboxListTileApp());",
      "",
      "class CheckboxListTileApp extends StatelessWidget {",
      "  const CheckboxListTileApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true),",
      "      home: const CheckboxListTileExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class CheckboxListTileExample extends StatefulWidget {",
      "  const CheckboxListTileExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<CheckboxListTileExample> createState() => _CheckboxListTileExampleState();",
      "}",
      "",
      "class _CheckboxListTileExampleState extends State<CheckboxListTileExample> {",
      "  bool checkboxValue1 = true;",
      "  bool checkboxValue2 = true;",
      "  bool checkboxValue3 = true;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(title: const Text('CheckboxListTile Sample')),",
      "      body: Column(",
      "        children: <Widget>[",
      "          CheckboxListTile(",
      "            value: checkboxValue1,",
      "            onChanged: (bool? value) {",
      "              setState(() {",
      "                checkboxValue1 = value!;",
      "              });",
      "            },",
      "            title: const Text('Headline'),",
      "            subtitle: const Text('Supporting text'),",
      "          ),",
      "          const Divider(height: 0),",
      "          CheckboxListTile(",
      "            value: checkboxValue2,",
      "            onChanged: (bool? value) {",
      "              setState(() {",
      "                checkboxValue2 = value!;",
      "              });",
      "            },",
      "            title: const Text('Headline'),",
      "            subtitle: const Text(",
      "                'Longer supporting text to demonstrate how the text wraps and the checkbox is centered vertically with the text.'),",
      "          ),",
      "          const Divider(height: 0),",
      "          CheckboxListTile(",
      "            value: checkboxValue3,",
      "            onChanged: (bool? value) {",
      "              setState(() {",
      "                checkboxValue3 = value!;",
      "              });",
      "            },",
      "            title: const Text('Headline'),",
      "            subtitle: const Text(",
      "                \"Longer supporting text to demonstrate how the text wraps and how setting 'CheckboxListTile.isThreeLine = true' aligns the checkbox to the top vertically with the text.\"),",
      "            isThreeLine: true,",
      "          ),",
      "          const Divider(height: 0),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter CheckboxListTile example."
  }
},
{
  "Flutter DeletableChipAttributes.onDeleted Example": {
    "scope": "dart",
    "prefix": "flutter-chip-deletable-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const OnDeletedExampleApp());",
      "",
      "class OnDeletedExampleApp extends StatelessWidget {",
      "  const OnDeletedExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('DeletableChipAttributes.onDeleted Sample')),",
      "        body: const Center(",
      "          child: OnDeletedExample(),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class Actor {",
      "  const Actor(this.name, this.initials);",
      "  final String name;",
      "  final String initials;",
      "}",
      "",
      "class CastList extends StatefulWidget {",
      "  const CastList({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State createState() => CastListState();",
      "}",
      "",
      "class CastListState extends State<CastList> {",
      "  final List<Actor> _cast = <Actor>[",
      "    const Actor('Aaron Burr', 'AB'),",
      "    const Actor('Alexander Hamilton', 'AH'),",
      "    const Actor('Eliza Hamilton', 'EH'),",
      "    const Actor('James Madison', 'JM'),",
      "  ];",
      "",
      "  Iterable<Widget> get actorWidgets {",
      "    return _cast.map((Actor actor) {",
      "      return Padding(",
      "        padding: const EdgeInsets.all(4.0),",
      "        child: Chip(",
      "          avatar: CircleAvatar(child: Text(actor.initials)),",
      "          label: Text(actor.name),",
      "          onDeleted: () {",
      "            setState(() {",
      "              _cast.removeWhere((Actor entry) {",
      "                return entry.name == actor.name;",
      "              });",
      "            });",
      "          },",
      "        ),",
      "      );",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Wrap(",
      "      children: actorWidgets.toList(),",
      "    );",
      "  }",
      "}",
      "",
      "class OnDeletedExample extends StatefulWidget {",
      "  const OnDeletedExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<OnDeletedExample> createState() => _OnDeletedExampleState();",
      "}",
      "",
      "class _OnDeletedExampleState extends State<OnDeletedExample> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const CastList();",
      "  }",
      "}"
    ],
    "description": "Flutter DeletableChipAttributes.onDeleted example."
  }
},
{
  "Flutter ActionChoice Example": {
    "scope": "dart",
    "prefix": "flutter-chip-choice-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const ChipApp());",
      "",
      "class ChipApp extends StatelessWidget {",
      "  const ChipApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
      "      home: const ActionChoiceExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class ActionChoiceExample extends StatefulWidget {",
      "  const ActionChoiceExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<ActionChoiceExample> createState() => _ActionChoiceExampleState();",
      "}",
      "",
      "class _ActionChoiceExampleState extends State<ActionChoiceExample> {",
      "  int? _value = 1;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final TextTheme textTheme = Theme.of(context).textTheme;",
      "",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('ActionChoice Sample'),",
      "      ),",
      "      body: Center(",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.start,",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: <Widget>[",
      "            Text('Choose an item', style: textTheme.labelLarge),",
      "            const SizedBox(height: 10.0),",
      "            Wrap(",
      "              spacing: 5.0,",
      "              children: List<Widget>.generate(",
      "                3,",
      "                (int index) {",
      "                  return ChoiceChip(",
      "                    label: Text('Item $index'),",
      "                    selected: _value == index,",
      "                    onSelected: (bool selected) {",
      "                      setState(() {",
      "                        _value = selected ? index : null;",
      "                      });",
      "                    },",
      "                  );",
      "                },",
      "              ).toList(),",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter ChoiceChip widget example."
  }
},
"Flutter DynamicColor Example": {
  "prefix": "flutter-dynamic-color-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ColorScheme.fromImageProvider] with content-based dynamic color.",
    "",
    "const Widget divider = SizedBox(height: 10);",
    "const double narrowScreenWidthThreshold = 400;",
    "",
    "void main() => runApp(DynamicColorExample());",
    "",
    "class DynamicColorExample extends StatefulWidget {",
    "  DynamicColorExample({super.key});",
    "",
    "  final List<ImageProvider> images = <NetworkImage>[",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_1.png'),",
    "    const NetworkImage(",
    "        'https://pbs.twimg.com/media/FKNlhKZUcAEd7FY.jpg:large'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_3.png'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_4.png'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_5.png'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_6.png'),",
    "  ];",
    "",
    "  @override",
    "  State<DynamicColorExample> createState() => _DynamicColorExampleState();",
    "}",
    "",
    "class _DynamicColorExampleState extends State<DynamicColorExample> {",
    "  late ColorScheme currentColorScheme;",
    "  String currentHyperlinkImage = '';",
    "  late int selectedImage;",
    "  late bool isLight;",
    "  late bool isLoading;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    selectedImage = 0;",
    "    isLight = true;",
    "    isLoading = true;",
    "    currentColorScheme = const ColorScheme.light();",
    "    WidgetsBinding.instance.addPostFrameCallback((_) {",
    "      _updateImage(widget.images[selectedImage]);",
    "      isLoading = false;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ColorScheme colorScheme = currentColorScheme;",
    "    final Color selectedColor = currentColorScheme.primary;",
    "",
    "    final ThemeData lightTheme = ThemeData(",
    "      colorSchemeSeed: selectedColor,",
    "      brightness: Brightness.light,",
    "      useMaterial3: false,",
    "    );",
    "    final ThemeData darkTheme = ThemeData(",
    "      colorSchemeSeed: selectedColor,",
    "      brightness: Brightness.dark,",
    "      useMaterial3: false,",
    "    );",
    "",
    "    Widget schemeLabel(String brightness, ColorScheme colorScheme) {",
    "      return Padding(",
    "        padding: const EdgeInsets.symmetric(vertical: 15),",
    "        child: Text(",
    "          brightness,",
    "          style: TextStyle(fontWeight: FontWeight.bold, color: colorScheme.onSecondaryContainer),",
    "        ),",
    "      );",
    "    }",
    "",
    "    Widget schemeView(ThemeData theme) {",
    "      return Padding(",
    "        padding: const EdgeInsets.symmetric(horizontal: 15),",
    "        child: ColorSchemeView(colorScheme: theme.colorScheme),",
    "      );",
    "    }",
    "",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true, colorScheme: colorScheme),",
    "      debugShowCheckedModeBanner: false,",
    "      home: Builder(",
    "        builder: (BuildContext context) => Scaffold(",
    "          appBar: AppBar(",
    "            title: const Text('Content Based Dynamic Color'),",
    "            backgroundColor: colorScheme.primary,",
    "            foregroundColor: colorScheme.onPrimary,",
    "            actions: <Widget>[",
    "              const Icon(Icons.light_mode),",
    "              Switch(",
    "                  activeColor: colorScheme.primary,",
    "                  activeTrackColor: colorScheme.surface,",
    "                  inactiveTrackColor: colorScheme.onSecondary,",
    "                  value: isLight,",
    "                  onChanged: (bool value) {",
    "                    setState(() {",
    "                      isLight = value;",
    "                      _updateImage(widget.images[selectedImage]);",
    "                    });",
    "                  })",
    "            ],",
    "          ),",
    "          body: Center(",
    "            child: isLoading",
    "                ? const CircularProgressIndicator()",
    "                : ColoredBox(",
    "                    color: colorScheme.secondaryContainer,",
    "                    child: Column(",
    "                      children: <Widget>[",
    "                        divider,",
    "                        _imagesRow(",
    "                          context,",
    "                          widget.images,",
    "                          colorScheme,",
    "                        ),",
    "                        divider,",
    "                        Expanded(",
    "                          child: ColoredBox(",
    "                            color: colorScheme.background,",
    "                            child: LayoutBuilder(builder: (BuildContext context, BoxConstraints constraints) {",
    "                              if (constraints.maxWidth < narrowScreenWidthThreshold) {",
    "                                return SingleChildScrollView(",
    "                                  child: Column(",
    "                                    children: <Widget>[",
    "                                      divider,",
    "                                      schemeLabel('Light ColorScheme', colorScheme),",
    "                                      schemeView(lightTheme),",
    "                                      divider,",
    "                                      divider,",
    "                                      schemeLabel('Dark ColorScheme', colorScheme),",
    "                                      schemeView(darkTheme),",
    "                                    ],",
    "                                  ),",
    "                                );",
    "                              } else {",
    "                                return SingleChildScrollView(",
    "                                  child: Padding(",
    "                                    padding: const EdgeInsets.only(top: 5),",
    "                                    child: Column(",
    "                                      children: <Widget>[",
    "                                        Row(",
    "                                          children: <Widget>[",
    "                                            Expanded(",
    "                                              child: Column(",
    "                                                children: <Widget>[",
    "                                                  schemeLabel('Light ColorScheme', colorScheme),",
    "                                                  schemeView(lightTheme),",
    "                                                ],",
    "                                              ),",
    "                                            ),",
    "                                            Expanded(",
    "                                              child: Column(",
    "                                                children: <Widget>[",
    "                                                  schemeLabel('Dark ColorScheme', colorScheme),",
    "                                                  schemeView(darkTheme),",
    "                                                ],",
    "                                              ),",
    "                                            ),",
    "                                          ],",
    "                                        ),",
    "                                      ],",
    "                                    ),",
    "                                  ),",
    "                                );",
    "                              }",
    "                            }),",
    "                          ),",
    "                        ),",
    "                      ],",
    "                    ),",
    "                  ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Future<void> _updateImage(ImageProvider provider) async {",
    "    final ColorScheme newColorScheme = await ColorScheme.fromImageProvider(",
    "        provider: provider, brightness: isLight ? Brightness.light : Brightness.dark);",
    "    setState(() {",
    "      selectedImage = widget.images.indexOf(provider);",
    "      currentColorScheme = newColorScheme;",
    "    });",
    "  }",
    "",
    "  // For small screens, have two rows of image selection. For wide screens,",
    "  // fit them onto one row.",
    "  Widget _imagesRow(BuildContext context, List<ImageProvider> images, ColorScheme colorScheme) {",
    "    final double windowHeight = MediaQuery.of(context).size.height;",
    "    final double windowWidth = MediaQuery.of(context).size.width;",
    "    return Padding(",
    "      padding: const EdgeInsets.all(8.0),",
    "      child: LayoutBuilder(builder: (BuildContext context, BoxConstraints constraints) {",
    "        if (constraints.maxWidth > 800) {",
    "          return _adaptiveLayoutImagesRow(images, colorScheme, windowHeight);",
    "        } else {",
    "          return Column(children: <Widget>[",
    "            _adaptiveLayoutImagesRow(images.sublist(0, 3), colorScheme, windowWidth),",
    "            _adaptiveLayoutImagesRow(images.sublist(3), colorScheme, windowWidth),",
    "          ]);",
    "        }",
    "      }),",
    "    );",
    "  }",
    "",
    "  Widget _adaptiveLayoutImagesRow(List<ImageProvider> images, ColorScheme colorScheme, double windowWidth) {",
    "    return Row(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: images",
    "          .map(",
    "            (ImageProvider image) => Flexible(",
    "              flex: (images.length / 3).floor(),",
    "              child: GestureDetector(",
    "                onTap: () => _updateImage(image),",
    "                child: Card(",
    "                  color: widget.images.indexOf(image) == selectedImage",
    "                      ? colorScheme.primaryContainer",
    "                      : colorScheme.background,",
    "                  child: Padding(",
    "                    padding: const EdgeInsets.all(5.0),",
    "                    child: ConstrainedBox(",
    "                      constraints: BoxConstraints(maxWidth: windowWidth * .25),",
    "                      child: ClipRRect(",
    "                        borderRadius: BorderRadius.circular(8.0),",
    "                        child: Image(image: image),",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ),",
    "              ),",
    "            ),",
    "          )",
    "          .toList(),",
    "    );",
    "  }",
    "}",
    "",
    "class ColorSchemeView extends StatelessWidget {",
    "  const ColorSchemeView({super.key, required this.colorScheme});",
    "",
    "  final ColorScheme colorScheme;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        ColorGroup(children: <ColorChip>[",
    "          ColorChip(label: 'primary', color: colorScheme.primary, onColor: colorScheme.onPrimary),",
    "          ColorChip(label: 'onPrimary', color: colorScheme.onPrimary, onColor: colorScheme.primary),",
    "          ColorChip(",
    "              label: 'primaryContainer', color: colorScheme.primaryContainer, onColor: colorScheme.onPrimaryContainer),",
    "          ColorChip(",
    "              label: 'onPrimaryContainer',",
    "              color: colorScheme.onPrimaryContainer,",
    "              onColor: colorScheme.primaryContainer),",
    "        ]),",
    "        divider,",
    "        ColorGroup(children: <ColorChip>[",
    "          ColorChip(label: 'secondary', color: colorScheme.secondary, onColor: colorScheme.onSecondary),",
    "          ColorChip(label: 'onSecondary', color: colorScheme.onSecondary, onColor: colorScheme.secondary),",
    "          ColorChip(",
    "              label: 'secondaryContainer',",
    "              color: colorScheme.secondaryContainer,",
    "              onColor: colorScheme.onSecondaryContainer),",
    "          ColorChip(",
    "              label: 'onSecondaryContainer',",
    "              color: colorScheme.onSecondaryContainer,",
    "              onColor: colorScheme.secondaryContainer),",
    "        ]),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'tertiary', color: colorScheme.tertiary, onColor: colorScheme.onTertiary),",
    "            ColorChip(label: 'onTertiary', color: colorScheme.onTertiary, onColor: colorScheme.tertiary),",
    "            ColorChip(",
    "                label: 'tertiaryContainer',",
    "                color: colorScheme.tertiaryContainer,",
    "                onColor: colorScheme.onTertiaryContainer),",
    "            ColorChip(",
    "                label: 'onTertiaryContainer',",
    "                color: colorScheme.onTertiaryContainer,",
    "                onColor: colorScheme.tertiaryContainer),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'error', color: colorScheme.error, onColor: colorScheme.onError),",
    "            ColorChip(label: 'onError', color: colorScheme.onError, onColor: colorScheme.error),",
    "            ColorChip(",
    "                label: 'errorContainer', color: colorScheme.errorContainer, onColor: colorScheme.onErrorContainer),",
    "            ColorChip(",
    "                label: 'onErrorContainer', color: colorScheme.onErrorContainer, onColor: colorScheme.errorContainer),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'background', color: colorScheme.background, onColor: colorScheme.onBackground),",
    "            ColorChip(label: 'onBackground', color: colorScheme.onBackground, onColor: colorScheme.background),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'surface', color: colorScheme.surface, onColor: colorScheme.onSurface),",
    "            ColorChip(label: 'onSurface', color: colorScheme.onSurface, onColor: colorScheme.surface),",
    "            ColorChip(",
    "                label: 'surfaceVariant', color: colorScheme.surfaceVariant, onColor: colorScheme.onSurfaceVariant),",
    "            ColorChip(",
    "                label: 'onSurfaceVariant', color: colorScheme.onSurfaceVariant, onColor: colorScheme.surfaceVariant),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'outline', color: colorScheme.outline),",
    "            ColorChip(label: 'shadow', color: colorScheme.shadow),",
    "            ColorChip(",
    "                label: 'inverseSurface', color: colorScheme.inverseSurface, onColor: colorScheme.onInverseSurface),",
    "            ColorChip(",
    "                label: 'onInverseSurface', color: colorScheme.onInverseSurface, onColor: colorScheme.inverseSurface),",
    "            ColorChip(label: 'inversePrimary', color: colorScheme.inversePrimary, onColor: colorScheme.primary),",
    "          ],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class ColorGroup extends StatelessWidget {",
    "  const ColorGroup({super.key, required this.children});",
    "",
    "  final List<Widget> children;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RepaintBoundary(",
    "      child: Card(clipBehavior: Clip.antiAlias, child: Column(children: children)),",
    "    );",
    "  }",
    "}",
    "",
    "class ColorChip extends StatelessWidget {",
    "  const ColorChip({",
    "    super.key,",
    "    required this.color,",
    "    required this.label,",
    "    this.onColor,",
    "  });",
    "",
    "  final Color color;",
    "  final Color? onColor;",
    "  final String label;",
    "",
    "  static Color contrastColor(Color color) {",
    "    final Brightness brightness = ThemeData.estimateBrightnessForColor(color);",
    "    switch (brightness) {",
    "      case Brightness.dark:",
    "        return Colors.white;",
    "      case Brightness.light:",
    "        return Colors.black;",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Color labelColor = onColor ?? contrastColor(color);",
    "    return ColoredBox(",
    "      color: color,",
    "      child: Padding(",
    "        padding: const EdgeInsets.all(16),",
    "        child: Row(",
    "          children: <Expanded>[",
    "            Expanded(child: Text(label, style: TextStyle(color: labelColor))),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DynamicColor Example"
},
"Flutter SelectableRegionToolbarBuilderExampleApp Example": {
  "prefix": "flutter-selectable-regio-toolbar-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "void main() => runApp(const SelectableRegionToolbarBuilderExampleApp());",
    "",
    "const String text =",
    "    'I am some text inside of SelectionArea. Right click (desktop) or long press (mobile) me to show the customized context menu.';",
    "",
    "class SelectableRegionToolbarBuilderExampleApp extends StatefulWidget {",
    "  const SelectableRegionToolbarBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  State<SelectableRegionToolbarBuilderExampleApp> createState() => _SelectableRegionToolbarBuilderExampleAppState();",
    "}",
    "",
    "class _SelectableRegionToolbarBuilderExampleAppState extends State<SelectableRegionToolbarBuilderExampleApp> {",
    "  void _showDialog(BuildContext context) {",
    "    Navigator.of(context).push(",
    "      DialogRoute<void>(",
    "        context: context,",
    "        builder: (BuildContext context) => const AlertDialog(title: Text('You clicked print!')),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    // On web, disable the browser's context menu since this example uses a custom",
    "    // Flutter-rendered context menu.",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.disableContextMenu();",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.enableContextMenu();",
    "    }",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Context menu anywhere'),",
    "        ),",
    "        body: Center(",
    "          child: SizedBox(",
    "            width: 200.0,",
    "            child: SelectionArea(",
    "              contextMenuBuilder: (",
    "                BuildContext context,",
    "                SelectableRegionState selectableRegionState,",
    "              ) {",
    "                return AdaptiveTextSelectionToolbar.buttonItems(",
    "                  anchors: selectableRegionState.contextMenuAnchors,",
    "                  buttonItems: <ContextMenuButtonItem>[",
    "                    ...selectableRegionState.contextMenuButtonItems,",
    "                    ContextMenuButtonItem(",
    "                      onPressed: () {",
    "                        ContextMenuController.removeAny();",
    "                        _showDialog(context);",
    "                      },",
    "                      label: 'Print',",
    "                    ),",
    "                  ],",
    "                );",
    "              },",
    "              child: ListView(",
    "                children: const <Widget>[",
    "                  SizedBox(height: 20.0),",
    "                  Text(text),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SelectableRegionToolbarBuilderExampleApp Example"
},
"Flutter Data Table ": {
  "prefix": "flutter-datatable-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DataTable].",
    "",
    "void main() => runApp(const DataTableExampleApp());",
    "",
    "class DataTableExampleApp extends StatelessWidget {",
    "  const DataTableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DataTable Sample')),",
    "        body: const DataTableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DataTableExample extends StatelessWidget {",
    "  const DataTableExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DataTable(",
    "      columns: const <DataColumn>[",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Name',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Age',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Role',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "      rows: const <DataRow>[",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Sarah')),",
    "            DataCell(Text('19')),",
    "            DataCell(Text('Student')),",
    "          ],",
    "        ),",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Janine')),",
    "            DataCell(Text('43')),",
    "            DataCell(Text('Professor')),",
    "          ],",
    "        ),",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('William')),",
    "            DataCell(Text('27')),",
    "            DataCell(Text('Associate Professor')),",
    "          ],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Data Table "
},
"Flutter DateRange Picker ": {
  "prefix": "flutter-date-range-picker-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDateRangePicker].",
    "",
    "void main() => runApp(const DatePickerApp());",
    "",
    "class DatePickerApp extends StatelessWidget {",
    "  const DatePickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      restorationScopeId: 'app',",
    "      home: const DatePickerExample(restorationId: 'main'),",
    "    );",
    "  }",
    "}",
    "",
    "class DatePickerExample extends StatefulWidget {",
    "  const DatePickerExample({super.key, this.restorationId});",
    "",
    "  final String? restorationId;",
    "",
    "  @override",
    "  State<DatePickerExample> createState() => _DatePickerExampleState();",
    "}",
    "",
    "/// RestorationProperty objects can be used because of RestorationMixin.",
    "class _DatePickerExampleState extends State<DatePickerExample> with RestorationMixin {",
    "  // In this example, the restoration ID for the mixin is passed in through",
    "  // the [StatefulWidget]'s constructor.",
    "  @override",
    "  String? get restorationId => widget.restorationId;",
    "",
    "  final RestorableDateTimeN _startDate = RestorableDateTimeN(DateTime(2021));",
    "  final RestorableDateTimeN _endDate = RestorableDateTimeN(DateTime(2021, 1, 5));",
    "  late final RestorableRouteFuture<DateTimeRange?> _restorableDateRangePickerRouteFuture =",
    "      RestorableRouteFuture<DateTimeRange?>(",
    "    onComplete: _selectDateRange,",
    "    onPresent: (NavigatorState navigator, Object? arguments) {",
    "      return navigator.restorablePush(_dateRangePickerRoute, arguments: <String, dynamic>{",
    "        'initialStartDate': _startDate.value?.millisecondsSinceEpoch,",
    "        'initialEndDate': _endDate.value?.millisecondsSinceEpoch,",
    "      });",
    "    },",
    "  );",
    "",
    "  void _selectDateRange(DateTimeRange? newSelectedDate) {",
    "    if (newSelectedDate != null) {",
    "      setState(() {",
    "        _startDate.value = newSelectedDate.start;",
    "        _endDate.value = newSelectedDate.end;",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    registerForRestoration(_startDate, 'start_date');",
    "    registerForRestoration(_endDate, 'end_date');",
    "    registerForRestoration(_restorableDateRangePickerRouteFuture, 'date_picker_route_future');",
    "  }",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<DateTimeRange?> _dateRangePickerRoute(",
    "    BuildContext context,",
    "    Object? arguments,",
    "  ) {",
    "    return DialogRoute<DateTimeRange?>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return DateRangePickerDialog(",
    "          restorationId: 'date_picker_dialog',",
    "          initialDateRange: _initialDateTimeRange(arguments! as Map<dynamic, dynamic>),",
    "          firstDate: DateTime(2021),",
    "          currentDate: DateTime(2021, 1, 25),",
    "          lastDate: DateTime(2022),",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  static DateTimeRange? _initialDateTimeRange(Map<dynamic, dynamic> arguments) {",
    "    if (arguments['initialStartDate'] != null && arguments['initialEndDate'] != null) {",
    "      return DateTimeRange(",
    "        start: DateTime.fromMillisecondsSinceEpoch(arguments['initialStartDate'] as int),",
    "        end: DateTime.fromMillisecondsSinceEpoch(arguments['initialEndDate'] as int),",
    "      );",
    "    }",
    "",
    "    return null;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            _restorableDateRangePickerRouteFuture.present();",
    "          },",
    "          child: const Text('Open Date Range Picker'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DateRange Picker "
},
"Flutter Date Picker ": {
  "prefix": "flutter-date-picker-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDatePicker].",
    "",
    "void main() => runApp(const DatePickerApp());",
    "",
    "class DatePickerApp extends StatelessWidget {",
    "  const DatePickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      restorationScopeId: 'app',",
    "      home: const DatePickerExample(restorationId: 'main'),",
    "    );",
    "  }",
    "}",
    "",
    "class DatePickerExample extends StatefulWidget {",
    "  const DatePickerExample({super.key, this.restorationId});",
    "",
    "  final String? restorationId;",
    "",
    "  @override",
    "  State<DatePickerExample> createState() => _DatePickerExampleState();",
    "}",
    "",
    "/// RestorationProperty objects can be used because of RestorationMixin.",
    "class _DatePickerExampleState extends State<DatePickerExample> with RestorationMixin {",
    "  // In this example, the restoration ID for the mixin is passed in through",
    "  // the [StatefulWidget]'s constructor.",
    "  @override",
    "  String? get restorationId => widget.restorationId;",
    "",
    "  final RestorableDateTime _selectedDate = RestorableDateTime(DateTime(2021, 7, 25));",
    "  late final RestorableRouteFuture<DateTime?> _restorableDatePickerRouteFuture = RestorableRouteFuture<DateTime?>(",
    "    onComplete: _selectDate,",
    "    onPresent: (NavigatorState navigator, Object? arguments) {",
    "      return navigator.restorablePush(",
    "        _datePickerRoute,",
    "        arguments: _selectedDate.value.millisecondsSinceEpoch,",
    "      );",
    "    },",
    "  );",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<DateTime> _datePickerRoute(",
    "    BuildContext context,",
    "    Object? arguments,",
    "  ) {",
    "    return DialogRoute<DateTime>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return DatePickerDialog(",
    "          restorationId: 'date_picker_dialog',",
    "          initialEntryMode: DatePickerEntryMode.calendarOnly,",
    "          initialDate: DateTime.fromMillisecondsSinceEpoch(arguments! as int),",
    "          firstDate: DateTime(2021),",
    "          lastDate: DateTime(2022),",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    registerForRestoration(_selectedDate, 'selected_date');",
    "    registerForRestoration(_restorableDatePickerRouteFuture, 'date_picker_route_future');",
    "  }",
    "",
    "  void _selectDate(DateTime? newSelectedDate) {",
    "    if (newSelectedDate != null) {",
    "      setState(() {",
    "        _selectedDate.value = newSelectedDate;",
    "        ScaffoldMessenger.of(context).showSnackBar(SnackBar(",
    "          content:",
    "              Text('Selected: ${_selectedDate.value.day}/${_selectedDate.value.month}/${_selectedDate.value.year}'),",
    "        ));",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            _restorableDatePickerRouteFuture.present();",
    "          },",
    "          child: const Text('Open Date Picker'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Date Picker "
}
,
"Flutter Adaptive Dialog ": {
  "prefix": "flutter-adaptive-dialog-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AlertDialog].",
    "",
    "void main() => runApp(const AdaptiveAlertDialogApp());",
    "",
    "class AdaptiveAlertDialogApp extends StatelessWidget {",
    "  const AdaptiveAlertDialogApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      // Try this: set the platform to TargetPlatform.android and see the difference",
    "      theme: ThemeData(platform: TargetPlatform.iOS, useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AlertDialog Sample')),",
    "        body: const Center(",
    "          child: AdaptiveDialogExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AdaptiveDialogExample extends StatelessWidget {",
    "  const AdaptiveDialogExample({super.key});",
    "",
    "  Widget adaptiveAction({",
    "    required BuildContext context,",
    "    required VoidCallback onPressed,",
    "    required Widget child",
    "  }) {",
    "    final ThemeData theme = Theme.of(context);",
    "    switch (theme.platform) {",
    "      case TargetPlatform.android:",
    "      case TargetPlatform.fuchsia:",
    "      case TargetPlatform.linux:",
    "      case TargetPlatform.windows:",
    "        return TextButton(onPressed: onPressed, child: child);",
    "      case TargetPlatform.iOS:",
    "      case TargetPlatform.macOS:",
    "        return CupertinoDialogAction(onPressed: onPressed, child: child);",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextButton(",
    "      onPressed: () => showAdaptiveDialog<String>(",
    "        context: context,",
    "        builder: (BuildContext context) => AlertDialog.adaptive(",
    "          title: const Text('AlertDialog Title'),",
    "          content: const Text('AlertDialog description'),",
    "          actions: <Widget>[",
    "            adaptiveAction(",
    "              context: context,",
    "              onPressed: () => Navigator.pop(context, 'Cancel'),",
    "              child: const Text('Cancel'),",
    "            ),",
    "            adaptiveAction(",
    "              context: context,",
    "              onPressed: () => Navigator.pop(context, 'OK'),",
    "              child: const Text('OK'),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      child: const Text('Show Dialog'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Adaptive Dialog "
},
"Flutter showDialog ": {
  "prefix": "flutter-show-dialog-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Dialog].",
    "",
    "void main() => runApp(const DialogExampleApp());",
    "",
    "class DialogExampleApp extends StatelessWidget {",
    "  const DialogExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Dialog Sample')),",
    "        body: const Center(",
    "          child: DialogExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DialogExample extends StatelessWidget {",
    "  const DialogExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        TextButton(",
    "          onPressed: () => showDialog<String>(",
    "            context: context,",
    "            builder: (BuildContext context) => Dialog(",
    "              child: Padding(",
    "                padding: const EdgeInsets.all(8.0),",
    "                child: Column(",
    "                  mainAxisSize: MainAxisSize.min,",
    "                  mainAxisAlignment: MainAxisAlignment.center,",
    "                  children: <Widget>[",
    "                    const Text('This is a typical dialog.'),",
    "                    const SizedBox(height: 15),",
    "                    TextButton(",
    "                      onPressed: () {",
    "                        Navigator.pop(context);",
    "                      },",
    "                      child: const Text('Close'),",
    "                    ),",
    "                  ],",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "          child: const Text('Show Dialog'),",
    "        ),",
    "        const SizedBox(height: 10),",
    "        TextButton(",
    "          onPressed: () => showDialog<String>(",
    "            context: context,",
    "            builder: (BuildContext context) => Dialog.fullscreen(",
    "              child: Column(",
    "                mainAxisSize: MainAxisSize.min,",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  const Text('This is a fullscreen dialog.'),",
    "                  const SizedBox(height: 15),",
    "                  TextButton(",
    "                    onPressed: () {",
    "                      Navigator.pop(context);",
    "                    },",
    "                    child: const Text('Close'),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "          child: const Text('Show Fullscreen Dialog'),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showDialog "
},
"Flutter Alert Dialog ": {
  "prefix": "flutter-alert-dialog-example",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDialog].",
    "",
    "void main() => runApp(const ShowDialogExampleApp());",
    "",
    "class ShowDialogExampleApp extends StatelessWidget {",
    "  const ShowDialogExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: DialogExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class DialogExample extends StatelessWidget {",
    "  const DialogExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('showDialog Sample')),",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () => _dialogBuilder(context),",
    "          child: const Text('Open Dialog'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Future<void> _dialogBuilder(BuildContext context) {",
    "    return showDialog<void>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return AlertDialog(",
    "          title: const Text('Basic dialog title'),",
    "          content: const Text(",
    "            'A dialog is a type of modal window that\\n'",
    "            'appears in front of app content to\\n'",
    "            'provide critical information, or prompt\\n'",
    "            'for a decision to be made.',",
    "          ),",
    "          actions: <Widget>[",
    "            TextButton(",
    "              style: TextButton.styleFrom(",
    "                textStyle: Theme.of(context).textTheme.labelLarge,",
    "              ),",
    "              child: const Text('Disable'),",
    "              onPressed: () {",
    "                Navigator.of(context).pop();",
    "              },",
    "            ),",
    "            TextButton(",
    "              style: TextButton.styleFrom(",
    "                textStyle: Theme.of(context).textTheme.labelLarge,",
    "              ),",
    "              child: const Text('Enable'),",
    "              onPressed: () {",
    "                Navigator.of(context).pop();",
    "              },",
    "            ),",
    "          ],",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Alert Dialog "
},
"Flutter Divider Dialog ": {
  "prefix": "flutter-divider-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Divider].",
    "",
    "void main() => runApp(const DividerExampleApp());",
    "",
    "class DividerExampleApp extends StatelessWidget {",
    "  const DividerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Divider Sample')),",
    "        body: const DividerExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DividerExample extends StatelessWidget {",
    "  const DividerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        children: <Widget>[",
    "          const Expanded(",
    "            child: ColoredBox(",
    "              color: Colors.amber,",
    "              child: Center(",
    "                child: Text('Above'),",
    "              ),",
    "            ),",
    "          ),",
    "          const Divider(",
    "            height: 20,",
    "            thickness: 5,",
    "            indent: 20,",
    "            endIndent: 0,",
    "            color: Colors.black,",
    "          ),",
    "          // Subheader example from Material spec.",
    "          // https://material.io/components/dividers#types",
    "          Container(",
    "            padding: const EdgeInsets.only(left: 20),",
    "            child: Align(",
    "              alignment: AlignmentDirectional.centerStart,",
    "              child: Text(",
    "                'Subheader',",
    "                style: Theme.of(context).textTheme.bodySmall,",
    "                textAlign: TextAlign.start,",
    "              ),",
    "            ),",
    "          ),",
    "          Expanded(",
    "            child: ColoredBox(",
    "              color: Theme.of(context).colorScheme.primary,",
    "              child: const Center(",
    "                child: Text('Below'),",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Divider Dialog "
},
"Flutter Vertical Divider Dialog ": {
  "prefix": "flutter-vertical-divider-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [VerticalDivider].",
    "",
    "void main() => runApp(const VerticalDividerExampleApp());",
    "",
    "class VerticalDividerExampleApp extends StatelessWidget {",
    "  const VerticalDividerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('VerticalDivider Sample')),",
    "        body: const DividerExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DividerExample extends StatelessWidget {",
    "  const DividerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      padding: const EdgeInsets.all(10),",
    "      child: Row(",
    "        children: <Widget>[",
    "          Expanded(",
    "            child: Container(",
    "              decoration: BoxDecoration(",
    "                borderRadius: BorderRadius.circular(10),",
    "                color: Colors.deepPurpleAccent,",
    "              ), ",
    "            ),",
    "          ),",
    "          const VerticalDivider(",
    "            width: 20,",
    "            thickness: 1,",
    "            indent: 20,",
    "            endIndent: 0,",
    "            color: Colors.grey,",
    "          ),",
    "          Expanded(",
    "            child: Container(",
    "              decoration: BoxDecoration(",
    "                borderRadius: BorderRadius.circular(10),",
    "                color: Colors.deepOrangeAccent,",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Vertical Divider Dialog "
},
"Flutter DropDown Example ": {
  "prefix": "flutter-dropdown-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DropdownButton].",
    "",
    "const List<String> list = <String>['One', 'Two', 'Three', 'Four'];",
    "",
    "void main() => runApp(const DropdownButtonApp());",
    "",
    "class DropdownButtonApp extends StatelessWidget {",
    "  const DropdownButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DropdownButton Sample')),",
    "        body: const Center(",
    "          child: DropdownButtonExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DropdownButtonExample extends StatefulWidget {",
    "  const DropdownButtonExample({super.key});",
    "",
    "  @override",
    "  State<DropdownButtonExample> createState() => _DropdownButtonExampleState();",
    "}",
    "",
    "class _DropdownButtonExampleState extends State<DropdownButtonExample> {",
    "  String dropdownValue = list.first;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DropdownButton<String>(",
    "      value: dropdownValue,",
    "      icon: const Icon(Icons.arrow_downward),",
    "      elevation: 16,",
    "      style: const TextStyle(color: Colors.deepPurple),",
    "      underline: Container(",
    "        height: 2,",
    "        color: Colors.deepPurpleAccent,",
    "      ),",
    "      onChanged: (String? value) {",
    "        // This is called when the user selects an item.",
    "        setState(() {",
    "          dropdownValue = value!;",
    "        });",
    "      },",
    "      items: list.map<DropdownMenuItem<String>>((String value) {",
    "        return DropdownMenuItem<String>(",
    "          value: value,",
    "          child: Text(value),",
    "        );",
    "      }).toList(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DropDown Example "
},
"Flutter DropdownMenu Example ": {
  "prefix": "flutter-dropdownmenu-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DropdownMenu].",
    "",
    "const List<String> list = <String>['One', 'Two', 'Three', 'Four'];",
    "",
    "void main() => runApp(const DropdownMenuApp());",
    "",
    "class DropdownMenuApp extends StatelessWidget {",
    "  const DropdownMenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3:true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DropdownMenu Sample')),",
    "        body: const Center(",
    "          child: DropdownMenuExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DropdownMenuExample extends StatefulWidget {",
    "  const DropdownMenuExample({super.key});",
    "",
    "  @override",
    "  State<DropdownMenuExample> createState() => _DropdownMenuExampleState();",
    "}",
    "",
    "class _DropdownMenuExampleState extends State<DropdownMenuExample> {",
    "  String dropdownValue = list.first;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DropdownMenu<String>(",
    "      initialSelection: list.first,",
    "      onSelected: (String? value) {",
    "        // This is called when the user selects an item.",
    "        setState(() {",
    "          dropdownValue = value!;",
    "        });",
    "      },",
    "      dropdownMenuEntries: list.map<DropdownMenuEntry<String>>((String value) {",
    "        return DropdownMenuEntry<String>(",
    "          value: value,",
    "          label: value",
    "        );",
    "      }).toList(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DropdownMenu Example "
},
"Flutter Elevated Butto Example ": {
  "prefix": "flutter-elevated-button-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ElevatedButton].",
    "",
    "void main() => runApp(const ElevatedButtonExampleApp());",
    "",
    "class ElevatedButtonExampleApp extends StatelessWidget {",
    "  const ElevatedButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ElevatedButton Sample')),",
    "        body: const ElevatedButtonExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ElevatedButtonExample extends StatefulWidget {",
    "  const ElevatedButtonExample({super.key});",
    "",
    "  @override",
    "  State<ElevatedButtonExample> createState() => _ElevatedButtonExampleState();",
    "}",
    "",
    "class _ElevatedButtonExampleState extends State<ElevatedButtonExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ButtonStyle style = ElevatedButton.styleFrom(textStyle: const TextStyle(fontSize: 20));",
    "",
    "    return Center(",
    "      child: Column(",
    "        mainAxisSize: MainAxisSize.min,",
    "        children: <Widget>[",
    "          ElevatedButton(",
    "            style: style,",
    "            onPressed: null,",
    "            child: const Text('Disabled'),",
    "          ),",
    "          const SizedBox(height: 30),",
    "          ElevatedButton(",
    "            style: style,",
    "            onPressed: () {},",
    "            child: const Text('Enabled'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Elevated Button Example "
}
,
"Flutter ExpansionPanelList Example ": {
  "prefix": "flutter-exapansionPanel-list-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "",
    "void main() => runApp(const ExpansionPanelListRadioExampleApp());",
    "",
    "class ExpansionPanelListRadioExampleApp extends StatelessWidget {",
    "  const ExpansionPanelListRadioExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ExpansionPanelList.radio Sample')),",
    "        body: const ExpansionPanelListRadioExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// stores ExpansionPanel state information",
    "class Item {",
    "  Item({",
    "    required this.id,",
    "    required this.expandedValue,",
    "    required this.headerValue,",
    "  });",
    "",
    "  int id;",
    "  String expandedValue;",
    "  String headerValue;",
    "}",
    "",
    "List<Item> generateItems(int numberOfItems) {",
    "  return List<Item>.generate(numberOfItems, (int index) {",
    "    return Item(",
    "      id: index,",
    "      headerValue: 'Panel $index',",
    "      expandedValue: 'This is item number $index',",
    "    );",
    "  });",
    "}",
    "",
    "class ExpansionPanelListRadioExample extends StatefulWidget {",
    "  const ExpansionPanelListRadioExample({super.key});",
    "",
    "  @override",
    "  State<ExpansionPanelListRadioExample> createState() => _ExpansionPanelListRadioExampleState();",
    "}",
    "",
    "class _ExpansionPanelListRadioExampleState extends State<ExpansionPanelListRadioExample> {",
    "  final List<Item> _data = generateItems(8);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SingleChildScrollView(",
    "      child: Container(",
    "        child: _buildPanel(),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _buildPanel() {",
    "    return ExpansionPanelList.radio(",
    "      initialOpenPanelValue: 2,",
    "      children: _data.map<ExpansionPanelRadio>((Item item) {",
    "        return ExpansionPanelRadio(",
    "            value: item.id,",
    "            headerBuilder: (BuildContext context, bool isExpanded) {",
    "              return ListTile(",
    "                title: Text(item.headerValue),",
    "              );",
    "            },",
    "            body: ListTile(",
    "                title: Text(item.expandedValue),",
    "                subtitle: const Text('To delete this panel, tap the trash can icon'),",
    "                trailing: const Icon(Icons.delete),",
    "                onTap: () {",
    "                  setState(() {",
    "                    _data.removeWhere((Item currentItem) => item == currentItem);",
    "                  });",
    "                }));",
    "      }).toList(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ExpansionPanelList Example "
},
"Flutter Filled Button Example ": {
  "prefix": "flutter-filled-button-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FilledButton].",
    "",
    "void main() {",
    "  runApp(const FilledButtonApp());",
    "}",
    "",
    "class FilledButtonApp extends StatelessWidget {",
    "  const FilledButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('FilledButton Sample')),",
    "        body: Center(",
    "          child: Row(",
    "            mainAxisSize: MainAxisSize.min,",
    "            children: <Widget>[",
    "              Column(children: <Widget>[",
    "                const SizedBox(height: 30),",
    "                const Text('Filled'),",
    "                const SizedBox(height: 15),",
    "                FilledButton(",
    "                  onPressed: () {},",
    "                  child: const Text('Enabled'),",
    "                ),",
    "                const SizedBox(height: 30),",
    "                const FilledButton(",
    "                  onPressed: null,",
    "                  child: Text('Disabled'),",
    "                ),",
    "              ]),",
    "              const SizedBox(width: 30),",
    "              Column(children: <Widget>[",
    "                const SizedBox(height: 30),",
    "                const Text('Filled tonal'),",
    "                const SizedBox(height: 15),",
    "                FilledButton.tonal(",
    "                  onPressed: () {},",
    "                  child: const Text('Enabled'),",
    "                ),",
    "                const SizedBox(height: 30),",
    "                const FilledButton.tonal(",
    "                  onPressed: null,",
    "                  child: Text('Disabled'),",
    "                ),",
    "              ])",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Filled Button Example "
},
"Flutter Filter Chip Example ": {
  "prefix": "flutter-chip-filter-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "enum ExerciseFilter { walking, running, cycling, hiking }",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('FilterChip Sample'),",
    "        ),",
    "        body: const FilterChipExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FilterChipExample extends StatefulWidget {",
    "  const FilterChipExample({super.key});",
    "",
    "  @override",
    "  State<FilterChipExample> createState() => _FilterChipExampleState();",
    "}",
    "",
    "class _FilterChipExampleState extends State<FilterChipExample> {",
    "  Set<ExerciseFilter> filters = <ExerciseFilter>{};",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Text('Choose an exercise', style: textTheme.labelLarge),",
    "          const SizedBox(height: 5.0),",
    "          Wrap(",
    "            spacing: 5.0,",
    "            children: ExerciseFilter.values.map((ExerciseFilter exercise) {",
    "              return FilterChip(",
    "                label: Text(exercise.name),",
    "                selected: filters.contains(exercise),",
    "                onSelected: (bool selected) {",
    "                  setState(() {",
    "                    if (selected) {",
    "                      filters.add(exercise);",
    "                    } else {",
    "                      filters.remove(exercise);",
    "                    }",
    "                  });",
    "                },",
    "              );",
    "            }).toList(),",
    "          ),",
    "          const SizedBox(height: 10.0),",
    "          Text(",
    "            'Looking for: ${filters.map((ExerciseFilter e) => e.name).join(', ')}',",
    "            style: textTheme.labelLarge,",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Filter Chip Example "
},
"Flutter FlexibleSpaceBar Example ": {
  "prefix": "flutter-flexible-space-bar-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FlexibleSpaceBar].",
    "",
    "void main() => runApp(const MaterialApp(home: FlexibleSpaceBarExampleApp()));",
    "",
    "class FlexibleSpaceBarExampleApp extends StatelessWidget {",
    "  const FlexibleSpaceBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: CustomScrollView(",
    "        physics: const BouncingScrollPhysics(parent: AlwaysScrollableScrollPhysics()),",
    "        slivers: <Widget>[",
    "          SliverAppBar(",
    "            stretch: true,",
    "            onStretchTrigger: () {",
    "              // Function callback for stretch",
    "              return Future<void>.value();",
    "            },",
    "            expandedHeight: 300.0,",
    "            flexibleSpace: FlexibleSpaceBar(",
    "              stretchModes: const <StretchMode>[",
    "                StretchMode.zoomBackground,",
    "                StretchMode.blurBackground,",
    "                StretchMode.fadeTitle,",
    "              ],",
    "              centerTitle: true,",
    "              title: const Text('Flight Report'),",
    "              background: Stack(",
    "                fit: StackFit.expand,",
    "                children: <Widget>[",
    "                  Image.network(",
    "                    'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg',",
    "                    fit: BoxFit.cover,",
    "                  ),",
    "                  const DecoratedBox(",
    "                    decoration: BoxDecoration(",
    "                      gradient: LinearGradient(",
    "                        begin: Alignment(0.0, 0.5),",
    "                        end: Alignment.center,",
    "                        colors: <Color>[",
    "                          Color(0x60000000),",
    "                          Color(0x00000000),",
    "                        ],",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "          SliverList(",
    "            delegate: SliverChildListDelegate(",
    "              const <Widget>[",
    "                ListTile(",
    "                  leading: Icon(Icons.wb_sunny),",
    "                  title: Text('Sunday'),",
    "                  subtitle: Text('sunny, h: 80, l: 65'),",
    "                ),",
    "                ListTile(",
    "                  leading: Icon(Icons.wb_sunny),",
    "                  title: Text('Monday'),",
    "                  subtitle: Text('sunny, h: 80, l: 65'),",
    "                ),",
    "                // ListTiles++",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FlexibleSpaceBar Example "
},
"Flutter FloatingActionButton Example ": {
  "prefix": "flutter-floating-actionn-button-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FloatingActionButton].",
    "",
    "void main() => runApp(const FloatingActionButtonExampleApp());",
    "",
    "class FloatingActionButtonExampleApp extends StatelessWidget {",
    "  const FloatingActionButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const FabExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class FabExample extends StatelessWidget {",
    "  const FabExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('FloatingActionButton Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Small'),",
    "                const SizedBox(width: 16),",
    "                // An example of the small floating action button.",
    "                //",
    "                // https://m3.material.io/components/floating-action-button/specs#669a1be8-7271-48cb-a74d-dd502d73bda4",
    "                FloatingActionButton.small(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  child: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Regular'),",
    "                const SizedBox(width: 16),",
    "                // An example of the regular floating action button.",
    "                //",
    "                // https://m3.material.io/components/floating-action-button/specs#71504201-7bd1-423d-8bb7-07e0291743e5",
    "                FloatingActionButton(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  child: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Large'),",
    "                const SizedBox(width: 16),",
    "                // An example of the large floating action button.",
    "                //",
    "                // https://m3.material.io/components/floating-action-button/specs#9d7d3d6a-bab7-47cb-be32-5596fbd660fe",
    "                FloatingActionButton.large(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  child: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Extended'),",
    "                const SizedBox(width: 16),",
    "                // An example of the extended floating action button.",
    "                //",
    "                // https://m3.material.io/components/extended-fab/specs#686cb8af-87c9-48e8-a3e1-db9da6f6c69b",
    "                FloatingActionButton.extended(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  label: const Text('Add'),",
    "                  icon: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FloatingActionButton Example "
},
"Flutter Choice Chip Example ": {
  "prefix": "flutter-chip-choice-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ActionChoice].",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const ActionChoiceExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ActionChoiceExample extends StatefulWidget {",
    "  const ActionChoiceExample({super.key});",
    "",
    "  @override",
    "  State<ActionChoiceExample> createState() => _ActionChoiceExampleState();",
    "}",
    "",
    "class _ActionChoiceExampleState extends State<ActionChoiceExample> {",
    "  int? _value = 1;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('ActionChoice Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          crossAxisAlignment: CrossAxisAlignment.start,",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Text('Choose an item', style: textTheme.labelLarge),",
    "            const SizedBox(height: 10.0),",
    "            Wrap(",
    "              spacing: 5.0,",
    "              children: List<Widget>.generate(",
    "                3,",
    "                (int index) {",
    "                  return ChoiceChip(",
    "                    label: Text('Item $index'),",
    "                    selected: _value == index,",
    "                    onSelected: (bool selected) {",
    "                      setState(() {",
    "                        _value = selected ? index : null;",
    "                      });",
    "                    },",
    "                  );",
    "                },",
    "              ).toList(),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Choice Chip Example "
},
"Flutter onDelete Chip Example ": {
  "prefix": "flutter-chip-ondelete-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DeletableChipAttributes.onDeleted].",
    "",
    "void main() => runApp(const OnDeletedExampleApp());",
    "",
    "class OnDeletedExampleApp extends StatelessWidget {",
    "  const OnDeletedExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DeletableChipAttributes.onDeleted Sample')),",
    "        body: const Center(",
    "          child: OnDeletedExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class Actor {",
    "  const Actor(this.name, this.initials);",
    "  final String name;",
    "  final String initials;",
    "}",
    "",
    "class CastList extends StatefulWidget {",
    "  const CastList({super.key});",
    "",
    "  @override",
    "  State createState() => CastListState();",
    "}",
    "",
    "class CastListState extends State<CastList> {",
    "  final List<Actor> _cast = <Actor>[",
    "    const Actor('Aaron Burr', 'AB'),",
    "    const Actor('Alexander Hamilton', 'AH'),",
    "    const Actor('Eliza Hamilton', 'EH'),",
    "    const Actor('James Madison', 'JM'),",
    "  ];",
    "",
    "  Iterable<Widget> get actorWidgets {",
    "    return _cast.map((Actor actor) {",
    "      return Padding(",
    "        padding: const EdgeInsets.all(4.0),",
    "        child: Chip(",
    "          avatar: CircleAvatar(child: Text(actor.initials)),",
    "          label: Text(actor.name),",
    "          onDeleted: () {",
    "            setState(() {",
    "              _cast.removeWhere((Actor entry) {",
    "                return entry.name == actor.name;",
    "              });",
    "            });",
    "          },",
    "        ),",
    "      );",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Wrap(",
    "      children: actorWidgets.toList(),",
    "    );",
    "  }",
    "}",
    "",
    "class OnDeletedExample extends StatefulWidget {",
    "  const OnDeletedExample({super.key});",
    "",
    "  @override",
    "  State<OnDeletedExample> createState() => _OnDeletedExampleState();",
    "}",
    "",
    "class _OnDeletedExampleState extends State<OnDeletedExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CastList();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter onDelete Chip Example "
},
"Flutter Icon Button Example ": {
  "prefix": "flutter-icon-button-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [IconButton].",
    "",
    "void main() {",
    "  runApp(const IconButtonApp());",
    "}",
    "",
    "class IconButtonApp extends StatelessWidget {",
    "  const IconButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      title: 'Icon Button Types',",
    "      home: const Scaffold(",
    "        body: ButtonTypesExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ButtonTypesExample extends StatelessWidget {",
    "  const ButtonTypesExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const Padding(",
    "      padding: EdgeInsets.all(4.0),",
    "      child: Row(",
    "        children: <Widget>[",
    "          Spacer(),",
    "          ButtonTypesGroup(enabled: true),",
    "          ButtonTypesGroup(enabled: false),",
    "          Spacer(),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ButtonTypesGroup extends StatelessWidget {",
    "  const ButtonTypesGroup({super.key, required this.enabled});",
    "",
    "  final bool enabled;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final VoidCallback? onPressed = enabled ? () {} : null;",
    "",
    "    return Padding(",
    "      padding: const EdgeInsets.all(4.0),",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "        children: <Widget>[",
    "          IconButton(icon: const Icon(Icons.filter_drama), onPressed: onPressed),",
    "",
    "          // Filled icon button",
    "          IconButton.filled(onPressed: onPressed, icon: const Icon(Icons.filter_drama)),",
    "",
    "          // Filled tonal icon button",
    "          IconButton.filledTonal(onPressed: onPressed, icon: const Icon(Icons.filter_drama)),",
    "",
    "          // Outlined icon button",
    "          IconButton.outlined(onPressed: onPressed, icon: const Icon(Icons.filter_drama)),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Icon Button Example "
},
"Flutter ImageClipExample Example ": {
  "prefix": "flutter-image-clip-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "void main() {",
    "  runApp(",
    "    MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Image.frameBuilder Sample')),",
    "        body: const Center(",
    "          child: ImageClipExample(",
    "            image: NetworkImage('https://flutter.github.io/assets-for-api-docs/assets/widgets/puffin.jpg'),",
    "          ),",
    "        ),",
    "      ),",
    "    ),",
    "  );",
    "}",
    "",
    "class ImageClipExample extends StatelessWidget {",
    "  const ImageClipExample({super.key, required this.image});",
    "",
    "  final ImageProvider image;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ClipRRect(",
    "      borderRadius: BorderRadius.circular(100),",
    "      child: Ink.image(",
    "        fit: BoxFit.fill,",
    "        width: 300,",
    "        height: 300,",
    "        image: image,",
    "        child: InkWell(",
    "          onTap: () {/* ... */},",
    "          child: const Align(",
    "            child: Padding(",
    "              padding: EdgeInsets.all(10.0),",
    "              child: Text(",
    "                'PUFFIN',",
    "                style: TextStyle(",
    "                  fontWeight: FontWeight.w900,",
    "                  color: Colors.white,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ImageClipExample Example "
},
"Flutter Inkwell Example ": {
  "prefix": "flutter-inkwell-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InkWell].",
    "",
    "void main() => runApp(const InkWellExampleApp());",
    "",
    "class InkWellExampleApp extends StatelessWidget {",
    "  const InkWellExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('InkWell Sample')),",
    "        body: const Center(",
    "          child: InkWellExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class InkWellExample extends StatefulWidget {",
    "  const InkWellExample({super.key});",
    "",
    "  @override",
    "  State<InkWellExample> createState() => _InkWellExampleState();",
    "}",
    "",
    "class _InkWellExampleState extends State<InkWellExample> {",
    "  double sideLength = 50;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return AnimatedContainer(",
    "      height: sideLength,",
    "      width: sideLength,",
    "      duration: const Duration(seconds: 2),",
    "      curve: Curves.easeIn,",
    "      child: Material(",
    "        color: Colors.yellow,",
    "        child: InkWell(",
    "          onTap: () {",
    "            setState(() {",
    "              sideLength == 50 ? sideLength = 100 : sideLength = 50;",
    "            });",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Inkwell Example "
},
"Flutter Input Chip Example ": {
  "prefix": "flutter-chip-input-example",
  "body": [
    "",
    "// Flutter code sample InputChip.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const InputChipExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class InputChipExample extends StatefulWidget {",
    "  const InputChipExample({super.key});",
    "",
    "  @override",
    "  State<InputChipExample> createState() => _InputChipExampleState();",
    "}",
    "",
    "class _InputChipExampleState extends State<InputChipExample> {",
    "  int inputs = 3;",
    "  int? selectedIndex;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('InputChip Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Wrap(",
    "              alignment: WrapAlignment.center,",
    "              spacing: 5.0,",
    "              children: List<Widget>.generate(",
    "                inputs,",
    "                (int index) {",
    "                  return InputChip(",
    "                    label: Text('Person ${index + 1}'),",
    "                    selected: selectedIndex == index,",
    "                    onSelected: (bool selected) {",
    "                      setState(() {",
    "                        if (selectedIndex == index) {",
    "                          selectedIndex = null;",
    "                        } else {",
    "                          selectedIndex = index;",
    "                        }",
    "                      });",
    "                    },",
    "                    onDeleted: () {",
    "                      setState(() {",
    "                        inputs = inputs - 1;",
    "                      });",
    "                    },",
    "                  );",
    "                },",
    "              ).toList(),",
    "            ),",
    "            const SizedBox(height: 10),",
    "            ElevatedButton(",
    "              onPressed: () {",
    "                setState(() {",
    "                  inputs = 3;",
    "                });",
    "              },",
    "              child: const Text('Reset'),",
    "            )",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Input Chip Example "
},
"Flutter InputDecorator Example ": {
  "prefix": "flutter-input-decorator-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InputDecorator].",
    "",
    "void main() => runApp(const FloatingLabelStyleErrorExampleApp());",
    "",
    "class FloatingLabelStyleErrorExampleApp extends StatelessWidget {",
    "  const FloatingLabelStyleErrorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('InputDecorator Sample')),",
    "        body: const Center(",
    "          child: InputDecoratorExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class InputDecoratorExample extends StatelessWidget {",
    "  const InputDecoratorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextFormField(",
    "      decoration: InputDecoration(",
    "        border: const OutlineInputBorder(),",
    "        labelText: 'Name',",
    "        // The MaterialStateProperty's value is a text style that is orange",
    "        // by default, but the theme's error color if the input decorator",
    "        // is in its error state.",
    "        floatingLabelStyle: MaterialStateTextStyle.resolveWith(",
    "          (Set<MaterialState> states) {",
    "            final Color color =",
    "                states.contains(MaterialState.error) ? Theme.of(context).colorScheme.error : Colors.orange;",
    "            return TextStyle(color: color, letterSpacing: 1.3);",
    "          },",
    "        ),",
    "      ),",
    "      validator: (String? value) {",
    "        if (value == null || value == '') {",
    "          return 'Enter name';",
    "        }",
    "        return null;",
    "      },",
    "      autovalidateMode: AutovalidateMode.always,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InputDecorator Example "
},
"Flutter ListTile Custon Example ": {
  "prefix": "flutter-listtile-custom-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom list items.",
    "",
    "void main() => runApp(const CustomListItemApp());",
    "",
    "class CustomListItemApp extends StatelessWidget {",
    "  const CustomListItemApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const CustomListItemExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class _ArticleDescription extends StatelessWidget {",
    "  const _ArticleDescription({",
    "    required this.title,",
    "    required this.subtitle,",
    "    required this.author,",
    "    required this.publishDate,",
    "    required this.readDuration,",
    "  });",
    "",
    "  final String title;",
    "  final String subtitle;",
    "  final String author;",
    "  final String publishDate;",
    "  final String readDuration;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        Text(",
    "          title,",
    "          maxLines: 2,",
    "          overflow: TextOverflow.ellipsis,",
    "          style: const TextStyle(",
    "            fontWeight: FontWeight.bold,",
    "          ),",
    "        ),",
    "        const Padding(padding: EdgeInsets.only(bottom: 2.0)),",
    "        Expanded(",
    "          child: Text(",
    "            subtitle,",
    "            maxLines: 2,",
    "            overflow: TextOverflow.ellipsis,",
    "            style: const TextStyle(",
    "              fontSize: 12.0,",
    "              color: Colors.black54,",
    "            ),",
    "          ),",
    "        ),",
    "        Text(",
    "          author,",
    "          style: const TextStyle(",
    "            fontSize: 12.0,",
    "            color: Colors.black87,",
    "          ),",
    "        ),",
    "        Text(",
    "          '$publishDate - $readDuration',",
    "          style: const TextStyle(",
    "            fontSize: 12.0,",
    "            color: Colors.black54,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class CustomListItemTwo extends StatelessWidget {",
    "  const CustomListItemTwo({",
    "    super.key,",
    "    required this.thumbnail,",
    "    required this.title,",
    "    required this.subtitle,",
    "    required this.author,",
    "    required this.publishDate,",
    "    required this.readDuration,",
    "  });",
    "",
    "  final Widget thumbnail;",
    "  final String title;",
    "  final String subtitle;",
    "  final String author;",
    "  final String publishDate;",
    "  final String readDuration;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.symmetric(vertical: 10.0),",
    "      child: SizedBox(",
    "        height: 100,",
    "        child: Row(",
    "          crossAxisAlignment: CrossAxisAlignment.start,",
    "          children: <Widget>[",
    "            AspectRatio(",
    "              aspectRatio: 1.0,",
    "              child: thumbnail,",
    "            ),",
    "            Expanded(",
    "              child: Padding(",
    "                padding: const EdgeInsets.fromLTRB(20.0, 0.0, 2.0, 0.0),",
    "                child: _ArticleDescription(",
    "                  title: title,",
    "                  subtitle: subtitle,",
    "                  author: author,",
    "                  publishDate: publishDate,",
    "                  readDuration: readDuration,",
    "                ),",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CustomListItemExample extends StatelessWidget {",
    "  const CustomListItemExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Custom List Item Sample')),",
    "      body: ListView(",
    "        padding: const EdgeInsets.all(10.0),",
    "        children: <Widget>[",
    "          CustomListItemTwo(",
    "            thumbnail: Container(",
    "              decoration: const BoxDecoration(color: Colors.pink),",
    "            ),",
    "            title: 'Flutter 1.0 Launch',",
    "            subtitle: 'Flutter continues to improve and expand its horizons. '",
    "                'This text should max out at two lines and clip',",
    "            author: 'Dash',",
    "            publishDate: 'Dec 28',",
    "            readDuration: '5 mins',",
    "          ),",
    "          CustomListItemTwo(",
    "            thumbnail: Container(",
    "              decoration: const BoxDecoration(color: Colors.blue),",
    "            ),",
    "            title: 'Flutter 1.2 Release - Continual updates to the framework',",
    "            subtitle: 'Flutter once again improves and makes updates.',",
    "            author: 'Flutter',",
    "            publishDate: 'Feb 26',",
    "            readDuration: '12 mins',",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Custon Example "
},
"Flutter ListTile Selected Example ": {
  "prefix": "flutter-listtile-selected-example",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ListTile.selected].",
    "",
    "void main() => runApp(const ListTileApp());",
    "",
    "class ListTileApp extends StatelessWidget {",
    "  const ListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const ListTileExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileExample extends StatefulWidget {",
    "  const ListTileExample({super.key});",
    "",
    "  @override",
    "  State<ListTileExample> createState() => _ListTileExampleState();",
    "}",
    "",
    "class _ListTileExampleState extends State<ListTileExample> {",
    "  int _selectedIndex = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Custom List Item Sample')),",
    "      body: ListView.builder(",
    "        itemCount: 10,",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return ListTile(",
    "            title: Text('Item $index'),",
    "            selected: index == _selectedIndex,",
    "            onTap: () {",
    "              setState(() {",
    "                _selectedIndex = index;",
    "              });",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Selected Example "
},
"Flutter ListTile Example ": {
  "prefix": "flutter-listtile-example",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ListTile].",
    "",
    "void main() => runApp(const ListTileApp());",
    "",
    "class ListTileApp extends StatelessWidget {",
    "  const ListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const ListTileExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileExample extends StatelessWidget {",
    "  const ListTileExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('ListTile Sample')),",
    "      body: ListView(",
    "        children: const <Widget>[",
    "          Card(child: ListTile(title: Text('One-line ListTile'))),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(),",
    "              title: Text('One-line with leading widget'),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              title: Text('One-line with trailing widget'),",
    "              trailing: Icon(Icons.more_vert),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(),",
    "              title: Text('One-line with both widgets'),",
    "              trailing: Icon(Icons.more_vert),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              title: Text('One-line dense ListTile'),",
    "              dense: true,",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(size: 56.0),",
    "              title: Text('Two-line ListTile'),",
    "              subtitle: Text('Here is a second line'),",
    "              trailing: Icon(Icons.more_vert),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(size: 72.0),",
    "              title: Text('Three-line ListTile'),",
    "              subtitle: Text('A sufficiently long subtitle warrants three lines.'),",
    "              trailing: Icon(Icons.more_vert),",
    "              isThreeLine: true,",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Example "
},
"MaterialStateBorderSide": {
  "prefix": "flutter-material-state-border",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateBorderSide].",
    "",
    "void main() => runApp(const MaterialStateBorderSideExampleApp());",
    "",
    "class MaterialStateBorderSideExampleApp extends StatelessWidget {",
    "  const MaterialStateBorderSideExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateBorderSide Sample')),",
    "        body: const Center(",
    "          child: MaterialStateBorderSideExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MaterialStateBorderSideExample extends StatefulWidget {",
    "  const MaterialStateBorderSideExample({super.key});",
    "",
    "  @override",
    "  State<MaterialStateBorderSideExample> createState() => _MaterialStateBorderSideExampleState();",
    "}",
    "",
    "class _MaterialStateBorderSideExampleState extends State<MaterialStateBorderSideExample> {",
    "  bool isSelected = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return FilterChip(",
    "      label: const Text('Select chip'),",
    "      selected: isSelected,",
    "      onSelected: (bool value) {",
    "        setState(() {",
    "          isSelected = value;",
    "        });",
    "      },",
    "      side: MaterialStateBorderSide.resolveWith((Set<MaterialState> states) {",
    "        if (states.contains(MaterialState.selected)) {",
    "          return const BorderSide(color: Colors.red);",
    "        }",
    "        return null; // Defer to default value on the theme or widget.",
    "      }),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "MaterialStateBorderSide"
},
"Flutter Material State Mouse Example ": {
  "prefix": "flutter-material-state-mouse-cursor-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateMouseCursor].",
    "",
    "void main() => runApp(const MaterialStateMouseCursorExampleApp());",
    "",
    "class MaterialStateMouseCursorExampleApp extends StatelessWidget {",
    "  const MaterialStateMouseCursorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateMouseCursor Sample')),",
    "        body: const Center(",
    "          child: MaterialStateMouseCursorExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileCursor extends MaterialStateMouseCursor {",
    "  const ListTileCursor();",
    "",
    "  @override",
    "  MouseCursor resolve(Set<MaterialState> states) {",
    "    if (states.contains(MaterialState.disabled)) {",
    "      return SystemMouseCursors.forbidden;",
    "    }",
    "    return SystemMouseCursors.click;",
    "  }",
    "",
    "  @override",
    "  String get debugDescription => 'ListTileCursor()';",
    "}",
    "",
    "class MaterialStateMouseCursorExample extends StatelessWidget {",
    "  const MaterialStateMouseCursorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const ListTile(",
    "      title: Text('Disabled ListTile'),",
    "      enabled: false,",
    "      mouseCursor: ListTileCursor(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Mouse Example "
},
"Flutter Material State Outlined Border Example ": {
  "prefix": "flutter-material-state-outlined-border-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateOutlinedBorder].",
    "",
    "void main() => runApp(const MaterialStateOutlinedBorderExampleApp());",
    "",
    "class MaterialStateOutlinedBorderExampleApp extends StatelessWidget {",
    "  const MaterialStateOutlinedBorderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MaterialStateOutlinedBorderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SelectedBorder extends RoundedRectangleBorder implements MaterialStateOutlinedBorder {",
    "  const SelectedBorder();",
    "",
    "  @override",
    "  OutlinedBorder? resolve(Set<MaterialState> states) {",
    "    if (states.contains(MaterialState.selected)) {",
    "      return const RoundedRectangleBorder();",
    "    }",
    "    return null; // Defer to default value on the theme or widget.",
    "  }",
    "}",
    "",
    "class MaterialStateOutlinedBorderExample extends StatefulWidget {",
    "  const MaterialStateOutlinedBorderExample({super.key});",
    "",
    "  @override",
    "  State<MaterialStateOutlinedBorderExample> createState() => _MaterialStateOutlinedBorderExampleState();",
    "}",
    "",
    "class _MaterialStateOutlinedBorderExampleState extends State<MaterialStateOutlinedBorderExample> {",
    "  bool isSelected = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: FilterChip(",
    "        label: const Text('Select chip'),",
    "        selected: isSelected,",
    "        onSelected: (bool value) {",
    "          setState(() {",
    "            isSelected = value;",
    "          });",
    "        },",
    "        shape: const SelectedBorder(),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Outlined Border Example "
}  ,
"Flutter Material State Property Border Example ": {
  "prefix": "flutter-material-state-property-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateProperty].",
    "",
    "void main() => runApp(const MaterialStatePropertyExampleApp());",
    "",
    "class MaterialStatePropertyExampleApp extends StatelessWidget {",
    "  const MaterialStatePropertyExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateProperty Sample')),",
    "        body: const Center(",
    "          child: MaterialStatePropertyExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MaterialStatePropertyExample extends StatelessWidget {",
    "  const MaterialStatePropertyExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    Color getColor(Set<MaterialState> states) {",
    "      const Set<MaterialState> interactiveStates = <MaterialState>{",
    "        MaterialState.pressed,",
    "        MaterialState.hovered,",
    "        MaterialState.focused,",
    "      };",
    "      if (states.any(interactiveStates.contains)) {",
    "        return Colors.blue;",
    "      }",
    "      return Colors.red;",
    "    }",
    "",
    "    return TextButton(",
    "      style: ButtonStyle(",
    "        foregroundColor: MaterialStateProperty.resolveWith(getColor),",
    "      ),",
    "      onPressed: () {},",
    "      child: const Text('TextButton'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Property Border Example "
},
"Flutter CheckBox Menu Property Border Example ": {
  "prefix": "flutter-menu-checkbox-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [CheckboxMenuButton].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "class MyCheckboxMenu extends StatefulWidget {",
    "  const MyCheckboxMenu({super.key, required this.message});",
    "",
    "  final String message;",
    "",
    "  @override",
    "  State<MyCheckboxMenu> createState() => _MyCheckboxMenuState();",
    "}",
    "",
    "class _MyCheckboxMenuState extends State<MyCheckboxMenu> {",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  static const SingleActivator _showShortcut = SingleActivator(LogicalKeyboardKey.keyS, control: true);",
    "  bool _showingMessage = false;",
    "",
    "  @override",
    "  void dispose() {",
    "    _buttonFocusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _setMessageVisibility(bool visible) {",
    "    setState(() {",
    "      _showingMessage = visible;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CallbackShortcuts(",
    "      bindings: <ShortcutActivator, VoidCallback>{",
    "        _showShortcut: () {",
    "          _setMessageVisibility(!_showingMessage);",
    "        },",
    "      },",
    "      child: Column(",
    "        crossAxisAlignment: CrossAxisAlignment.start,",
    "        children: <Widget>[",
    "          MenuAnchor(",
    "            childFocusNode: _buttonFocusNode,",
    "            menuChildren: <Widget>[",
    "              CheckboxMenuButton(",
    "                value: _showingMessage,",
    "                onChanged: (bool? value) {",
    "                  _setMessageVisibility(value!);",
    "                },",
    "                child: const Text('Show Message'),",
    "              ),",
    "            ],",
    "            builder: (BuildContext context, MenuController controller, Widget? child) {",
    "              return TextButton(",
    "                focusNode: _buttonFocusNode,",
    "                onPressed: () {",
    "                  if (controller.isOpen) {",
    "                    controller.close();",
    "                  } else {",
    "                    controller.open();",
    "                  }",
    "                },",
    "                child: const Text('OPEN MENU'),",
    "              );",
    "            },",
    "          ),",
    "          Expanded(",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              child: Column(",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  Padding(",
    "                    padding: const EdgeInsets.all(12.0),",
    "                    child: Text(",
    "                      _showingMessage ? widget.message : '',",
    "                      style: Theme.of(context).textTheme.headlineSmall,",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  static const String kMessage = '\"Talk less. Smile more.\" - A. Burr';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: MyCheckboxMenu(message: kMessage)),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CheckBox Menu Property Border Example "
},
"Flutter Menu Radio Property Border Example ": {
  "prefix": "flutter-menu-radio-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [RadioMenuButton].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "class MyRadioMenu extends StatefulWidget {",
    "  const MyRadioMenu({super.key});",
    "",
    "  @override",
    "  State<MyRadioMenu> createState() => _MyRadioMenuState();",
    "}",
    "",
    "class _MyRadioMenuState extends State<MyRadioMenu> {",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  Color _backgroundColor = Colors.red;",
    "  late ShortcutRegistryEntry _entry;",
    "",
    "  static const SingleActivator _redShortcut = SingleActivator(LogicalKeyboardKey.keyR, control: true);",
    "  static const SingleActivator _greenShortcut = SingleActivator(LogicalKeyboardKey.keyG, control: true);",
    "  static const SingleActivator _blueShortcut = SingleActivator(LogicalKeyboardKey.keyB, control: true);",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    _entry = ShortcutRegistry.of(context).addAll(<ShortcutActivator, VoidCallbackIntent>{",
    "      _redShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.red)),",
    "      _greenShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.green)),",
    "      _blueShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.blue)),",
    "    });",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _buttonFocusNode.dispose();",
    "    _entry.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _setBackgroundColor(Color? color) {",
    "    setState(() {",
    "      _backgroundColor = color!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        MenuAnchor(",
    "          childFocusNode: _buttonFocusNode,",
    "          menuChildren: <Widget>[",
    "            RadioMenuButton<Color>(",
    "              value: Colors.red,",
    "              shortcut: _redShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Red Background'),",
    "            ),",
    "            RadioMenuButton<Color>(",
    "              value: Colors.green,",
    "              shortcut: _greenShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Green Background'),",
    "            ),",
    "            RadioMenuButton<Color>(",
    "              value: Colors.blue,",
    "              shortcut: _blueShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Blue Background'),",
    "            ),",
    "          ],",
    "          builder: (BuildContext context, MenuController controller, Widget? child) {",
    "            return TextButton(",
    "              focusNode: _buttonFocusNode,",
    "              onPressed: () {",
    "                if (controller.isOpen) {",
    "                  controller.close();",
    "                } else {",
    "                  controller.open();",
    "                }",
    "              },",
    "              child: const Text('OPEN MENU'),",
    "            );",
    "          },",
    "        ),",
    "        Expanded(",
    "          child: Container(",
    "            color: _backgroundColor,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: MyRadioMenu()),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Menu Radio Property Border Example "
},
"Flutter Menu Example ": {
  "prefix": "flutter-menu-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [MenuAnchor].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "/// An enhanced enum to define the available menus and their shortcuts.",
    "///",
    "/// Using an enum for menu definition is not required, but this illustrates how",
    "/// they could be used for simple menu systems.",
    "enum MenuEntry {",
    "  about('About'),",
    "  showMessage('Show Message', SingleActivator(LogicalKeyboardKey.keyS, control: true)),",
    "  hideMessage('Hide Message', SingleActivator(LogicalKeyboardKey.keyS, control: true)),",
    "  colorMenu('Color Menu'),",
    "  colorRed('Red Background', SingleActivator(LogicalKeyboardKey.keyR, control: true)),",
    "  colorGreen('Green Background', SingleActivator(LogicalKeyboardKey.keyG, control: true)),",
    "  colorBlue('Blue Background', SingleActivator(LogicalKeyboardKey.keyB, control: true));",
    "",
    "  const MenuEntry(this.label, [this.shortcut]);",
    "  final String label;",
    "  final MenuSerializableShortcut? shortcut;",
    "}",
    "",
    "class MyCascadingMenu extends StatefulWidget {",
    "  const MyCascadingMenu({super.key, required this.message});",
    "",
    "  final String message;",
    "",
    "  @override",
    "  State<MyCascadingMenu> createState() => _MyCascadingMenuState();",
    "}",
    "",
    "class _MyCascadingMenuState extends State<MyCascadingMenu> {",
    "  MenuEntry? _lastSelection;",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  ShortcutRegistryEntry? _shortcutsEntry;",
    "",
    "  Color get backgroundColor => _backgroundColor;",
    "  Color _backgroundColor = Colors.red;",
    "  set backgroundColor(Color value) {",
    "    if (_backgroundColor != value) {",
    "      setState(() {",
    "        _backgroundColor = value;",
    "      });",
    "    }",
    "  }",
    "",
    "  bool get showingMessage => _showingMessage;",
    "  bool _showingMessage = false;",
    "  set showingMessage(bool value) {",
    "    if (_showingMessage != value) {",
    "      setState(() {",
    "        _showingMessage = value;",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    // Dispose of any previously registered shortcuts, since they are about to",
    "    // be replaced.",
    "    _shortcutsEntry?.dispose();",
    "    // Collect the shortcuts from the different menu selections so that they can",
    "    // be registered to apply to the entire app. Menus don't register their",
    "    // shortcuts, they only display the shortcut hint text.",
    "    final Map<ShortcutActivator, Intent> shortcuts = <ShortcutActivator, Intent>{",
    "      for (final MenuEntry item in MenuEntry.values)",
    "        if (item.shortcut != null) item.shortcut!: VoidCallbackIntent(() => _activate(item)),",
    "    };",
    "    // Register the shortcuts with the ShortcutRegistry so that they are",
    "    // available to the entire application.",
    "    _shortcutsEntry = ShortcutRegistry.of(context).addAll(shortcuts);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _shortcutsEntry?.dispose();",
    "    _buttonFocusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        MenuAnchor(",
    "          childFocusNode: _buttonFocusNode,",
    "          menuChildren: <Widget>[",
    "            MenuItemButton(",
    "              child: Text(MenuEntry.about.label),",
    "              onPressed: () => _activate(MenuEntry.about),",
    "            ),",
    "            if (_showingMessage)",
    "              MenuItemButton(",
    "                onPressed: () => _activate(MenuEntry.hideMessage),",
    "                shortcut: MenuEntry.hideMessage.shortcut,",
    "                child: Text(MenuEntry.hideMessage.label),",
    "              ),",
    "            if (!_showingMessage)",
    "              MenuItemButton(",
    "                onPressed: () => _activate(MenuEntry.showMessage),",
    "                shortcut: MenuEntry.showMessage.shortcut,",
    "                child: Text(MenuEntry.showMessage.label),",
    "              ),",
    "            SubmenuButton(",
    "              menuChildren: <Widget>[",
    "                MenuItemButton(",
    "                  onPressed: () => _activate(MenuEntry.colorRed),",
    "                  shortcut: MenuEntry.colorRed.shortcut,",
    "                  child: Text(MenuEntry.colorRed.label),",
    "                ),",
    "                MenuItemButton(",
    "                  onPressed: () => _activate(MenuEntry.colorGreen),",
    "                  shortcut: MenuEntry.colorGreen.shortcut,",
    "                  child: Text(MenuEntry.colorGreen.label),",
    "                ),",
    "                MenuItemButton(",
    "                  onPressed: () => _activate(MenuEntry.colorBlue),",
    "                  shortcut: MenuEntry.colorBlue.shortcut,",
    "                  child: Text(MenuEntry.colorBlue.label),",
    "                ),",
    "              ],",
    "              child: const Text('Background Color'),",
    "            ),",
    "          ],",
    "          builder: (BuildContext context, MenuController controller, Widget? child) {",
    "            return TextButton(",
    "              focusNode: _buttonFocusNode,",
    "              onPressed: () {",
    "                if (controller.isOpen) {",
    "                  controller.close();",
    "                } else {",
    "                  controller.open();",
    "                }",
    "              },",
    "              child: const Text('OPEN MENU'),",
    "            );",
    "          },",
    "        ),",
    "        Expanded(",
    "          child: Container(",
    "            alignment: Alignment.center,",
    "            color: backgroundColor,",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(12.0),",
    "                  child: Text(",
    "                    showingMessage ? widget.message : '',",
    "                    style: Theme.of(context).textTheme.headlineSmall,",
    "                  ),",
    "                ),",
    "                Text(_lastSelection != null ? 'Last Selected: ${_lastSelection!.label}' : ''),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "",
    "  void _activate(MenuEntry selection) {",
    "    setState(() {",
    "      _lastSelection = selection;",
    "    });",
    "",
    "    switch (selection) {",
    "      case MenuEntry.about:",
    "        showAboutDialog(",
    "          context: context,",
    "          applicationName: 'MenuBar Sample',",
    "          applicationVersion: '1.0.0',",
    "        );",
    "      case MenuEntry.hideMessage:",
    "      case MenuEntry.showMessage:",
    "        showingMessage = !showingMessage;",
    "      case MenuEntry.colorMenu:",
    "        break;",
    "      case MenuEntry.colorRed:",
    "        backgroundColor = Colors.red;",
    "      case MenuEntry.colorGreen:",
    "        backgroundColor = Colors.green;",
    "      case MenuEntry.colorBlue:",
    "        backgroundColor = Colors.blue;",
    "    }",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  static const String kMessage = '\"Talk less. Smile more.\" - A. Burr';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const Scaffold(body: MyCascadingMenu(message: kMessage)),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Menu Example "
},
"Flutter NavigationBar Example": {
  "prefix": "flutter-navigation-bar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationBar].",
    "",
    "void main() => runApp(const NavigationBarApp());",
    "",
    "class NavigationBarApp extends StatelessWidget {",
    "  const NavigationBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(home: NavigationExample());",
    "  }",
    "}",
    "",
    "class NavigationExample extends StatefulWidget {",
    "  const NavigationExample({super.key});",
    "",
    "  @override",
    "  State<NavigationExample> createState() => _NavigationExampleState();",
    "}",
    "",
    "class _NavigationExampleState extends State<NavigationExample> {",
    "  int currentPageIndex = 0;",
    "  NavigationDestinationLabelBehavior labelBehavior = NavigationDestinationLabelBehavior.alwaysShow;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      bottomNavigationBar: NavigationBar(",
    "        labelBehavior: labelBehavior,",
    "        selectedIndex: currentPageIndex,",
    "        onDestinationSelected: (int index) {",
    "          setState(() {",
    "            currentPageIndex = index;",
    "          });",
    "        },",
    "        destinations: const <Widget>[",
    "          NavigationDestination(",
    "            icon: Icon(Icons.explore),",
    "            label: 'Explore',",
    "          ),",
    "          NavigationDestination(",
    "            icon: Icon(Icons.commute),",
    "            label: 'Commute',",
    "          ),",
    "          NavigationDestination(",
    "            selectedIcon: Icon(Icons.bookmark),",
    "            icon: Icon(Icons.bookmark_border),",
    "            label: 'Saved',",
    "          ),",
    "        ],",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Text('Label behavior: ${labelBehavior.name}'),",
    "            const SizedBox(height: 10),",
    "            OverflowBar(",
    "              spacing: 10.0,",
    "              children: <Widget>[",
    "                ElevatedButton(",
    "                  onPressed: () {",
    "                    setState(() {",
    "                      labelBehavior = NavigationDestinationLabelBehavior.alwaysShow;",
    "                    });",
    "                  },",
    "                  child: const Text('alwaysShow'),",
    "                ),",
    "                ElevatedButton(",
    "                  onPressed: () {",
    "                    setState(() {",
    "                      labelBehavior = NavigationDestinationLabelBehavior.onlyShowSelected;",
    "                    });",
    "                  },",
    "                  child: const Text('onlyShowSelected'),",
    "                ),",
    "                ElevatedButton(",
    "                  onPressed: () {",
    "                    setState(() {",
    "                      labelBehavior = NavigationDestinationLabelBehavior.alwaysHide;",
    "                    });",
    "                  },",
    "                  child: const Text('alwaysHide'),",
    "                ),",
    "              ],",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationBar Example"
},
"Flutter NavigationDrawer Example": {
  "prefix": "flutter-navigation-drawer",
  "scope":"dart",
  "body": [
    "",
    "// Builds an adaptive navigation widget layout. When the screen width is less than",
    "// 450, A [NavigationBar] will be displayed. Otherwise, a [NavigationRail] will be",
    "// displayed on the left side, and also a button to open the [NavigationDrawer].",
    "// All of these navigation widgets are built from an   identical list of data.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationDrawer].",
    "",
    "class ExampleDestination {",
    "  const ExampleDestination(this.label, this.icon, this.selectedIcon);",
    "",
    "  final String label;",
    "  final Widget icon;",
    "  final Widget selectedIcon;",
    "}",
    "",
    "const List<ExampleDestination> destinations = <ExampleDestination>[",
    "  ExampleDestination('page 0', Icon(Icons.widgets_outlined), Icon(Icons.widgets)),",
    "  ExampleDestination('page 1', Icon(Icons.format_paint_outlined), Icon(Icons.format_paint)),",
    "  ExampleDestination('page 2', Icon(Icons.text_snippet_outlined), Icon(Icons.text_snippet)),",
    "  ExampleDestination('page 3', Icon(Icons.invert_colors_on_outlined), Icon(Icons.opacity)),",
    "];",
    "",
    "void main() {",
    "  runApp(",
    "    MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const NavigationDrawerExample(),",
    "    ),",
    "  );",
    "}",
    "",
    "class NavigationDrawerExample extends StatefulWidget {",
    "  const NavigationDrawerExample({super.key});",
    "",
    "  @override",
    "  State<NavigationDrawerExample> createState() => _NavigationDrawerExampleState();",
    "}",
    "",
    "class _NavigationDrawerExampleState extends State<NavigationDrawerExample> {",
    "  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();",
    "",
    "  int screenIndex = 0;",
    "  late bool showNavigationDrawer;",
    "",
    "  void handleScreenChanged(int selectedScreen) {",
    "    setState(() {",
    "      screenIndex = selectedScreen;",
    "    });",
    "  }",
    "",
    "  void openDrawer() {",
    "    scaffoldKey.currentState!.openEndDrawer();",
    "  }",
    "",
    "  Widget buildBottomBarScaffold() {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            Text('Page Index =  $screenIndex'),",
    "          ],",
    "        ),",
    "      ),",
    "      bottomNavigationBar: NavigationBar(",
    "        selectedIndex: screenIndex,",
    "        onDestinationSelected: (int index) {",
    "          setState(() {",
    "            screenIndex = index;",
    "          });",
    "        },",
    "        destinations: destinations.map(",
    "          (ExampleDestination destination) {",
    "            return NavigationDestination(",
    "              label: destination.label,",
    "              icon: destination.icon,",
    "              selectedIcon: destination.selectedIcon,",
    "              tooltip: destination.label,",
    "            );",
    "          },",
    "        ).toList(),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget buildDrawerScaffold(BuildContext context) {",
    "    return Scaffold(",
    "      key: scaffoldKey,",
    "      body: SafeArea(",
    "        bottom: false,",
    "        top: false,",
    "        child: Row(",
    "          children: <Widget>[",
    "            Padding(",
    "              padding: const EdgeInsets.symmetric(horizontal: 5),",
    "              child: NavigationRail(",
    "                minWidth: 50,",
    "                destinations: destinations.map(",
    "                  (ExampleDestination destination) {",
    "                    return NavigationRailDestination(",
    "                      label: Text(destination.label),",
    "                      icon: destination.icon,",
    "                      selectedIcon: destination.selectedIcon,",
    "                    );",
    "                  },",
    "                ).toList(),",
    "                selectedIndex: screenIndex,",
    "                useIndicator: true,",
    "                onDestinationSelected: (int index) {",
    "                  setState(() {",
    "                    screenIndex = index;",
    "                  });",
    "                },",
    "              ),",
    "            ),",
    "            const VerticalDivider(thickness: 1, width: 1),",
    "            Expanded(",
    "              child: Column(",
    "                mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "                children: <Widget>[",
    "                  Text('Page Index =  $screenIndex'),",
    "                  ElevatedButton(",
    "                    onPressed: openDrawer,",
    "                    child: const Text('Open Drawer'),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      endDrawer: NavigationDrawer(",
    "        onDestinationSelected: handleScreenChanged,",
    "        selectedIndex: screenIndex,",
    "        children: <Widget>[",
    "          Padding(",
    "            padding: const EdgeInsets.fromLTRB(28, 16, 16, 10),",
    "            child: Text(",
    "              'Header',",
    "              style: Theme.of(context).textTheme.titleSmall,",
    "            ),",
    "          ),",
    "          ...destinations.map(",
    "            (ExampleDestination destination) {",
    "              return NavigationDrawerDestination(",
    "                label: Text(destination.label),",
    "                icon: destination.icon,",
    "                selectedIcon: destination.selectedIcon,",
    "              );",
    "            },",
    "          ),",
    "          const Padding(",
    "            padding: EdgeInsets.fromLTRB(28, 16, 28, 10),",
    "            child: Divider(),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    showNavigationDrawer = MediaQuery.of(context).size.width >= 450;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return showNavigationDrawer ? buildDrawerScaffold(context) : buildBottomBarScaffold();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationDrawer Example"
},
"Flutter NavigationRail Example": {
  "prefix": "flutter-navigation-rail",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationRail].",
    "",
    "void main() => runApp(const NavigationRailExampleApp());",
    "",
    "class NavigationRailExampleApp extends StatelessWidget {",
    "  const NavigationRailExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: NavRailExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class NavRailExample extends StatefulWidget {",
    "  const NavRailExample({super.key});",
    "",
    "  @override",
    "  State<NavRailExample> createState() => _NavRailExampleState();",
    "}",
    "",
    "class _NavRailExampleState extends State<NavRailExample> {",
    "  int _selectedIndex = 0;",
    "  NavigationRailLabelType labelType = NavigationRailLabelType.all;",
    "  bool showLeading = false;",
    "  bool showTrailing = false;",
    "  double groupAlignment = -1.0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Row(",
    "        children: <Widget>[",
    "          NavigationRail(",
    "            selectedIndex: _selectedIndex,",
    "            groupAlignment: groupAlignment,",
    "            onDestinationSelected: (int index) {",
    "              setState(() {",
    "                _selectedIndex = index;",
    "              });",
    "            },",
    "            labelType: labelType,",
    "            leading: showLeading",
    "                ? FloatingActionButton(",
    "                    elevation: 0,",
    "                    onPressed: () {",
    "                      // Add your onPressed code here!",
    "                    },",
    "                    child: const Icon(Icons.add),",
    "                  )",
    "                : const SizedBox(),",
    "            trailing: showTrailing",
    "                ? IconButton(",
    "                    onPressed: () {",
    "                      // Add your onPressed code here!",
    "                    },",
    "                    icon: const Icon(Icons.more_horiz_rounded),",
    "                  )",
    "                : const SizedBox(),",
    "            destinations: const <NavigationRailDestination>[",
    "              NavigationRailDestination(",
    "                icon: Icon(Icons.favorite_border),",
    "                selectedIcon: Icon(Icons.favorite),",
    "                label: Text('First'),",
    "              ),",
    "              NavigationRailDestination(",
    "                icon: Icon(Icons.bookmark_border),",
    "                selectedIcon: Icon(Icons.book),",
    "                label: Text('Second'),",
    "              ),",
    "              NavigationRailDestination(",
    "                icon: Icon(Icons.star_border),",
    "                selectedIcon: Icon(Icons.star),",
    "                label: Text('Third'),",
    "              ),",
    "            ],",
    "          ),",
    "          const VerticalDivider(thickness: 1, width: 1),",
    "          // This is the main content.",
    "          Expanded(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('selectedIndex: $_selectedIndex'),",
    "                const SizedBox(height: 20),",
    "                Text('Label type: ${labelType.name}'),",
    "                const SizedBox(height: 10),",
    "                OverflowBar(",
    "                  spacing: 10.0,",
    "                  children: <Widget>[",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          labelType = NavigationRailLabelType.none;",
    "                        });",
    "                      },",
    "                      child: const Text('None'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          labelType = NavigationRailLabelType.selected;",
    "                        });",
    "                      },",
    "                      child: const Text('Selected'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          labelType = NavigationRailLabelType.all;",
    "                        });",
    "                      },",
    "                      child: const Text('All'),",
    "                    ),",
    "                  ],",
    "                ),",
    "                const SizedBox(height: 20),",
    "                Text('Group alignment: $groupAlignment'),",
    "                const SizedBox(height: 10),",
    "                OverflowBar(",
    "                  spacing: 10.0,",
    "                  children: <Widget>[",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          groupAlignment = -1.0;",
    "                        });",
    "                      },",
    "                      child: const Text('Top'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          groupAlignment = 0.0;",
    "                        });",
    "                      },",
    "                      child: const Text('Center'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          groupAlignment = 1.0;",
    "                        });",
    "                      },",
    "                      child: const Text('Bottom'),",
    "                    ),",
    "                  ],",
    "                ),",
    "                const SizedBox(height: 20),",
    "                OverflowBar(",
    "                  spacing: 10.0,",
    "                  children: <Widget>[",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          showLeading = !showLeading;",
    "                        });",
    "                      },",
    "                      child: Text(showLeading ? 'Hide Leading' : 'Show Leading'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          showTrailing = !showTrailing;",
    "                        });",
    "                      },",
    "                      child: Text(showTrailing ? 'Hide Trailing' : 'Show Trailing'),",
    "                    ),",
    "                  ],",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationRail Example"
},
"Flutter NavigationRail Extended Example": {
  "prefix": "flutter-navigation-rail-extended",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:ui';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationRail.extendedAnimation].",
    "",
    "void main() => runApp(const ExtendedAnimationExampleApp());",
    "",
    "class ExtendedAnimationExampleApp extends StatelessWidget {",
    "  const ExtendedAnimationExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(",
    "        body: MyNavigationRail(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MyNavigationRail extends StatefulWidget {",
    "  const MyNavigationRail({super.key});",
    "",
    "  @override",
    "  State<MyNavigationRail> createState() => _MyNavigationRailState();",
    "}",
    "",
    "class _MyNavigationRailState extends State<MyNavigationRail> {",
    "  int _selectedIndex = 0;",
    "  bool _extended = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: <Widget>[",
    "        NavigationRail(",
    "          selectedIndex: _selectedIndex,",
    "          extended: _extended,",
    "          leading: MyNavigationRailFab(onPressed: () {",
    "            setState(() {",
    "              _extended = !_extended;",
    "            });",
    "          }),",
    "          onDestinationSelected: (int index) {",
    "            setState(() {",
    "              _selectedIndex = index;",
    "            });",
    "          },",
    "          labelType: NavigationRailLabelType.none,",
    "          destinations: const <NavigationRailDestination>[",
    "            NavigationRailDestination(",
    "              icon: Icon(Icons.favorite_border),",
    "              selectedIcon: Icon(Icons.favorite),",
    "              label: Text('First'),",
    "            ),",
    "            NavigationRailDestination(",
    "              icon: Icon(Icons.bookmark_border),",
    "              selectedIcon: Icon(Icons.book),",
    "              label: Text('Second'),",
    "            ),",
    "            NavigationRailDestination(",
    "              icon: Icon(Icons.star_border),",
    "              selectedIcon: Icon(Icons.star),",
    "              label: Text('Third'),",
    "            ),",
    "          ],",
    "        ),",
    "        const VerticalDivider(thickness: 1, width: 1),",
    "        // This is the main content.",
    "        Expanded(",
    "          child: Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Tap on FloatingActionButton to expand'),",
    "                const SizedBox(height: 20),",
    "                Text('selectedIndex: $_selectedIndex'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class MyNavigationRailFab extends StatelessWidget {",
    "  const MyNavigationRailFab({super.key, this.onPressed});",
    "",
    "  final VoidCallback? onPressed;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Animation<double> animation = NavigationRail.extendedAnimation(context);",
    "    return AnimatedBuilder(",
    "      animation: animation,",
    "      builder: (BuildContext context, Widget? child) {",
    "        // The extended fab has a shorter height than the regular fab.",
    "        return Container(",
    "          height: 56,",
    "          padding: EdgeInsets.symmetric(",
    "            vertical: lerpDouble(0, 6, animation.value)!,",
    "          ),",
    "          child: animation.value == 0",
    "              ? FloatingActionButton(",
    "                  onPressed: onPressed,",
    "                  child: const Icon(Icons.add),",
    "                )",
    "              : Align(",
    "                  alignment: AlignmentDirectional.centerStart,",
    "                  widthFactor: animation.value,",
    "                  child: Padding(",
    "                    padding: const EdgeInsetsDirectional.only(start: 8),",
    "                    child: FloatingActionButton.extended(",
    "                      icon: const Icon(Icons.add),",
    "                      label: const Text('CREATE'),",
    "                      onPressed: onPressed,",
    "                    ),",
    "                  ),",
    "                ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationRail Extended Example"
},
"Flutter Outlined Example": {
  "prefix": "flutter-outlined-button",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [OutlinedButton].",
    "",
    "void main() => runApp(const OutlinedButtonExampleApp());",
    "",
    "class OutlinedButtonExampleApp extends StatelessWidget {",
    "  const OutlinedButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('OutlinedButton Sample')),",
    "        body: const Center(",
    "          child: OutlinedButtonExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class OutlinedButtonExample extends StatelessWidget {",
    "  const OutlinedButtonExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OutlinedButton(",
    "      onPressed: () {",
    "        debugPrint('Received click');",
    "      },",
    "      child: const Text('Click Me'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Outlined Example"
},
"Flutter Page Transition Theme Example": {
  "prefix": "flutter-page-transition-theme",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PageTransitionsTheme].",
    "",
    "void main() => runApp(const PageTransitionsThemeApp());",
    "",
    "class PageTransitionsThemeApp extends StatelessWidget {",
    "  const PageTransitionsThemeApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        useMaterial3: true,",
    "        // Defines the page transition animations used by MaterialPageRoute",
    "        // for different target platforms.",
    "        // Non-specified target platforms will default to",
    "        // ZoomPageTransitionsBuilder().",
    "        pageTransitionsTheme: const PageTransitionsTheme(",
    "          builders: <TargetPlatform, PageTransitionsBuilder>{",
    "            TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),",
    "            TargetPlatform.linux: OpenUpwardsPageTransitionsBuilder(),",
    "            TargetPlatform.macOS: FadeUpwardsPageTransitionsBuilder(),",
    "          },",
    "        ),",
    "      ),",
    "      home: const HomePage(),",
    "    );",
    "  }",
    "}",
    "",
    "class HomePage extends StatelessWidget {",
    "  const HomePage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.blueGrey,",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).push(",
    "              MaterialPageRoute<SecondPage>(",
    "                builder: (BuildContext context) => const SecondPage(),",
    "              ),",
    "            );",
    "          },",
    "          child: const Text('To SecondPage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SecondPage extends StatelessWidget {",
    "  const SecondPage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.purple[200],",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).pop();",
    "          },",
    "          child: const Text('Back to HomePage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Page Transition Theme Example"
},
"Flutter Page Transition Zoom Example": {
  "prefix": "flutter-page-transition-zoom",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PageTransitionsTheme].",
    "",
    "void main() => runApp(const PageTransitionsThemeApp());",
    "",
    "class PageTransitionsThemeApp extends StatelessWidget {",
    "  const PageTransitionsThemeApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        useMaterial3: true,",
    "        pageTransitionsTheme: const PageTransitionsTheme(",
    "          builders: <TargetPlatform, PageTransitionsBuilder>{",
    "            TargetPlatform.android: ZoomPageTransitionsBuilder(",
    "              allowSnapshotting: false,",
    "            ),",
    "          },",
    "        ),",
    "      ),",
    "      home: const HomePage(),",
    "    );",
    "  }",
    "}",
    "",
    "class HomePage extends StatelessWidget {",
    "  const HomePage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.blueGrey,",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).push(",
    "              MaterialPageRoute<SecondPage>(",
    "                builder: (BuildContext context) => const SecondPage(),",
    "              ),",
    "            );",
    "          },",
    "          child: const Text('To SecondPage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SecondPage extends StatelessWidget {",
    "  const SecondPage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.purple[200],",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).pop();",
    "          },",
    "          child: const Text('Back to HomePage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Page Transition Zoom Example"
},
"Flutter Popup Menu Example": {
  "prefix": "flutter-popup-menu",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PopupMenuButton].",
    "",
    "// This is the type used by the popup menu below.",
    "enum SampleItem { itemOne, itemTwo, itemThree }",
    "",
    "void main() => runApp(const PopupMenuApp());",
    "",
    "class PopupMenuApp extends StatelessWidget {",
    "  const PopupMenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: PopupMenuExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class PopupMenuExample extends StatefulWidget {",
    "  const PopupMenuExample({super.key});",
    "",
    "  @override",
    "  State<PopupMenuExample> createState() => _PopupMenuExampleState();",
    "}",
    "",
    "class _PopupMenuExampleState extends State<PopupMenuExample> {",
    "  SampleItem? selectedMenu;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('PopupMenuButton')),",
    "      body: Center(",
    "        child: PopupMenuButton<SampleItem>(",
    "          initialValue: selectedMenu,",
    "          // Callback that sets the selected popup menu item.",
    "          onSelected: (SampleItem item) {",
    "            setState(() {",
    "              selectedMenu = item;",
    "            });",
    "          },",
    "          itemBuilder: (BuildContext context) => <PopupMenuEntry<SampleItem>>[",
    "            const PopupMenuItem<SampleItem>(",
    "              value: SampleItem.itemOne,",
    "              child: Text('Item 1'),",
    "            ),",
    "            const PopupMenuItem<SampleItem>(",
    "              value: SampleItem.itemTwo,",
    "              child: Text('Item 2'),",
    "            ),",
    "            const PopupMenuItem<SampleItem>(",
    "              value: SampleItem.itemThree,",
    "              child: Text('Item 3'),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Popup Menu Example"
},
"Flutter Circular Progress Indicator Example": {
  "prefix": "flutter-circular-progress-indicator",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [CircularProgressIndicator].",
    "",
    "void main() => runApp(const ProgressIndicatorApp());",
    "",
    "class ProgressIndicatorApp extends StatelessWidget {",
    "  const ProgressIndicatorApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ProgressIndicatorExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ProgressIndicatorExample extends StatefulWidget {",
    "  const ProgressIndicatorExample({super.key});",
    "",
    "  @override",
    "  State<ProgressIndicatorExample> createState() => _ProgressIndicatorExampleState();",
    "}",
    "",
    "class _ProgressIndicatorExampleState extends State<ProgressIndicatorExample> with TickerProviderStateMixin {",
    "  late AnimationController controller;",
    "",
    "  @override",
    "  void initState() {",
    "    controller = AnimationController(",
    "      /// [AnimationController]s can be created with `vsync: this` because of",
    "      /// [TickerProviderStateMixin].",
    "      vsync: this,",
    "      duration: const Duration(seconds: 5),",
    "    )..addListener(() {",
    "        setState(() {});",
    "      });",
    "    controller.repeat(reverse: true);",
    "    super.initState();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Padding(",
    "        padding: const EdgeInsets.all(20.0),",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            Text(",
    "              'Circular progress indicator with a fixed color',",
    "              style: Theme.of(context).textTheme.titleLarge,",
    "            ),",
    "            CircularProgressIndicator(",
    "              value: controller.value,",
    "              semanticsLabel: 'Circular progress indicator',",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Circular Progress Indicator Example"
},
"Flutter Linear Progress Indicator Example": {
  "prefix": "flutter-linear-progress-indicator",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [LinearProgressIndicator].",
    "",
    "void main() => runApp(const ProgressIndicatorApp());",
    "",
    "class ProgressIndicatorApp extends StatelessWidget {",
    "  const ProgressIndicatorApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ProgressIndicatorExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ProgressIndicatorExample extends StatefulWidget {",
    "  const ProgressIndicatorExample({super.key});",
    "",
    "  @override",
    "  State<ProgressIndicatorExample> createState() => _ProgressIndicatorExampleState();",
    "}",
    "",
    "class _ProgressIndicatorExampleState extends State<ProgressIndicatorExample> with TickerProviderStateMixin {",
    "  late AnimationController controller;",
    "",
    "  @override",
    "  void initState() {",
    "    controller = AnimationController(",
    "      /// [AnimationController]s can be created with `vsync: this` because of",
    "      /// [TickerProviderStateMixin].",
    "      vsync: this,",
    "      duration: const Duration(seconds: 5),",
    "    )..addListener(() {",
    "        setState(() {});",
    "      });",
    "    controller.repeat(reverse: true);",
    "    super.initState();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Padding(",
    "        padding: const EdgeInsets.all(20.0),",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            const Text(",
    "              'Linear progress indicator with a fixed color',",
    "              style: TextStyle(fontSize: 20),",
    "            ),",
    "            LinearProgressIndicator(",
    "              value: controller.value,",
    "              semanticsLabel: 'Linear progress indicator',",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Linear Progress Indicator Example"
},
"Flutter Radio with Builder Example": {
  "prefix": "flutter-radio-with-builder",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Radio.toggleable].",
    "",
    "void main() => runApp(const ToggleableExampleApp());",
    "",
    "class ToggleableExampleApp extends StatelessWidget {",
    "  const ToggleableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Radio Sample')),",
    "        body: const ToggleableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ToggleableExample extends StatefulWidget {",
    "  const ToggleableExample({super.key});",
    "",
    "  @override",
    "  State<ToggleableExample> createState() => _ToggleableExampleState();",
    "}",
    "",
    "class _ToggleableExampleState extends State<ToggleableExample> {",
    "  int? groupValue;",
    "  static const List<String> selections = <String>[",
    "    'Hercules Mulligan',",
    "    'Eliza Hamilton',",
    "    'Philip Schuyler',",
    "    'Maria Reynolds',",
    "    'Samuel Seabury',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: ListView.builder(",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return Row(",
    "            mainAxisSize: MainAxisSize.min,",
    "            children: <Widget>[",
    "              Radio<int>(",
    "                  value: index,",
    "                  groupValue: groupValue,",
    "                  // TRY THIS: Try setting the toggleable value to false and",
    "                  // see how that changes the behavior of the widget.",
    "                  toggleable: true,",
    "                  onChanged: (int? value) {",
    "                    setState(() {",
    "                      groupValue = value;",
    "                    });",
    "                  }),",
    "              Text(selections[index]),",
    "            ],",
    "          );",
    "        },",
    "        itemCount: selections.length,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Radio with Builder Example"
},
"Flutter Radio  Example": {
  "prefix": "flutter-radio",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Radio].",
    "",
    "void main() => runApp(const RadioExampleApp());",
    "",
    "class RadioExampleApp extends StatelessWidget {",
    "  const RadioExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Radio Sample')),",
    "        body: const Center(",
    "          child: RadioExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "enum SingingCharacter { lafayette, jefferson }",
    "",
    "class RadioExample extends StatefulWidget {",
    "  const RadioExample({super.key});",
    "",
    "  @override",
    "  State<RadioExample> createState() => _RadioExampleState();",
    "}",
    "",
    "class _RadioExampleState extends State<RadioExample> {",
    "  SingingCharacter? _character = SingingCharacter.lafayette;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        ListTile(",
    "          title: const Text('Lafayette'),",
    "          leading: Radio<SingingCharacter>(",
    "            value: SingingCharacter.lafayette,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "        ListTile(",
    "          title: const Text('Thomas Jefferson'),",
    "          leading: Radio<SingingCharacter>(",
    "            value: SingingCharacter.jefferson,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Radio  Example"
},
"Flutter RadioListTileCustom": {
  "prefix": "flutter-listtile-radio-custom",
  "body": [
    "",
    "import 'package:flutter/gestures.dart';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom labeled radio.",
    "",
    "void main() => runApp(const LabeledRadioApp());",
    "",
    "class LabeledRadioApp extends StatelessWidget {",
    "  const LabeledRadioApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Custom Labeled Radio Sample')),",
    "        body: const LabeledRadioExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LinkedLabelRadio extends StatelessWidget {",
    "  const LinkedLabelRadio({",
    "    super.key,",
    "    required this.label,",
    "    required this.padding,",
    "    required this.groupValue,",
    "    required this.value,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final String label;",
    "  final EdgeInsets padding;",
    "  final bool groupValue;",
    "  final bool value;",
    "  final ValueChanged<bool> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: padding,",
    "      child: Row(",
    "        children: <Widget>[",
    "          Radio<bool>(",
    "            groupValue: groupValue,",
    "            value: value,",
    "            onChanged: (bool? newValue) {",
    "              onChanged(newValue!);",
    "            },",
    "          ),",
    "          RichText(",
    "            text: TextSpan(",
    "              text: label,",
    "              style: TextStyle(",
    "                color: Theme.of(context).colorScheme.primary,",
    "                decoration: TextDecoration.underline,",
    "              ),",
    "              recognizer: TapGestureRecognizer()",
    "                ..onTap = () {",
    "                  debugPrint('Label has been tapped.');",
    "                },",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledRadioExample extends StatefulWidget {",
    "  const LabeledRadioExample({super.key});",
    "",
    "  @override",
    "  State<LabeledRadioExample> createState() => _LabeledRadioExampleState();",
    "}",
    "",
    "class _LabeledRadioExampleState extends State<LabeledRadioExample> {",
    "  bool _isRadioSelected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          LinkedLabelRadio(",
    "            label: 'First tappable label text',",
    "            padding: const EdgeInsets.symmetric(horizontal: 5.0),",
    "            value: true,",
    "            groupValue: _isRadioSelected,",
    "            onChanged: (bool newValue) {",
    "              setState(() {",
    "                _isRadioSelected = newValue;",
    "              });",
    "            },",
    "          ),",
    "          LinkedLabelRadio(",
    "            label: 'Second tappable label text',",
    "            padding: const EdgeInsets.symmetric(horizontal: 5.0),",
    "            value: false,",
    "            groupValue: _isRadioSelected,",
    "            onChanged: (bool newValue) {",
    "              setState(() {",
    "                _isRadioSelected = newValue;",
    "              });",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RadioListTileCustom"
},
"Flutter RadioListTile Builder": {
  "prefix": "flutter-listtile-radio-builder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RadioListTile.toggleable].",
    "",
    "void main() => runApp(const RadioListTileApp());",
    "",
    "class RadioListTileApp extends StatelessWidget {",
    "  const RadioListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RadioListTile.toggleable Sample')),",
    "        body: const RadioListTileExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RadioListTileExample extends StatefulWidget {",
    "  const RadioListTileExample({super.key});",
    "",
    "  @override",
    "  State<RadioListTileExample> createState() => _RadioListTileExampleState();",
    "}",
    "",
    "class _RadioListTileExampleState extends State<RadioListTileExample> {",
    "  int? groupValue;",
    "  static const List<String> selections = <String>[",
    "    'Hercules Mulligan',",
    "    'Eliza Hamilton',",
    "    'Philip Schuyler',",
    "    'Maria Reynolds',",
    "    'Samuel Seabury',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: ListView.builder(",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return RadioListTile<int>(",
    "            value: index,",
    "            groupValue: groupValue,",
    "            toggleable: true,",
    "            title: Text(selections[index]),",
    "            onChanged: (int? value) {",
    "              setState(() {",
    "                groupValue = value;",
    "              });",
    "            },",
    "          );",
    "        },",
    "        itemCount: selections.length,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RadioListTile Builder"
},
"Flutter RadioList Tile Builder": {
  "prefix": "flutter-radio-listtile-builder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RadioListTile.toggleable].",
    "",
    "void main() => runApp(const RadioListTileApp());",
    "",
    "class RadioListTileApp extends StatelessWidget {",
    "  const RadioListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RadioListTile.toggleable Sample')),",
    "        body: const RadioListTileExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RadioListTileExample extends StatefulWidget {",
    "  const RadioListTileExample({super.key});",
    "",
    "  @override",
    "  State<RadioListTileExample> createState() => _RadioListTileExampleState();",
    "}",
    "",
    "class _RadioListTileExampleState extends State<RadioListTileExample> {",
    "  int? groupValue;",
    "  static const List<String> selections = <String>[",
    "    'Hercules Mulligan',",
    "    'Eliza Hamilton',",
    "    'Philip Schuyler',",
    "    'Maria Reynolds',",
    "    'Samuel Seabury',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: ListView.builder(",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return RadioListTile<int>(",
    "            value: index,",
    "            groupValue: groupValue,",
    "            toggleable: true,",
    "            title: Text(selections[index]),",
    "            onChanged: (int? value) {",
    "              setState(() {",
    "                groupValue = value;",
    "              });",
    "            },",
    "          );",
    "        },",
    "        itemCount: selections.length,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RadioList Tile Builder"
},
"Flutter RangeSlider Example": {
  "prefix": "flutter-range-slider",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RangeSlider].",
    "",
    "void main() => runApp(const RangeSliderExampleApp());",
    "",
    "class RangeSliderExampleApp extends StatelessWidget {",
    "  const RangeSliderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RangeSlider Sample')),",
    "        body: const RangeSliderExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RangeSliderExample extends StatefulWidget {",
    "  const RangeSliderExample({super.key});",
    "",
    "  @override",
    "  State<RangeSliderExample> createState() => _RangeSliderExampleState();",
    "}",
    "",
    "class _RangeSliderExampleState extends State<RangeSliderExample> {",
    "  RangeValues _currentRangeValues = const RangeValues(40, 80);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RangeSlider(",
    "      values: _currentRangeValues,",
    "      max: 100,",
    "      divisions: 5,",
    "      labels: RangeLabels(",
    "        _currentRangeValues.start.round().toString(),",
    "        _currentRangeValues.end.round().toString(),",
    "      ),",
    "      onChanged: (RangeValues values) {",
    "        setState(() {",
    "          _currentRangeValues = values;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RangeSlider Example"
},
"Flutter RefreshIndicator Example": {
  "prefix": "flutter-refresh-indicator",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RefreshIndicator].",
    "",
    "void main() => runApp(const RefreshIndicatorExampleApp());",
    "",
    "class RefreshIndicatorExampleApp extends StatelessWidget {",
    "  const RefreshIndicatorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RefreshIndicatorExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class RefreshIndicatorExample extends StatefulWidget {",
    "  const RefreshIndicatorExample({super.key});",
    "",
    "  @override",
    "  State<RefreshIndicatorExample> createState() => _RefreshIndicatorExampleState();",
    "}",
    "",
    "class _RefreshIndicatorExampleState extends State<RefreshIndicatorExample> {",
    "  final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey = GlobalKey<RefreshIndicatorState>();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('RefreshIndicator Sample'),",
    "      ),",
    "      body: RefreshIndicator(",
    "        key: _refreshIndicatorKey,",
    "        color: Colors.white,",
    "        backgroundColor: Colors.blue,",
    "        strokeWidth: 4.0,",
    "        onRefresh: () async {",
    "          // Replace this delay with the code to be executed during refresh",
    "          // and return a Future when code finishes execution.",
    "          return Future<void>.delayed(const Duration(seconds: 3));",
    "        },",
    "        // Pull from top to show refresh indicator.",
    "        child: ListView.builder(",
    "          itemCount: 25,",
    "          itemBuilder: (BuildContext context, int index) {",
    "            return ListTile(",
    "              title: Text('Item $index'),",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton.extended(",
    "        onPressed: () {",
    "          // Show refresh indicator programmatically on button tap.",
    "          _refreshIndicatorKey.currentState?.show();",
    "        },",
    "        icon: const Icon(Icons.refresh),",
    "        label: const Text('Show Indicator'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RefreshIndicator Example"
},
"Flutter ReorderableListView Example": {
  "prefix": "flutter-reorderable-listview",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ReorderableListView].",
    "",
    "void main() => runApp(const ReorderableApp());",
    "",
    "class ReorderableApp extends StatelessWidget {",
    "  const ReorderableApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ReorderableListView Sample')),",
    "        body: const ReorderableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ReorderableExample extends StatefulWidget {",
    "  const ReorderableExample({super.key});",
    "",
    "  @override",
    "  State<ReorderableExample> createState() => _ReorderableListViewExampleState();",
    "}",
    "",
    "class _ReorderableListViewExampleState extends State<ReorderableExample> {",
    "  final List<int> _items = List<int>.generate(50, (int index) => index);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ColorScheme colorScheme = Theme.of(context).colorScheme;",
    "    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);",
    "    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);",
    "",
    "    return ReorderableListView(",
    "      padding: const EdgeInsets.symmetric(horizontal: 40),",
    "      children: <Widget>[",
    "        for (int index = 0; index < _items.length; index += 1)",
    "          ListTile(",
    "            key: Key('$index'),",
    "            tileColor: _items[index].isOdd ? oddItemColor : evenItemColor,",
    "            title: Text('Item ${_items[index]}'),",
    "          ),",
    "      ],",
    "      onReorder: (int oldIndex, int newIndex) {",
    "        setState(() {",
    "          if (oldIndex < newIndex) {",
    "            newIndex -= 1;",
    "          }",
    "          final int item = _items.removeAt(oldIndex);",
    "          _items.insert(newIndex, item);",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ReorderableListView Example"
},
"Flutter showmaterial banner Example": {
  "prefix": "flutter-show-material-banner",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaffoldMessengerState.showMaterialBanner].",
    "",
    "void main() => runApp(const ShowMaterialBannerExampleApp());",
    "",
    "class ShowMaterialBannerExampleApp extends StatelessWidget {",
    "  const ShowMaterialBannerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ScaffoldMessengerState Sample')),",
    "        body: const Center(",
    "          child: ShowMaterialBannerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ShowMaterialBannerExample extends StatelessWidget {",
    "  const ShowMaterialBannerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OutlinedButton(",
    "      onPressed: () {",
    "        ScaffoldMessenger.of(context).showMaterialBanner(",
    "          const MaterialBanner(",
    "            content: Text('This is a MaterialBanner'),",
    "            actions: <Widget>[",
    "              TextButton(",
    "                onPressed: null,",
    "                child: Text('DISMISS'),",
    "              ),",
    "            ],",
    "          ),",
    "        );",
    "      },",
    "      child: const Text('Show MaterialBanner'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showmaterial banner Example"
},
"Flutter showsnackbar banner Example": {
  "prefix": "flutter-show-snackbar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaffoldMessengerState.showSnackBar].",
    "",
    "void main() => runApp(const ShowSnackBarExampleApp());",
    "",
    "class ShowSnackBarExampleApp extends StatelessWidget {",
    "  const ShowSnackBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ScaffoldMessengerState Sample')),",
    "        body: const Center(",
    "          child: ShowSnackBarExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ShowSnackBarExample extends StatelessWidget {",
    "  const ShowSnackBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OutlinedButton(",
    "      onPressed: () {",
    "        ScaffoldMessenger.of(context).showSnackBar(",
    "          const SnackBar(",
    "            content: Text('A SnackBar has been shown.'),",
    "          ),",
    "        );",
    "      },",
    "      child: const Text('Show SnackBar'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showsnackbar banner Example"
},
"Flutter show Bottom Sheet Example": {
  "prefix": "flutter-show-bottom-sheet",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaffoldState.showBottomSheet].",
    "",
    "void main() => runApp(const ShowBottomSheetExampleApp());",
    "",
    "class ShowBottomSheetExampleApp extends StatelessWidget {",
    "  const ShowBottomSheetExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ScaffoldState Sample')),",
    "        body: const ShowBottomSheetExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ShowBottomSheetExample extends StatelessWidget {",
    "  const ShowBottomSheetExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: ElevatedButton(",
    "        child: const Text('showBottomSheet'),",
    "        onPressed: () {",
    "          Scaffold.of(context).showBottomSheet<void>(",
    "            (BuildContext context) {",
    "              return Container(",
    "                height: 200,",
    "                color: Colors.amber,",
    "                child: Center(",
    "                  child: Column(",
    "                    mainAxisAlignment: MainAxisAlignment.center,",
    "                    mainAxisSize: MainAxisSize.min,",
    "                    children: <Widget>[",
    "                      const Text('BottomSheet'),",
    "                      ElevatedButton(",
    "                        child: const Text('Close BottomSheet'),",
    "                        onPressed: () {",
    "                          Navigator.pop(context);",
    "                        },",
    "                      ),",
    "                    ],",
    "                  ),",
    "                ),",
    "              );",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter show Bottom Sheet Example"
},
"Flutter drawer Example": {
  "prefix": "flutter-drawer",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Scaffold.drawer].",
    "",
    "void main() => runApp(const DrawerExampleApp());",
    "",
    "class DrawerExampleApp extends StatelessWidget {",
    "  const DrawerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: DrawerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class DrawerExample extends StatefulWidget {",
    "  const DrawerExample({super.key});",
    "",
    "  @override",
    "  State<DrawerExample> createState() => _DrawerExampleState();",
    "}",
    "",
    "class _DrawerExampleState extends State<DrawerExample> {",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "",
    "  void _openDrawer() {",
    "    _scaffoldKey.currentState!.openDrawer();",
    "  }",
    "",
    "  void _closeDrawer() {",
    "    Navigator.of(context).pop();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      key: _scaffoldKey,",
    "      appBar: AppBar(title: const Text('Drawer Demo')),",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: _openDrawer,",
    "          child: const Text('Open Drawer'),",
    "        ),",
    "      ),",
    "      drawer: Drawer(",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text('This is the Drawer'),",
    "              ElevatedButton(",
    "                onPressed: _closeDrawer,",
    "                child: const Text('Close Drawer'),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "      // Disable opening the drawer with a swipe gesture.",
    "      drawerEnableOpenDragGesture: true,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter drawer Example"
},
"Flutter  End Drawer Example": {
  "prefix": "flutter-end-drawer",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Scaffold.endDrawer].",
    "",
    "void main() => runApp(const EndDrawerExampleApp());",
    "",
    "class EndDrawerExampleApp extends StatelessWidget {",
    "  const EndDrawerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: EndDrawerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class EndDrawerExample extends StatefulWidget {",
    "  const EndDrawerExample({super.key});",
    "",
    "  @override",
    "  State<EndDrawerExample> createState() => _EndDrawerExampleState();",
    "}",
    "",
    "class _EndDrawerExampleState extends State<EndDrawerExample> {",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "",
    "  void _openEndDrawer() {",
    "    _scaffoldKey.currentState!.openEndDrawer();",
    "  }",
    "",
    "  void _closeEndDrawer() {",
    "    Navigator.of(context).pop();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      key: _scaffoldKey,",
    "      appBar: AppBar(title: const Text('Drawer Demo')),",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: _openEndDrawer,",
    "          child: const Text('Open End Drawer'),",
    "        ),",
    "      ),",
    "      endDrawer: Drawer(",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text('This is the Drawer'),",
    "              ElevatedButton(",
    "                onPressed: _closeEndDrawer,",
    "                child: const Text('Close Drawer'),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "      // Disable opening the end drawer with a swipe gesture.",
    "      endDrawerEnableOpenDragGesture: false,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  End Drawer Example"
},
"Flutter  scrollbar Example": {
  "prefix": "flutter-scrollbar",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Scrollbar].",
    "",
    "void main() => runApp(const ScrollbarExampleApp());",
    "",
    "class ScrollbarExampleApp extends StatelessWidget {",
    "  const ScrollbarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Scrollbar Sample')),",
    "        body: const ScrollbarExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ScrollbarExample extends StatefulWidget {",
    "  const ScrollbarExample({super.key});",
    "",
    "  @override",
    "  State<ScrollbarExample> createState() => _ScrollbarExampleState();",
    "}",
    "",
    "class _ScrollbarExampleState extends State<ScrollbarExample> {",
    "  final ScrollController _controllerOne = ScrollController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scrollbar(",
    "      controller: _controllerOne,",
    "      thumbVisibility: true,",
    "      child: GridView.builder(",
    "        controller: _controllerOne,",
    "        itemCount: 120,",
    "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return Center(",
    "            child: Text('item $index'),",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  scrollbar Example"
},
"Flutter Search Anchor  Example": {
  "prefix": "flutter-search-anchor",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SearchAnchor.bar].",
    "",
    "void main() => runApp(const SearchBarApp());",
    "",
    "class SearchBarApp extends StatefulWidget {",
    "  const SearchBarApp({super.key});",
    "",
    "  @override",
    "  State<SearchBarApp> createState() => _SearchBarAppState();",
    "}",
    "",
    "class _SearchBarAppState extends State<SearchBarApp> {",
    "  Color? selectedColorSeed;",
    "  List<ColorLabel> searchHistory = <ColorLabel>[];",
    "",
    "  Iterable<Widget> getHistoryList(SearchController controller) {",
    "    return searchHistory.map(",
    "      (ColorLabel color) => ListTile(",
    "        leading: const Icon(Icons.history),",
    "        title: Text(color.label),",
    "        trailing: IconButton(",
    "          icon: const Icon(Icons.call_missed),",
    "          onPressed: () {",
    "            controller.text = color.label;",
    "            controller.selection = TextSelection.collapsed(offset: controller.text.length);",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Iterable<Widget> getSuggestions(SearchController controller) {",
    "    final String input = controller.value.text;",
    "    return ColorLabel.values.where((ColorLabel color) => color.label.contains(input)).map(",
    "          (ColorLabel filteredColor) => ListTile(",
    "            leading: CircleAvatar(backgroundColor: filteredColor.color),",
    "            title: Text(filteredColor.label),",
    "            trailing: IconButton(",
    "              icon: const Icon(Icons.call_missed),",
    "              onPressed: () {",
    "                controller.text = filteredColor.label;",
    "                controller.selection = TextSelection.collapsed(offset: controller.text.length);",
    "              },",
    "            ),",
    "            onTap: () {",
    "              controller.closeView(filteredColor.label);",
    "              handleSelection(filteredColor);",
    "            },",
    "          ),",
    "        );",
    "  }",
    "",
    "  void handleSelection(ColorLabel selectedColor) {",
    "    setState(() {",
    "      selectedColorSeed = selectedColor.color;",
    "      if (searchHistory.length >= 5) {",
    "        searchHistory.removeLast();",
    "      }",
    "      searchHistory.insert(0, selectedColor);",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData themeData = ThemeData(useMaterial3: true, colorSchemeSeed: selectedColorSeed);",
    "    final ColorScheme colors = themeData.colorScheme;",
    "",
    "    return MaterialApp(",
    "      theme: themeData,",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Search Bar Sample')),",
    "        body: Align(",
    "          alignment: Alignment.topCenter,",
    "          child: Column(",
    "            children: <Widget>[",
    "              SearchAnchor.bar(",
    "                barHintText: 'Search colors',",
    "                suggestionsBuilder: (BuildContext context, SearchController controller) {",
    "                  if (controller.text.isEmpty) {",
    "                    if (searchHistory.isNotEmpty) {",
    "                      return getHistoryList(controller);",
    "                    }",
    "                    return <Widget>[Center(child: Text('No search history.', style: TextStyle(color: colors.outline)))];",
    "                  }",
    "                  return getSuggestions(controller);",
    "                },",
    "              ),",
    "              cardSize,",
    "              Card(color: colors.primary, child: cardSize),",
    "              Card(color: colors.onPrimary, child: cardSize),",
    "              Card(color: colors.primaryContainer, child: cardSize),",
    "              Card(color: colors.onPrimaryContainer, child: cardSize),",
    "              Card(color: colors.secondary, child: cardSize),",
    "              Card(color: colors.onSecondary, child: cardSize),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "SizedBox cardSize = const SizedBox(",
    "  width: 80,",
    "  height: 30,",
    ");",
    "",
    "enum ColorLabel {",
    "  red('red', Colors.red),",
    "  orange('orange', Colors.orange),",
    "  yellow('yellow', Colors.yellow),",
    "  green('green', Colors.green),",
    "  blue('blue', Colors.blue),",
    "  indigo('indigo', Colors.indigo),",
    "  violet('violet', Color(0xFF8F00FF)),",
    "  purple('purple', Colors.purple),",
    "  pink('pink', Colors.pink),",
    "  silver('silver', Color(0xFF808080)),",
    "  gold('gold', Color(0xFFFFD700)),",
    "  beige('beige', Color(0xFFF5F5DC)),",
    "  brown('brown', Colors.brown),",
    "  grey('grey', Colors.grey),",
    "  black('black', Colors.black),",
    "  white('white', Colors.white);",
    "",
    "  const ColorLabel(this.label, this.color);",
    "  final String label;",
    "  final Color color;",
    "}",
    ""
  ],
  "description": "Flutter Search Anchor  Example"
},
"Flutter Search Anchor with Debounce Example": {
  "prefix": "flutter-search-anchor-async",
  "body": [
    "",
    "import 'dart:async';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SearchAnchor] that demonstrates fetching the",
    "/// suggestions asynchronously and debouncing the network calls.",
    "",
    "const Duration fakeAPIDuration = Duration(seconds: 1);",
    "const Duration debounceDuration = Duration(milliseconds: 500);",
    "",
    "void main() => runApp(const SearchAnchorAsyncExampleApp());",
    "",
    "class SearchAnchorAsyncExampleApp extends StatelessWidget {",
    "  const SearchAnchorAsyncExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('SearchAnchor - async and debouncing'),",
    "        ),",
    "        body: const Center(",
    "          child: _AsyncSearchAnchor(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _AsyncSearchAnchor extends StatefulWidget {",
    "  const _AsyncSearchAnchor();",
    "",
    "  @override",
    "  State<_AsyncSearchAnchor > createState() => _AsyncSearchAnchorState();",
    "}",
    "",
    "class _AsyncSearchAnchorState extends State<_AsyncSearchAnchor > {",
    "  // The query currently being searched for. If null, there is no pending",
    "  // request.",
    "  String? _currentQuery;",
    "",
    "  // The most recent suggestions received from the API.",
    "  late Iterable<Widget> _lastOptions = <Widget>[];",
    "",
    "  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;",
    "",
    "  // Calls the \"remote\" API to search with the given query. Returns null when",
    "  // the call has been made obsolete.",
    "  Future<Iterable<String>?> _search(String query) async {",
    "    _currentQuery = query;",
    "",
    "    // In a real application, there should be some error handling here.",
    "    final Iterable<String> options = await _FakeAPI.search(_currentQuery!);",
    "",
    "    // If another search happened after this one, throw away these options.",
    "    if (_currentQuery != query) {",
    "      return null;",
    "    }",
    "    _currentQuery = null;",
    "",
    "    return options;",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SearchAnchor(",
    "      builder: (BuildContext context, SearchController controller) {",
    "        return IconButton(",
    "          icon: const Icon(Icons.search),",
    "          onPressed: () {",
    "            controller.openView();",
    "          },",
    "        );",
    "      },",
    "      suggestionsBuilder: (BuildContext context, SearchController controller) async {",
    "        final List<String>? options = (await _debouncedSearch(controller.text))?.toList();",
    "        if (options == null) {",
    "          return _lastOptions;",
    "        }",
    "        _lastOptions = List<ListTile>.generate(options.length, (int index) {",
    "          final String item = options[index];",
    "          return ListTile(",
    "            title: Text(item),",
    "            onTap: () {",
    "              debugPrint('You just selected $item');",
    "            },",
    "          );",
    "        });",
    "",
    "        return _lastOptions;",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "// Mimics a remote API.",
    "class _FakeAPI {",
    "  static const List<String> _kOptions = <String>[",
    "    'aardvark',",
    "    'bobcat',",
    "    'chameleon',",
    "  ];",
    "",
    "  // Searches the options, but injects a fake \"network\" delay.",
    "  static Future<Iterable<String>> search(String query) async {",
    "    await Future<void>.delayed(fakeAPIDuration); // Fake 1 second delay.",
    "    if (query == '') {",
    "      return const Iterable<String>.empty();",
    "    }",
    "    return _kOptions.where((String option) {",
    "      return option.contains(query.toLowerCase());",
    "    });",
    "  }",
    "}",
    "",
    "typedef _Debounceable<S, T> = Future<S?> Function(T parameter);",
    "",
    "/// Returns a new function that is a debounced version of the given function.",
    "///",
    "/// This means that the original function will be called only after no calls",
    "/// have been made for the given Duration.",
    "_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {",
    "  _DebounceTimer? debounceTimer;",
    "",
    "  return (T parameter) async {",
    "    if (debounceTimer != null && !debounceTimer!.isCompleted) {",
    "      debounceTimer!.cancel();",
    "    }",
    "    debounceTimer = _DebounceTimer();",
    "    try {",
    "      await debounceTimer!.future;",
    "    } catch (error) {",
    "      if (error is _CancelException) {",
    "        return null;",
    "      }",
    "      rethrow;",
    "    }",
    "    return function(parameter);",
    "  };",
    "}",
    "",
    "// A wrapper around Timer used for debouncing.",
    "class _DebounceTimer {",
    "  _DebounceTimer() {",
    "    _timer = Timer(debounceDuration, _onComplete);",
    "  }",
    "",
    "  late final Timer _timer;",
    "  final Completer<void> _completer = Completer<void>();",
    "",
    "  void _onComplete() {",
    "    _completer.complete();",
    "  }",
    "",
    "  Future<void> get future => _completer.future;",
    "",
    "  bool get isCompleted => _completer.isCompleted;",
    "",
    "  void cancel() {",
    "    _timer.cancel();",
    "    _completer.completeError(const _CancelException());",
    "  }",
    "}",
    "",
    "// An exception indicating that the timer was canceled.",
    "class _CancelException implements Exception {",
    "  const _CancelException();",
    "}",
    ""
  ],
  "description": "Flutter Search Anchor with Debounce Example"
},
"Flutter Search bar Example": {
  "prefix": "flutter-search-bar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SearchBar].",
    "",
    "void main() => runApp(const SearchBarApp());",
    "",
    "class SearchBarApp extends StatefulWidget {",
    "  const SearchBarApp({super.key});",
    "",
    "  @override",
    "  State<SearchBarApp> createState() => _SearchBarAppState();",
    "}",
    "",
    "class _SearchBarAppState extends State<SearchBarApp> {",
    "  bool isDark = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData themeData = ThemeData(useMaterial3: true, brightness: isDark ? Brightness.dark : Brightness.light);",
    "",
    "    return MaterialApp(",
    "      theme: themeData,",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Search Bar Sample')),",
    "        body: Padding(",
    "          padding: const EdgeInsets.all(8.0),",
    "          child: SearchAnchor(",
    "            builder: (BuildContext context, SearchController controller) {",
    "              return SearchBar(",
    "                controller: controller,",
    "                padding: const MaterialStatePropertyAll<EdgeInsets>(EdgeInsets.symmetric(horizontal: 16.0)),",
    "                onTap: () { controller.openView(); },",
    "                onChanged: (_) { controller.openView(); },",
    "                leading: const Icon(Icons.search),",
    "                trailing: <Widget>[",
    "                  Tooltip(",
    "                    message: 'Change brightness mode',",
    "                    child: IconButton(",
    "                      isSelected: isDark,",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          isDark = !isDark;",
    "                        });",
    "                      },",
    "                      icon: const Icon(Icons.wb_sunny_outlined),",
    "                      selectedIcon: const Icon(Icons.brightness_2_outlined),",
    "                    ),",
    "                  )",
    "                ],",
    "              );",
    "            },",
    "            suggestionsBuilder: (BuildContext context, SearchController controller) {",
    "              return List<ListTile>.generate(5, (int index) {",
    "                final String item = 'item $index';",
    "                return ListTile(",
    "                  title: Text(item),",
    "                  onTap: () {",
    "                    setState(() {",
    "                      controller.closeView(item);",
    "                    });",
    "                  },",
    "                );",
    "              });",
    "            }),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Search bar Example"
},
"Flutter Segmented Button Example": {
  "prefix": "flutter-segmented-button",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SegmentedButton].",
    "",
    "void main() {",
    "  runApp(const SegmentedButtonApp());",
    "}",
    "",
    "class SegmentedButtonApp extends StatelessWidget {",
    "  const SegmentedButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const Scaffold(",
    "        body: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              Spacer(),",
    "              Text('Single choice'),",
    "              SingleChoice(),",
    "              SizedBox(height: 20),",
    "              Text('Multiple choice'),",
    "              MultipleChoice(),",
    "              Spacer(),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "enum Calendar { day, week, month, year }",
    "",
    "class SingleChoice extends StatefulWidget {",
    "  const SingleChoice({super.key});",
    "",
    "  @override",
    "  State<SingleChoice> createState() => _SingleChoiceState();",
    "}",
    "",
    "class _SingleChoiceState extends State<SingleChoice> {",
    "  Calendar calendarView = Calendar.day;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SegmentedButton<Calendar>(",
    "      segments: const <ButtonSegment<Calendar>>[",
    "        ButtonSegment<Calendar>(value: Calendar.day, label: Text('Day'), icon: Icon(Icons.calendar_view_day)),",
    "        ButtonSegment<Calendar>(value: Calendar.week, label: Text('Week'), icon: Icon(Icons.calendar_view_week)),",
    "        ButtonSegment<Calendar>(value: Calendar.month, label: Text('Month'), icon: Icon(Icons.calendar_view_month)),",
    "        ButtonSegment<Calendar>(value: Calendar.year, label: Text('Year'), icon: Icon(Icons.calendar_today)),",
    "      ],",
    "      selected: <Calendar>{calendarView},",
    "      onSelectionChanged: (Set<Calendar> newSelection) {",
    "        setState(() {",
    "          // By default there is only a single segment that can be",
    "          // selected at one time, so its value is always the first",
    "          // item in the selected set.",
    "          calendarView = newSelection.first;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "enum Sizes { extraSmall, small, medium, large, extraLarge }",
    "",
    "class MultipleChoice extends StatefulWidget {",
    "  const MultipleChoice({super.key});",
    "",
    "  @override",
    "  State<MultipleChoice> createState() => _MultipleChoiceState();",
    "}",
    "",
    "class _MultipleChoiceState extends State<MultipleChoice> {",
    "  Set<Sizes> selection = <Sizes>{Sizes.large, Sizes.extraLarge};",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SegmentedButton<Sizes>(",
    "      segments: const <ButtonSegment<Sizes>>[",
    "        ButtonSegment<Sizes>(value: Sizes.extraSmall, label: Text('XS')),",
    "        ButtonSegment<Sizes>(value: Sizes.small, label: Text('S')),",
    "        ButtonSegment<Sizes>(value: Sizes.medium, label: Text('M')),",
    "        ButtonSegment<Sizes>(",
    "          value: Sizes.large,",
    "          label: Text('L'),",
    "        ),",
    "        ButtonSegment<Sizes>(value: Sizes.extraLarge, label: Text('XL')),",
    "      ],",
    "      selected: selection,",
    "      onSelectionChanged: (Set<Sizes> newSelection) {",
    "        setState(() {",
    "          selection = newSelection;",
    "        });",
    "      },",
    "      multiSelectionEnabled: true,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Segmented Button Example"
},
"Flutter Selectable Region Example": {
  "prefix": "flutter-selectable-region",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/rendering.dart';",
    "",
    "/// Flutter code sample for [SelectableRegion].",
    "",
    "void main() => runApp(const SelectableRegionExampleApp());",
    "",
    "class SelectableRegionExampleApp extends StatelessWidget {",
    "  const SelectableRegionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: SelectionArea(",
    "        child: Scaffold(",
    "          appBar: AppBar(title: const Text('SelectableRegion Sample')),",
    "          body: const Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Select this icon', style: TextStyle(fontSize: 30)),",
    "                SizedBox(height: 10),",
    "                MySelectableAdapter(child: Icon(Icons.key, size: 30)),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MySelectableAdapter extends StatelessWidget {",
    "  const MySelectableAdapter({super.key, required this.child});",
    "",
    "  final Widget child;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final SelectionRegistrar? registrar = SelectionContainer.maybeOf(context);",
    "    if (registrar == null) {",
    "      return child;",
    "    }",
    "    return MouseRegion(",
    "      cursor: SystemMouseCursors.text,",
    "      child: _SelectableAdapter(",
    "        registrar: registrar,",
    "        child: child,",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _SelectableAdapter extends SingleChildRenderObjectWidget {",
    "  const _SelectableAdapter({",
    "    required this.registrar,",
    "    required Widget child,",
    "  }) : super(child: child);",
    "",
    "  final SelectionRegistrar registrar;",
    "",
    "  @override",
    "  _RenderSelectableAdapter createRenderObject(BuildContext context) {",
    "    return _RenderSelectableAdapter(",
    "      DefaultSelectionStyle.of(context).selectionColor!,",
    "      registrar,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void updateRenderObject(BuildContext context, _RenderSelectableAdapter renderObject) {",
    "    renderObject",
    "      ..selectionColor = DefaultSelectionStyle.of(context).selectionColor!",
    "      ..registrar = registrar;",
    "  }",
    "}",
    "",
    "class _RenderSelectableAdapter extends RenderProxyBox with Selectable, SelectionRegistrant {",
    "  _RenderSelectableAdapter(",
    "    Color selectionColor,",
    "    SelectionRegistrar registrar,",
    "  )   : _selectionColor = selectionColor,",
    "        _geometry = ValueNotifier<SelectionGeometry>(_noSelection) {",
    "    this.registrar = registrar;",
    "    _geometry.addListener(markNeedsPaint);",
    "  }",
    "",
    "  static const SelectionGeometry _noSelection = SelectionGeometry(status: SelectionStatus.none, hasContent: true);",
    "  final ValueNotifier<SelectionGeometry> _geometry;",
    "",
    "  Color get selectionColor => _selectionColor;",
    "  late Color _selectionColor;",
    "  set selectionColor(Color value) {",
    "    if (_selectionColor == value) {",
    "      return;",
    "    }",
    "    _selectionColor = value;",
    "    markNeedsPaint();",
    "  }",
    "",
    "  // ValueListenable APIs",
    "",
    "  @override",
    "  void addListener(VoidCallback listener) => _geometry.addListener(listener);",
    "",
    "  @override",
    "  void removeListener(VoidCallback listener) => _geometry.removeListener(listener);",
    "",
    "  @override",
    "  SelectionGeometry get value => _geometry.value;",
    "",
    "  // Selectable APIs.",
    "",
    "  // Adjust this value to enlarge or shrink the selection highlight.",
    "  static const double _padding = 10.0;",
    "  Rect _getSelectionHighlightRect() {",
    "    return Rect.fromLTWH(0 - _padding, 0 - _padding, size.width + _padding * 2, size.height + _padding * 2);",
    "  }",
    "",
    "  Offset? _start;",
    "  Offset? _end;",
    "  void _updateGeometry() {",
    "    if (_start == null || _end == null) {",
    "      _geometry.value = _noSelection;",
    "      return;",
    "    }",
    "    final Rect renderObjectRect = Rect.fromLTWH(0, 0, size.width, size.height);",
    "    final Rect selectionRect = Rect.fromPoints(_start!, _end!);",
    "    if (renderObjectRect.intersect(selectionRect).isEmpty) {",
    "      _geometry.value = _noSelection;",
    "    } else {",
    "      final Rect selectionRect = _getSelectionHighlightRect();",
    "      final SelectionPoint firstSelectionPoint = SelectionPoint(",
    "        localPosition: selectionRect.bottomLeft,",
    "        lineHeight: selectionRect.size.height,",
    "        handleType: TextSelectionHandleType.left,",
    "      );",
    "      final SelectionPoint secondSelectionPoint = SelectionPoint(",
    "        localPosition: selectionRect.bottomRight,",
    "        lineHeight: selectionRect.size.height,",
    "        handleType: TextSelectionHandleType.right,",
    "      );",
    "      final bool isReversed;",
    "      if (_start!.dy > _end!.dy) {",
    "        isReversed = true;",
    "      } else if (_start!.dy < _end!.dy) {",
    "        isReversed = false;",
    "      } else {",
    "        isReversed = _start!.dx > _end!.dx;",
    "      }",
    "      _geometry.value = SelectionGeometry(",
    "        status: SelectionStatus.uncollapsed,",
    "        hasContent: true,",
    "        startSelectionPoint: isReversed ? secondSelectionPoint : firstSelectionPoint,",
    "        endSelectionPoint: isReversed ? firstSelectionPoint : secondSelectionPoint,",
    "        selectionRects: <Rect>[selectionRect],",
    "      );",
    "    }",
    "  }",
    "",
    "  @override",
    "  SelectionResult dispatchSelectionEvent(SelectionEvent event) {",
    "    SelectionResult result = SelectionResult.none;",
    "    switch (event.type) {",
    "      case SelectionEventType.startEdgeUpdate:",
    "      case SelectionEventType.endEdgeUpdate:",
    "        final Rect renderObjectRect = Rect.fromLTWH(0, 0, size.width, size.height);",
    "        // Normalize offset in case it is out side of the rect.",
    "        final Offset point = globalToLocal((event as SelectionEdgeUpdateEvent).globalPosition);",
    "        final Offset adjustedPoint = SelectionUtils.adjustDragOffset(renderObjectRect, point);",
    "        if (event.type == SelectionEventType.startEdgeUpdate) {",
    "          _start = adjustedPoint;",
    "        } else {",
    "          _end = adjustedPoint;",
    "        }",
    "        result = SelectionUtils.getResultBasedOnRect(renderObjectRect, point);",
    "      case SelectionEventType.clear:",
    "        _start = _end = null;",
    "      case SelectionEventType.selectAll:",
    "      case SelectionEventType.selectWord:",
    "        _start = Offset.zero;",
    "        _end = Offset.infinite;",
    "      case SelectionEventType.granularlyExtendSelection:",
    "        result = SelectionResult.end;",
    "        final GranularlyExtendSelectionEvent extendSelectionEvent = event as GranularlyExtendSelectionEvent;",
    "        // Initialize the offset it there is no ongoing selection.",
    "        if (_start == null || _end == null) {",
    "          if (extendSelectionEvent.forward) {",
    "            _start = _end = Offset.zero;",
    "          } else {",
    "            _start = _end = Offset.infinite;",
    "          }",
    "        }",
    "        // Move the corresponding selection edge.",
    "        final Offset newOffset = extendSelectionEvent.forward ? Offset.infinite : Offset.zero;",
    "        if (extendSelectionEvent.isEnd) {",
    "          if (newOffset == _end) {",
    "            result = extendSelectionEvent.forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _end = newOffset;",
    "        } else {",
    "          if (newOffset == _start) {",
    "            result = extendSelectionEvent.forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _start = newOffset;",
    "        }",
    "      case SelectionEventType.directionallyExtendSelection:",
    "        result = SelectionResult.end;",
    "        final DirectionallyExtendSelectionEvent extendSelectionEvent = event as DirectionallyExtendSelectionEvent;",
    "        // Convert to local coordinates.",
    "        final double horizontalBaseLine = globalToLocal(Offset(event.dx, 0)).dx;",
    "        final Offset newOffset;",
    "        final bool forward;",
    "        switch (extendSelectionEvent.direction) {",
    "          case SelectionExtendDirection.backward:",
    "          case SelectionExtendDirection.previousLine:",
    "            forward = false;",
    "            // Initialize the offset it there is no ongoing selection.",
    "            if (_start == null || _end == null) {",
    "              _start = _end = Offset.infinite;",
    "            }",
    "            // Move the corresponding selection edge.",
    "            if (extendSelectionEvent.direction == SelectionExtendDirection.previousLine || horizontalBaseLine < 0) {",
    "              newOffset = Offset.zero;",
    "            } else {",
    "              newOffset = Offset.infinite;",
    "            }",
    "          case SelectionExtendDirection.nextLine:",
    "          case SelectionExtendDirection.forward:",
    "            forward = true;",
    "            // Initialize the offset it there is no ongoing selection.",
    "            if (_start == null || _end == null) {",
    "              _start = _end = Offset.zero;",
    "            }",
    "            // Move the corresponding selection edge.",
    "            if (extendSelectionEvent.direction == SelectionExtendDirection.nextLine ||",
    "                horizontalBaseLine > size.width) {",
    "              newOffset = Offset.infinite;",
    "            } else {",
    "              newOffset = Offset.zero;",
    "            }",
    "        }",
    "        if (extendSelectionEvent.isEnd) {",
    "          if (newOffset == _end) {",
    "            result = forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _end = newOffset;",
    "        } else {",
    "          if (newOffset == _start) {",
    "            result = forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _start = newOffset;",
    "        }",
    "    }",
    "    _updateGeometry();",
    "    return result;",
    "  }",
    "",
    "  // This method is called when users want to copy selected content in this",
    "  // widget into clipboard.",
    "  @override",
    "  SelectedContent? getSelectedContent() {",
    "    return value.hasSelection ? const SelectedContent(plainText: 'Custom Text') : null;",
    "  }",
    "",
    "  LayerLink? _startHandle;",
    "  LayerLink? _endHandle;",
    "",
    "  @override",
    "  void pushHandleLayers(LayerLink? startHandle, LayerLink? endHandle) {",
    "    if (_startHandle == startHandle && _endHandle == endHandle) {",
    "      return;",
    "    }",
    "    _startHandle = startHandle;",
    "    _endHandle = endHandle;",
    "    markNeedsPaint();",
    "  }",
    "",
    "  @override",
    "  void paint(PaintingContext context, Offset offset) {",
    "    super.paint(context, offset);",
    "    if (!_geometry.value.hasSelection) {",
    "      return;",
    "    }",
    "    // Draw the selection highlight.",
    "    final Paint selectionPaint = Paint()",
    "      ..style = PaintingStyle.fill",
    "      ..color = _selectionColor;",
    "    context.canvas.drawRect(_getSelectionHighlightRect().shift(offset), selectionPaint);",
    "",
    "    // Push the layer links if any.",
    "    if (_startHandle != null) {",
    "      context.pushLayer(",
    "        LeaderLayer(",
    "          link: _startHandle!,",
    "          offset: offset + value.startSelectionPoint!.localPosition,",
    "        ),",
    "        (PaintingContext context, Offset offset) {},",
    "        Offset.zero,",
    "      );",
    "    }",
    "    if (_endHandle != null) {",
    "      context.pushLayer(",
    "        LeaderLayer(",
    "          link: _endHandle!,",
    "          offset: offset + value.endSelectionPoint!.localPosition,",
    "        ),",
    "        (PaintingContext context, Offset offset) {},",
    "        Offset.zero,",
    "      );",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _geometry.dispose();",
    "    super.dispose();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Region Example"
},
"Flutter Selectable Area Example": {
  "prefix": "flutter-selectable-area",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SelectionArea].",
    "",
    "void main() => runApp(const SelectionAreaExampleApp());",
    "",
    "class SelectionAreaExampleApp extends StatelessWidget {",
    "  const SelectionAreaExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: SelectionArea(",
    "        child: Scaffold(",
    "          appBar: AppBar(title: const Text('SelectionArea Sample')),",
    "          body: const Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Row 1'),",
    "                Text('Row 2'),",
    "                Text('Row 3'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Area Example"
},
"Flutter Selectable Conntainer": {
  "prefix": "flutter-selectable-container",
  "scope":"dart",
  "body": [
    "",
    "// Flutter example for [SelectionContainer.disabled].",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SelectionContainerDisabledExampleApp());",
    "",
    "class SelectionContainerDisabledExampleApp extends StatelessWidget {",
    "  const SelectionContainerDisabledExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SelectionContainer.disabled Sample')),",
    "        body: const Center(",
    "          child: SelectionArea(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Selectable text'),",
    "                SelectionContainer.disabled(child: Text('Non-selectable text')),",
    "                Text('Selectable text'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Conntainer"
},
"Flutter Slider": {
  "prefix": "flutter-slider",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Slider].",
    "",
    "void main() => runApp(const SliderApp());",
    "",
    "class SliderApp extends StatelessWidget {",
    "  const SliderApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        colorSchemeSeed: const Color(0xff6750a4),",
    "        useMaterial3: true,",
    "      ),",
    "      home: const SliderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SliderExample extends StatefulWidget {",
    "  const SliderExample({super.key});",
    "",
    "  @override",
    "  State<SliderExample> createState() => _SliderExampleState();",
    "}",
    "",
    "class _SliderExampleState extends State<SliderExample> {",
    "  double _currentSliderValue = 20;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Slider')),",
    "      body: Slider(",
    "        value: _currentSliderValue,",
    "        max: 100,",
    "        divisions: 5,",
    "        label: _currentSliderValue.round().toString(),",
    "        onChanged: (double value) {",
    "          setState(() {",
    "            _currentSliderValue = value;",
    "          });",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Slider"
},
"Flutter Snackbar Example": {
  "prefix": "flutter-snackbar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SnackBar].",
    "",
    "void main() => runApp(const SnackBarExampleApp());",
    "",
    "class SnackBarExampleApp extends StatelessWidget {",
    "  const SnackBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SnackBar Sample')),",
    "        body: const Center(",
    "          child: SnackBarExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SnackBarExample extends StatelessWidget {",
    "  const SnackBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ElevatedButton(",
    "      child: const Text('Show Snackbar'),",
    "      onPressed: () {",
    "        ScaffoldMessenger.of(context).showSnackBar(",
    "          SnackBar(",
    "            action: SnackBarAction(",
    "              label: 'Action',",
    "              onPressed: () {",
    "                // Code to execute.",
    "              },",
    "            ),",
    "            content: const Text('Awesome SnackBar!'),",
    "            duration: const Duration(milliseconds: 1500),",
    "            width: 280.0, // Width of the SnackBar.",
    "            padding: const EdgeInsets.symmetric(",
    "              horizontal: 8.0, // Inner padding for SnackBar content.",
    "            ),",
    "            behavior: SnackBarBehavior.floating,",
    "            shape: RoundedRectangleBorder(",
    "              borderRadius: BorderRadius.circular(10.0),",
    "            ),",
    "          ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Snackbar Example"
},
"Flutter Stepper Example": {
  "prefix": "flutter-stepper",
  "scope":"dart"
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Stepper].",
    "",
    "void main() => runApp(const StepperExampleApp());",
    "",
    "class StepperExampleApp extends StatelessWidget {",
    "  const StepperExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Stepper Sample')),",
    "        body: const Center(",
    "          child: StepperExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class StepperExample extends StatefulWidget {",
    "  const StepperExample({super.key});",
    "",
    "  @override",
    "  State<StepperExample> createState() => _StepperExampleState();",
    "}",
    "",
    "class _StepperExampleState extends State<StepperExample> {",
    "  int _index = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Stepper(",
    "      currentStep: _index,",
    "      onStepCancel: () {",
    "        if (_index > 0) {",
    "          setState(() {",
    "            _index -= 1;",
    "          });",
    "        }",
    "      },",
    "      onStepContinue: () {",
    "        if (_index <= 0) {",
    "          setState(() {",
    "            _index += 1;",
    "          });",
    "        }",
    "      },",
    "      onStepTapped: (int index) {",
    "        setState(() {",
    "          _index = index;",
    "        });",
    "      },",
    "      steps: <Step>[",
    "        Step(",
    "          title: const Text('Step 1 title'),",
    "          content: Container(",
    "            alignment: Alignment.centerLeft,",
    "            child: const Text('Content for Step 1'),",
    "          ),",
    "        ),",
    "        const Step(",
    "          title: Text('Step 2 title'),",
    "          content: Text('Content for Step 2'),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Stepper Example"
},
"Flutter Switch Example": {
  "prefix": "flutter-switch",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Switch].",
    "",
    "void main() => runApp(const SwitchApp());",
    "",
    "class SwitchApp extends StatelessWidget {",
    "  const SwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Switch Sample')),",
    "        body: const Center(",
    "          child: SwitchExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SwitchExample extends StatefulWidget {",
    "  const SwitchExample({super.key});",
    "",
    "  @override",
    "  State<SwitchExample> createState() => _SwitchExampleState();",
    "}",
    "",
    "class _SwitchExampleState extends State<SwitchExample> {",
    "  bool light = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Switch(",
    "      // This bool value toggles the switch.",
    "      value: light,",
    "      activeColor: Colors.red,",
    "      onChanged: (bool value) {",
    "        // This is called when the user toggles the switch.",
    "        setState(() {",
    "          light = value;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Switch Example"
},
"Flutter Switch Example": {
  "prefix": "flutter-switch adaptive",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Switch].",
    "",
    "void main() => runApp(const SwitchApp());",
    "",
    "class SwitchApp extends StatelessWidget {",
    "  const SwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData.light(useMaterial3: true).copyWith(",
    "        // Use the ambient [CupetinoThemeData] to style all widgets which would",
    "        // otherwise use iOS defaults.",
    "        cupertinoOverrideTheme: const CupertinoThemeData(applyThemeToAll: true),",
    "      ),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Switch Sample')),",
    "        body: const Center(",
    "          child: SwitchExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SwitchExample extends StatefulWidget {",
    "  const SwitchExample({super.key});",
    "",
    "  @override",
    "  State<SwitchExample> createState() => _SwitchExampleState();",
    "}",
    "",
    "class _SwitchExampleState extends State<SwitchExample> {",
    "  bool light = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        Switch.adaptive(",
    "          value: light,",
    "          onChanged: (bool value) {",
    "            setState(() {",
    "              light = value;",
    "            });",
    "          },",
    "        ),",
    "        Switch.adaptive(",
    "          // Don't use the ambient [CupetinoThemeData] to style this switch.",
    "          applyCupertinoTheme: false,",
    "          value: light,",
    "          onChanged: (bool value) {",
    "            setState(() {",
    "              light = value;",
    "            });",
    "          },",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Switch Example"
},
"Flutter Switch List Tile Example": {
  "prefix": "flutter-switchlisttile",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SwitchListTile].",
    "",
    "void main() => runApp(const SwitchListTileApp());",
    "",
    "class SwitchListTileApp extends StatelessWidget {",
    "  const SwitchListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(appBar: AppBar(title: const Text('SwitchListTile Sample')), body: const SwitchListTileExample()),",
    "    );",
    "  }",
    "}",
    "",
    "class SwitchListTileExample extends StatefulWidget {",
    "  const SwitchListTileExample({super.key});",
    "",
    "  @override",
    "  State<SwitchListTileExample> createState() => _SwitchListTileExampleState();",
    "}",
    "",
    "class _SwitchListTileExampleState extends State<SwitchListTileExample> {",
    "  bool switchValue1 = true;",
    "  bool switchValue2 = true;",
    "  bool switchValue3 = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Column(",
    "        children: <Widget>[",
    "          SwitchListTile(",
    "            value: switchValue1,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                switchValue1 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text('Supporting text'),",
    "          ),",
    "          const Divider(height: 0),",
    "          SwitchListTile(",
    "            value: switchValue2,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                switchValue2 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text(",
    "                'Longer supporting text to demonstrate how the text wraps and the switch is centered vertically with the text.'),",
    "          ),",
    "          const Divider(height: 0),",
    "          SwitchListTile(",
    "            value: switchValue3,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                switchValue3 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text(",
    "                \"Longer supporting text to demonstrate how the text wraps and how setting 'SwitchListTile.isThreeLine = true' aligns the switch to the top vertically with the text.\"),",
    "            isThreeLine: true,",
    "          ),",
    "          const Divider(height: 0),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Switch List Tile Example"
},
"Flutter  Custom Switch List Tile Example": {
  "prefix": "flutter- custom-switchlisttile",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom labeled switch.",
    "",
    "void main() => runApp(const LabeledSwitchApp());",
    "",
    "class LabeledSwitchApp extends StatelessWidget {",
    "  const LabeledSwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Custom Labeled Switch Sample')),",
    "        body: const Center(",
    "          child: LabeledSwitchExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledSwitch extends StatelessWidget {",
    "  const LabeledSwitch({",
    "    super.key,",
    "    required this.label,",
    "    required this.padding,",
    "    required this.value,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final String label;",
    "  final EdgeInsets padding;",
    "  final bool value;",
    "  final ValueChanged<bool> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return InkWell(",
    "      onTap: () {",
    "        onChanged(!value);",
    "      },",
    "      child: Padding(",
    "        padding: padding,",
    "        child: Row(",
    "          children: <Widget>[",
    "            Expanded(child: Text(label)),",
    "            Switch(",
    "              value: value,",
    "              onChanged: (bool newValue) {",
    "                onChanged(newValue);",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledSwitchExample extends StatefulWidget {",
    "  const LabeledSwitchExample({super.key});",
    "",
    "  @override",
    "  State<LabeledSwitchExample> createState() => _LabeledSwitchExampleState();",
    "}",
    "",
    "class _LabeledSwitchExampleState extends State<LabeledSwitchExample> {",
    "  bool _isSelected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return LabeledSwitch(",
    "      label: 'This is the label text',",
    "      padding: const EdgeInsets.symmetric(horizontal: 20.0),",
    "      value: _isSelected,",
    "      onChanged: (bool newValue) {",
    "        setState(() {",
    "          _isSelected = newValue;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Custom Switch List Tile Example"
},
"Flutter  TabController Example": {
  "prefix": "flutter-tabcontroller",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TabController].",
    "",
    "void main() => runApp(const TabControllerExampleApp());",
    "",
    "class TabControllerExampleApp extends StatelessWidget {",
    "  const TabControllerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TabControllerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "const List<Tab> tabs = <Tab>[",
    "  Tab(text: 'Zeroth'),",
    "  Tab(text: 'First'),",
    "  Tab(text: 'Second'),",
    "];",
    "",
    "class TabControllerExample extends StatelessWidget {",
    "  const TabControllerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTabController(",
    "      length: tabs.length,",
    "      // The Builder widget is used to have a different BuildContext to access",
    "      // closest DefaultTabController.",
    "      child: Builder(builder: (BuildContext context) {",
    "        final TabController tabController = DefaultTabController.of(context);",
    "        tabController.addListener(() {",
    "          if (!tabController.indexIsChanging) {",
    "            // Your code goes here.",
    "            // To get index of current tab use tabController.index",
    "          }",
    "        });",
    "        return Scaffold(",
    "          appBar: AppBar(",
    "            bottom: const TabBar(",
    "              tabs: tabs,",
    "            ),",
    "          ),",
    "          body: TabBarView(",
    "            children: tabs.map((Tab tab) {",
    "              return Center(",
    "                child: Text(",
    "                  '${tab.text!} Tab',",
    "                  style: Theme.of(context).textTheme.headlineSmall,",
    "                ),",
    "              );",
    "            }).toList(),",
    "          ),",
    "        );",
    "      }),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  TabController Example"
},
"Flutter  Tab bar Example": {
  "prefix": "flutter-tabbar",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TabBar].",
    "",
    "void main() => runApp(const TabBarApp());",
    "",
    "class TabBarApp extends StatelessWidget {",
    "  const TabBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const TabBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TabBarExample extends StatefulWidget {",
    "  const TabBarExample({super.key});",
    "",
    "  @override",
    "  State<TabBarExample> createState() => _TabBarExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _TabBarExampleState extends State<TabBarExample> with TickerProviderStateMixin {",
    "  late final TabController _tabController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _tabController = TabController(length: 3, vsync: this);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _tabController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('TabBar Sample'),",
    "        bottom: TabBar(",
    "          controller: _tabController,",
    "          tabs: const <Widget>[",
    "            Tab(",
    "              icon: Icon(Icons.cloud_outlined),",
    "            ),",
    "            Tab(",
    "              icon: Icon(Icons.beach_access_sharp),",
    "            ),",
    "            Tab(",
    "              icon: Icon(Icons.brightness_5_sharp),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      body: TabBarView(",
    "        controller: _tabController,",
    "        children: const <Widget>[",
    "          Center(",
    "            child: Text(\"It's cloudy here\"),",
    "          ),",
    "          Center(",
    "            child: Text(\"It's rainy here\"),",
    "          ),",
    "          Center(",
    "            child: Text(\"It's sunny here\"),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  TabController Example"
},
"Flutter  Tab Bar primary  Example": {
  "prefix": "flutter-tabbar primary secodary",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TabBar].",
    "",
    "void main() => runApp(const TabBarApp());",
    "",
    "class TabBarApp extends StatelessWidget {",
    "  const TabBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const TabBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TabBarExample extends StatelessWidget {",
    "  const TabBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTabController(",
    "      initialIndex: 1,",
    "      length: 3,",
    "      child: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Primary and secondary TabBar'),",
    "          bottom: const TabBar(",
    "            dividerColor: Colors.transparent,",
    "            tabs: <Widget>[",
    "              Tab(",
    "                text: 'Flights',",
    "                icon: Icon(Icons.flight),",
    "              ),",
    "              Tab(",
    "                text: 'Trips',",
    "                icon: Icon(Icons.luggage),",
    "              ),",
    "              Tab(",
    "                text: 'Explore',",
    "                icon: Icon(Icons.explore),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "        body: const TabBarView(",
    "          children: <Widget>[",
    "            NestedTabBar('Flights'),",
    "            NestedTabBar('Trips'),",
    "            NestedTabBar('Explore'),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class NestedTabBar extends StatefulWidget {",
    "  const NestedTabBar(this.outerTab, {super.key});",
    "",
    "  final String outerTab;",
    "",
    "  @override",
    "  State<NestedTabBar> createState() => _NestedTabBarState();",
    "}",
    "",
    "class _NestedTabBarState extends State<NestedTabBar> with TickerProviderStateMixin {",
    "  late final TabController _tabController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _tabController = TabController(length: 2, vsync: this);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _tabController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        TabBar.secondary(",
    "          controller: _tabController,",
    "          tabs: const <Widget>[",
    "            Tab(text: 'Overview'),",
    "            Tab(text: 'Specifications'),",
    "          ],",
    "        ),",
    "        Expanded(",
    "          child: TabBarView(",
    "            controller: _tabController,",
    "            children: <Widget>[",
    "              Card(",
    "                margin: const EdgeInsets.all(16.0),",
    "                child: Center(child: Text('${widget.outerTab}: Overview tab')),",
    "              ),",
    "              Card(",
    "                margin: const EdgeInsets.all(16.0),",
    "                child: Center(child: Text('${widget.outerTab}: Specifications tab')),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Tab Bar primary  Example"
},
"Flutter  Text button  Example": {
  "prefix": "flutter-textbutton",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TextButton].",
    "",
    "void main() => runApp(const TextButtonExampleApp());",
    "",
    "class TextButtonExampleApp extends StatelessWidget {",
    "  const TextButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('TextButton Sample')),",
    "        body: const TextButtonExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TextButtonExample extends StatelessWidget {",
    "  const TextButtonExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisSize: MainAxisSize.min,",
    "        children: <Widget>[",
    "          TextButton(",
    "            style: TextButton.styleFrom(",
    "              textStyle: const TextStyle(fontSize: 20),",
    "            ),",
    "            onPressed: null,",
    "            child: const Text('Disabled'),",
    "          ),",
    "          const SizedBox(height: 30),",
    "          TextButton(",
    "            style: TextButton.styleFrom(",
    "              textStyle: const TextStyle(fontSize: 20),",
    "            ),",
    "            onPressed: () {},",
    "            child: const Text('Enabled'),",
    "          ),",
    "          const SizedBox(height: 30),",
    "          ClipRRect(",
    "            borderRadius: BorderRadius.circular(4),",
    "            child: Stack(",
    "              children: <Widget>[",
    "                Positioned.fill(",
    "                  child: Container(",
    "                    decoration: const BoxDecoration(",
    "                      gradient: LinearGradient(",
    "                        colors: <Color>[",
    "                          Color(0xFF0D47A1),",
    "                          Color(0xFF1976D2),",
    "                          Color(0xFF42A5F5),",
    "                        ],",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ),",
    "                TextButton(",
    "                  style: TextButton.styleFrom(",
    "                    foregroundColor: Colors.white,",
    "                    padding: const EdgeInsets.all(16.0),",
    "                    textStyle: const TextStyle(fontSize: 20),",
    "                  ),",
    "                  onPressed: () {},",
    "                  child: const Text('Gradient'),",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Text button  Example"
},
"Flutter  Text button selected   Example": {
  "prefix": "flutter-textbutton-selected",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TextButton].",
    "",
    "void main() {",
    "  runApp(const MaterialApp(home: Home()));",
    "}",
    "",
    "class SelectableButton extends StatefulWidget {",
    "  const SelectableButton({",
    "    super.key,",
    "    required this.selected,",
    "    this.style,",
    "    required this.onPressed,",
    "    required this.child,",
    "  });",
    "",
    "  final bool selected;",
    "  final ButtonStyle? style;",
    "  final VoidCallback? onPressed;",
    "  final Widget child;",
    "",
    "  @override",
    "  State<SelectableButton> createState() => _SelectableButtonState();",
    "}",
    "",
    "class _SelectableButtonState extends State<SelectableButton> {",
    "  late final MaterialStatesController statesController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    statesController = MaterialStatesController(<MaterialState>{if (widget.selected) MaterialState.selected});",
    "  }",
    "",
    "  @override",
    "  void didUpdateWidget(SelectableButton oldWidget) {",
    "    super.didUpdateWidget(oldWidget);",
    "    if (widget.selected != oldWidget.selected) {",
    "      statesController.update(MaterialState.selected, widget.selected);",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextButton(",
    "      statesController: statesController,",
    "      style: widget.style,",
    "      onPressed: widget.onPressed,",
    "      child: widget.child,",
    "    );",
    "  }",
    "}",
    "",
    "class Home extends StatefulWidget {",
    "  const Home({super.key});",
    "",
    "  @override",
    "  State<Home> createState() => _HomeState();",
    "}",
    "",
    "class _HomeState extends State<Home> {",
    "  bool selected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: SelectableButton(",
    "          selected: selected,",
    "          style: ButtonStyle(",
    "            foregroundColor: MaterialStateProperty.resolveWith<Color?>(",
    "              (Set<MaterialState> states) {",
    "                if (states.contains(MaterialState.selected)) {",
    "                  return Colors.white;",
    "                }",
    "                return null; // defer to the defaults",
    "              },",
    "            ),",
    "            backgroundColor: MaterialStateProperty.resolveWith<Color?>(",
    "              (Set<MaterialState> states) {",
    "                if (states.contains(MaterialState.selected)) {",
    "                  return Colors.indigo;",
    "                }",
    "                return null; // defer to the defaults",
    "              },",
    "            ),",
    "          ),",
    "          onPressed: () {",
    "            setState(() {",
    "              selected = !selected;",
    "            });",
    "          },",
    "          child: const Text('toggle selected'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Text button selected   Example"
},
"Flutter  Text Field Example": {
  "prefix": "flutter-textfield",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TextField].",
    "",
    "class ObscuredTextFieldSample extends StatelessWidget {",
    "  const ObscuredTextFieldSample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const SizedBox(",
    "      width: 250,",
    "      child: TextField(",
    "        obscureText: true,",
    "        decoration: InputDecoration(",
    "          border: OutlineInputBorder(),",
    "          labelText: 'Password',",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TextFieldExampleApp extends StatelessWidget {",
    "  const TextFieldExampleApp({super.key});",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Obscured Textfield')),",
    "        body: const Center(",
    "          child: ObscuredTextFieldSample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "void main() => runApp(const TextFieldExampleApp());",
    ""
  ],
  "description": "Flutter  Text Field selected   Example"
},
"Flutter  Text Form Field selected   Example": {
  "prefix": "flutter-textformfield",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [TextFormField].",
    "",
    "void main() => runApp(const TextFormFieldExampleApp());",
    "",
    "class TextFormFieldExampleApp extends StatelessWidget {",
    "  const TextFormFieldExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TextFormFieldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TextFormFieldExample extends StatefulWidget {",
    "  const TextFormFieldExample({super.key});",
    "",
    "  @override",
    "  State<TextFormFieldExample> createState() => _TextFormFieldExampleState();",
    "}",
    "",
    "class _TextFormFieldExampleState extends State<TextFormFieldExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: Center(",
    "        child: Shortcuts(",
    "          shortcuts: const <ShortcutActivator, Intent>{",
    "            // Pressing space in the field will now move to the next field.",
    "            SingleActivator(LogicalKeyboardKey.space): NextFocusIntent(),",
    "          },",
    "          child: FocusTraversalGroup(",
    "            child: Form(",
    "              autovalidateMode: AutovalidateMode.always,",
    "              onChanged: () {",
    "                Form.of(primaryFocus!.context!).save();",
    "              },",
    "              child: Wrap(",
    "                children: List<Widget>.generate(5, (int index) {",
    "                  return Padding(",
    "                    padding: const EdgeInsets.all(8.0),",
    "                    child: ConstrainedBox(",
    "                      constraints: BoxConstraints.tight(const Size(200, 50)),",
    "                      child: TextFormField(",
    "                        onSaved: (String? value) {",
    "                          debugPrint('Value for field $index saved as \"$value\"');",
    "                        },",
    "                      ),",
    "                    ),",
    "                  );",
    "                }),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Text Form Field selected   Example"
},
"Flutter  Time picker, Radio button  Example": {
  "prefix": "flutter-timepicker",
  "body": [
    "// Copyright 2014 The Flutter Authors. All rights reserved.",
    "// Use of this source code is governed by a BSD-style license that can be",
    "// found in the LICENSE file.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showTimePicker].",
    "",
    "void main() {",
    "  runApp(const ShowTimePickerApp());",
    "}",
    "",
    "class ShowTimePickerApp extends StatefulWidget {",
    "  const ShowTimePickerApp({super.key});",
    "",
    "  @override",
    "  State<ShowTimePickerApp> createState() => _ShowTimePickerAppState();",
    "}",
    "",
    "class _ShowTimePickerAppState extends State<ShowTimePickerApp> {",
    "  ThemeMode themeMode = ThemeMode.dark;",
    "  bool useMaterial3 = true;",
    "",
    "  void setThemeMode(ThemeMode mode) {",
    "    setState(() {",
    "      themeMode = mode;",
    "    });",
    "  }",
    "",
    "  void setUseMaterial3(bool? value) {",
    "    setState(() {",
    "      useMaterial3 = value!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData.light(useMaterial3: useMaterial3),",
    "      darkTheme: ThemeData.dark(useMaterial3: useMaterial3),",
    "      themeMode: themeMode,",
    "      home: TimePickerOptions(",
    "        themeMode: themeMode,",
    "        useMaterial3: useMaterial3,",
    "        setThemeMode: setThemeMode,",
    "        setUseMaterial3: setUseMaterial3,",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TimePickerOptions extends StatefulWidget {",
    "  const TimePickerOptions({",
    "    super.key,",
    "    required this.themeMode,",
    "    required this.useMaterial3,",
    "    required this.setThemeMode,",
    "    required this.setUseMaterial3,",
    "  });",
    "",
    "  final ThemeMode themeMode;",
    "  final bool useMaterial3;",
    "  final ValueChanged<ThemeMode> setThemeMode;",
    "  final ValueChanged<bool?> setUseMaterial3;",
    "",
    "  @override",
    "  State<TimePickerOptions> createState() => _TimePickerOptionsState();",
    "}",
    "",
    "class _TimePickerOptionsState extends State<TimePickerOptions> {",
    "  TimeOfDay? selectedTime;",
    "  TimePickerEntryMode entryMode = TimePickerEntryMode.dial;",
    "  Orientation? orientation;",
    "  TextDirection textDirection = TextDirection.ltr;",
    "  MaterialTapTargetSize tapTargetSize = MaterialTapTargetSize.padded;",
    "  bool use24HourTime = false;",
    "",
    "  void _entryModeChanged(TimePickerEntryMode? value) {",
    "    if (value != entryMode) {",
    "      setState(() {",
    "        entryMode = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _orientationChanged(Orientation? value) {",
    "    if (value != orientation) {",
    "      setState(() {",
    "        orientation = value;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _textDirectionChanged(TextDirection? value) {",
    "    if (value != textDirection) {",
    "      setState(() {",
    "        textDirection = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _tapTargetSizeChanged(MaterialTapTargetSize? value) {",
    "    if (value != tapTargetSize) {",
    "      setState(() {",
    "        tapTargetSize = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _use24HourTimeChanged(bool? value) {",
    "    if (value != use24HourTime) {",
    "      setState(() {",
    "        use24HourTime = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _themeModeChanged(ThemeMode? value) {",
    "    widget.setThemeMode(value!);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: Column(",
    "        children: <Widget>[",
    "          Expanded(",
    "            child: GridView(",
    "              gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(",
    "                maxCrossAxisExtent: 350,",
    "                mainAxisSpacing: 4,",
    "                mainAxisExtent: 200 * MediaQuery.textScaleFactorOf(context),",
    "                crossAxisSpacing: 4,",
    "              ),",
    "              children: <Widget>[",
    "                EnumCard<TimePickerEntryMode>(",
    "                  choices: TimePickerEntryMode.values,",
    "                  value: entryMode,",
    "                  onChanged: _entryModeChanged,",
    "                ),",
    "                EnumCard<ThemeMode>(",
    "                  choices: ThemeMode.values,",
    "                  value: widget.themeMode,",
    "                  onChanged: _themeModeChanged,",
    "                ),",
    "                EnumCard<TextDirection>(",
    "                  choices: TextDirection.values,",
    "                  value: textDirection,",
    "                  onChanged: _textDirectionChanged,",
    "                ),",
    "                EnumCard<MaterialTapTargetSize>(",
    "                  choices: MaterialTapTargetSize.values,",
    "                  value: tapTargetSize,",
    "                  onChanged: _tapTargetSizeChanged,",
    "                ),",
    "                ChoiceCard<Orientation?>(",
    "                  choices: const <Orientation?>[...Orientation.values, null],",
    "                  value: orientation,",
    "                  title: '$Orientation',",
    "                  choiceLabels: <Orientation?, String>{",
    "                    for (final Orientation choice in Orientation.values) choice: choice.name,",
    "                    null: 'from MediaQuery',",
    "                  },",
    "                  onChanged: _orientationChanged,",
    "                ),",
    "                ChoiceCard<bool>(",
    "                  choices: const <bool>[false, true],",
    "                  value: use24HourTime,",
    "                  onChanged: _use24HourTimeChanged,",
    "                  title: 'Time Mode',",
    "                  choiceLabels: const <bool, String>{",
    "                    false: '12-hour am/pm time',",
    "                    true: '24-hour time',",
    "                  },",
    "                ),",
    "                ChoiceCard<bool>(",
    "                  choices: const <bool>[false, true],",
    "                  value: widget.useMaterial3,",
    "                  onChanged: widget.setUseMaterial3,",
    "                  title: 'Material Version',",
    "                  choiceLabels: const <bool, String>{",
    "                    false: 'Material 2',",
    "                    true: 'Material 3',",
    "                  },",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "          SingleChildScrollView(",
    "            scrollDirection: Axis.horizontal,",
    "            child: Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(12.0),",
    "                  child: ElevatedButton(",
    "                    child: const Text('Open time picker'),",
    "                    onPressed: () async {",
    "                      final TimeOfDay? time = await showTimePicker(",
    "                        context: context,",
    "                        initialTime: selectedTime ?? TimeOfDay.now(),",
    "                        initialEntryMode: entryMode,",
    "                        orientation: orientation,",
    "                        builder: (BuildContext context, Widget? child) {",
    "                          // We just wrap these environmental changes around the",
    "                          // child in this builder so that we can apply the",
    "                          // options selected above. In regular usage, this is",
    "                          // rarely necessary, because the default values are",
    "                          // usually used as-is.",
    "                          return Theme(",
    "                            data: Theme.of(context).copyWith(",
    "                              materialTapTargetSize: tapTargetSize,",
    "                            ),",
    "                            child: Directionality(",
    "                              textDirection: textDirection,",
    "                              child: MediaQuery(",
    "                                data: MediaQuery.of(context).copyWith(",
    "                                  alwaysUse24HourFormat: use24HourTime,",
    "                                ),",
    "                                child: child!,",
    "                              ),",
    "                            ),",
    "                          );",
    "                        },",
    "                      );",
    "                      setState(() {",
    "                        selectedTime = time;",
    "                      });",
    "                    },",
    "                  ),",
    "                ),",
    "                if (selectedTime != null) Text('Selected time: ${selectedTime!.format(context)}'),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This is a simple card that presents a set of radio buttons (inside of a",
    "// RadioSelection, defined below) for the user to select from.",
    "class ChoiceCard<T extends Object?> extends StatelessWidget {",
    "  const ChoiceCard({",
    "    super.key,",
    "    required this.value,",
    "    required this.choices,",
    "    required this.onChanged,",
    "    required this.choiceLabels,",
    "    required this.title,",
    "  });",
    "",
    "  final T value;",
    "  final Iterable<T> choices;",
    "  final Map<T, String> choiceLabels;",
    "  final String title;",
    "  final ValueChanged<T?> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Card(",
    "      // If the card gets too small, let it scroll both directions.",
    "      child: SingleChildScrollView(",
    "        child: SingleChildScrollView(",
    "          scrollDirection: Axis.horizontal,",
    "          child: Padding(",
    "            padding: const EdgeInsets.all(8.0),",
    "            child: Column(",
    "              crossAxisAlignment: CrossAxisAlignment.start,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(8.0),",
    "                  child: Text(title),",
    "                ),",
    "                for (final T choice in choices)",
    "                  RadioSelection<T>(",
    "                    value: choice,",
    "                    groupValue: value,",
    "                    onChanged: onChanged,",
    "                    child: Text(choiceLabels[choice]!),",
    "                  ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This aggregates a ChoiceCard so that it presents a set of radio buttons for",
    "// the allowed enum values for the user to select from.",
    "class EnumCard<T extends Enum> extends StatelessWidget {",
    "  const EnumCard({",
    "    super.key,",
    "    required this.value,",
    "    required this.choices,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final T value;",
    "  final Iterable<T> choices;",
    "  final ValueChanged<T?> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ChoiceCard<T>(",
    "        value: value,",
    "        choices: choices,",
    "        onChanged: onChanged,",
    "        choiceLabels: <T, String>{",
    "          for (final T choice in choices) choice: choice.name,",
    "        },",
    "        title: value.runtimeType.toString());",
    "  }",
    "}",
    "",
    "// A button that has a radio button on one side and a label child. Tapping on",
    "// the label or the radio button selects the item.",
    "class RadioSelection<T extends Object?> extends StatefulWidget {",
    "  const RadioSelection({",
    "    super.key,",
    "    required this.value,",
    "    required this.groupValue,",
    "    required this.onChanged,",
    "    required this.child,",
    "  });",
    "",
    "  final T value;",
    "  final T? groupValue;",
    "  final ValueChanged<T?> onChanged;",
    "  final Widget child;",
    "",
    "  @override",
    "  State<RadioSelection<T>> createState() => _RadioSelectionState<T>();",
    "}",
    "",
    "class _RadioSelectionState<T extends Object?> extends State<RadioSelection<T>> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      mainAxisSize: MainAxisSize.min,",
    "      children: <Widget>[",
    "        Padding(",
    "          padding: const EdgeInsetsDirectional.only(end: 8),",
    "          child: Radio<T>(",
    "            groupValue: widget.groupValue,",
    "            value: widget.value,",
    "            onChanged: widget.onChanged,",
    "          ),",
    "        ),",
    "        GestureDetector(onTap: () => widget.onChanged(widget.value), child: widget.child),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Time picker, Radio button  Example"
},
"Flutter  Toggle Button  Example": {
  "prefix": "flutter-togglebutton",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ToggleButtons].",
    "",
    "const List<Widget> fruits = <Widget>[Text('Apple'), Text('Banana'), Text('Orange')];",
    "",
    "const List<Widget> vegetables = <Widget>[Text('Tomatoes'), Text('Potatoes'), Text('Carrots')];",
    "",
    "const List<Widget> icons = <Widget>[",
    "  Icon(Icons.sunny),",
    "  Icon(Icons.cloud),",
    "  Icon(Icons.ac_unit),",
    "];",
    "",
    "void main() => runApp(const ToggleButtonsExampleApp());",
    "",
    "class ToggleButtonsExampleApp extends StatelessWidget {",
    "  const ToggleButtonsExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const ToggleButtonsSample(title: 'ToggleButtons Sample'),",
    "    );",
    "  }",
    "}",
    "",
    "class ToggleButtonsSample extends StatefulWidget {",
    "  const ToggleButtonsSample({super.key, required this.title});",
    "",
    "  final String title;",
    "",
    "  @override",
    "  State<ToggleButtonsSample> createState() => _ToggleButtonsSampleState();",
    "}",
    "",
    "class _ToggleButtonsSampleState extends State<ToggleButtonsSample> {",
    "  final List<bool> _selectedFruits = <bool>[true, false, false];",
    "  final List<bool> _selectedVegetables = <bool>[false, true, false];",
    "  final List<bool> _selectedWeather = <bool>[false, false, true];",
    "  bool vertical = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData theme = Theme.of(context);",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(widget.title)),",
    "      body: Center(",
    "        child: SingleChildScrollView(",
    "          child: Column(",
    "            mainAxisSize: MainAxisSize.min,",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              // ToggleButtons with a single selection.",
    "              Text('Single-select', style: theme.textTheme.titleSmall),",
    "              const SizedBox(height: 5),",
    "              ToggleButtons(",
    "                direction: vertical ? Axis.vertical : Axis.horizontal,",
    "                onPressed: (int index) {",
    "                  setState(() {",
    "                    // The button that is tapped is set to true, and the others to false.",
    "                    for (int i = 0; i < _selectedFruits.length; i++) {",
    "                      _selectedFruits[i] = i == index;",
    "                    }",
    "                  });",
    "                },",
    "                borderRadius: const BorderRadius.all(Radius.circular(8)),",
    "                selectedBorderColor: Colors.red[700],",
    "                selectedColor: Colors.white,",
    "                fillColor: Colors.red[200],",
    "                color: Colors.red[400],",
    "                constraints: const BoxConstraints(",
    "                  minHeight: 40.0,",
    "                  minWidth: 80.0,",
    "                ),",
    "                isSelected: _selectedFruits,",
    "                children: fruits,",
    "              ),",
    "              const SizedBox(height: 20),",
    "              // ToggleButtons with a multiple selection.",
    "              Text('Multi-select', style: theme.textTheme.titleSmall),",
    "              const SizedBox(height: 5),",
    "              ToggleButtons(",
    "                direction: vertical ? Axis.vertical : Axis.horizontal,",
    "                onPressed: (int index) {",
    "                  // All buttons are selectable.",
    "                  setState(() {",
    "                    _selectedVegetables[index] = !_selectedVegetables[index];",
    "                  });",
    "                },",
    "                borderRadius: const BorderRadius.all(Radius.circular(8)),",
    "                selectedBorderColor: Colors.green[700],",
    "                selectedColor: Colors.white,",
    "                fillColor: Colors.green[200],",
    "                color: Colors.green[400],",
    "                constraints: const BoxConstraints(",
    "                  minHeight: 40.0,",
    "                  minWidth: 80.0,",
    "                ),",
    "                isSelected: _selectedVegetables,",
    "                children: vegetables,",
    "              ),",
    "              const SizedBox(height: 20),",
    "              // ToggleButtons with icons only.",
    "              Text('Icon-only', style: theme.textTheme.titleSmall),",
    "              const SizedBox(height: 5),",
    "              ToggleButtons(",
    "                direction: vertical ? Axis.vertical : Axis.horizontal,",
    "                onPressed: (int index) {",
    "                  setState(() {",
    "                    // The button that is tapped is set to true, and the others to false.",
    "                    for (int i = 0; i < _selectedWeather.length; i++) {",
    "                      _selectedWeather[i] = i == index;",
    "                    }",
    "                  });",
    "                },",
    "                borderRadius: const BorderRadius.all(Radius.circular(8)),",
    "                selectedBorderColor: Colors.blue[700],",
    "                selectedColor: Colors.white,",
    "                fillColor: Colors.blue[200],",
    "                color: Colors.blue[400],",
    "                isSelected: _selectedWeather,",
    "                children: icons,",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton.extended(",
    "        onPressed: () {",
    "          setState(() {",
    "            // When the button is pressed, ToggleButtons direction is changed.",
    "            vertical = !vertical;",
    "          });",
    "        },",
    "        icon: const Icon(Icons.screen_rotation_outlined),",
    "        label: Text(vertical ? 'Horizontal' : 'Vertical'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Toggle Button  Example"
},
"Flutter  Tooltip  Example": {
  "prefix": "flutter-tooltip",
  "scope":"dart",
  "body": [
    "// Copyright 2014 The Flutter Authors. All rights reserved.",
    "// Use of this source code is governed by a BSD-style license that can be",
    "// found in the LICENSE file.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Tooltip].",
    "",
    "void main() => runApp(const TooltipExampleApp());",
    "",
    "class TooltipExampleApp extends StatelessWidget {",
    "  const TooltipExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TooltipSample(title: 'Tooltip Sample'),",
    "    );",
    "  }",
    "}",
    "",
    "class TooltipSample extends StatelessWidget {",
    "  const TooltipSample({super.key, required this.title});",
    "",
    "  final String title;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final GlobalKey<TooltipState> tooltipkey = GlobalKey<TooltipState>();",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(title)),",
    "      body: Center(",
    "        child: Tooltip(",
    "          // Provide a global key with the \"TooltipState\" type to show",
    "          // the tooltip manually when trigger mode is set to manual.",
    "          key: tooltipkey,",
    "          triggerMode: TooltipTriggerMode.manual,",
    "          showDuration: const Duration(seconds: 1),",
    "          message: 'I am a Tooltip',",
    "          child: const Text('Tap on the FAB'),",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton.extended(",
    "        onPressed: () {",
    "          // Show Tooltip programmatically on button tap.",
    "          tooltipkey.currentState?.ensureTooltipVisible();",
    "        },",
    "        label: const Text('Show Tooltip'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Tooltip  Example"
},
"Flutter  Animated Grid  Example": {
  "prefix": "flutter-animatedgrid",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedGrid].",
    "",
    "void main() {",
    "  runApp(const AnimatedGridSample());",
    "}",
    "",
    "class AnimatedGridSample extends StatefulWidget {",
    "  const AnimatedGridSample({super.key});",
    "",
    "  @override",
    "  State<AnimatedGridSample> createState() => _AnimatedGridSampleState();",
    "}",
    "",
    "class _AnimatedGridSampleState extends State<AnimatedGridSample> {",
    "  final GlobalKey<AnimatedGridState> _gridKey = GlobalKey<AnimatedGridState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _gridKey,",
    "      initialItems: <int>[0, 1, 2, 3, 4, 5],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 6;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  // Used to build an item after it has been removed from the list. This method",
    "  // is needed because a removed item remains visible until its animation has",
    "  // completed (even though it's gone as far as this ListModel is concerned).",
    "  // The widget will be used by the [AnimatedGridState.removeItem] method's",
    "  // [AnimatedGridRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: item,",
    "      removing: true,",
    "      // No gesture detector here: we don't want removed items to be interactive.",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    setState(() {",
    "      _list.insert(index, _nextItem++);",
    "    });",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      setState(() {",
    "        _list.removeAt(_list.indexOf(_selectedItem!));",
    "        _selectedItem = null;",
    "      });",
    "    } else if (_list.length > 0) {",
    "      setState(() {",
    "        _list.removeAt(_list.length - 1);",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text(",
    "            'AnimatedGrid',",
    "            style: TextStyle(fontSize: 30),",
    "          ),",
    "          centerTitle: true,",
    "          leading: IconButton(",
    "            icon: const Icon(Icons.remove_circle),",
    "            iconSize: 32,",
    "            onPressed: (_list.length > 0) ? _remove : null,",
    "            tooltip: 'remove the selected item',",
    "          ),",
    "          actions: <Widget>[",
    "            IconButton(",
    "              icon: const Icon(Icons.add_circle),",
    "              iconSize: 32,",
    "              onPressed: _insert,",
    "              tooltip: 'insert a new item',",
    "            ),",
    "          ],",
    "        ),",
    "        body: Padding(",
    "          padding: const EdgeInsets.all(16.0),",
    "          child: AnimatedGrid(",
    "            key: _gridKey,",
    "            gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(",
    "              maxCrossAxisExtent: 100.0,",
    "              mainAxisSpacing: 10.0,",
    "              crossAxisSpacing: 10.0,",
    "            ),",
    "            initialItemCount: _list.length,",
    "            itemBuilder: _buildItem,",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder<T> = Widget Function(T item, BuildContext context, Animation<double> animation);",
    "",
    "/// Keeps a Dart [List] in sync with an [AnimatedGrid].",
    "///",
    "/// The [insert] and [removeAt] methods apply to both the internal list and",
    "/// the animated list that belongs to [listKey].",
    "///",
    "/// This class only exposes as much of the Dart List API as is needed by the",
    "/// sample app. More list methods are easily added, however methods that",
    "/// mutate the list must make the same changes to the animated list in terms",
    "/// of [AnimatedGridState.insertItem] and [AnimatedGrid.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<AnimatedGridState> listKey;",
    "  final RemovedItemBuilder<E> removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  AnimatedGridState? get _animatedGrid => listKey.currentState;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedGrid!.insertItem(",
    "      index,",
    "      duration: const Duration(milliseconds: 500),",
    "    );",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedGrid!.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) {",
    "          return removedItemBuilder(removedItem, context, animation);",
    "        },",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "/// Displays its integer item as 'item N' on a Card whose color is based on",
    "/// the item's value.",
    "///",
    "/// The text is displayed in bright green if [selected] is",
    "/// true. This widget's height is based on the [animation] parameter, it",
    "/// varies from 0 to 128 as the animation varies from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    this.removing = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "  final bool removing;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    TextStyle textStyle = Theme.of(context).textTheme.headlineMedium!;",
    "    if (selected) {",
    "      textStyle = textStyle.copyWith(color: Colors.lightGreenAccent[400]);",
    "    }",
    "    return Padding(",
    "      padding: const EdgeInsets.all(2.0),",
    "      child: ScaleTransition(",
    "        scale: CurvedAnimation(parent: animation, curve: removing ? Curves.easeInOut : Curves.bounceOut),",
    "        child: GestureDetector(",
    "          behavior: HitTestBehavior.opaque,",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text('${item + 1}', style: textStyle),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Animated Grid  Example"
},
"Flutter  SliverAnimatedGrid  Example": {
  "prefix": "flutter-sliver animated grid",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverAnimatedGrid].",
    "",
    "void main() => runApp(const SliverAnimatedGridSample());",
    "",
    "class SliverAnimatedGridSample extends StatefulWidget {",
    "  const SliverAnimatedGridSample({super.key});",
    "",
    "  @override",
    "  State<SliverAnimatedGridSample> createState() => _SliverAnimatedGridSampleState();",
    "}",
    "",
    "class _SliverAnimatedGridSampleState extends State<SliverAnimatedGridSample> {",
    "  final GlobalKey<SliverAnimatedGridState> _listKey = GlobalKey<SliverAnimatedGridState>();",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "  final GlobalKey<ScaffoldMessengerState> _scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _listKey,",
    "      initialItems: <int>[0, 1, 2, 3, 4, 5],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 6;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  // Used to build an item after it has been removed from the list. This",
    "  // method is needed because a removed item remains visible until its",
    "  // animation has completed (even though it's gone as far this ListModel is",
    "  // concerned). The widget will be used by the",
    "  // [AnimatedGridState.removeItem] method's",
    "  // [AnimatedGridRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      removing: true,",
    "      item: item,",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    _list.insert(index, _nextItem++);",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      _list.removeAt(_list.indexOf(_selectedItem!));",
    "    } else {",
    "      _list.removeAt(_list.length - 1);",
    "    }",
    "    setState(() {",
    "      _selectedItem = null;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      scaffoldMessengerKey: _scaffoldMessengerKey,",
    "      debugShowCheckedModeBanner: false,",
    "      home: Scaffold(",
    "        key: _scaffoldKey,",
    "        body: CustomScrollView(",
    "          slivers: <Widget>[",
    "            SliverAppBar(",
    "              title: const Text(",
    "                'SliverAnimatedGrid',",
    "                style: TextStyle(fontSize: 30),",
    "              ),",
    "              expandedHeight: 60,",
    "              centerTitle: true,",
    "              backgroundColor: Colors.amber[900],",
    "              leading: IconButton(",
    "                icon: const Icon(Icons.remove_circle),",
    "                onPressed: _remove,",
    "                tooltip: 'Remove the selected item, or the last item if none selected.',",
    "                iconSize: 32,",
    "              ),",
    "              actions: <Widget>[",
    "                IconButton(",
    "                  icon: const Icon(Icons.add_circle),",
    "                  onPressed: _insert,",
    "                  tooltip: 'Insert a new item.',",
    "                  iconSize: 32,",
    "                ),",
    "              ],",
    "            ),",
    "            SliverAnimatedGrid(",
    "              key: _listKey,",
    "              initialItemCount: _list.length,",
    "              gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(",
    "                maxCrossAxisExtent: 100.0,",
    "                mainAxisSpacing: 10.0,",
    "                crossAxisSpacing: 10.0,",
    "              ),",
    "              itemBuilder: _buildItem,",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder = Widget Function(int item, BuildContext context, Animation<double> animation);",
    "",
    "// Keeps a Dart [List] in sync with an [AnimatedGrid].",
    "//",
    "// The [insert] and [removeAt] methods apply to both the internal list and",
    "// the animated list that belongs to [listKey].",
    "//",
    "// This class only exposes as much of the Dart List API as is needed by the",
    "// sample app. More list methods are easily added, however methods that",
    "// mutate the list must make the same changes to the animated list in terms",
    "// of [AnimatedGridState.insertItem] and [AnimatedGrid.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<SliverAnimatedGridState> listKey;",
    "  final RemovedItemBuilder removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  SliverAnimatedGridState get _animatedGrid => listKey.currentState!;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedGrid.insertItem(index);",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedGrid.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) => removedItemBuilder(index, context, animation),",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "// Displays its integer item as 'Item N' on a Card whose color is based on",
    "// the item's value.",
    "//",
    "// The card turns gray when [selected] is true. This widget's height",
    "// is based on the [animation] parameter. It varies as the animation value",
    "// transitions from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    this.removing = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "  final bool removing;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.only(",
    "        left: 2.0,",
    "        right: 2.0,",
    "        top: 2.0,",
    "      ),",
    "      child: ScaleTransition(",
    "        scale: CurvedAnimation(parent: animation, curve: removing ? Curves.easeInOut : Curves.bounceOut),",
    "        child: GestureDetector(",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: selected ? Colors.black12 : Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text(",
    "                  (item + 1).toString(),",
    "                  style: Theme.of(context).textTheme.headlineMedium,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  SliverAnimatedGrid  Example"
},
"Flutter  SliverAnimatedList  Example": {
  "prefix": "flutter-sliver animated list",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverAnimatedList].",
    "",
    "void main() => runApp(const SliverAnimatedListSample());",
    "",
    "class SliverAnimatedListSample extends StatefulWidget {",
    "  const SliverAnimatedListSample({super.key});",
    "",
    "  @override",
    "  State<SliverAnimatedListSample> createState() => _SliverAnimatedListSampleState();",
    "}",
    "",
    "class _SliverAnimatedListSampleState extends State<SliverAnimatedListSample> {",
    "  final GlobalKey<SliverAnimatedListState> _listKey = GlobalKey<SliverAnimatedListState>();",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "  final GlobalKey<ScaffoldMessengerState> _scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _listKey,",
    "      initialItems: <int>[0, 1, 2],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 3;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  /// The builder function used to build items that have been removed.",
    "  ///",
    "  /// Used to build an item after it has been removed from the list. This method",
    "  /// is needed because a removed item remains visible until its animation has",
    "  /// completed (even though it's gone as far this ListModel is concerned). The",
    "  /// widget will be used by the [AnimatedListState.removeItem] method's",
    "  /// [AnimatedRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: item,",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    _list.insert(index, _nextItem++);",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      _list.removeAt(_list.indexOf(_selectedItem!));",
    "      setState(() {",
    "        _selectedItem = null;",
    "      });",
    "    } else {",
    "      _scaffoldMessengerKey.currentState!.showSnackBar(const SnackBar(",
    "        content: Text(",
    "          'Select an item to remove from the list.',",
    "          style: TextStyle(fontSize: 20),",
    "        ),",
    "      ));",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      scaffoldMessengerKey: _scaffoldMessengerKey,",
    "      home: Scaffold(",
    "        key: _scaffoldKey,",
    "        body: CustomScrollView(",
    "          slivers: <Widget>[",
    "            SliverAppBar(",
    "              title: const Text(",
    "                'SliverAnimatedList',",
    "                style: TextStyle(fontSize: 30),",
    "              ),",
    "              expandedHeight: 60,",
    "              centerTitle: true,",
    "              backgroundColor: Colors.amber[900],",
    "              leading: IconButton(",
    "                icon: const Icon(Icons.add_circle),",
    "                onPressed: _insert,",
    "                tooltip: 'Insert a new item.',",
    "                iconSize: 32,",
    "              ),",
    "              actions: <Widget>[",
    "                IconButton(",
    "                  icon: const Icon(Icons.remove_circle),",
    "                  onPressed: _remove,",
    "                  tooltip: 'Remove the selected item.',",
    "                  iconSize: 32,",
    "                ),",
    "              ],",
    "            ),",
    "            SliverAnimatedList(",
    "              key: _listKey,",
    "              initialItemCount: _list.length,",
    "              itemBuilder: _buildItem,",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder<E> = Widget Function(E item, BuildContext context, Animation<double> animation);",
    "",
    "// Keeps a Dart [List] in sync with an [AnimatedList].",
    "//",
    "// The [insert] and [removeAt] methods apply to both the internal list and",
    "// the animated list that belongs to [listKey].",
    "//",
    "// This class only exposes as much of the Dart List API as is needed by the",
    "// sample app. More list methods are easily added, however methods that",
    "// mutate the list must make the same changes to the animated list in terms",
    "// of [AnimatedListState.insertItem] and [AnimatedList.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<SliverAnimatedListState> listKey;",
    "  final RemovedItemBuilder<E> removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  SliverAnimatedListState get _animatedList => listKey.currentState!;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedList.insertItem(index);",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedList.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) => removedItemBuilder(removedItem, context, animation),",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "// Displays its integer item as 'Item N' on a Card whose color is based on",
    "// the item's value.",
    "//",
    "// The card turns gray when [selected] is true. This widget's height",
    "// is based on the [animation] parameter. It varies as the animation value",
    "// transitions from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.only(",
    "        left: 2.0,",
    "        right: 2.0,",
    "        top: 2.0,",
    "      ),",
    "      child: SizeTransition(",
    "        sizeFactor: animation,",
    "        child: GestureDetector(",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: selected ? Colors.black12 : Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text(",
    "                  'Item $item',",
    "                  style: Theme.of(context).textTheme.headlineMedium,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  SliverAnimatedList  Example"
},
"Flutter  AnimatedList  Example": {
  "prefix": "flutter-animated list",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedList].",
    "",
    "void main() {",
    "  runApp(const AnimatedListSample());",
    "}",
    "",
    "class AnimatedListSample extends StatefulWidget {",
    "  const AnimatedListSample({super.key});",
    "",
    "  @override",
    "  State<AnimatedListSample> createState() => _AnimatedListSampleState();",
    "}",
    "",
    "class _AnimatedListSampleState extends State<AnimatedListSample> {",
    "  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _listKey,",
    "      initialItems: <int>[0, 1, 2],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 3;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  /// The builder function used to build items that have been removed.",
    "  ///",
    "  /// Used to build an item after it has been removed from the list. This method",
    "  /// is needed because a removed item remains visible until its animation has",
    "  /// completed (even though it's gone as far as this ListModel is concerned).",
    "  /// The widget will be used by the [AnimatedListState.removeItem] method's",
    "  /// [AnimatedRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: item,",
    "      // No gesture detector here: we don't want removed items to be interactive.",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    _list.insert(index, _nextItem++);",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      _list.removeAt(_list.indexOf(_selectedItem!));",
    "      setState(() {",
    "        _selectedItem = null;",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('AnimatedList'),",
    "          actions: <Widget>[",
    "            IconButton(",
    "              icon: const Icon(Icons.add_circle),",
    "              onPressed: _insert,",
    "              tooltip: 'insert a new item',",
    "            ),",
    "            IconButton(",
    "              icon: const Icon(Icons.remove_circle),",
    "              onPressed: _remove,",
    "              tooltip: 'remove the selected item',",
    "            ),",
    "          ],",
    "        ),",
    "        body: Padding(",
    "          padding: const EdgeInsets.all(16.0),",
    "          child: AnimatedList(",
    "            key: _listKey,",
    "            initialItemCount: _list.length,",
    "            itemBuilder: _buildItem,",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder<T> = Widget Function(T item, BuildContext context, Animation<double> animation);",
    "",
    "/// Keeps a Dart [List] in sync with an [AnimatedList].",
    "///",
    "/// The [insert] and [removeAt] methods apply to both the internal list and",
    "/// the animated list that belongs to [listKey].",
    "///",
    "/// This class only exposes as much of the Dart List API as is needed by the",
    "/// sample app. More list methods are easily added, however methods that",
    "/// mutate the list must make the same changes to the animated list in terms",
    "/// of [AnimatedListState.insertItem] and [AnimatedList.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<AnimatedListState> listKey;",
    "  final RemovedItemBuilder<E> removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  AnimatedListState? get _animatedList => listKey.currentState;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedList!.insertItem(index);",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedList!.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) {",
    "          return removedItemBuilder(removedItem, context, animation);",
    "        },",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "/// Displays its integer item as 'item N' on a Card whose color is based on",
    "/// the item's value.",
    "///",
    "/// The text is displayed in bright green if [selected] is",
    "/// true. This widget's height is based on the [animation] parameter, it",
    "/// varies from 0 to 128 as the animation varies from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    TextStyle textStyle = Theme.of(context).textTheme.headlineMedium!;",
    "    if (selected) {",
    "      textStyle = textStyle.copyWith(color: Colors.lightGreenAccent[400]);",
    "    }",
    "    return Padding(",
    "      padding: const EdgeInsets.all(2.0),",
    "      child: SizeTransition(",
    "        sizeFactor: animation,",
    "        child: GestureDetector(",
    "          behavior: HitTestBehavior.opaque,",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text('Item $item', style: textStyle),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AnimatedList  Example"
},
"Flutter  Animatedsize  Example": {
  "prefix": "flutter-animated size",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedSize].",
    "",
    "void main() => runApp(const AnimatedSizeExampleApp());",
    "",
    "class AnimatedSizeExampleApp extends StatelessWidget {",
    "  const AnimatedSizeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AnimatedSize Sample')),",
    "        body: const Center(",
    "          child: AnimatedSizeExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedSizeExample extends StatefulWidget {",
    "  const AnimatedSizeExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedSizeExample> createState() => _AnimatedSizeExampleState();",
    "}",
    "",
    "class _AnimatedSizeExampleState extends State<AnimatedSizeExample> {",
    "  double _size = 50.0;",
    "  bool _large = false;",
    "",
    "  void _updateSize() {",
    "    setState(() {",
    "      _size = _large ? 250.0 : 100.0;",
    "      _large = !_large;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return GestureDetector(",
    "      onTap: () => _updateSize(),",
    "      child: ColoredBox(",
    "        color: Colors.amberAccent,",
    "        child: AnimatedSize(",
    "          curve: Curves.easeIn,",
    "          duration: const Duration(seconds: 1),",
    "          child: FlutterLogo(size: _size),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Animatedsize  Example"
},
"Flutter  AnimatedSwitcher  Example": {
  "prefix": "flutter-animated switcher",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedSwitcher].",
    "",
    "void main() => runApp(const AnimatedSwitcherExampleApp());",
    "",
    "class AnimatedSwitcherExampleApp extends StatelessWidget {",
    "  const AnimatedSwitcherExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: AnimatedSwitcherExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedSwitcherExample extends StatefulWidget {",
    "  const AnimatedSwitcherExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedSwitcherExample> createState() => _AnimatedSwitcherExampleState();",
    "}",
    "",
    "class _AnimatedSwitcherExampleState extends State<AnimatedSwitcherExample> {",
    "  int _count = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ColoredBox(",
    "      color: Colors.white,",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          AnimatedSwitcher(",
    "            duration: const Duration(milliseconds: 500),",
    "            transitionBuilder: (Widget child, Animation<double> animation) {",
    "              return ScaleTransition(scale: animation, child: child);",
    "            },",
    "            child: Text(",
    "              '$_count',",
    "              // This key causes the AnimatedSwitcher to interpret this as a \"new\"",
    "              // child each time the count changes, so that it will begin its animation",
    "              // when the count changes.",
    "              key: ValueKey<int>(_count),",
    "              style: Theme.of(context).textTheme.headlineMedium,",
    "            ),",
    "          ),",
    "          ElevatedButton(",
    "            child: const Text('Increment'),",
    "            onPressed: () {",
    "              setState(() {",
    "                _count += 1;",
    "              });",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AnimatedSwitcher  Example"
},
"Flutter  AppLifecycleListener  Example": {
  "prefix": "flutter-app lifecycle listener",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/scheduler.dart';",
    "",
    "/// Flutter code sample for [AppLifecycleListener].",
    "",
    "void main() {",
    "  runApp(const AppLifecycleListenerExample());",
    "}",
    "",
    "class AppLifecycleListenerExample extends StatelessWidget {",
    "  const AppLifecycleListenerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: AppLifecycleDisplay()),",
    "    );",
    "  }",
    "}",
    "",
    "class AppLifecycleDisplay extends StatefulWidget {",
    "  const AppLifecycleDisplay({super.key});",
    "",
    "  @override",
    "  State<AppLifecycleDisplay> createState() => _AppLifecycleDisplayState();",
    "}",
    "",
    "class _AppLifecycleDisplayState extends State<AppLifecycleDisplay> {",
    "  late final AppLifecycleListener _listener;",
    "  final ScrollController _scrollController = ScrollController();",
    "  final List<String> _states = <String>[];",
    "  late AppLifecycleState? _state;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _state = SchedulerBinding.instance.lifecycleState;",
    "    _listener = AppLifecycleListener(",
    "      onShow: () => _handleTransition('show'),",
    "      onResume: () => _handleTransition('resume'),",
    "      onHide: () => _handleTransition('hide'),",
    "      onInactive: () => _handleTransition('inactive'),",
    "      onPause: () => _handleTransition('pause'),",
    "      onDetach: () => _handleTransition('detach'),",
    "      onRestart: () => _handleTransition('restart'),",
    "      // This fires for each state change. Callbacks above fire only for",
    "      // specific state transitions.",
    "      onStateChange: _handleStateChange,",
    "    );",
    "    if (_state != null) {",
    "      _states.add(_state!.name);",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _listener.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _handleTransition(String name) {",
    "    setState(() {",
    "      _states.add(name);",
    "    });",
    "    _scrollController.animateTo(",
    "      _scrollController.position.maxScrollExtent,",
    "      duration: const Duration(milliseconds: 200),",
    "      curve: Curves.easeOut,",
    "    );",
    "  }",
    "",
    "  void _handleStateChange(AppLifecycleState state) {",
    "    setState(() {",
    "      _state = state;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: SizedBox(",
    "        width: 300,",
    "        child: SingleChildScrollView(",
    "          controller: _scrollController,",
    "          child: Column(",
    "            children: <Widget>[",
    "              Text('Current State: ${_state ?? 'Not initialized yet'}'),",
    "              const SizedBox(height: 30),",
    "              Text('State History:\\n  ${_states.join('\\n  ')}'),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AppLifecycleListener  Example"
},
"Flutter  AppLifecycleListener  Example": {
  "prefix": "flutter-app lifecycle listener 2",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:ui';",
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [AppLifecycleListener].",
    "",
    "void main() {",
    "  runApp(const AppLifecycleListenerExample());",
    "}",
    "",
    "class AppLifecycleListenerExample extends StatelessWidget {",
    "  const AppLifecycleListenerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: ApplicationExitControl()),",
    "    );",
    "  }",
    "}",
    "",
    "class ApplicationExitControl extends StatefulWidget {",
    "  const ApplicationExitControl({super.key});",
    "",
    "  @override",
    "  State<ApplicationExitControl> createState() => _ApplicationExitControlState();",
    "}",
    "",
    "class _ApplicationExitControlState extends State<ApplicationExitControl> {",
    "  late final AppLifecycleListener _listener;",
    "  bool _shouldExit = false;",
    "  String _lastExitResponse = 'No exit requested yet';",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _listener = AppLifecycleListener(",
    "      onExitRequested: _handleExitRequest,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _listener.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  Future<void> _quit() async {",
    "    final AppExitType exitType = _shouldExit ? AppExitType.required : AppExitType.cancelable;",
    "    await ServicesBinding.instance.exitApplication(exitType);",
    "  }",
    "",
    "  Future<AppExitResponse> _handleExitRequest() async {",
    "    final AppExitResponse response = _shouldExit ? AppExitResponse.exit : AppExitResponse.cancel;",
    "    setState(() {",
    "      _lastExitResponse = 'App responded ${response.name} to exit request';",
    "    });",
    "    return response;",
    "  }",
    "",
    "  void _radioChanged(bool? value) {",
    "    value ??= true;",
    "    if (_shouldExit == value) {",
    "      return;",
    "    }",
    "    setState(() {",
    "      _shouldExit = value!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: SizedBox(",
    "        width: 300,",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            RadioListTile<bool>(",
    "              title: const Text('Do Not Allow Exit'),",
    "              groupValue: _shouldExit,",
    "              value: false,",
    "              onChanged: _radioChanged,",
    "            ),",
    "            RadioListTile<bool>(",
    "              title: const Text('Allow Exit'),",
    "              groupValue: _shouldExit,",
    "              value: true,",
    "              onChanged: _radioChanged,",
    "            ),",
    "            const SizedBox(height: 30),",
    "            ElevatedButton(",
    "              onPressed: _quit,",
    "              child: const Text('Quit'),",
    "            ),",
    "            const SizedBox(height: 30),",
    "            Text('Exit Request: $_lastExitResponse'),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AppLifecycleListener  Example"
},
"Flutter  FutureBuilder  Example": {
  "prefix": "Flutter-futurebuilder ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FutureBuilder].",
    "",
    "void main() => runApp(const FutureBuilderExampleApp());",
    "",
    "class FutureBuilderExampleApp extends StatelessWidget {",
    "  const FutureBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: FutureBuilderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class FutureBuilderExample extends StatefulWidget {",
    "  const FutureBuilderExample({super.key});",
    "",
    "  @override",
    "  State<FutureBuilderExample> createState() => _FutureBuilderExampleState();",
    "}",
    "",
    "class _FutureBuilderExampleState extends State<FutureBuilderExample> {",
    "  final Future<String> _calculation = Future<String>.delayed(",
    "    const Duration(seconds: 2),",
    "    () => 'Data Loaded',",
    "  );",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTextStyle(",
    "      style: Theme.of(context).textTheme.displayMedium!,",
    "      textAlign: TextAlign.center,",
    "      child: FutureBuilder<String>(",
    "        future: _calculation, // a previously-obtained Future<String> or null",
    "        builder: (BuildContext context, AsyncSnapshot<String> snapshot) {",
    "          List<Widget> children;",
    "          if (snapshot.hasData) {",
    "            children = <Widget>[",
    "              const Icon(",
    "                Icons.check_circle_outline,",
    "                color: Colors.green,",
    "                size: 60,",
    "              ),",
    "              Padding(",
    "                padding: const EdgeInsets.only(top: 16),",
    "                child: Text('Result: ${snapshot.data}'),",
    "              ),",
    "            ];",
    "          } else if (snapshot.hasError) {",
    "            children = <Widget>[",
    "              const Icon(",
    "                Icons.error_outline,",
    "                color: Colors.red,",
    "                size: 60,",
    "              ),",
    "              Padding(",
    "                padding: const EdgeInsets.only(top: 16),",
    "                child: Text('Error: ${snapshot.error}'),",
    "              ),",
    "            ];",
    "          } else {",
    "            children = const <Widget>[",
    "              SizedBox(",
    "                width: 60,",
    "                height: 60,",
    "                child: CircularProgressIndicator(),",
    "              ),",
    "              Padding(",
    "                padding: EdgeInsets.only(top: 16),",
    "                child: Text('Awaiting result...'),",
    "              ),",
    "            ];",
    "          }",
    "          return Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: children,",
    "            ),",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  FutureBuilder  Example"
},
"Flutter  StreamBuilder  Example": {
  "prefix": "Flutter-streambuilder ",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:async';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [StreamBuilder].",
    "",
    "void main() => runApp(const StreamBuilderExampleApp());",
    "",
    "class StreamBuilderExampleApp extends StatelessWidget {",
    "  const StreamBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: StreamBuilderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class StreamBuilderExample extends StatefulWidget {",
    "  const StreamBuilderExample({super.key});",
    "",
    "  @override",
    "  State<StreamBuilderExample> createState() => _StreamBuilderExampleState();",
    "}",
    "",
    "class _StreamBuilderExampleState extends State<StreamBuilderExample> {",
    "  final Stream<int> _bids = (() {",
    "    late final StreamController<int> controller;",
    "    controller = StreamController<int>(",
    "      onListen: () async {",
    "        await Future<void>.delayed(const Duration(seconds: 1));",
    "        controller.add(1);",
    "        await Future<void>.delayed(const Duration(seconds: 1));",
    "        await controller.close();",
    "      },",
    "    );",
    "    return controller.stream;",
    "  })();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTextStyle(",
    "      style: Theme.of(context).textTheme.displayMedium!,",
    "      textAlign: TextAlign.center,",
    "      child: Container(",
    "        alignment: FractionalOffset.center,",
    "        color: Colors.white,",
    "        child: StreamBuilder<int>(",
    "          stream: _bids,",
    "          builder: (BuildContext context, AsyncSnapshot<int> snapshot) {",
    "            List<Widget> children;",
    "            if (snapshot.hasError) {",
    "              children = <Widget>[",
    "                const Icon(",
    "                  Icons.error_outline,",
    "                  color: Colors.red,",
    "                  size: 60,",
    "                ),",
    "                Padding(",
    "                  padding: const EdgeInsets.only(top: 16),",
    "                  child: Text('Error: ${snapshot.error}'),",
    "                ),",
    "                Padding(",
    "                  padding: const EdgeInsets.only(top: 8),",
    "                  child: Text('Stack trace: ${snapshot.stackTrace}'),",
    "                ),",
    "              ];",
    "            } else {",
    "              switch (snapshot.connectionState) {",
    "                case ConnectionState.none:",
    "                  children = const <Widget>[",
    "                    Icon(",
    "                      Icons.info,",
    "                      color: Colors.blue,",
    "                      size: 60,",
    "                    ),",
    "                    Padding(",
    "                      padding: EdgeInsets.only(top: 16),",
    "                      child: Text('Select a lot'),",
    "                    ),",
    "                  ];",
    "                case ConnectionState.waiting:",
    "                  children = const <Widget>[",
    "                    SizedBox(",
    "                      width: 60,",
    "                      height: 60,",
    "                      child: CircularProgressIndicator(),",
    "                    ),",
    "                    Padding(",
    "                      padding: EdgeInsets.only(top: 16),",
    "                      child: Text('Awaiting bids...'),",
    "                    ),",
    "                  ];",
    "                case ConnectionState.active:",
    "                  children = <Widget>[",
    "                    const Icon(",
    "                      Icons.check_circle_outline,",
    "                      color: Colors.green,",
    "                      size: 60,",
    "                    ),",
    "                    Padding(",
    "                      padding: const EdgeInsets.only(top: 16),",
    "                      child: Text('\\$${snapshot.data}'),",
    "                    ),",
    "                  ];",
    "                case ConnectionState.done:",
    "                  children = <Widget>[",
    "                    const Icon(",
    "                      Icons.info,",
    "                      color: Colors.blue,",
    "                      size: 60,",
    "                    ),",
    "                    Padding(",
    "                      padding: const EdgeInsets.only(top: 16),",
    "                      child: Text('\\$${snapshot.data} (closed)'),",
    "                    ),",
    "                  ];",
    "              }",
    "            }",
    "",
    "            return Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: children,",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  StreamBuilder  Example"
},
"Flutter  RawAutocomplete  Example": {
  "prefix": "Flutter-rawautocomplete ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RawAutocomplete].",
    "",
    "void main() => runApp(const AutocompleteExampleApp());",
    "",
    "class AutocompleteExampleApp extends StatelessWidget {",
    "  const AutocompleteExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('RawAutocomplete Custom Type'),",
    "        ),",
    "        body: const Center(",
    "          child: AutocompleteCustomTypeExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// An example of a type that someone might want to autocomplete a list of.",
    "@immutable",
    "class User {",
    "  const User({",
    "    required this.email,",
    "    required this.name,",
    "  });",
    "",
    "  final String email;",
    "  final String name;",
    "",
    "  @override",
    "  String toString() {",
    "    return '$name, $email';",
    "  }",
    "",
    "  @override",
    "  bool operator ==(Object other) {",
    "    if (other.runtimeType != runtimeType) {",
    "      return false;",
    "    }",
    "    return other is User && other.name == name && other.email == email;",
    "  }",
    "",
    "  @override",
    "  int get hashCode => Object.hash(email, name);",
    "}",
    "",
    "class AutocompleteCustomTypeExample extends StatelessWidget {",
    "  const AutocompleteCustomTypeExample({super.key});",
    "",
    "  static const List<User> _userOptions = <User>[",
    "    User(name: 'Alice', email: 'alice@example.com'),",
    "    User(name: 'Bob', email: 'bob@example.com'),",
    "    User(name: 'Charlie', email: 'charlie123@gmail.com'),",
    "  ];",
    "",
    "  static String _displayStringForOption(User option) => option.name;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RawAutocomplete<User>(",
    "      optionsBuilder: (TextEditingValue textEditingValue) {",
    "        return _userOptions.where((User option) {",
    "          // Search based on User.toString, which includes both name and",
    "          // email, even though the display string is just the name.",
    "          return option.toString().contains(textEditingValue.text.toLowerCase());",
    "        });",
    "      },",
    "      displayStringForOption: _displayStringForOption,",
    "      fieldViewBuilder: (",
    "        BuildContext context,",
    "        TextEditingController textEditingController,",
    "        FocusNode focusNode,",
    "        VoidCallback onFieldSubmitted,",
    "      ) {",
    "        return TextFormField(",
    "          controller: textEditingController,",
    "          focusNode: focusNode,",
    "          onFieldSubmitted: (String value) {",
    "            onFieldSubmitted();",
    "          },",
    "        );",
    "      },",
    "      optionsViewBuilder: (BuildContext context, AutocompleteOnSelected<User> onSelected, Iterable<User> options) {",
    "        return Align(",
    "          alignment: Alignment.topLeft,",
    "          child: Material(",
    "            elevation: 4.0,",
    "            child: SizedBox(",
    "              height: 200.0,",
    "              child: ListView.builder(",
    "                padding: const EdgeInsets.all(8.0),",
    "                itemCount: options.length,",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  final User option = options.elementAt(index);",
    "                  return GestureDetector(",
    "                    onTap: () {",
    "                      onSelected(option);",
    "                    },",
    "                    child: ListTile(",
    "                      title: Text(_displayStringForOption(option)),",
    "                    ),",
    "                  );",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  RawAutocomplete  Example"
},
"Flutter Split RawAutocomplete  Example": {
  "prefix": "Flutter-rawautocomplete split",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for split[RawAutocomplete.focusNode] .",
    "",
    "void main() => runApp(const AutocompleteExampleApp());",
    "",
    "class AutocompleteExampleApp extends StatelessWidget {",
    "  const AutocompleteExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RawAutocompleteSplit(),",
    "    );",
    "  }",
    "}",
    "",
    "const List<String> _options = <String>[",
    "  'aardvark',",
    "  'bobcat',",
    "  'chameleon',",
    "];",
    "",
    "class RawAutocompleteSplit extends StatefulWidget {",
    "  const RawAutocompleteSplit({super.key});",
    "",
    "  @override",
    "  RawAutocompleteSplitState createState() => RawAutocompleteSplitState();",
    "}",
    "",
    "class RawAutocompleteSplitState extends State<RawAutocompleteSplit> {",
    "  final TextEditingController _textEditingController = TextEditingController();",
    "  final FocusNode _focusNode = FocusNode();",
    "  final GlobalKey _autocompleteKey = GlobalKey();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        // This is where the real field is being built.",
    "        title: TextFormField(",
    "          controller: _textEditingController,",
    "          focusNode: _focusNode,",
    "          decoration: const InputDecoration(",
    "            hintText: 'Split RawAutocomplete App',",
    "          ),",
    "          onFieldSubmitted: (String value) {",
    "            RawAutocomplete.onFieldSubmitted<String>(_autocompleteKey);",
    "          },",
    "        ),",
    "      ),",
    "      body: Align(",
    "        alignment: Alignment.topLeft,",
    "        child: RawAutocomplete<String>(",
    "          key: _autocompleteKey,",
    "          focusNode: _focusNode,",
    "          textEditingController: _textEditingController,",
    "          optionsBuilder: (TextEditingValue textEditingValue) {",
    "            return _options.where((String option) {",
    "              return option.contains(textEditingValue.text.toLowerCase());",
    "            }).toList();",
    "          },",
    "          optionsViewBuilder: (",
    "            BuildContext context,",
    "            AutocompleteOnSelected<String> onSelected,",
    "            Iterable<String> options,",
    "          ) {",
    "            return Material(",
    "              elevation: 4.0,",
    "              child: ListView(",
    "                children: options",
    "                    .map((String option) => GestureDetector(",
    "                          onTap: () {",
    "                            onSelected(option);",
    "                          },",
    "                          child: ListTile(",
    "                            title: Text(option),",
    "                          ),",
    "                        ))",
    "                    .toList(),",
    "              ),",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Split RawAutocomplete  Example"
},
"Flutter DropdowFormField  Example": {
  "prefix": "Flutter-drop-down form field ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DropdowFormField].",
    "",
    "void main() => runApp(const DropdowFormField());",
    "",
    "class DropdowFormField extends StatelessWidget {",
    "  const DropdowFormField({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('RawAutocomplete Form'),",
    "        ),",
    "        body: const Center(",
    "          child: DropdowForm(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DropdowForm extends StatefulWidget {",
    "  const DropdowForm({super.key});",
    "",
    "  @override",
    "  DropdowFormState createState() => DropdowFormState();",
    "}",
    "",
    "class DropdowFormState extends State<DropdowForm> {",
    "  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();",
    "  String? _dropdownValue;",
    "",
    "",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Form(",
    "      key: _formKey,",
    "      child: Column(",
    "        children: <Widget>[",
    "          DropdownButtonFormField<String>(",
    "            value: _dropdownValue,",
    "            icon: const Icon(Icons.arrow_downward),",
    "            hint: const Text('This is a regular DropdownButtonFormField'),",
    "            elevation: 16,",
    "            style: const TextStyle(color: Colors.deepPurple),",
    "            onChanged: (String? newValue) {",
    "              setState(() {",
    "                _dropdownValue = newValue;",
    "              });",
    "            },",
    "            items: <String>['One', 'Two', 'Free', 'Four'].map<DropdownMenuItem<String>>((String value) {",
    "              return DropdownMenuItem<String>(",
    "                value: value,",
    "                child: Text(value),",
    "              );",
    "            }).toList(),",
    "            validator: (String? value) {",
    "              if (value == null) {",
    "                return 'Must make a selection.';",
    "              }",
    "              return null;",
    "            },",
    "          ),",
    "         ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DropdowFormField  Example"
},
"Flutter AutofillGroup  Example": {
  "prefix": "Flutter-autofill group",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AutofillGroup].",
    "",
    "void main() => runApp(const AutofillGroupExampleApp());",
    "",
    "class AutofillGroupExampleApp extends StatelessWidget {",
    "  const AutofillGroupExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AutofillGroup Sample')),",
    "        body: const AutofillGroupExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AutofillGroupExample extends StatefulWidget {",
    "  const AutofillGroupExample({super.key});",
    "",
    "  @override",
    "  State<AutofillGroupExample> createState() => _AutofillGroupExampleState();",
    "}",
    "",
    "class _AutofillGroupExampleState extends State<AutofillGroupExample> {",
    "  bool isSameAddress = true;",
    "  final TextEditingController shippingAddress1 = TextEditingController();",
    "  final TextEditingController shippingAddress2 = TextEditingController();",
    "  final TextEditingController billingAddress1 = TextEditingController();",
    "  final TextEditingController billingAddress2 = TextEditingController();",
    "",
    "  final TextEditingController creditCardNumber = TextEditingController();",
    "  final TextEditingController creditCardSecurityCode = TextEditingController();",
    "",
    "  final TextEditingController phoneNumber = TextEditingController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListView(",
    "      children: <Widget>[",
    "        const Text('Shipping address'),",
    "        // The address fields are grouped together as some platforms are",
    "        // capable of autofilling all of these fields in one go.",
    "        AutofillGroup(",
    "          child: Column(",
    "            children: <Widget>[",
    "              TextField(",
    "                controller: shippingAddress1,",
    "                autofillHints: const <String>[AutofillHints.streetAddressLine1],",
    "              ),",
    "              TextField(",
    "                controller: shippingAddress2,",
    "                autofillHints: const <String>[AutofillHints.streetAddressLine2],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "        const Text('Billing address'),",
    "        Checkbox(",
    "          value: isSameAddress,",
    "          onChanged: (bool? newValue) {",
    "            if (newValue != null) {",
    "              setState(() {",
    "                isSameAddress = newValue;",
    "              });",
    "            }",
    "          },",
    "        ),",
    "        // Again the address fields are grouped together for the same reason.",
    "        if (!isSameAddress)",
    "          AutofillGroup(",
    "            child: Column(",
    "              children: <Widget>[",
    "                TextField(",
    "                  controller: billingAddress1,",
    "                  autofillHints: const <String>[",
    "                    AutofillHints.streetAddressLine1,",
    "                  ],",
    "                ),",
    "                TextField(",
    "                  controller: billingAddress2,",
    "                  autofillHints: const <String>[",
    "                    AutofillHints.streetAddressLine2,",
    "                  ],",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        const Text('Credit Card Information'),",
    "        // The credit card number and the security code are grouped together",
    "        // as some platforms are capable of autofilling both fields.",
    "        AutofillGroup(",
    "          child: Column(",
    "            children: <Widget>[",
    "              TextField(",
    "                controller: creditCardNumber,",
    "                autofillHints: const <String>[AutofillHints.creditCardNumber],",
    "              ),",
    "              TextField(",
    "                controller: creditCardSecurityCode,",
    "                autofillHints: const <String>[",
    "                  AutofillHints.creditCardSecurityCode,",
    "                ],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "        const Text('Contact Phone Number'),",
    "        // The phone number field can still be autofilled despite lacking an",
    "        // `AutofillScope`.",
    "        TextField(",
    "          controller: phoneNumber,",
    "          autofillHints: const <String>[AutofillHints.telephoneNumber],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AutofillGroup  Example"
},
"Flutter AbsorbPointer  Example": {
  "prefix": "Flutter-absorb pointer",
  "scope":"dart",
  "body": [
    ".",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AbsorbPointer].",
    "",
    "void main() => runApp(const AbsorbPointerApp());",
    "",
    "class AbsorbPointerApp extends StatelessWidget {",
    "  const AbsorbPointerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AbsorbPointer Sample')),",
    "        body: const Center(",
    "          child: AbsorbPointerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AbsorbPointerExample extends StatelessWidget {",
    "  const AbsorbPointerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Stack(",
    "      alignment: AlignmentDirectional.center,",
    "      children: <Widget>[",
    "        ",
    "        SizedBox(",
    "          width: 100.0,",
    "          height: 200.0,",
    "          child: AbsorbPointer(",
    "            child: ElevatedButton(",
    "              style: ElevatedButton.styleFrom(",
    "                backgroundColor: Colors.blue.shade200,",
    "              ),",
    "              onPressed: () {",
    "                              print(\"gg\");",
    "",
    "              },",
    "              child: null,",
    "            ),",
    "          ),",
    "        ),",
    "        SizedBox(",
    "          width: 200.0,",
    "          height: 100.0,",
    "          child: ElevatedButton(",
    "            onPressed: () {",
    "              print(\"ff\");",
    "            },",
    "            child: null,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AbsorbPointer  Example"
},
"Flutter Actions Shortcut Example": {
  "prefix": "flutter-shortcutkey",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [Action.Action.overridable].",
    "",
    "void main() {",
    "  runApp(",
    "    const MaterialApp(",
    "      home: Scaffold(",
    "        body: Center(child: VerificationCodeGenerator()),",
    "      ),",
    "    ),",
    "  );",
    "}",
    "",
    "const CopyTextIntent copyTextIntent = CopyTextIntent._();",
    "",
    "class CopyTextIntent extends Intent {",
    "  const CopyTextIntent._();",
    "}",
    "",
    "class CopyableText extends StatelessWidget {",
    "  const CopyableText({super.key, required this.text});",
    "",
    "  final String text;",
    "",
    "  void _copy(CopyTextIntent intent) => Clipboard.setData(ClipboardData(text: text));",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Action<CopyTextIntent> defaultCopyAction = CallbackAction<CopyTextIntent>(onInvoke: _copy);",
    "    return Shortcuts(",
    "      shortcuts: const <ShortcutActivator, Intent>{",
    "        SingleActivator(LogicalKeyboardKey.keyC, control: true): copyTextIntent",
    "      },",
    "      child: Actions(",
    "        actions: <Type, Action<Intent>>{",
    "          // The Action is made overridable so the VerificationCodeGenerator",
    "          // widget can override how copying is handled.",
    "          CopyTextIntent: Action<CopyTextIntent>.overridable(defaultAction: defaultCopyAction, context: context),",
    "        },",
    "        child: Focus(",
    "          autofocus: true,",
    "          child: DefaultTextStyle.merge(",
    "            style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),",
    "            child: Text(text),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class VerificationCodeGenerator extends StatelessWidget {",
    "  const VerificationCodeGenerator({super.key});",
    "",
    "  void _copy(CopyTextIntent intent) {",
    "    debugPrint('Content copied');",
    "    Clipboard.setData(const ClipboardData(text: '111222333'));",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Actions(",
    "      actions: <Type, Action<Intent>>{CopyTextIntent: CallbackAction<CopyTextIntent>(onInvoke: _copy)},",
    "      child: const Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Text('Press Ctrl-C to Copy'),",
    "          SizedBox(height: 10),",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              CopyableText(text: '111'),",
    "              SizedBox(width: 5),",
    "              CopyableText(text: '222'),",
    "              SizedBox(width: 5),",
    "              CopyableText(text: '333'),",
    "            ],",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Actions Shortcut Example"
},
"Flutter AspectRatio Example": {
  "prefix": "aspectratio",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AspectRatio].",
    "",
    "void main() => runApp(const AspectRatioApp());",
    "",
    "class AspectRatioApp extends StatelessWidget {",
    "  const AspectRatioApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AspectRatio Sample')),",
    "        body: const AspectRatioExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AspectRatioExample extends StatelessWidget {",
    "  const AspectRatioExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      color: Colors.blue,",
    "      alignment: Alignment.center,",
    "      width: double.infinity,",
    "      height: 100.0,",
    "      child: AspectRatio(",
    "        aspectRatio: 16 / 9,",
    "        child: Container(",
    "          color: Colors.green,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AspectRatio Example"
},
"Flutter ClipRRect Example": {
  "prefix": "flutter-cliprrect",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ClipRRect].",
    "",
    "void main() => runApp(const ClipRRectApp());",
    "",
    "class ClipRRectApp extends StatelessWidget {",
    "  const ClipRRectApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ClipRRect Sample')),",
    "        body: const ClipRRectExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ClipRRectExample extends StatelessWidget {",
    "  const ClipRRectExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    const TextStyle style = TextStyle(color: Colors.white);",
    "",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "        children: <Widget>[",
    "          Container(",
    "            alignment: Alignment.center,",
    "            constraints: const BoxConstraints(",
    "              maxWidth: 300,",
    "              maxHeight: 100,",
    "            ),",
    "            color: Colors.blue,",
    "            child: const Text('No ClipRRect', style: style),",
    "          ),",
    "          ClipRRect(",
    "            borderRadius: BorderRadius.circular(30.0),",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              constraints: const BoxConstraints(",
    "                maxWidth: 300,",
    "                maxHeight: 100,",
    "              ),",
    "              color: Colors.green,",
    "              child: const Text('ClipRRect', style: style),",
    "            ),",
    "          ),",
    "          ClipRRect(",
    "            borderRadius: const BorderRadius.only(",
    "              topLeft: Radius.circular(10.0),",
    "              topRight: Radius.circular(20.0),",
    "              bottomRight: Radius.circular(30.0),",
    "              bottomLeft: Radius.circular(40.0),",
    "            ),",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              constraints: const BoxConstraints(",
    "                maxWidth: 300,",
    "                maxHeight: 100,",
    "              ),",
    "              color: Colors.purple,",
    "              child: const Text('ClipRRect', style: style),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ClipRRect Example"
},
"Flutter CustomMultiChildLayout Example": {
  "prefix": "flutter-custom multichild layout",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [CustomMultiChildLayout].",
    "",
    "void main() => runApp(const CustomMultiChildLayoutApp());",
    "",
    "class CustomMultiChildLayoutApp extends StatelessWidget {",
    "  const CustomMultiChildLayoutApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Directionality(",
    "        // TRY THIS: Try changing the direction here and hot-reloading to",
    "        // see the layout change.",
    "        textDirection: TextDirection.ltr,",
    "        child: Scaffold(",
    "          body: CustomMultiChildLayoutExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "/// Lays out the children in a cascade, where the top corner of the next child",
    "/// is a little above (`overlap`) the lower end corner of the previous child.",
    "///",
    "/// Will relayout if the text direction changes.",
    "class _CascadeLayoutDelegate extends MultiChildLayoutDelegate {",
    "  _CascadeLayoutDelegate({",
    "    required this.colors,",
    "    required this.overlap,",
    "    required this.textDirection,",
    "  });",
    "",
    "  final Map<String, Color> colors;",
    "  final double overlap;",
    "  final TextDirection textDirection;",
    "",
    "  // Perform layout will be called when re-layout is needed.",
    "  @override",
    "  void performLayout(Size size) {",
    "    final double columnWidth = size.width / colors.length;",
    "    Offset childPosition = Offset.zero;",
    "    switch (textDirection) {",
    "      case TextDirection.rtl:",
    "        childPosition += Offset(size.width, 0);",
    "      case TextDirection.ltr:",
    "        break;",
    "    }",
    "    for (final String color in colors.keys) {",
    "      // layoutChild must be called exactly once for each child.",
    "      final Size currentSize = layoutChild(",
    "        color,",
    "        BoxConstraints(maxHeight: size.height, maxWidth: columnWidth),",
    "      );",
    "      // positionChild must be called to change the position of a child from",
    "      // what it was in the previous layout. Each child starts at (0, 0) for the",
    "      // first layout.",
    "      switch (textDirection) {",
    "        case TextDirection.rtl:",
    "          positionChild(color, childPosition - Offset(currentSize.width, 0));",
    "          childPosition += Offset(-currentSize.width, currentSize.height - overlap);",
    "        case TextDirection.ltr:",
    "          positionChild(color, childPosition);",
    "          childPosition += Offset(currentSize.width, currentSize.height - overlap);",
    "      }",
    "    }",
    "  }",
    "",
    "  // shouldRelayout is called to see if the delegate has changed and requires a",
    "  // layout to occur. Should only return true if the delegate state itself",
    "  // changes: changes in the CustomMultiChildLayout attributes will",
    "  // automatically cause a relayout, like any other widget.",
    "  @override",
    "  bool shouldRelayout(_CascadeLayoutDelegate oldDelegate) {",
    "    return oldDelegate.textDirection != textDirection || oldDelegate.overlap != overlap;",
    "  }",
    "}",
    "",
    "class CustomMultiChildLayoutExample extends StatelessWidget {",
    "  const CustomMultiChildLayoutExample({super.key});",
    "",
    "  static const Map<String, Color> _colors = <String, Color>{",
    "    'Red': Colors.red,",
    "    'Green': Colors.green,",
    "    'Blue': Colors.blue,",
    "    'Cyan': Colors.cyan,",
    "  };",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomMultiChildLayout(",
    "      delegate: _CascadeLayoutDelegate(",
    "        colors: _colors,",
    "        overlap: 30.0,",
    "        textDirection: Directionality.of(context),",
    "      ),",
    "      children: <Widget>[",
    "        // Create all of the colored boxes in the colors map.",
    "        for (final MapEntry<String, Color> entry in _colors.entries)",
    "          // The \"id\" can be any Object, not just a String.",
    "          LayoutId(",
    "            id: entry.key,",
    "            child: Container(",
    "              color: entry.value,",
    "              width: 100.0,",
    "              height: 100.0,",
    "              alignment: Alignment.center,",
    "              child: Text(entry.key),",
    "            ),",
    "          ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CustomMultiChildLayout Example"
},
"Flutter Expanded Example": {
  "prefix": "expanded",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Expanded].",
    "",
    "void main() => runApp(const ExpandedApp());",
    "",
    "class ExpandedApp extends StatelessWidget {",
    "  const ExpandedApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Expanded Row Sample'),",
    "        ),",
    "        body: const ExpandedExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ExpandedExample extends StatelessWidget {",
    "  const ExpandedExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Row(",
    "        children: <Widget>[",
    "          Expanded(",
    "            flex: 2,",
    "            child: Container(",
    "              color: Colors.amber,",
    "              height: 100,",
    "            ),",
    "          ),",
    "          Container(",
    "            color: Colors.blue,",
    "            height: 100,",
    "            width: 50,",
    "          ),",
    "          Expanded(",
    "            child: Container(",
    "              color: Colors.amber,",
    "              height: 100,",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Expanded Example"
},
"Flutter Fittedbox Example": {
  "prefix": "fittedbox",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FittedBox].",
    "",
    "void main() => runApp(const FittedBoxApp());",
    "",
    "class FittedBoxApp extends StatelessWidget {",
    "  const FittedBoxApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('FittedBox Sample')),",
    "        body: const Center(",
    "          child: FittedBoxExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FittedBoxExample extends StatelessWidget {",
    "  const FittedBoxExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      height: 400,",
    "      width: 300,",
    "      color: Colors.blue,",
    "      child: const FittedBox(",
    "        // TRY THIS: Try changing the fit types to see how they change the way",
    "        // the placeholder fits into the container.",
    "        fit: BoxFit.fill,",
    "        child: Placeholder(),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Fittedbox Example"
},
"Flutter Flow Example": {
  "prefix": "flow",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Flow].",
    "",
    "void main() => runApp(const FlowApp());",
    "",
    "class FlowApp extends StatelessWidget {",
    "  const FlowApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Flow Example'),",
    "        ),",
    "        body: const FlowMenu(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FlowMenu extends StatefulWidget {",
    "  const FlowMenu({super.key});",
    "",
    "  @override",
    "  State<FlowMenu> createState() => _FlowMenuState();",
    "}",
    "",
    "class _FlowMenuState extends State<FlowMenu>",
    "    with SingleTickerProviderStateMixin {",
    "  late AnimationController menuAnimation;",
    "  IconData lastTapped = Icons.notifications;",
    "  final List<IconData> menuItems = <IconData>[",
    "    Icons.home,",
    "    Icons.new_releases,",
    "    Icons.notifications,",
    "    Icons.settings,",
    "    Icons.menu,",
    "  ];",
    "",
    "  void _updateMenu(IconData icon) {",
    "    if (icon != Icons.menu) {",
    "      setState(() => lastTapped = icon);",
    "    }",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    menuAnimation = AnimationController(",
    "      duration: const Duration(milliseconds: 250),",
    "      vsync: this,",
    "    );",
    "  }",
    "",
    "  Widget flowMenuItem(IconData icon) {",
    "    final double buttonDiameter =",
    "        MediaQuery.of(context).size.width / menuItems.length;",
    "    return Padding(",
    "      padding: const EdgeInsets.symmetric(vertical: 8.0),",
    "      child: RawMaterialButton(",
    "        fillColor: lastTapped == icon ? Colors.amber[700] : Colors.blue,",
    "        splashColor: Colors.amber[100],",
    "        shape: const CircleBorder(),",
    "        constraints: BoxConstraints.tight(Size(buttonDiameter, buttonDiameter)),",
    "        onPressed: () {",
    "          _updateMenu(icon);",
    "          menuAnimation.status == AnimationStatus.completed",
    "              ? menuAnimation.reverse()",
    "              : menuAnimation.forward();",
    "        },",
    "        child: Icon(",
    "          icon,",
    "          color: Colors.white,",
    "          size: 45.0,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Flow(",
    "      delegate: FlowMenuDelegate(menuAnimation: menuAnimation),",
    "      children:",
    "          menuItems.map<Widget>((IconData icon) => flowMenuItem(icon)).toList(),",
    "    );",
    "  }",
    "}",
    "",
    "class FlowMenuDelegate extends FlowDelegate {",
    "  FlowMenuDelegate({required this.menuAnimation})",
    "      : super(repaint: menuAnimation);",
    "",
    "  final Animation<double> menuAnimation;",
    "",
    "  @override",
    "  bool shouldRepaint(FlowMenuDelegate oldDelegate) {",
    "    return menuAnimation != oldDelegate.menuAnimation;",
    "  }",
    "",
    "  @override",
    "  void paintChildren(FlowPaintingContext context) {",
    "    double dx = 0.0;",
    "    for (int i = 0; i < context.childCount; ++i) {",
    "      dx = context.getChildSize(i)!.width * i;",
    "      context.paintChild(",
    "        i,",
    "        transform: Matrix4.translationValues(",
    "          dx * menuAnimation.value,",
    "          0,",
    "          0,",
    "        ),",
    "      );",
    "    }",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Flow Example"
},
"Flutter FractionallySizedBox Example": {
  "prefix": "fractionally sizedbox",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FractionallySizedBox].",
    "",
    "void main() => runApp(const FractionallySizedBoxApp());",
    "",
    "class FractionallySizedBoxApp extends StatelessWidget {",
    "  const FractionallySizedBoxApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('FractionallySizedBox Sample')),",
    "        body: const FractionallySizedBoxExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FractionallySizedBoxExample extends StatelessWidget {",
    "  const FractionallySizedBoxExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SizedBox.expand(",
    "      child: FractionallySizedBox(",
    "        widthFactor: 0.5,",
    "        heightFactor: 0.5,",
    "        alignment: FractionalOffset.center,",
    "        child: DecoratedBox(",
    "          decoration: BoxDecoration(",
    "            border: Border.all(",
    "              color: Colors.blue,",
    "              width: 4,",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FractionallySizedBox Example"
},
"Flutter IgnorePointer  Example": {
  "prefix": "Flutter-ignore pointer",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [IgnorePointer].",
    "",
    "void main() => runApp(const IgnorePointerApp());",
    "",
    "class IgnorePointerApp extends StatelessWidget {",
    "  const IgnorePointerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          centerTitle: true,",
    "          title: const Text('IgnorePointer Sample'),",
    "        ),",
    "        body: const Center(child: IgnorePointerExample()),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class IgnorePointerExample extends StatefulWidget {",
    "  const IgnorePointerExample({super.key});",
    "",
    "  @override",
    "  State<IgnorePointerExample> createState() => _IgnorePointerExampleState();",
    "}",
    "",
    "class _IgnorePointerExampleState extends State<IgnorePointerExample> {",
    "  bool ignoring = false;",
    "  void setIgnoring(bool newValue) {",
    "    setState(() {",
    "      ignoring = newValue;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "      children: <Widget>[",
    "        Text('Ignoring: $ignoring'),",
    "        IgnorePointer(",
    "          ignoring: ignoring,",
    "          child: ElevatedButton(",
    "            style: ElevatedButton.styleFrom(",
    "              padding: const EdgeInsets.all(24.0),",
    "            ),",
    "            onPressed: () {},",
    "            child: const Text('Click me!'),",
    "          ),",
    "        ),",
    "        FilledButton(",
    "          onPressed: () {",
    "            setIgnoring(!ignoring);",
    "          },",
    "          child: Text(",
    "            ignoring ? 'Set ignoring to false' : 'Set ignoring to true',",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter IgnorePointer  Example"
},
"Flutter IndexedStack  Example": {
  "prefix": "Flutter-indexed stack",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [IndexedStack].",
    "",
    "void main() => runApp(const IndexedStackApp());",
    "",
    "class IndexedStackApp extends StatelessWidget {",
    "  const IndexedStackApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('IndexedStack Sample')),",
    "        body: const IndexedStackExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class IndexedStackExample extends StatefulWidget {",
    "  const IndexedStackExample({super.key});",
    "",
    "  @override",
    "  State<IndexedStackExample> createState() => _IndexedStackExampleState();",
    "}",
    "",
    "class _IndexedStackExampleState extends State<IndexedStackExample> {",
    "  List<String> names = <String>['Dash', 'John', 'Mary'];",
    "  int index = 0;",
    "  final TextEditingController fieldText = TextEditingController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        SizedBox(",
    "          width: 300,",
    "          child: TextField(",
    "            decoration: const InputDecoration(",
    "              border: OutlineInputBorder(),",
    "              hintText: 'Enter the name for a person to track',",
    "            ),",
    "            onSubmitted: (String value) {",
    "              setState(() {",
    "                names.add(value);",
    "              });",
    "              fieldText.clear();",
    "            },",
    "            controller: fieldText,",
    "          ),",
    "        ),",
    "        const SizedBox(height: 50),",
    "        Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            GestureDetector(",
    "              onTap: () {",
    "                setState(() {",
    "                  if (index == 0) {",
    "                    index = names.length - 1;",
    "                  } else {",
    "                    index -= 1;",
    "                  }",
    "                });",
    "              },",
    "              child: const Icon(Icons.chevron_left, key: Key('gesture1')),",
    "            ),",
    "            Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                IndexedStack(",
    "                  index: index,",
    "                  children: <Widget>[",
    "                    for (final String name in names) PersonTracker(name: name)",
    "                  ],",
    "                )",
    "              ],",
    "            ),",
    "            GestureDetector(",
    "              onTap: () {",
    "                setState(() {",
    "                  if (index == names.length - 1) {",
    "                    index = 0;",
    "                  } else {",
    "                    index += 1;",
    "                  }",
    "                });",
    "              },",
    "              child: const Icon(Icons.chevron_right, key: Key('gesture2')),",
    "            ),",
    "          ],",
    "        )",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class PersonTracker extends StatefulWidget {",
    "  const PersonTracker({super.key, required this.name});",
    "  final String name;",
    "  @override",
    "  State<PersonTracker> createState() => _PersonTrackerState();",
    "}",
    "",
    "class _PersonTrackerState extends State<PersonTracker> {",
    "  int counter = 0;",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      key: Key(widget.name),",
    "      decoration: BoxDecoration(",
    "        color: const Color.fromARGB(255, 239, 248, 255),",
    "        border: Border.all(color: const Color.fromARGB(255, 54, 60, 244)),",
    "        borderRadius: const BorderRadius.all(Radius.circular(10)),",
    "      ),",
    "      padding: const EdgeInsets.all(16.0),",
    "      child: Column(",
    "        children: <Widget>[",
    "          Text('Name: ${widget.name}'),",
    "          Text('Score: $counter'),",
    "          TextButton.icon(",
    "            key: Key('increment${widget.name}'),",
    "            icon: const Icon(Icons.add),",
    "            onPressed: () {",
    "              setState(() {",
    "                counter += 1;",
    "              });",
    "            },",
    "            label: const Text('Increment'),",
    "          )",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter IndexedStack  Example"
},
"Flutter Listener  Example": {
  "prefix": "listener",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Listener].",
    "",
    "void main() => runApp(const ListenerApp());",
    "",
    "class ListenerApp extends StatelessWidget {",
    "  const ListenerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Listener Sample')),",
    "        body: const Center(",
    "          child: ListenerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListenerExample extends StatefulWidget {",
    "  const ListenerExample({super.key});",
    "",
    "  @override",
    "  State<ListenerExample> createState() => _ListenerExampleState();",
    "}",
    "",
    "class _ListenerExampleState extends State<ListenerExample> {",
    "  int _downCounter = 0;",
    "  int _upCounter = 0;",
    "  double x = 0.0;",
    "  double y = 0.0;",
    "",
    "  void _incrementDown(PointerEvent details) {",
    "    _updateLocation(details);",
    "    setState(() {",
    "      _downCounter++;",
    "    });",
    "  }",
    "",
    "  void _incrementUp(PointerEvent details) {",
    "    _updateLocation(details);",
    "    setState(() {",
    "      _upCounter++;",
    "    });",
    "  }",
    "",
    "  void _updateLocation(PointerEvent details) {",
    "    setState(() {",
    "      x = details.position.dx;",
    "      y = details.position.dy;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ConstrainedBox(",
    "      constraints: BoxConstraints.tight(const Size(300.0, 200.0)),",
    "      child: Listener(",
    "        onPointerDown: _incrementDown,",
    "        onPointerMove: _updateLocation,",
    "        onPointerUp: _incrementUp,",
    "        child: ColoredBox(",
    "          color: Colors.lightBlueAccent,",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text(",
    "                  'You have pressed or released in this area this many times:'),",
    "              Text(",
    "                '$_downCounter presses\\n$_upCounter releases',",
    "                style: Theme.of(context).textTheme.headlineMedium,",
    "              ),",
    "              Text(",
    "                'The cursor is here: (${x.toStringAsFixed(2)}, ${y.toStringAsFixed(2)})',",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Listener  Example"
}
  }