{
  
    " Flutter AboutListTile Example": {
        "scope": "dart",
        "prefix": "flutter-listtile-about ",
        "body": [
          "void main() => runApp(const AboutListTileExampleApp());",
          "",
          "class AboutListTileExampleApp extends StatelessWidget {",
          "  const AboutListTileExampleApp({super.key});",
          "",
"",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return const MaterialApp(",
          "      home: AboutListTileExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class AboutListTileExample extends StatelessWidget {",
          "  const AboutListTileExample({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    final ThemeData theme = Theme.of(context);",
          "    final TextStyle textStyle = theme.textTheme.bodyMedium!;",
          "    final List<Widget> aboutBoxChildren = <Widget>[",
          "      const SizedBox(height: 24),",
          "      RichText(",
          "        text: TextSpan(",
          "          children: <TextSpan>[",
          "            TextSpan(",
          "                style: textStyle,",
          "                text: \"Flutter is Google's UI toolkit for building beautiful, \"",
          "                    'natively compiled applications for mobile, web, and desktop '",
          "                    'from a single codebase. Learn more about Flutter at '),",
          "            TextSpan(",
          "                style: textStyle.copyWith(color: theme.colorScheme.primary),",
          "                text: 'https://flutter.dev'),",
          "            TextSpan(style: textStyle, text: '.'),",
          "          ],",
          "        ),",
          "      ),",
          "    ];",
          "",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('Show About Example'),",
          "      ),",
          "      drawer: Drawer(",
          "        child: SingleChildScrollView(",
          "          child: SafeArea(",
          "            child: AboutListTile(",
          "              icon: const Icon(Icons.info),",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              aboutBoxChildren: aboutBoxChildren,",
          "            ),",
          "          ),",
          "        ),",
          "      ),",
          "      body: Center(",
          "        child: ElevatedButton(",
          "          child: const Text('Show About Example'),",
          "          onPressed: () {",
          "            showAboutDialog(",
          "              context: context,",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              children: aboutBoxChildren,",
          "            );",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AboutListTile Example "
      },
      " Flutter AboutListTile Example": {
        "scope": "dart",
        "prefix": "flutter-AboutListTile",
        "body": [
          "void main() => runApp(const AboutListTileExampleApp());",
          "",
          "class AboutListTileExampleApp extends StatelessWidget {",
          "  const AboutListTileExampleApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return const MaterialApp(",
          "      home: AboutListTileExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class AboutListTileExample extends StatelessWidget {",
          "  const AboutListTileExample({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    final ThemeData theme = Theme.of(context);",
          "    final TextStyle textStyle = theme.textTheme.bodyMedium!;",
          "    final List<Widget> aboutBoxChildren = <Widget>[",
          "      const SizedBox(height: 24),",
          "      RichText(",
          "        text: TextSpan(",
          "          children: <TextSpan>[",
          "            TextSpan(",
          "                style: textStyle,",
          "                text: \"Flutter is Google's UI toolkit for building beautiful, \"",
          "                    'natively compiled applications for mobile, web, and desktop '",
          "                    'from a single codebase. Learn more about Flutter at '),",
          "            TextSpan(",
          "                style: textStyle.copyWith(color: theme.colorScheme.primary),",
          "                text: 'https://flutter.dev'),",
          "            TextSpan(style: textStyle, text: '.'),",
          "          ],",
          "        ),",
          "      ),",
          "    ];",
          "",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('Show About Example'),",
          "      ),",
          "      drawer: Drawer(",
          "        child: SingleChildScrollView(",
          "          child: SafeArea(",
          "            child: AboutListTile(",
          "              icon: const Icon(Icons.info),",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              aboutBoxChildren: aboutBoxChildren,",
          "            ),",
          "          ),",
          "        ),",
          "      ),",
          "      body: Center(",
          "        child: ElevatedButton(",
          "          child: const Text('Show About Example'),",
          "          onPressed: () {",
          "            showAboutDialog(",
          "              context: context,",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              children: aboutBoxChildren,",
          "            );",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AboutListTile Example "
      },
      "Dart Flutter ActionChip Example": {
        "scope": "dart",
        "prefix": "flutter-chip-action",
        "body": [
          "// Flutter code sample [ActionChip].",
          "import 'package:flutter/material.dart';",
          "",
          "void main() => runApp(const ChipApp());",
          "",
          "class ChipApp extends StatelessWidget {",
          "  const ChipApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
          "      home: const ActionChipExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class ActionChipExample extends StatefulWidget {",
          "  const ActionChipExample({super.key});",
          "",
          "  @override",
          "  State<ActionChipExample> createState() => _ActionChipExampleState();",
          "}",
          "",
          "class _ActionChipExampleState extends State<ActionChipExample> {",
          "  bool favorite = false;",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('ActionChip Sample'),",
          "      ),",
          "      body: Center(",
          "        child: ActionChip(",
          "          avatar: Icon(favorite ? Icons.favorite : Icons.favorite_border),",
          "          label: const Text('Save to favorites'),",
          "          onPressed: () {",
          "            setState(() {",
          "              favorite = !favorite;",
          "            });",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter ActionChip Example (Dart)"
      },
      "Dart Flutter ActionChip Example": {
        "scope": "dart",
        "prefix": "flutter-ActionChip",
        "body": [
          "// Flutter code sample [ActionChip].",
          "import 'package:flutter/material.dart';",
          "",
          "void main() => runApp(const ChipApp());",
          "",
          "class ChipApp extends StatelessWidget {",
          "  const ChipApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
          "      home: const ActionChipExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class ActionChipExample extends StatefulWidget {",
          "  const ActionChipExample({super.key});",
          "",
          "  @override",
          "  State<ActionChipExample> createState() => _ActionChipExampleState();",
          "}",
          "",
          "class _ActionChipExampleState extends State<ActionChipExample> {",
          "  bool favorite = false;",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('ActionChip Sample'),",
          "      ),",
          "      body: Center(",
          "        child: ActionChip(",
          "          avatar: Icon(favorite ? Icons.favorite : Icons.favorite_border),",
          "          label: const Text('Save to favorites'),",
          "          onPressed: () {",
          "            setState(() {",
          "              favorite = !favorite;",
          "            });",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter ActionChip Example (Dart)"
      },

      "Flutter AnimatedIcon Example": {
        "scope": "dart",
        "prefix": "flutter-animated-icon",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "void main() {",
          "  runApp(const AnimatedIconApp());",
          "}",
          "",
          "class AnimatedIconApp extends StatelessWidget {",
          "  const AnimatedIconApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const Scaffold(",
          "        body: AnimatedIconExample(),",
          "      ),",
          "    );",
          "  }",
          "}",
          "",
          "class AnimatedIconExample extends StatefulWidget {",
          "  const AnimatedIconExample({super.key});",
          "",
          "  @override",
          "  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();",
          "}",
          "",
          "class _AnimatedIconExampleState extends State<AnimatedIconExample> with SingleTickerProviderStateMixin {",
          "  late AnimationController controller;",
          "  late Animation<double> animation;",
          "",
          "  @override",
          "  void initState() {",
          "    super.initState();",
          "    controller = AnimationController(",
          "      vsync: this,",
          "      duration: const Duration(seconds: 2),",
          "    )",
          "      ..forward()",
          "      ..repeat(reverse: true);",
          "    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);",
          "  }",
          "",
          "  @override",
          "  void dispose() {",
          "    controller.dispose();",
          "    super.dispose();",
          "  }",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      body: Center(",
          "        child: AnimatedIcon(",
          "          icon: AnimatedIcons.menu_arrow,",
          "          progress: animation,",
          "          size: 72.0,",
          "          semanticLabel: 'Show menu',",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AnimatedIcon Example "
      },
      "Flutter AnimatedIcon Example": {
        "scope": "dart",
        "prefix": "flutter-AnimatedIcon",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "void main() {",
          "  runApp(const AnimatedIconApp());",
          "}",
          "",
          "class AnimatedIconApp extends StatelessWidget {",
          "  const AnimatedIconApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const Scaffold(",
          "        body: AnimatedIconExample(),",
          "      ),",
          "    );",
          "  }",
          "}",
          "",
          "class AnimatedIconExample extends StatefulWidget {",
          "  const AnimatedIconExample({super.key});",
          "",
          "  @override",
          "  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();",
          "}",
          "",
          "class _AnimatedIconExampleState extends State<AnimatedIconExample> with SingleTickerProviderStateMixin {",
          "  late AnimationController controller;",
          "  late Animation<double> animation;",
          "",
          "  @override",
          "  void initState() {",
          "    super.initState();",
          "    controller = AnimationController(",
          "      vsync: this,",
          "      duration: const Duration(seconds: 2),",
          "    )",
          "      ..forward()",
          "      ..repeat(reverse: true);",
          "    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);",
          "  }",
          "",
          "  @override",
          "  void dispose() {",
          "    controller.dispose();",
          "    super.dispose();",
          "  }",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      body: Center(",
          "        child: AnimatedIcon(",
          "          icon: AnimatedIcons.menu_arrow,",
          "          progress: animation,",
          "          size: 72.0,",
          "          semanticLabel: 'Show menu',",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AnimatedIcon Example "
      },
      "Dart Flutter AnimatedIcons Example": {
        "scope": "dart",
        "prefix": "flutter-animated-icons",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "// Define a map of AnimatedIcons.",
          "final Map<String, AnimatedIconData> iconsList = <String, AnimatedIconData>{",
          "  'add_event': AnimatedIcons.add_event,",
          "  'arrow_menu': AnimatedIcons.arrow_menu,",
          "  'close_menu': AnimatedIcons.close_menu,",
          "  'ellipsis_search': AnimatedIcons.ellipsis_search,",
          "  'event_add': AnimatedIcons.event_add,",
          "  'home_menu': AnimatedIcons.home_menu,",
          "  'list_view': AnimatedIcons.list_view,",
          "  'menu_arrow': AnimatedIcons.menu_arrow,",
          "  'menu_close': AnimatedIcons.menu_close,",
          "  'menu_home': AnimatedIcons.menu_home,",
          "  'pause_play': AnimatedIcons.pause_play,",
          "  'play_pause': AnimatedIcons.play_pause,",
          "  'search_ellipsis': AnimatedIcons.search_ellipsis,",
          "  'view_list': AnimatedIcons.view_list,",
          "};",
          "",
          "void main() {",
          "  runApp(const AnimatedIconApp());",
          "}",
          "",
          "class AnimatedIconApp extends StatelessWidget {",
          "  const AnimatedIconApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const Scaffold(",
          "        body: AnimatedIconExample(),",
          "      ),",
          "    );",
          "  }",
          "}",
          "",
          "class AnimatedIconExample extends StatefulWidget {",
          "  const AnimatedIconExample({super.key});",
          "",
          "  @override",
          "  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();",
          "}",
          "",
          "class _AnimatedIconExampleState extends State<AnimatedIconExample> with SingleTickerProviderStateMixin {",
          "  late AnimationController controller;",
          "  late Animation<double> animation;",
          "",
          "  @override",
          "  void initState() {",
          "    super.initState();",
          "    controller = AnimationController(",
          "      vsync: this,",
          "      duration: const Duration(seconds: 2),",
          "    )",
          "      ..forward()",
          "      ..repeat(reverse: true);",
          "    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);",
          "  }",
          "",
          "  @override",
          "  void dispose() {",
          "    controller.dispose();",
          "    super.dispose();",
          "  }",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      body: GridView(",
          "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
          "          crossAxisCount: 4,",
          "        ),",
          "        children: iconsList.entries.map((MapEntry<String, AnimatedIconData> entry) {",
          "          return Card(",
          "            child: Center(",
          "              child: Column(",
          "                mainAxisAlignment: MainAxisAlignment.center,",
          "                children: <Widget>[",
          "                  AnimatedIcon(",
          "                    icon: entry.value,",
          "                    progress: animation,",
          "                    size: 72.0,",
          "                    semanticLabel: entry.key,",
          "                  ),",
          "                  const SizedBox(height: 8.0),",
          "                  Text(entry.key),",
          "                ],",
          "              ),",
          "            ),",
          "          );",
          "        }).toList(),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AnimatedIcons Example "
      },
      "Dart Flutter AppBar Example": {
        "scope": "dart",
        "prefix": "flutter-AppBar",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "// Create a list of integers.",
          "final List<int> _items = List<int>.generate(51, (int index) => index);",
          "",
          "void main() => runApp(const AppBarApp());",
          "",
          "class AppBarApp extends StatelessWidget {",
          "  const AppBarApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const AppBarExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class AppBarExample extends StatefulWidget {",
          "  const AppBarExample({super.key});",
          "",
          "  @override",
          "  State<AppBarExample> createState() => _AppBarExampleState();",
          "}",
          "",
          "class _AppBarExampleState extends State<AppBarExample> {",
          "  bool shadowColor = false;",
          "  double? scrolledUnderElevation;",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    final ColorScheme colorScheme = Theme.of(context).colorScheme;",
          "    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);",
          "    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);",
          "",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('AppBar Demo'),",
          "        scrolledUnderElevation: scrolledUnderElevation,",
          "        shadowColor: shadowColor ? Theme.of(context).colorScheme.shadow : null,",
          "      ),",
          "      body: GridView.builder(",
          "        itemCount: _items.length,",
          "        padding: const EdgeInsets.all(8.0),",
          "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
          "          crossAxisCount: 3,",
          "          childAspectRatio: 2.0,",
          "          mainAxisSpacing: 10.0,",
          "          crossAxisSpacing: 10.0,",
          "        ),",
          "        itemBuilder: (BuildContext context, int index) {",
          "          if (index == 0) {",
          "            return Center(",
          "              child: Text(",
          "                'Scroll to see the AppBar in effect.',",
          "                style: Theme.of(context).textTheme.labelLarge,",
          "                textAlign: TextAlign.center,",
          "              ),",
          "            );",
          "          }",
          "          return Container(",
          "            alignment: Alignment.center,",
          "            decoration: BoxDecoration(",
          "              borderRadius: BorderRadius.circular(20.0),",
          "              color: _items[index].isOdd ? oddItemColor : evenItemColor,",
          "            ),",
          "            child: Text('Item $index'),",
          "          );",
          "        },",
          "      ),",
          "      bottomNavigationBar: BottomAppBar(",
          "        child: Padding(",
          "          padding: const EdgeInsets.all(8),",
          "          child: OverflowBar(",
          "            overflowAlignment: OverflowBarAlignment.center,",
          "            alignment: MainAxisAlignment.center,",
          "            overflowSpacing: 2.0,",
          "            children: <Widget>[",
          "              ElevatedButton.icon(",
          "                onPressed: () {",
          "                  setState(() {",
          "                    shadowColor = !shadowColor;",
          "                  });",
          "                },",
          "                icon: Icon(",
          "                  shadowColor ? Icons.visibility_off : Icons.visibility,",
          "                ),",
          "                label: const Text('shadow color'),",
          "              ),",
          "              const SizedBox(width: 5),",
          "              ElevatedButton(",
          "                onPressed: () {",
          "                  if (scrolledUnderElevation == null) {",
          "                    setState(() {",
          "                      // Default elevation is 3.0, increment by 1.0.",
          "                      scrolledUnderElevation = 4.0;",
          "                    });",
          "                  } else {",
          "                    setState(() {",
          "                      scrolledUnderElevation = scrolledUnderElevation! + 1.0;",
          "                    });",
          "                  }",
          "                },",
          "                child: Text(",
          "                  'scrolledUnderElevation: ${scrolledUnderElevation ?? 'default'}',",
          "                ),",
          "              ),",
          "            ],",
          "          ),",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AppBar Example "
      },
      
        "EditableTextToolbarBuilder Example": {
          "scope": "dart",  // Specify the scope for Dart files
          "prefix": "flutter-editable-toolbar-builder",  // Choose a prefix to trigger the snippet
          "body": [
            "import 'package:flutter/foundation.dart';",
            "import 'package:flutter/material.dart';",
            "import 'package:flutter/services.dart';",
            "",
            "void main() => runApp(const EditableTextToolbarBuilderExampleApp());",
            "class EditableTextToolbarBuilderExampleApp extends StatefulWidget {",
            "  const EditableTextToolbarBuilderExampleApp({super.key});",
            "  @override",
            "  State<EditableTextToolbarBuilderExampleApp> createState() => _EditableTextToolbarBuilderExampleAppState();",
            "}",
            "class _EditableTextToolbarBuilderExampleAppState extends State<EditableTextToolbarBuilderExampleApp> {",
            "  final TextEditingController _controller = TextEditingController(",
            "    text: 'Right click (desktop) or long press (mobile) to see the menu with a custom toolbar.',",
            "  );",
            "",
            "  @override",
            "  void initState() {",
            "    super.initState();",
            "    // On web, disable the browser's context menu since this example uses a custom",
            "    // Flutter-rendered context menu.",
            "    if (kIsWeb) {",
            "      BrowserContextMenu.disableContextMenu();",
            "    }",
            "  }",
            "",
            "  @override",
            "  void dispose() {",
            "    if (kIsWeb) {",
            "      BrowserContextMenu.enableContextMenu();",
            "    }",
            "    super.dispose();",
            "  }",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return MaterialApp(",
            "      home: Scaffold(",
            "        appBar: AppBar(",
            "          title: const Text('Custom toolbar, default-looking buttons'),",
            "        ),",
            "        body: Center(",
            "          child: Column(",
            "            children: <Widget>[",
            "              const SizedBox(height: 20.0),",
            "              TextField(",
            "                controller: _controller,",
            "                contextMenuBuilder: (BuildContext context, EditableTextState editableTextState) {",
            "                  return _MyTextSelectionToolbar(",
            "                    anchor: editableTextState.contextMenuAnchors.primaryAnchor,",
            "                    // getAdaptiveButtons creates the default button widgets for",
            "                    // the current platform.",
            "                    children: AdaptiveTextSelectionToolbar.getAdaptiveButtons(",
            "                      context,",
            "                      // These buttons just close the menu when clicked.",
            "                      <ContextMenuButtonItem>[",
            "                        ContextMenuButtonItem(",
            "                          label: 'One',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Two',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Three',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Four',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Five',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                      ],",
            "                    ).toList(),",
            "                  );",
            "                },",
            "              ),",
            "            ],",
            "          ),",
            "        ),",
            "      ),",
            "    );",
            "  }",
            "}",
            "",
            "class _MyTextSelectionToolbar extends StatelessWidget {",
            "  const _MyTextSelectionToolbar({",
            "    required this.anchor,",
            "    required this.children,",
            "  });",
            "",
            "  final Offset anchor;",
            "  final List<Widget> children;",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Stack(",
            "      children: <Widget>[",
            "        Positioned(",
            "          top: anchor.dy,",
            "          left: anchor.dx,",
            "          child: Container(",
            "            width: 200.0,",
            "            height: 200.0,",
            "            color: Colors.cyanAccent.withOpacity(0.5),",
            "            child: GridView.count(",
            "              padding: const EdgeInsets.all(12.0),",
            "              crossAxisCount: 2,",
            "              children: children,",
            "            ),",
            "          ),",
            "        ),",
            "      ],",
            "    );",
            "  }",
            "}",
          ],
          "description": "Flutter editable toggle button snippet"
        }
      ,
      
  "flutter Autocomplete Example": {
    "scope": "dart", 
    "prefix": "flutter-Autocomplete",  
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "const Duration fakeAPIDuration = Duration(seconds: 1);",
      "",
      "void main() => runApp(const AutocompleteExampleApp());",
      "",
      "class AutocompleteExampleApp extends StatelessWidget {",
      "  const AutocompleteExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Autocomplete - async'),",
      "        ),",
      "        body: Center(",
      "          child: Column(",
      "            mainAxisAlignment: MainAxisAlignment.center,",
      "            children: <Widget>[",
      "              Text('Type below to autocomplete the following possible results: \${_FakeAPI._kOptions}.'),",
      "              const _AsyncAutocomplete(),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _AsyncAutocomplete extends StatefulWidget {",
      "  const _AsyncAutocomplete();",
      "",
      "  @override",
      "  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();",
      "}",
      "",
      "class _AsyncAutocompleteState extends State<_AsyncAutocomplete> {",
      "  String? _searchingWithQuery;",
      "  late Iterable<String> _lastOptions = <String>[];",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Autocomplete<String>(",
      "      optionsBuilder: (TextEditingValue textEditingValue) async {",
      "        _searchingWithQuery = textEditingValue.text;",
      "        final Iterable<String> options = await _FakeAPI.search(_searchingWithQuery!);",
      "        if (_searchingWithQuery != textEditingValue.text) {",
      "          return _lastOptions;",
      "        }",
      "        _lastOptions = options;",
      "        return options;",
      "      },",
      "      onSelected: (String selection) {",
      "        debugPrint('You just selected $selection');",
      "      },",
      "    );",
      "  }",
      "}",
      "",
      "class _FakeAPI {",
      "  static const List<String> _kOptions = <String>[",
      "    'aardvark',",
      "    'bobcat',",
      "    'chameleon',",
      "  ];",
      "",
      "  static Future<Iterable<String>> search(String query) async {",
      "    await Future<void>.delayed(fakeAPIDuration);",
      "    if (query == '') {",
      "      return const Iterable<String>.empty();",
      "    }",
      "    return _kOptions.where((String option) {",
      "      return option.contains(query.toLowerCase());",
      "    });",
      "  }",
      "}",
    ],
    "description": "Flutter Autocomplete Example"
  }
,
  "Flutter Async Autocomplete Example": {
    "scope": "dart",  // Specify the scope for Dart files
    "prefix": "flutter-AutoCompleteAsync",  // Choose a prefix to trigger the snippet
    "body": [
      "import 'dart:async';",
      "import 'package:flutter/material.dart';",
      "",
      "const Duration fakeAPIDuration = Duration(seconds: 1);",
      "const Duration debounceDuration = Duration(milliseconds: 500);",
      "",
      "void main() => runApp(const AutocompleteExampleApp());",
      "",
      "class AutocompleteExampleApp extends StatelessWidget {",
      "  const AutocompleteExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Autocomplete - async and debouncing'),",
      "        ),",
      "        body: Center(",
      "          child: Column(",
      "            mainAxisAlignment: MainAxisAlignment.center,",
      "            children: <Widget>[",
      "              Text('Type below to autocomplete the following possible results: \${_FakeAPI._kOptions}.'),",
      "              const _AsyncAutocomplete(),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _AsyncAutocomplete extends StatefulWidget {",
      "  const _AsyncAutocomplete();",
      "",
      "  @override",
      "  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();",
      "}",
      "",
      "class _AsyncAutocompleteState extends State<_AsyncAutocomplete> {",
      "  String? _currentQuery;",
      "  late Iterable<String> _lastOptions = <String>[];",
      "",
      "  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;",
      "",
      "  Future<Iterable<String>?> _search(String query) async {",
      "    _currentQuery = query;",
      "    final Iterable<String> options = await _FakeAPI.search(_currentQuery!);",
      "    if (_currentQuery != query) {",
      "      return null;",
      "    }",
      "    _currentQuery = null;",
      "    return options;",
      "  }",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Autocomplete<String>(",
      "      optionsBuilder: (TextEditingValue textEditingValue) async {",
      "        final Iterable<String>? options = await _debouncedSearch(textEditingValue.text);",
      "        if (options == null) {",
      "          return _lastOptions;",
      "        }",
      "        _lastOptions = options;",
      "        return options;",
      "      },",
      "      onSelected: (String selection) {",
      "        debugPrint('You just selected $selection');",
      "      },",
      "    );",
      "  }",
      "}",
      "",
      "class _FakeAPI {",
      "  static const List<String> _kOptions = <String>[",
      "    'aardvark',",
      "    'bobcat',",
      "    'chameleon',",
      "  ];",
      "",
      "  static Future<Iterable<String>> search(String query) async {",
      "    await Future<void>.delayed(fakeAPIDuration);",
      "    if (query == '') {",
      "      return const Iterable<String>.empty();",
      "    }",
      "    return _kOptions.where((String option) {",
      "      return option.contains(query.toLowerCase());",
      "    });",
      "  }",
      "}",
      "",
      "typedef _Debounceable<S, T> = Future<S?> Function(T parameter);",
      "",
      "_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {",
      "  _DebounceTimer? debounceTimer;",
      "  return (T parameter) async {",
      "    if (debounceTimer != null && !debounceTimer!.isCompleted) {",
      "      debounceTimer!.cancel();",
      "    }",
      "    debounceTimer = _DebounceTimer();",
      "    try {",
      "      await debounceTimer!.future;",
      "    } catch (error) {",
      "      if (error is _CancelException) {",
      "        return null;",
      "      }",
      "      rethrow;",
      "    }",
      "    return function(parameter);",
      "  };",
      "}",
      "",
      "class _DebounceTimer {",
      "  _DebounceTimer() {",
      "    _timer = Timer(debounceDuration, _onComplete);",
      "  }",
      "",
      "  late final Timer _timer;",
      "  final Completer<void> _completer = Completer<void>();",
      "",
      "  void _onComplete() {",
      "    _completer.complete();",
      "  }",
      "",
      "  Future<void> get future => _completer.future;",
      "",
      "  bool get isCompleted => _completer.isCompleted;",
      "",
      "  void cancel() {",
      "    _timer.cancel();",
      "    _completer.completeError(const _CancelException());",
      "  }",
      "}",
      "",
      "class _CancelException implements Exception {",
       "  const _CancelException();",
      "}",
    ],
    "description": "flutter Async Autocomplete Example"
  }
,
  "Flutter Material Banner Example": {
    "prefix": "flutter-banner-example",
    "scope":"dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const MaterialBannerExampleApp());",
      "",
      "class MaterialBannerExampleApp extends StatelessWidget {",
      "  const MaterialBannerExampleApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const MaterialApp(",
      "      home: MaterialBannerExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class MaterialBannerExample extends StatelessWidget {",
      "  const MaterialBannerExample({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('The MaterialBanner is below'),",
      "      ),",
      "      body: Center(",
      "        child: ElevatedButton(",
      "          child: const Text('Show MaterialBanner'),",
      "          onPressed: () => ScaffoldMessenger.of(context).showMaterialBanner(",
      "            const MaterialBanner(",
      "              content: Text('Hello, I am a Material Banner'),",
      "              leading: Icon(Icons.agriculture_outlined),",
      "              backgroundColor: Colors.green,",
      "              actions: <Widget>[",
      "                TextButton(",
      "                  onPressed: null,",
      "                  child: Text('DISMISS'),",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Material Banner Example in Dart"
  },
  "Flutter Material Banner Example": {
    "prefix": "flutter-MaterialBanner",
    "scope":"dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const MaterialBannerExampleApp());",
      "",
      "class MaterialBannerExampleApp extends StatelessWidget {",
      "  const MaterialBannerExampleApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const MaterialApp(",
      "      home: MaterialBannerExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class MaterialBannerExample extends StatelessWidget {",
      "  const MaterialBannerExample({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('The MaterialBanner is below'),",
      "      ),",
      "      body: Center(",
      "        child: ElevatedButton(",
      "          child: const Text('Show MaterialBanner'),",
      "          onPressed: () => ScaffoldMessenger.of(context).showMaterialBanner(",
      "            const MaterialBanner(",
      "              content: Text('Hello, I am a Material Banner'),",
      "              leading: Icon(Icons.agriculture_outlined),",
      "              backgroundColor: Colors.green,",
      "              actions: <Widget>[",
      "                TextButton(",
      "                  onPressed: null,",
      "                  child: Text('DISMISS'),",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Material Banner Example in Dart"
  },
  
    "Flutter BottomAppBar Demo": {
      "scope": "dart",
      "prefix": "flutter-BottomAppBar",
      "body": [
        "import 'package:flutter/material.dart';",
        "",
        "void main() {",
        "  runApp(const BottomAppBarDemo());",
        "}",
        "",
        "class BottomAppBarDemo extends StatefulWidget {",
        "  const BottomAppBarDemo({super.key});",
        "",
        "  @override",
        "  State createState() => _BottomAppBarDemoState();",
        "}",
        "",
        "class _BottomAppBarDemoState extends State<BottomAppBarDemo> {",
        "  bool _showFab = true;",
        "  bool _showNotch = true;",
        "  FloatingActionButtonLocation _fabLocation = FloatingActionButtonLocation.endDocked;",
        "",
        "  void _onShowNotchChanged(bool value) {",
        "    setState(() {",
        "      _showNotch = value;",
        "    });",
        "  }",
        "",
        "  void _onShowFabChanged(bool value) {",
        "    setState(() {",
        "      _showFab = value;",
        "    });",
        "  }",
        "",
        "  void _onFabLocationChanged(FloatingActionButtonLocation? value) {",
        "    setState(() {",
        "      _fabLocation = value ?? FloatingActionButtonLocation.endDocked;",
        "    });",
        "  }",
        "",
        "  @override",
        "  Widget build(BuildContext context) {",
        "    return MaterialApp(",
        "      home: Scaffold(",
        "        appBar: AppBar(",
        "          automaticallyImplyLeading: false,",
        "          title: const Text('Bottom App Bar Demo'),",
        "        ),",
        "        body: ListView(",
        "          padding: const EdgeInsets.only(bottom: 88),",
        "          children: <Widget>[",
        "            SwitchListTile(",
        "              title: const Text(",
        "                'Floating Action Button',",
        "              ),",
        "              value: _showFab,",
        "              onChanged: _onShowFabChanged,",
        "            ),",
        "            SwitchListTile(",
        "              title: const Text('Notch'),",
        "              value: _showNotch,",
        "              onChanged: _onShowNotchChanged,",
        "            ),",
        "            const Padding(",
        "              padding: EdgeInsets.all(16),",
        "              child: Text('Floating action button position'),",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Docked - End'),",
        "              value: FloatingActionButtonLocation.endDocked,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Docked - Center'),",
        "              value: FloatingActionButtonLocation.centerDocked,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Floating - End'),",
        "              value: FloatingActionButtonLocation.endFloat,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Floating - Center'),",
        "              value: FloatingActionButtonLocation.centerFloat,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "          ],",
        "        ),",
        "        floatingActionButton: _showFab",
        "            ? FloatingActionButton(",
        "                onPressed: () {},",
        "                tooltip: 'Create',",
        "                child: const Icon(Icons.add),",
        "              )",
        "            : null,",
        "        floatingActionButtonLocation: _fabLocation,",
        "        bottomNavigationBar: _DemoBottomAppBar(",
        "          fabLocation: _fabLocation,",
        "          shape: _showNotch ? const CircularNotchedRectangle() : null,",
        "        ),",
        "      ),",
        "    );",
        "  }",
        "}",
        "",
        "class _DemoBottomAppBar extends StatelessWidget {",
        "  const _DemoBottomAppBar({",
        "    this.fabLocation = FloatingActionButtonLocation.endDocked,",
        "    this.shape = const CircularNotchedRectangle(),",
        "  });",
        "",
        "  final FloatingActionButtonLocation fabLocation;",
        "  final NotchedShape? shape;",
        "",
        "  static final List<FloatingActionButtonLocation> centerLocations = <FloatingActionButtonLocation>[",
        "    FloatingActionButtonLocation.centerDocked,",
        "    FloatingActionButtonLocation.centerFloat,",
        "  ];",
        "",
        "  @override",
        "  Widget build(BuildContext context) {",
        "    return BottomAppBar(",
        "      shape: shape,",
        "      color: Colors.blue,",
        "      child: IconTheme(",
        "        data: IconThemeData(color: Theme.of(context).colorScheme.onPrimary),",
        "        child: Row(",
        "          children: <Widget>[",
        "            IconButton(",
        "              tooltip: 'Open navigation menu',",
        "              icon: const Icon(Icons.menu),",
        "              onPressed: () {},",
        "            ),",
        "            if (centerLocations.contains(fabLocation)) const Spacer(),",
        "            IconButton(",
        "              tooltip: 'Search',",
        "              icon: const Icon(Icons.search),",
        "              onPressed: () {},",
        "            ),",
        "            IconButton(",
        "              tooltip: 'Favorite',",
        "              icon: const Icon(Icons.favorite),",
        "              onPressed: () {},",
        "            ),",
        "          ],",
        "        ),",
        "      ),",
        "    );",
        "  }",
        "}"
      ],
      "description": "Flutter BottomAppBar Demo in Dart"
    }
  ,
  "Flutter BottomAppBar Demo Two": {
    "scope": "dart",
    "prefix": "flutter-BottomAppBar-two",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter/rendering.dart';",
      "",
      "void main() {",
      "  runApp(const BottomAppBarDemoTwo());",
      "}",
      "",
      "class BottomAppBarDemoTwo extends StatefulWidget {",
      "  const BottomAppBarDemoTwo({super.key});",
      "",
      "  @override",
      "  State createState() => _BottomAppBarDemoTwoState();",
      "}",
      "",
      "class _BottomAppBarDemoTwoState extends State<BottomAppBarDemoTwo> {",
      "  static const List<Color> colors = <Color>[",
      "    Colors.yellow,",
      "    Colors.orange,",
      "    Colors.pink,",
      "    Colors.purple,",
      "    Colors.cyan,",
      "  ];",
      "",
      "  static final List<Widget> items = List<Widget>.generate(",
      "    colors.length,",
      "    (int index) => Container(color: colors[index], height: 150.0),",
      "  ).reversed.toList();",
      "",
      "  late ScrollController _controller;",
      "  bool _showFab = true;",
      "  bool _isElevated = true;",
      "  bool _isVisible = true;",
      "",
      "  FloatingActionButtonLocation get _fabLocation =>",
      "      _isVisible ? FloatingActionButtonLocation.endContained : FloatingActionButtonLocation.endFloat;",
      "",
      "  void _listen() {",
      "    final ScrollDirection direction = _controller.position.userScrollDirection;",
      "    if (direction == ScrollDirection.forward) {",
      "      _show();",
      "    } else if (direction == ScrollDirection.reverse) {",
      "      _hide();",
      "    }",
      "  }",
      "",
      "  void _show() {",
      "    if (!_isVisible) {",
      "      setState(() => _isVisible = true);",
      "    }",
      "  }",
      "",
      "  void _hide() {",
      "    if (_isVisible) {",
      "      setState(() => _isVisible = false);",
      "    }",
      "  }",
      "",
      "  void _onShowFabChanged(bool value) {",
      "    setState(() {",
      "      _showFab = value;",
      "    });",
      "  }",
      "",
      "  void _onElevatedChanged(bool value) {",
      "    setState(() {",
      "      _isElevated = value;",
      "    });",
      "  }",
      "",
      "  void _addNewItem() {",
      "    setState(() {",
      "      items.insert(",
      "        0,",
      "        Container(color: colors[items.length % 5], height: 150.0),",
      "      );",
      "    });",
      "  }",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _controller = ScrollController();",
      "    _controller.addListener(_listen);",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _controller.removeListener(_listen);",
      "    _controller.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true),",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Bottom App Bar Demo'),",
      "        ),",
      "        body: Column(",
      "          children: <Widget>[",
      "            SwitchListTile(",
      "              title: const Text('Floating Action Button'),",
      "              value: _showFab,",
      "              onChanged: _onShowFabChanged,",
      "            ),",
      "            SwitchListTile(",
      "              title: const Text('Bottom App Bar Elevation'),",
      "              value: _isElevated,",
      "              onChanged: _onElevatedChanged,",
      "            ),",
      "            Expanded(",
      "              child: ListView(",
      "                controller: _controller,",
      "                children: items.toList(),",
      "              ),",
      "            ),",
      "          ],",
      "        ),",
      "        floatingActionButton: _showFab",
      "            ? FloatingActionButton(",
      "                onPressed: _addNewItem,",
      "                tooltip: 'Add New Item',",
      "                elevation: _isVisible ? 0.0 : null,",
      "                child: const Icon(Icons.add),",
      "              )",
      "            : null,",
      "        floatingActionButtonLocation: _fabLocation,",
      "        bottomNavigationBar: _DemoBottomAppBar(isElevated: _isElevated, isVisible: _isVisible),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _DemoBottomAppBar extends StatelessWidget {",
      "  const _DemoBottomAppBar({",
      "    required this.isElevated,",
      "    required this.isVisible,",
      "  });",
      "",
      "  final bool isElevated;",
      "  final bool isVisible;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return AnimatedContainer(",
      "      duration: const Duration(milliseconds: 200),",
      "      height: isVisible ? 80.0 : 0,",
      "      child: BottomAppBar(",
      "        elevation: isElevated ? null : 0.0,",
      "        child: Row(",
      "          children: <Widget>[",
      "            IconButton(",
      "              tooltip: 'Open popup menu',",
      "              icon: const Icon(Icons.more_vert),",
      "              onPressed: () {",
      "                final SnackBar snackBar = SnackBar(",
      "                  content: const Text('Yay! A SnackBar!'),",
      "                  action: SnackBarAction(",
      "                    label: 'Undo',",
      "                    onPressed: () {},",
      "                  ),",
      "                );",
      "",
      "                // Find the ScaffoldMessenger in the widget tree",
      "                // and use it to show a SnackBar.",
      "                ScaffoldMessenger.of(context).showSnackBar(snackBar);",
      "              },",
      "            ),",
      "            IconButton(",
      "              tooltip: 'Search',",
      "              icon: const Icon(Icons.search),",
      "              onPressed: () {},",
      "            ),",
      "            IconButton(",
      "              tooltip: 'Favorite',",
      "              icon: const Icon(Icons.favorite),",
      "              onPressed: () {},",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter BottomAppBar Demo Two in Dart"
  }
,
  "Flutter BottomNavigationBar Example": {
    "scope": "dart",
    "prefix": "flutter-BottomNavigationBar",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const BottomNavigationBarExampleApp());",
      "",
      "class BottomNavigationBarExampleApp extends StatelessWidget {",
      "  const BottomNavigationBarExampleApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const MaterialApp(",
      "      home: BottomNavigationBarExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class BottomNavigationBarExample extends StatefulWidget {",
      "  const BottomNavigationBarExample({super.key});",
      "",
      "  @override",
      "  State<BottomNavigationBarExample> createState() => _BottomNavigationBarExampleState();",
      "}",
      "",
      "class _BottomNavigationBarExampleState extends State<BottomNavigationBarExample> {",
      "  int _selectedIndex = 0;",
      "  static const TextStyle optionStyle = TextStyle(fontSize: 30, fontWeight: FontWeight.bold);",
      "  static const List<Widget> _widgetOptions = <Widget>[",
      "    Text(",
      "      'Index 0: Home',",
      "      style: optionStyle,",
      "    ),",
      "    Text(",
      "      'Index 1: Business',",
      "      style: optionStyle,",
      "    ),",
      "    Text(",
      "      'Index 2: School',",
      "      style: optionStyle,",
      "    ),",
      "    Text(",
      "      'Index 3: Settings',",
      "      style: optionStyle,",
      "    ),",
      "  ];",
      "",
      "  void _onItemTapped(int index) {",
      "    setState(() {",
      "      _selectedIndex = index;",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('BottomNavigationBar Sample'),",
      "      ),",
      "      body: Center(",
      "        child: _widgetOptions.elementAt(_selectedIndex),",
      "      ),",
      "      bottomNavigationBar: BottomNavigationBar(",
      "        items: const <BottomNavigationBarItem>[",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.home),",
      "            label: 'Home',",
      "            backgroundColor: Colors.red,",
      "          ),",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.business),",
      "            label: 'Business',",
      "            backgroundColor: Colors.green,",
      "          ),",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.school),",
      "            label: 'School',",
      "            backgroundColor: Colors.purple,",
      "          ),",
      "          BottomNavigationBarItem(",
      "            icon: Icon(Icons.settings),",
      "            label: 'Settings',",
      "            backgroundColor: Colors.pink,",
      "          ),",
      "        ],",
      "        currentIndex: _selectedIndex,",
      "        selectedItemColor: Colors.amber[800],",
      "        onTap: _onItemTapped,",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter BottomNavigationBar Example in Flutter"
  }
,
  "Flutter Modal BottomSheet Example": {
    "scope":"dart",
    "prefix": "flutter-modal-bottomsheet-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const BottomSheetApp());",
      "",
      "class BottomSheetApp extends StatelessWidget {",
      "  const BottomSheetApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Bottom Sheet Sample')),",
      "        body: const BottomSheetExample(),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class BottomSheetExample extends StatelessWidget {",
      "  const BottomSheetExample({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: ElevatedButton(",
      "        child: const Text('showModalBottomSheet'),",
      "        onPressed: () {",
      "          showModalBottomSheet<void>(",
      "            context: context,",
      "            builder: (BuildContext context) {",
      "              return Container(",
      "                height: 200,",
      "                color: Colors.amber,",
      "                child: Center(",
      "                  child: Column(",
      "                    mainAxisAlignment: MainAxisAlignment.center,",
      "                    mainAxisSize: MainAxisSize.min,",
      "                    children: <Widget>[",
      "                      const Text('Modal BottomSheet'),",
      "                      ElevatedButton(",
      "                        child: const Text('Close BottomSheet'),",
      "                        onPressed: () => Navigator.pop(context),",
      "                      ),",
      "                    ],",
      "                  ),",
      "                ),",
      "              );",
      "            },",
      "          );",
      "        },",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Modal BottomSheet Example in Flutter"
  }
,
"Flutter Modal BottomSheet Example": {
  "scope":"dart",
  "prefix": "flutter-showModalBottomSheet",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const BottomSheetApp());",
    "",
    "class BottomSheetApp extends StatelessWidget {",
    "  const BottomSheetApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Bottom Sheet Sample')),",
    "        body: const BottomSheetExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class BottomSheetExample extends StatelessWidget {",
    "  const BottomSheetExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: ElevatedButton(",
    "        child: const Text('showModalBottomSheet'),",
    "        onPressed: () {",
    "          showModalBottomSheet<void>(",
    "            context: context,",
    "            builder: (BuildContext context) {",
    "              return Container(",
    "                height: 200,",
    "                color: Colors.amber,",
    "                child: Center(",
    "                  child: Column(",
    "                    mainAxisAlignment: MainAxisAlignment.center,",
    "                    mainAxisSize: MainAxisSize.min,",
    "                    children: <Widget>[",
    "                      const Text('Modal BottomSheet'),",
    "                      ElevatedButton(",
    "                        child: const Text('Close BottomSheet'),",
    "                        onPressed: () => Navigator.pop(context),",
    "                      ),",
    "                    ],",
    "                  ),",
    "                ),",
    "              );",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}"
  ],
  "description": "Flutter Modal BottomSheet Example in Flutter"
}
,
  "Flutter Button App": {
    "scope": "dart",
    "prefix": "flutter-ElevatedButton",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() {",
      "  runApp(const ButtonApp());",
      "}",
      "",
      "class ButtonApp extends StatelessWidget {",
      "  const ButtonApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(",
      "        colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.deepPurple),",
      "        useMaterial3: true,",
      "      ),",
      "      title: 'Button Types',",
      "      home: const Scaffold(",
      "        body: ButtonTypesExample(),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class ButtonTypesExample extends StatelessWidget {",
      "  const ButtonTypesExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const Padding(",
      "      padding: EdgeInsets.all(4.0),",
      "      child: Row(",
      "        children: <Widget>[",
      "          Spacer(),",
      "          ButtonTypesGroup(enabled: true),",
      "          ButtonTypesGroup(enabled: false),",
      "          Spacer(),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class ButtonTypesGroup extends StatelessWidget {",
      "  const ButtonTypesGroup({Key? key, required this.enabled}) : super(key: key);",
      "",
      "  final bool enabled;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final VoidCallback? onPressed = enabled ? () {} : null;",
      "    return Padding(",
      "      padding: const EdgeInsets.all(4.0),",
      "      child: Column(",
      "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
      "        children: <Widget>[",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter button app template."
  }
,
  "Flutter Card Example": {
    "scope": "dart",
    "prefix": "flutter-Card",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const CardExampleApp());",
      "",
      "class CardExampleApp extends StatelessWidget {",
      "  const CardExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Card Sample')),",
      "        body: const CardExample(),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class CardExample extends StatelessWidget {",
      "  const CardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Card(",
      "        child: Column(",
      "          mainAxisSize: MainAxisSize.min,",
      "          children: <Widget>[",
      "            const ListTile(",
      "              leading: Icon(Icons.album),",
      "              title: Text('The Enchanted Nightingale'),",
      "              subtitle: Text('Music by Julie Gable. Lyrics by Sidney Stein.'),",
      "            ),",
      "            Row(",
      "              mainAxisAlignment: MainAxisAlignment.end,",
      "              children: <Widget>[",
      "                TextButton(",
      "                  child: const Text('BUY TICKETS'),",
      "                  onPressed: () {/* ... */},",
      "                ),",
      "                const SizedBox(width: 8),",
      "                TextButton(",
      "                  child: const Text('LISTEN'),",
      "                  onPressed: () {/* ... */},",
      "                ),",
      "                const SizedBox(width: 8),",
      "              ],",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Card example."
  }
,
  "Flutter Card Examples": {
    "scope": "dart",
    "prefix": "flutter-Card-examples",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() {",
      "  runApp(const CardExamplesApp());",
      "}",
      "",
      "class CardExamplesApp extends StatelessWidget {",
      "  const CardExamplesApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Card Examples')),",
      "        body: const Column(",
      "          children: <Widget>[",
      "            Spacer(),",
      "            ElevatedCardExample(),",
      "            FilledCardExample(),",
      "            OutlinedCardExample(),",
      "            Spacer(),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class ElevatedCardExample extends StatelessWidget {",
      "  const ElevatedCardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const Center(",
      "      child: Card(",
      "        child: SizedBox(",
      "          width: 300,",
      "          height: 100,",
      "          child: Center(child: Text('Elevated Card')),"
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class FilledCardExample extends StatelessWidget {",
      "  const FilledCardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Card(",
      "        elevation: 0,",
      "        color: Theme.of(context).colorScheme.surfaceVariant,",
      "        child: const SizedBox(",
      "          width: 300,",
      "          height: 100,",
      "          child: Center(child: Text('Filled Card')),"
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class OutlinedCardExample extends StatelessWidget {",
      "  const OutlinedCardExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Center(",
      "      child: Card(",
      "        elevation: 0,",
      "        shape: RoundedRectangleBorder(",
      "          side: BorderSide(",
      "            color: Theme.of(context).colorScheme.outline,",
      "          ),",
      "          borderRadius: const BorderRadius.all(Radius.circular(12)),",
      "        ),",
      "        child: const SizedBox(",
      "          width: 300,",
      "          height: 100,",
      "          child: Center(child: Text('Outlined Card')),"
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Card examples."
  }
,
  "Flutter Checkbox Example": {
    "scope": "dart",
    "prefix": "flutter-Checkbox",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const CheckboxExampleApp());",
      "",
      "class CheckboxExampleApp extends StatelessWidget {",
      "  const CheckboxExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true, colorSchemeSeed: const Color(0xff6750a4)),",
      "      title: 'Checkbox Sample',",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('Checkbox Sample')),",
      "        body: const Center(",
      "          child: CheckboxExample(),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class CheckboxExample extends StatefulWidget {",
      "  const CheckboxExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<CheckboxExample> createState() => _CheckboxExampleState();",
      "}",
      "",
      "class _CheckboxExampleState extends State<CheckboxExample> {",
      "  bool? isChecked = true;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Column(",
      "      mainAxisAlignment: MainAxisAlignment.center,",
      "      children: <Widget>[",
      "        Checkbox(",
      "          tristate: true,",
      "          value: isChecked,",
      "          onChanged: (bool? value) {",
      "            setState(() {",
      "              isChecked = value;",
      "            });",
      "          },",
      "        ),",
      "        Checkbox(",
      "          isError: true,",
      "          tristate: true,",
      "          value: isChecked,",
      "          onChanged: (bool? value) {",
      "            setState(() {",
      "              isChecked = value;",
      "            });",
      "          },",
      "        ),",
      "        Checkbox(",
      "          isError: true,",
      "          tristate: true,",
      "          value: isChecked,",
      "          onChanged: null,",
      "        ),",
      "      ],",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Checkbox example."
  }
,
  "Flutter Custom Labeled Checkbox Example": {
    "scope": "dart",
    "prefix": "flutter-Checkbox-custom-label",
    "body": [
      "import 'package:flutter/gestures.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const LabeledCheckboxApp());",
      "",
      "class LabeledCheckboxApp extends StatelessWidget {",
      "  const LabeledCheckboxApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true),",
      "      home: const LabeledCheckboxExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class LinkedLabelCheckbox extends StatelessWidget {",
      "  const LinkedLabelCheckbox({",
      "    Key? key,",
      "    required this.label,",
      "    required this.padding,",
      "    required this.value,",
      "    required this.onChanged,",
      "  });",
      "",
      "  final String label;",
      "  final EdgeInsets padding;",
      "  final bool value;",
      "  final ValueChanged<bool> onChanged;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Padding(",
      "      padding: padding,",
      "      child: Row(",
      "        children: <Widget>[",
      "          Expanded(",
      "            child: RichText(",
      "              text: TextSpan(",
      "                text: label,",
      "                style: const TextStyle(",
      "                  color: Colors.blueAccent,",
      "                  decoration: TextDecoration.underline,",
      "                ),",
      "                recognizer: TapGestureRecognizer()",
      "                  ..onTap = () {",
      "                    debugPrint('Label has been tapped.');",
      "                  },",
      "              ),",
      "            ),",
      "          ),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class LabeledCheckboxExample extends StatefulWidget {",
      "  const LabeledCheckboxExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<LabeledCheckboxExample> createState() => _LabeledCheckboxExampleState();",
      "}",
      "",
      "class _LabeledCheckboxExampleState extends State<LabeledCheckboxExample> {",
      "  bool _isSelected = false;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(title: const Text('Custom Labeled Checkbox Sample')),",
      "      body: Center(",
      "        child: LinkedLabelCheckbox(",
      "          label: 'Linked, tappable label text',",
      "          padding: const EdgeInsets.symmetric(horizontal: 20.0),",
      "          value: _isSelected,",
      "          onChanged: (bool newValue) {",
      "            setState(() {",
      "              _isSelected = newValue;",
      "            });",
      "          },",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Custom Labeled Checkbox example."
  }
,

"Flutter Custom Labeled Checkbox Example": {
  "scope": "dart",
  "prefix": "flutter-custom-labeled-checkbox",
  "body": [
    "import 'package:flutter/gestures.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const LabeledCheckboxApp());",
    "",
    "class LabeledCheckboxApp extends StatelessWidget {",
    "  const LabeledCheckboxApp({Key? key}) : super(key: key);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const LabeledCheckboxExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class LinkedLabelCheckbox extends StatelessWidget {",
    "  const LinkedLabelCheckbox({",
    "    Key? key,",
    "    required this.label,",
    "    required this.padding,",
    "    required this.value,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final String label;",
    "  final EdgeInsets padding;",
    "  final bool value;",
    "  final ValueChanged<bool> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: padding,",
    "      child: Row(",
    "        children: <Widget>[",
    "          Expanded(",
    "            child: RichText(",
    "              text: TextSpan(",
    "                text: label,",
    "                style: const TextStyle(",
    "                  color: Colors.blueAccent,",
    "                  decoration: TextDecoration.underline,",
    "                ),",
    "                recognizer: TapGestureRecognizer()",
    "                  ..onTap = () {",
    "                    debugPrint('Label has been tapped.');",
    "                  },",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledCheckboxExample extends StatefulWidget {",
    "  const LabeledCheckboxExample({Key? key}) : super(key: key);",
    "",
    "  @override",
    "  State<LabeledCheckboxExample> createState() => _LabeledCheckboxExampleState();",
    "}",
    "",
    "class _LabeledCheckboxExampleState extends State<LabeledCheckboxExample> {",
    "  bool _isSelected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Custom Labeled Checkbox Sample')),",
    "      body: Center(",
    "        child: LinkedLabelCheckbox(",
    "          label: 'Linked, tappable label text',",
    "          padding: const EdgeInsets.symmetric(horizontal: 20.0),",
    "          value: _isSelected,",
    "          onChanged: (bool newValue) {",
    "            setState(() {",
    "              _isSelected = newValue;",
    "            });",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}"
  ],
  "description": "Flutter Custom Labeled Checkbox example."
},
  "Flutter CheckboxListTile Example": {
    "scope": "dart",
    "prefix": "flutter-CheckboxListTile",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const CheckboxListTileApp());",
      "",
      "class CheckboxListTileApp extends StatelessWidget {",
      "  const CheckboxListTileApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(useMaterial3: true),",
      "      home: const CheckboxListTileExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class CheckboxListTileExample extends StatefulWidget {",
      "  const CheckboxListTileExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<CheckboxListTileExample> createState() => _CheckboxListTileExampleState();",
      "}",
      "",
      "class _CheckboxListTileExampleState extends State<CheckboxListTileExample> {",
      "  bool checkboxValue1 = true;",
      "  bool checkboxValue2 = true;",
      "  bool checkboxValue3 = true;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(title: const Text('CheckboxListTile Sample')),",
      "      body: Column(",
      "        children: <Widget>[",
      "          CheckboxListTile(",
      "            value: checkboxValue1,",
      "            onChanged: (bool? value) {",
      "              setState(() {",
      "                checkboxValue1 = value!;",
      "              });",
      "            },",
      "            title: const Text('Headline'),",
      "            subtitle: const Text('Supporting text'),",
      "          ),",
      "          const Divider(height: 0),",
      "          CheckboxListTile(",
      "            value: checkboxValue2,",
      "            onChanged: (bool? value) {",
      "              setState(() {",
      "                checkboxValue2 = value!;",
      "              });",
      "            },",
      "            title: const Text('Headline'),",
      "            subtitle: const Text(",
      "                'Longer supporting text to demonstrate how the text wraps and the checkbox is centered vertically with the text.'),",
      "          ),",
      "          const Divider(height: 0),",
      "          CheckboxListTile(",
      "            value: checkboxValue3,",
      "            onChanged: (bool? value) {",
      "              setState(() {",
      "                checkboxValue3 = value!;",
      "              });",
      "            },",
      "            title: const Text('Headline'),",
      "            subtitle: const Text(",
      "                \"Longer supporting text to demonstrate how the text wraps and how setting 'CheckboxListTile.isThreeLine = true' aligns the checkbox to the top vertically with the text.\"),",
      "            isThreeLine: true,",
      "          ),",
      "          const Divider(height: 0),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter CheckboxListTile example."
  }
,"Flutter CheckboxListTile Example": {
  "scope": "dart",
  "prefix": "flutter-listtile-checkbox-example",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const CheckboxListTileApp());",
    "",
    "class CheckboxListTileApp extends StatelessWidget {",
    "  const CheckboxListTileApp({Key? key}) : super(key: key);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const CheckboxListTileExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CheckboxListTileExample extends StatefulWidget {",
    "  const CheckboxListTileExample({Key? key}) : super(key: key);",
    "",
    "  @override",
    "  State<CheckboxListTileExample> createState() => _CheckboxListTileExampleState();",
    "}",
    "",
    "class _CheckboxListTileExampleState extends State<CheckboxListTileExample> {",
    "  bool checkboxValue1 = true;",
    "  bool checkboxValue2 = true;",
    "  bool checkboxValue3 = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('CheckboxListTile Sample')),",
    "      body: Column(",
    "        children: <Widget>[",
    "          CheckboxListTile(",
    "            value: checkboxValue1,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                checkboxValue1 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text('Supporting text'),",
    "          ),",
    "          const Divider(height: 0),",
    "          CheckboxListTile(",
    "            value: checkboxValue2,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                checkboxValue2 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text(",
    "                'Longer supporting text to demonstrate how the text wraps and the checkbox is centered vertically with the text.'),",
    "          ),",
    "          const Divider(height: 0),",
    "          CheckboxListTile(",
    "            value: checkboxValue3,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                checkboxValue3 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text(",
    "                \"Longer supporting text to demonstrate how the text wraps and how setting 'CheckboxListTile.isThreeLine = true' aligns the checkbox to the top vertically with the text.\"),",
    "            isThreeLine: true,",
    "          ),",
    "          const Divider(height: 0),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}"
  ],
  "description": "Flutter CheckboxListTile example."
},
  "Flutter DeletableChipAttributes.onDeleted Example": {
    "scope": "dart",
    "prefix": "flutter-chip-deletable-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const OnDeletedExampleApp());",
      "",
      "class OnDeletedExampleApp extends StatelessWidget {",
      "  const OnDeletedExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('DeletableChipAttributes.onDeleted Sample')),",
      "        body: const Center(",
      "          child: OnDeletedExample(),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class Actor {",
      "  const Actor(this.name, this.initials);",
      "  final String name;",
      "  final String initials;",
      "}",
      "",
      "class CastList extends StatefulWidget {",
      "  const CastList({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State createState() => CastListState();",
      "}",
      "",
      "class CastListState extends State<CastList> {",
      "  final List<Actor> _cast = <Actor>[",
      "    const Actor('Aaron Burr', 'AB'),",
      "    const Actor('Alexander Hamilton', 'AH'),",
      "    const Actor('Eliza Hamilton', 'EH'),",
      "    const Actor('James Madison', 'JM'),",
      "  ];",
      "",
      "  Iterable<Widget> get actorWidgets {",
      "    return _cast.map((Actor actor) {",
      "      return Padding(",
      "        padding: const EdgeInsets.all(4.0),",
      "        child: Chip(",
      "          avatar: CircleAvatar(child: Text(actor.initials)),",
      "          label: Text(actor.name),",
      "          onDeleted: () {",
      "            setState(() {",
      "              _cast.removeWhere((Actor entry) {",
      "                return entry.name == actor.name;",
      "              });",
      "            });",
      "          },",
      "        ),",
      "      );",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Wrap(",
      "      children: actorWidgets.toList(),",
      "    );",
      "  }",
      "}",
      "",
      "class OnDeletedExample extends StatefulWidget {",
      "  const OnDeletedExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<OnDeletedExample> createState() => _OnDeletedExampleState();",
      "}",
      "",
      "class _OnDeletedExampleState extends State<OnDeletedExample> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const CastList();",
      "  }",
      "}"
    ],
    "description": "Flutter DeletableChipAttributes.onDeleted example."
  } ,"Flutter DeletableChipAttributes.onDeleted Example": {
    "scope": "dart",
    "prefix": "flutter-Chip",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const OnDeletedExampleApp());",
      "",
      "class OnDeletedExampleApp extends StatelessWidget {",
      "  const OnDeletedExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(title: const Text('DeletableChipAttributes.onDeleted Sample')),",
      "        body: const Center(",
      "          child: OnDeletedExample(),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class Actor {",
      "  const Actor(this.name, this.initials);",
      "  final String name;",
      "  final String initials;",
      "}",
      "",
      "class CastList extends StatefulWidget {",
      "  const CastList({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State createState() => CastListState();",
      "}",
      "",
      "class CastListState extends State<CastList> {",
      "  final List<Actor> _cast = <Actor>[",
      "    const Actor('Aaron Burr', 'AB'),",
      "    const Actor('Alexander Hamilton', 'AH'),",
      "    const Actor('Eliza Hamilton', 'EH'),",
      "    const Actor('James Madison', 'JM'),",
      "  ];",
      "",
      "  Iterable<Widget> get actorWidgets {",
      "    return _cast.map((Actor actor) {",
      "      return Padding(",
      "        padding: const EdgeInsets.all(4.0),",
      "        child: Chip(",
      "          avatar: CircleAvatar(child: Text(actor.initials)),",
      "          label: Text(actor.name),",
      "          onDeleted: () {",
      "            setState(() {",
      "              _cast.removeWhere((Actor entry) {",
      "                return entry.name == actor.name;",
      "              });",
      "            });",
      "          },",
      "        ),",
      "      );",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Wrap(",
      "      children: actorWidgets.toList(),",
      "    );",
      "  }",
      "}",
      "",
      "class OnDeletedExample extends StatefulWidget {",
      "  const OnDeletedExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<OnDeletedExample> createState() => _OnDeletedExampleState();",
      "}",
      "",
      "class _OnDeletedExampleState extends State<OnDeletedExample> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const CastList();",
      "  }",
      "}"
    ],
    "description": "Flutter DeletableChipAttributes.onDeleted example."
  }
,
  "Flutter ActionChoice Example": {
    "scope": "dart",
    "prefix": "flutter-ChoiceChip",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const ChipApp());",
      "",
      "class ChipApp extends StatelessWidget {",
      "  const ChipApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
      "      home: const ActionChoiceExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class ActionChoiceExample extends StatefulWidget {",
      "  const ActionChoiceExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<ActionChoiceExample> createState() => _ActionChoiceExampleState();",
      "}",
      "",
      "class _ActionChoiceExampleState extends State<ActionChoiceExample> {",
      "  int? _value = 1;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final TextTheme textTheme = Theme.of(context).textTheme;",
      "",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('ActionChoice Sample'),",
      "      ),",
      "      body: Center(",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.start,",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: <Widget>[",
      "            Text('Choose an item', style: textTheme.labelLarge),",
      "            const SizedBox(height: 10.0),",
      "            Wrap(",
      "              spacing: 5.0,",
      "              children: List<Widget>.generate(",
      "                3,",
      "                (int index) {",
      "                  return ChoiceChip(",
      "                    label: Text('Item $index'),",
      "                    selected: _value == index,",
      "                    onSelected: (bool selected) {",
      "                      setState(() {",
      "                        _value = selected ? index : null;",
      "                      });",
      "                    },",
      "                  );",
      "                },",
      "              ).toList(),",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter ChoiceChip widget example."
  },

  "Flutter ActionChoice Example": {
    "scope": "dart",
    "prefix": "flutter-chip-choice-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const ChipApp());",
      "",
      "class ChipApp extends StatelessWidget {",
      "  const ChipApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
      "      home: const ActionChoiceExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class ActionChoiceExample extends StatefulWidget {",
      "  const ActionChoiceExample({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  State<ActionChoiceExample> createState() => _ActionChoiceExampleState();",
      "}",
      "",
      "class _ActionChoiceExampleState extends State<ActionChoiceExample> {",
      "  int? _value = 1;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final TextTheme textTheme = Theme.of(context).textTheme;",
      "",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('ActionChoice Sample'),",
      "      ),",
      "      body: Center(",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.start,",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: <Widget>[",
      "            Text('Choose an item', style: textTheme.labelLarge),",
      "            const SizedBox(height: 10.0),",
      "            Wrap(",
      "              spacing: 5.0,",
      "              children: List<Widget>.generate(",
      "                3,",
      "                (int index) {",
      "                  return ChoiceChip(",
      "                    label: Text('Item $index'),",
      "                    selected: _value == index,",
      "                    onSelected: (bool selected) {",
      "                      setState(() {",
      "                        _value = selected ? index : null;",
      "                      });",
      "                    },",
      "                  );",
      "                },",
      "              ).toList(),",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter ChoiceChip widget example."
  },


"Flutter DynamicColor Example": {
  "prefix": "flutter-dynamic-color-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ColorScheme.fromImageProvider] with content-based dynamic color.",
    "",
    "const Widget divider = SizedBox(height: 10);",
    "const double narrowScreenWidthThreshold = 400;",
    "",
    "void main() => runApp(DynamicColorExample());",
    "",
    "class DynamicColorExample extends StatefulWidget {",
    "  DynamicColorExample({super.key});",
    "",
    "  final List<ImageProvider> images = <NetworkImage>[",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_1.png'),",
    "    const NetworkImage(",
    "        'https://pbs.twimg.com/media/FKNlhKZUcAEd7FY.jpg:large'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_3.png'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_4.png'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_5.png'),",
    "    const NetworkImage(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_6.png'),",
    "  ];",
    "",
    "  @override",
    "  State<DynamicColorExample> createState() => _DynamicColorExampleState();",
    "}",
    "",
    "class _DynamicColorExampleState extends State<DynamicColorExample> {",
    "  late ColorScheme currentColorScheme;",
    "  String currentHyperlinkImage = '';",
    "  late int selectedImage;",
    "  late bool isLight;",
    "  late bool isLoading;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    selectedImage = 0;",
    "    isLight = true;",
    "    isLoading = true;",
    "    currentColorScheme = const ColorScheme.light();",
    "    WidgetsBinding.instance.addPostFrameCallback((_) {",
    "      _updateImage(widget.images[selectedImage]);",
    "      isLoading = false;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ColorScheme colorScheme = currentColorScheme;",
    "    final Color selectedColor = currentColorScheme.primary;",
    "",
    "    final ThemeData lightTheme = ThemeData(",
    "      colorSchemeSeed: selectedColor,",
    "      brightness: Brightness.light,",
    "      useMaterial3: false,",
    "    );",
    "    final ThemeData darkTheme = ThemeData(",
    "      colorSchemeSeed: selectedColor,",
    "      brightness: Brightness.dark,",
    "      useMaterial3: false,",
    "    );",
    "",
    "    Widget schemeLabel(String brightness, ColorScheme colorScheme) {",
    "      return Padding(",
    "        padding: const EdgeInsets.symmetric(vertical: 15),",
    "        child: Text(",
    "          brightness,",
    "          style: TextStyle(fontWeight: FontWeight.bold, color: colorScheme.onSecondaryContainer),",
    "        ),",
    "      );",
    "    }",
    "",
    "    Widget schemeView(ThemeData theme) {",
    "      return Padding(",
    "        padding: const EdgeInsets.symmetric(horizontal: 15),",
    "        child: ColorSchemeView(colorScheme: theme.colorScheme),",
    "      );",
    "    }",
    "",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true, colorScheme: colorScheme),",
    "      debugShowCheckedModeBanner: false,",
    "      home: Builder(",
    "        builder: (BuildContext context) => Scaffold(",
    "          appBar: AppBar(",
    "            title: const Text('Content Based Dynamic Color'),",
    "            backgroundColor: colorScheme.primary,",
    "            foregroundColor: colorScheme.onPrimary,",
    "            actions: <Widget>[",
    "              const Icon(Icons.light_mode),",
    "              Switch(",
    "                  activeColor: colorScheme.primary,",
    "                  activeTrackColor: colorScheme.surface,",
    "                  inactiveTrackColor: colorScheme.onSecondary,",
    "                  value: isLight,",
    "                  onChanged: (bool value) {",
    "                    setState(() {",
    "                      isLight = value;",
    "                      _updateImage(widget.images[selectedImage]);",
    "                    });",
    "                  })",
    "            ],",
    "          ),",
    "          body: Center(",
    "            child: isLoading",
    "                ? const CircularProgressIndicator()",
    "                : ColoredBox(",
    "                    color: colorScheme.secondaryContainer,",
    "                    child: Column(",
    "                      children: <Widget>[",
    "                        divider,",
    "                        _imagesRow(",
    "                          context,",
    "                          widget.images,",
    "                          colorScheme,",
    "                        ),",
    "                        divider,",
    "                        Expanded(",
    "                          child: ColoredBox(",
    "                            color: colorScheme.background,",
    "                            child: LayoutBuilder(builder: (BuildContext context, BoxConstraints constraints) {",
    "                              if (constraints.maxWidth < narrowScreenWidthThreshold) {",
    "                                return SingleChildScrollView(",
    "                                  child: Column(",
    "                                    children: <Widget>[",
    "                                      divider,",
    "                                      schemeLabel('Light ColorScheme', colorScheme),",
    "                                      schemeView(lightTheme),",
    "                                      divider,",
    "                                      divider,",
    "                                      schemeLabel('Dark ColorScheme', colorScheme),",
    "                                      schemeView(darkTheme),",
    "                                    ],",
    "                                  ),",
    "                                );",
    "                              } else {",
    "                                return SingleChildScrollView(",
    "                                  child: Padding(",
    "                                    padding: const EdgeInsets.only(top: 5),",
    "                                    child: Column(",
    "                                      children: <Widget>[",
    "                                        Row(",
    "                                          children: <Widget>[",
    "                                            Expanded(",
    "                                              child: Column(",
    "                                                children: <Widget>[",
    "                                                  schemeLabel('Light ColorScheme', colorScheme),",
    "                                                  schemeView(lightTheme),",
    "                                                ],",
    "                                              ),",
    "                                            ),",
    "                                            Expanded(",
    "                                              child: Column(",
    "                                                children: <Widget>[",
    "                                                  schemeLabel('Dark ColorScheme', colorScheme),",
    "                                                  schemeView(darkTheme),",
    "                                                ],",
    "                                              ),",
    "                                            ),",
    "                                          ],",
    "                                        ),",
    "                                      ],",
    "                                    ),",
    "                                  ),",
    "                                );",
    "                              }",
    "                            }),",
    "                          ),",
    "                        ),",
    "                      ],",
    "                    ),",
    "                  ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Future<void> _updateImage(ImageProvider provider) async {",
    "    final ColorScheme newColorScheme = await ColorScheme.fromImageProvider(",
    "        provider: provider, brightness: isLight ? Brightness.light : Brightness.dark);",
    "    setState(() {",
    "      selectedImage = widget.images.indexOf(provider);",
    "      currentColorScheme = newColorScheme;",
    "    });",
    "  }",
    "",
    "  // For small screens, have two rows of image selection. For wide screens,",
    "  // fit them onto one row.",
    "  Widget _imagesRow(BuildContext context, List<ImageProvider> images, ColorScheme colorScheme) {",
    "    final double windowHeight = MediaQuery.of(context).size.height;",
    "    final double windowWidth = MediaQuery.of(context).size.width;",
    "    return Padding(",
    "      padding: const EdgeInsets.all(8.0),",
    "      child: LayoutBuilder(builder: (BuildContext context, BoxConstraints constraints) {",
    "        if (constraints.maxWidth > 800) {",
    "          return _adaptiveLayoutImagesRow(images, colorScheme, windowHeight);",
    "        } else {",
    "          return Column(children: <Widget>[",
    "            _adaptiveLayoutImagesRow(images.sublist(0, 3), colorScheme, windowWidth),",
    "            _adaptiveLayoutImagesRow(images.sublist(3), colorScheme, windowWidth),",
    "          ]);",
    "        }",
    "      }),",
    "    );",
    "  }",
    "",
    "  Widget _adaptiveLayoutImagesRow(List<ImageProvider> images, ColorScheme colorScheme, double windowWidth) {",
    "    return Row(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: images",
    "          .map(",
    "            (ImageProvider image) => Flexible(",
    "              flex: (images.length / 3).floor(),",
    "              child: GestureDetector(",
    "                onTap: () => _updateImage(image),",
    "                child: Card(",
    "                  color: widget.images.indexOf(image) == selectedImage",
    "                      ? colorScheme.primaryContainer",
    "                      : colorScheme.background,",
    "                  child: Padding(",
    "                    padding: const EdgeInsets.all(5.0),",
    "                    child: ConstrainedBox(",
    "                      constraints: BoxConstraints(maxWidth: windowWidth * .25),",
    "                      child: ClipRRect(",
    "                        borderRadius: BorderRadius.circular(8.0),",
    "                        child: Image(image: image),",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ),",
    "              ),",
    "            ),",
    "          )",
    "          .toList(),",
    "    );",
    "  }",
    "}",
    "",
    "class ColorSchemeView extends StatelessWidget {",
    "  const ColorSchemeView({super.key, required this.colorScheme});",
    "",
    "  final ColorScheme colorScheme;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        ColorGroup(children: <ColorChip>[",
    "          ColorChip(label: 'primary', color: colorScheme.primary, onColor: colorScheme.onPrimary),",
    "          ColorChip(label: 'onPrimary', color: colorScheme.onPrimary, onColor: colorScheme.primary),",
    "          ColorChip(",
    "              label: 'primaryContainer', color: colorScheme.primaryContainer, onColor: colorScheme.onPrimaryContainer),",
    "          ColorChip(",
    "              label: 'onPrimaryContainer',",
    "              color: colorScheme.onPrimaryContainer,",
    "              onColor: colorScheme.primaryContainer),",
    "        ]),",
    "        divider,",
    "        ColorGroup(children: <ColorChip>[",
    "          ColorChip(label: 'secondary', color: colorScheme.secondary, onColor: colorScheme.onSecondary),",
    "          ColorChip(label: 'onSecondary', color: colorScheme.onSecondary, onColor: colorScheme.secondary),",
    "          ColorChip(",
    "              label: 'secondaryContainer',",
    "              color: colorScheme.secondaryContainer,",
    "              onColor: colorScheme.onSecondaryContainer),",
    "          ColorChip(",
    "              label: 'onSecondaryContainer',",
    "              color: colorScheme.onSecondaryContainer,",
    "              onColor: colorScheme.secondaryContainer),",
    "        ]),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'tertiary', color: colorScheme.tertiary, onColor: colorScheme.onTertiary),",
    "            ColorChip(label: 'onTertiary', color: colorScheme.onTertiary, onColor: colorScheme.tertiary),",
    "            ColorChip(",
    "                label: 'tertiaryContainer',",
    "                color: colorScheme.tertiaryContainer,",
    "                onColor: colorScheme.onTertiaryContainer),",
    "            ColorChip(",
    "                label: 'onTertiaryContainer',",
    "                color: colorScheme.onTertiaryContainer,",
    "                onColor: colorScheme.tertiaryContainer),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'error', color: colorScheme.error, onColor: colorScheme.onError),",
    "            ColorChip(label: 'onError', color: colorScheme.onError, onColor: colorScheme.error),",
    "            ColorChip(",
    "                label: 'errorContainer', color: colorScheme.errorContainer, onColor: colorScheme.onErrorContainer),",
    "            ColorChip(",
    "                label: 'onErrorContainer', color: colorScheme.onErrorContainer, onColor: colorScheme.errorContainer),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'background', color: colorScheme.background, onColor: colorScheme.onBackground),",
    "            ColorChip(label: 'onBackground', color: colorScheme.onBackground, onColor: colorScheme.background),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'surface', color: colorScheme.surface, onColor: colorScheme.onSurface),",
    "            ColorChip(label: 'onSurface', color: colorScheme.onSurface, onColor: colorScheme.surface),",
    "            ColorChip(",
    "                label: 'surfaceVariant', color: colorScheme.surfaceVariant, onColor: colorScheme.onSurfaceVariant),",
    "            ColorChip(",
    "                label: 'onSurfaceVariant', color: colorScheme.onSurfaceVariant, onColor: colorScheme.surfaceVariant),",
    "          ],",
    "        ),",
    "        divider,",
    "        ColorGroup(",
    "          children: <ColorChip>[",
    "            ColorChip(label: 'outline', color: colorScheme.outline),",
    "            ColorChip(label: 'shadow', color: colorScheme.shadow),",
    "            ColorChip(",
    "                label: 'inverseSurface', color: colorScheme.inverseSurface, onColor: colorScheme.onInverseSurface),",
    "            ColorChip(",
    "                label: 'onInverseSurface', color: colorScheme.onInverseSurface, onColor: colorScheme.inverseSurface),",
    "            ColorChip(label: 'inversePrimary', color: colorScheme.inversePrimary, onColor: colorScheme.primary),",
    "          ],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class ColorGroup extends StatelessWidget {",
    "  const ColorGroup({super.key, required this.children});",
    "",
    "  final List<Widget> children;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RepaintBoundary(",
    "      child: Card(clipBehavior: Clip.antiAlias, child: Column(children: children)),",
    "    );",
    "  }",
    "}",
    "",
    "class ColorChip extends StatelessWidget {",
    "  const ColorChip({",
    "    super.key,",
    "    required this.color,",
    "    required this.label,",
    "    this.onColor,",
    "  });",
    "",
    "  final Color color;",
    "  final Color? onColor;",
    "  final String label;",
    "",
    "  static Color contrastColor(Color color) {",
    "    final Brightness brightness = ThemeData.estimateBrightnessForColor(color);",
    "    switch (brightness) {",
    "      case Brightness.dark:",
    "        return Colors.white;",
    "      case Brightness.light:",
    "        return Colors.black;",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Color labelColor = onColor ?? contrastColor(color);",
    "    return ColoredBox(",
    "      color: color,",
    "      child: Padding(",
    "        padding: const EdgeInsets.all(16),",
    "        child: Row(",
    "          children: <Expanded>[",
    "            Expanded(child: Text(label, style: TextStyle(color: labelColor))),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DynamicColor Example"
},
"Flutter SelectableRegionToolbarBuilderExampleApp Example": {
  "prefix": "flutter-selectable-region-toolbar-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "void main() => runApp(const SelectableRegionToolbarBuilderExampleApp());",
    "",
    "const String text =",
    "    'I am some text inside of SelectionArea. Right click (desktop) or long press (mobile) me to show the customized context menu.';",
    "",
    "class SelectableRegionToolbarBuilderExampleApp extends StatefulWidget {",
    "  const SelectableRegionToolbarBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  State<SelectableRegionToolbarBuilderExampleApp> createState() => _SelectableRegionToolbarBuilderExampleAppState();",
    "}",
    "",
    "class _SelectableRegionToolbarBuilderExampleAppState extends State<SelectableRegionToolbarBuilderExampleApp> {",
    "  void _showDialog(BuildContext context) {",
    "    Navigator.of(context).push(",
    "      DialogRoute<void>(",
    "        context: context,",
    "        builder: (BuildContext context) => const AlertDialog(title: Text('You clicked print!')),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    // On web, disable the browser's context menu since this example uses a custom",
    "    // Flutter-rendered context menu.",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.disableContextMenu();",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.enableContextMenu();",
    "    }",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Context menu anywhere'),",
    "        ),",
    "        body: Center(",
    "          child: SizedBox(",
    "            width: 200.0,",
    "            child: SelectionArea(",
    "              contextMenuBuilder: (",
    "                BuildContext context,",
    "                SelectableRegionState selectableRegionState,",
    "              ) {",
    "                return AdaptiveTextSelectionToolbar.buttonItems(",
    "                  anchors: selectableRegionState.contextMenuAnchors,",
    "                  buttonItems: <ContextMenuButtonItem>[",
    "                    ...selectableRegionState.contextMenuButtonItems,",
    "                    ContextMenuButtonItem(",
    "                      onPressed: () {",
    "                        ContextMenuController.removeAny();",
    "                        _showDialog(context);",
    "                      },",
    "                      label: 'Print',",
    "                    ),",
    "                  ],",
    "                );",
    "              },",
    "              child: ListView(",
    "                children: const <Widget>[",
    "                  SizedBox(height: 20.0),",
    "                  Text(text),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SelectableRegionToolbarBuilderExampleApp Example"
},
"Flutter SelectableRegionToolbarBuilderExampleApp Example": {
  "prefix": "flutter-SelectionArea",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "void main() => runApp(const SelectableRegionToolbarBuilderExampleApp());",
    "",
    "const String text =",
    "    'I am some text inside of SelectionArea. Right click (desktop) or long press (mobile) me to show the customized context menu.';",
    "",
    "class SelectableRegionToolbarBuilderExampleApp extends StatefulWidget {",
    "  const SelectableRegionToolbarBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  State<SelectableRegionToolbarBuilderExampleApp> createState() => _SelectableRegionToolbarBuilderExampleAppState();",
    "}",
    "",
    "class _SelectableRegionToolbarBuilderExampleAppState extends State<SelectableRegionToolbarBuilderExampleApp> {",
    "  void _showDialog(BuildContext context) {",
    "    Navigator.of(context).push(",
    "      DialogRoute<void>(",
    "        context: context,",
    "        builder: (BuildContext context) => const AlertDialog(title: Text('You clicked print!')),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    // On web, disable the browser's context menu since this example uses a custom",
    "    // Flutter-rendered context menu.",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.disableContextMenu();",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.enableContextMenu();",
    "    }",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Context menu anywhere'),",
    "        ),",
    "        body: Center(",
    "          child: SizedBox(",
    "            width: 200.0,",
    "            child: SelectionArea(",
    "              contextMenuBuilder: (",
    "                BuildContext context,",
    "                SelectableRegionState selectableRegionState,",
    "              ) {",
    "                return AdaptiveTextSelectionToolbar.buttonItems(",
    "                  anchors: selectableRegionState.contextMenuAnchors,",
    "                  buttonItems: <ContextMenuButtonItem>[",
    "                    ...selectableRegionState.contextMenuButtonItems,",
    "                    ContextMenuButtonItem(",
    "                      onPressed: () {",
    "                        ContextMenuController.removeAny();",
    "                        _showDialog(context);",
    "                      },",
    "                      label: 'Print',",
    "                    ),",
    "                  ],",
    "                );",
    "              },",
    "              child: ListView(",
    "                children: const <Widget>[",
    "                  SizedBox(height: 20.0),",
    "                  Text(text),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SelectableRegionToolbarBuilderExampleApp Example"
},
"Flutter Data Table ": {
  "prefix": "flutter-datatable-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DataTable].",
    "",
    "void main() => runApp(const DataTableExampleApp());",
    "",
    "class DataTableExampleApp extends StatelessWidget {",
    "  const DataTableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DataTable Sample')),",
    "        body: const DataTableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DataTableExample extends StatelessWidget {",
    "  const DataTableExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DataTable(",
    "      columns: const <DataColumn>[",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Name',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Age',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Role',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "      rows: const <DataRow>[",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Sarah')),",
    "            DataCell(Text('19')),",
    "            DataCell(Text('Student')),",
    "          ],",
    "        ),",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Janine')),",
    "            DataCell(Text('43')),",
    "            DataCell(Text('Professor')),",
    "          ],",
    "        ),",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('William')),",
    "            DataCell(Text('27')),",
    "            DataCell(Text('Associate Professor')),",
    "          ],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Data Table "
},"Flutter Data Table ": {
  "prefix": "flutter-DataTable",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DataTable].",
    "",
    "void main() => runApp(const DataTableExampleApp());",
    "",
    "class DataTableExampleApp extends StatelessWidget {",
    "  const DataTableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DataTable Sample')),",
    "        body: const DataTableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DataTableExample extends StatelessWidget {",
    "  const DataTableExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DataTable(",
    "      columns: const <DataColumn>[",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Name',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Age',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "        DataColumn(",
    "          label: Expanded(",
    "            child: Text(",
    "              'Role',",
    "              style: TextStyle(fontStyle: FontStyle.italic),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "      rows: const <DataRow>[",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Sarah')),",
    "            DataCell(Text('19')),",
    "            DataCell(Text('Student')),",
    "          ],",
    "        ),",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Janine')),",
    "            DataCell(Text('43')),",
    "            DataCell(Text('Professor')),",
    "          ],",
    "        ),",
    "        DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('William')),",
    "            DataCell(Text('27')),",
    "            DataCell(Text('Associate Professor')),",
    "          ],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Data Table "
},
"Flutter DateRange Picker ": {
  "prefix": "flutter-date-range-picker-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDateRangePicker].",
    "",
    "void main() => runApp(const DatePickerApp());",
    "",
    "class DatePickerApp extends StatelessWidget {",
    "  const DatePickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      restorationScopeId: 'app',",
    "      home: const DatePickerExample(restorationId: 'main'),",
    "    );",
    "  }",
    "}",
    "",
    "class DatePickerExample extends StatefulWidget {",
    "  const DatePickerExample({super.key, this.restorationId});",
    "",
    "  final String? restorationId;",
    "",
    "  @override",
    "  State<DatePickerExample> createState() => _DatePickerExampleState();",
    "}",
    "",
    "/// RestorationProperty objects can be used because of RestorationMixin.",
    "class _DatePickerExampleState extends State<DatePickerExample> with RestorationMixin {",
    "  // In this example, the restoration ID for the mixin is passed in through",
    "  // the [StatefulWidget]'s constructor.",
    "  @override",
    "  String? get restorationId => widget.restorationId;",
    "",
    "  final RestorableDateTimeN _startDate = RestorableDateTimeN(DateTime(2021));",
    "  final RestorableDateTimeN _endDate = RestorableDateTimeN(DateTime(2021, 1, 5));",
    "  late final RestorableRouteFuture<DateTimeRange?> _restorableDateRangePickerRouteFuture =",
    "      RestorableRouteFuture<DateTimeRange?>(",
    "    onComplete: _selectDateRange,",
    "    onPresent: (NavigatorState navigator, Object? arguments) {",
    "      return navigator.restorablePush(_dateRangePickerRoute, arguments: <String, dynamic>{",
    "        'initialStartDate': _startDate.value?.millisecondsSinceEpoch,",
    "        'initialEndDate': _endDate.value?.millisecondsSinceEpoch,",
    "      });",
    "    },",
    "  );",
    "",
    "  void _selectDateRange(DateTimeRange? newSelectedDate) {",
    "    if (newSelectedDate != null) {",
    "      setState(() {",
    "        _startDate.value = newSelectedDate.start;",
    "        _endDate.value = newSelectedDate.end;",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    registerForRestoration(_startDate, 'start_date');",
    "    registerForRestoration(_endDate, 'end_date');",
    "    registerForRestoration(_restorableDateRangePickerRouteFuture, 'date_picker_route_future');",
    "  }",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<DateTimeRange?> _dateRangePickerRoute(",
    "    BuildContext context,",
    "    Object? arguments,",
    "  ) {",
    "    return DialogRoute<DateTimeRange?>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return DateRangePickerDialog(",
    "          restorationId: 'date_picker_dialog',",
    "          initialDateRange: _initialDateTimeRange(arguments! as Map<dynamic, dynamic>),",
    "          firstDate: DateTime(2021),",
    "          currentDate: DateTime(2021, 1, 25),",
    "          lastDate: DateTime(2022),",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  static DateTimeRange? _initialDateTimeRange(Map<dynamic, dynamic> arguments) {",
    "    if (arguments['initialStartDate'] != null && arguments['initialEndDate'] != null) {",
    "      return DateTimeRange(",
    "        start: DateTime.fromMillisecondsSinceEpoch(arguments['initialStartDate'] as int),",
    "        end: DateTime.fromMillisecondsSinceEpoch(arguments['initialEndDate'] as int),",
    "      );",
    "    }",
    "",
    "    return null;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            _restorableDateRangePickerRouteFuture.present();",
    "          },",
    "          child: const Text('Open Date Range Picker'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DateRange Picker "
},
"Flutter DateRange Picker ": {
  "prefix": "flutter-DateRangePickerDialog",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDateRangePicker].",
    "",
    "void main() => runApp(const DatePickerApp());",
    "",
    "class DatePickerApp extends StatelessWidget {",
    "  const DatePickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      restorationScopeId: 'app',",
    "      home: const DatePickerExample(restorationId: 'main'),",
    "    );",
    "  }",
    "}",
    "",
    "class DatePickerExample extends StatefulWidget {",
    "  const DatePickerExample({super.key, this.restorationId});",
    "",
    "  final String? restorationId;",
    "",
    "  @override",
    "  State<DatePickerExample> createState() => _DatePickerExampleState();",
    "}",
    "",
    "/// RestorationProperty objects can be used because of RestorationMixin.",
    "class _DatePickerExampleState extends State<DatePickerExample> with RestorationMixin {",
    "  // In this example, the restoration ID for the mixin is passed in through",
    "  // the [StatefulWidget]'s constructor.",
    "  @override",
    "  String? get restorationId => widget.restorationId;",
    "",
    "  final RestorableDateTimeN _startDate = RestorableDateTimeN(DateTime(2021));",
    "  final RestorableDateTimeN _endDate = RestorableDateTimeN(DateTime(2021, 1, 5));",
    "  late final RestorableRouteFuture<DateTimeRange?> _restorableDateRangePickerRouteFuture =",
    "      RestorableRouteFuture<DateTimeRange?>(",
    "    onComplete: _selectDateRange,",
    "    onPresent: (NavigatorState navigator, Object? arguments) {",
    "      return navigator.restorablePush(_dateRangePickerRoute, arguments: <String, dynamic>{",
    "        'initialStartDate': _startDate.value?.millisecondsSinceEpoch,",
    "        'initialEndDate': _endDate.value?.millisecondsSinceEpoch,",
    "      });",
    "    },",
    "  );",
    "",
    "  void _selectDateRange(DateTimeRange? newSelectedDate) {",
    "    if (newSelectedDate != null) {",
    "      setState(() {",
    "        _startDate.value = newSelectedDate.start;",
    "        _endDate.value = newSelectedDate.end;",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    registerForRestoration(_startDate, 'start_date');",
    "    registerForRestoration(_endDate, 'end_date');",
    "    registerForRestoration(_restorableDateRangePickerRouteFuture, 'date_picker_route_future');",
    "  }",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<DateTimeRange?> _dateRangePickerRoute(",
    "    BuildContext context,",
    "    Object? arguments,",
    "  ) {",
    "    return DialogRoute<DateTimeRange?>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return DateRangePickerDialog(",
    "          restorationId: 'date_picker_dialog',",
    "          initialDateRange: _initialDateTimeRange(arguments! as Map<dynamic, dynamic>),",
    "          firstDate: DateTime(2021),",
    "          currentDate: DateTime(2021, 1, 25),",
    "          lastDate: DateTime(2022),",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  static DateTimeRange? _initialDateTimeRange(Map<dynamic, dynamic> arguments) {",
    "    if (arguments['initialStartDate'] != null && arguments['initialEndDate'] != null) {",
    "      return DateTimeRange(",
    "        start: DateTime.fromMillisecondsSinceEpoch(arguments['initialStartDate'] as int),",
    "        end: DateTime.fromMillisecondsSinceEpoch(arguments['initialEndDate'] as int),",
    "      );",
    "    }",
    "",
    "    return null;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            _restorableDateRangePickerRouteFuture.present();",
    "          },",
    "          child: const Text('Open Date Range Picker'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DateRange Picker "
},
"Flutter Date Picker ": {
  "prefix": "flutter-date-picker-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDatePicker].",
    "",
    "void main() => runApp(const DatePickerApp());",
    "",
    "class DatePickerApp extends StatelessWidget {",
    "  const DatePickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      restorationScopeId: 'app',",
    "      home: const DatePickerExample(restorationId: 'main'),",
    "    );",
    "  }",
    "}",
    "",
    "class DatePickerExample extends StatefulWidget {",
    "  const DatePickerExample({super.key, this.restorationId});",
    "",
    "  final String? restorationId;",
    "",
    "  @override",
    "  State<DatePickerExample> createState() => _DatePickerExampleState();",
    "}",
    "",
    "/// RestorationProperty objects can be used because of RestorationMixin.",
    "class _DatePickerExampleState extends State<DatePickerExample> with RestorationMixin {",
    "  // In this example, the restoration ID for the mixin is passed in through",
    "  // the [StatefulWidget]'s constructor.",
    "  @override",
    "  String? get restorationId => widget.restorationId;",
    "",
    "  final RestorableDateTime _selectedDate = RestorableDateTime(DateTime(2021, 7, 25));",
    "  late final RestorableRouteFuture<DateTime?> _restorableDatePickerRouteFuture = RestorableRouteFuture<DateTime?>(",
    "    onComplete: _selectDate,",
    "    onPresent: (NavigatorState navigator, Object? arguments) {",
    "      return navigator.restorablePush(",
    "        _datePickerRoute,",
    "        arguments: _selectedDate.value.millisecondsSinceEpoch,",
    "      );",
    "    },",
    "  );",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<DateTime> _datePickerRoute(",
    "    BuildContext context,",
    "    Object? arguments,",
    "  ) {",
    "    return DialogRoute<DateTime>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return DatePickerDialog(",
    "          restorationId: 'date_picker_dialog',",
    "          initialEntryMode: DatePickerEntryMode.calendarOnly,",
    "          initialDate: DateTime.fromMillisecondsSinceEpoch(arguments! as int),",
    "          firstDate: DateTime(2021),",
    "          lastDate: DateTime(2022),",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    registerForRestoration(_selectedDate, 'selected_date');",
    "    registerForRestoration(_restorableDatePickerRouteFuture, 'date_picker_route_future');",
    "  }",
    "",
    "  void _selectDate(DateTime? newSelectedDate) {",
    "    if (newSelectedDate != null) {",
    "      setState(() {",
    "        _selectedDate.value = newSelectedDate;",
    "        ScaffoldMessenger.of(context).showSnackBar(SnackBar(",
    "          content:",
    "              Text('Selected: ${_selectedDate.value.day}/${_selectedDate.value.month}/${_selectedDate.value.year}'),",
    "        ));",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            _restorableDatePickerRouteFuture.present();",
    "          },",
    "          child: const Text('Open Date Picker'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Date Picker "
}
,"Flutter Date Picker ": {
  "prefix": "flutter-DatePickerDialog",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDatePicker].",
    "",
    "void main() => runApp(const DatePickerApp());",
    "",
    "class DatePickerApp extends StatelessWidget {",
    "  const DatePickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      restorationScopeId: 'app',",
    "      home: const DatePickerExample(restorationId: 'main'),",
    "    );",
    "  }",
    "}",
    "",
    "class DatePickerExample extends StatefulWidget {",
    "  const DatePickerExample({super.key, this.restorationId});",
    "",
    "  final String? restorationId;",
    "",
    "  @override",
    "  State<DatePickerExample> createState() => _DatePickerExampleState();",
    "}",
    "",
    "/// RestorationProperty objects can be used because of RestorationMixin.",
    "class _DatePickerExampleState extends State<DatePickerExample> with RestorationMixin {",
    "  // In this example, the restoration ID for the mixin is passed in through",
    "  // the [StatefulWidget]'s constructor.",
    "  @override",
    "  String? get restorationId => widget.restorationId;",
    "",
    "  final RestorableDateTime _selectedDate = RestorableDateTime(DateTime(2021, 7, 25));",
    "  late final RestorableRouteFuture<DateTime?> _restorableDatePickerRouteFuture = RestorableRouteFuture<DateTime?>(",
    "    onComplete: _selectDate,",
    "    onPresent: (NavigatorState navigator, Object? arguments) {",
    "      return navigator.restorablePush(",
    "        _datePickerRoute,",
    "        arguments: _selectedDate.value.millisecondsSinceEpoch,",
    "      );",
    "    },",
    "  );",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<DateTime> _datePickerRoute(",
    "    BuildContext context,",
    "    Object? arguments,",
    "  ) {",
    "    return DialogRoute<DateTime>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return DatePickerDialog(",
    "          restorationId: 'date_picker_dialog',",
    "          initialEntryMode: DatePickerEntryMode.calendarOnly,",
    "          initialDate: DateTime.fromMillisecondsSinceEpoch(arguments! as int),",
    "          firstDate: DateTime(2021),",
    "          lastDate: DateTime(2022),",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    registerForRestoration(_selectedDate, 'selected_date');",
    "    registerForRestoration(_restorableDatePickerRouteFuture, 'date_picker_route_future');",
    "  }",
    "",
    "  void _selectDate(DateTime? newSelectedDate) {",
    "    if (newSelectedDate != null) {",
    "      setState(() {",
    "        _selectedDate.value = newSelectedDate;",
    "        ScaffoldMessenger.of(context).showSnackBar(SnackBar(",
    "          content:",
    "              Text('Selected: ${_selectedDate.value.day}/${_selectedDate.value.month}/${_selectedDate.value.year}'),",
    "        ));",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            _restorableDatePickerRouteFuture.present();",
    "          },",
    "          child: const Text('Open Date Picker'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Date Picker "
}
,
"Flutter Adaptive Dialog ": {
  "prefix": "flutter-adaptive-dialog-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AlertDialog].",
    "",
    "void main() => runApp(const AdaptiveAlertDialogApp());",
    "",
    "class AdaptiveAlertDialogApp extends StatelessWidget {",
    "  const AdaptiveAlertDialogApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      // Try this: set the platform to TargetPlatform.android and see the difference",
    "      theme: ThemeData(platform: TargetPlatform.iOS, useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AlertDialog Sample')),",
    "        body: const Center(",
    "          child: AdaptiveDialogExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AdaptiveDialogExample extends StatelessWidget {",
    "  const AdaptiveDialogExample({super.key});",
    "",
    "  Widget adaptiveAction({",
    "    required BuildContext context,",
    "    required VoidCallback onPressed,",
    "    required Widget child",
    "  }) {",
    "    final ThemeData theme = Theme.of(context);",
    "    switch (theme.platform) {",
    "      case TargetPlatform.android:",
    "      case TargetPlatform.fuchsia:",
    "      case TargetPlatform.linux:",
    "      case TargetPlatform.windows:",
    "        return TextButton(onPressed: onPressed, child: child);",
    "      case TargetPlatform.iOS:",
    "      case TargetPlatform.macOS:",
    "        return CupertinoDialogAction(onPressed: onPressed, child: child);",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextButton(",
    "      onPressed: () => showAdaptiveDialog<String>(",
    "        context: context,",
    "        builder: (BuildContext context) => AlertDialog.adaptive(",
    "          title: const Text('AlertDialog Title'),",
    "          content: const Text('AlertDialog description'),",
    "          actions: <Widget>[",
    "            adaptiveAction(",
    "              context: context,",
    "              onPressed: () => Navigator.pop(context, 'Cancel'),",
    "              child: const Text('Cancel'),",
    "            ),",
    "            adaptiveAction(",
    "              context: context,",
    "              onPressed: () => Navigator.pop(context, 'OK'),",
    "              child: const Text('OK'),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      child: const Text('Show Dialog'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Adaptive Dialog "
},"Flutter Adaptive Dialog ": {
  "prefix": "flutter-AlertDialog.adaptive",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AlertDialog].",
    "",
    "void main() => runApp(const AdaptiveAlertDialogApp());",
    "",
    "class AdaptiveAlertDialogApp extends StatelessWidget {",
    "  const AdaptiveAlertDialogApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      // Try this: set the platform to TargetPlatform.android and see the difference",
    "      theme: ThemeData(platform: TargetPlatform.iOS, useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AlertDialog Sample')),",
    "        body: const Center(",
    "          child: AdaptiveDialogExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AdaptiveDialogExample extends StatelessWidget {",
    "  const AdaptiveDialogExample({super.key});",
    "",
    "  Widget adaptiveAction({",
    "    required BuildContext context,",
    "    required VoidCallback onPressed,",
    "    required Widget child",
    "  }) {",
    "    final ThemeData theme = Theme.of(context);",
    "    switch (theme.platform) {",
    "      case TargetPlatform.android:",
    "      case TargetPlatform.fuchsia:",
    "      case TargetPlatform.linux:",
    "      case TargetPlatform.windows:",
    "        return TextButton(onPressed: onPressed, child: child);",
    "      case TargetPlatform.iOS:",
    "      case TargetPlatform.macOS:",
    "        return CupertinoDialogAction(onPressed: onPressed, child: child);",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextButton(",
    "      onPressed: () => showAdaptiveDialog<String>(",
    "        context: context,",
    "        builder: (BuildContext context) => AlertDialog.adaptive(",
    "          title: const Text('AlertDialog Title'),",
    "          content: const Text('AlertDialog description'),",
    "          actions: <Widget>[",
    "            adaptiveAction(",
    "              context: context,",
    "              onPressed: () => Navigator.pop(context, 'Cancel'),",
    "              child: const Text('Cancel'),",
    "            ),",
    "            adaptiveAction(",
    "              context: context,",
    "              onPressed: () => Navigator.pop(context, 'OK'),",
    "              child: const Text('OK'),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      child: const Text('Show Dialog'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Adaptive Dialog "
},
"Flutter showDialog ": {
  "prefix": "flutter-showDialog",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Dialog].",
    "",
    "void main() => runApp(const DialogExampleApp());",
    "",
    "class DialogExampleApp extends StatelessWidget {",
    "  const DialogExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Dialog Sample')),",
    "        body: const Center(",
    "          child: DialogExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DialogExample extends StatelessWidget {",
    "  const DialogExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        TextButton(",
    "          onPressed: () => showDialog<String>(",
    "            context: context,",
    "            builder: (BuildContext context) => Dialog(",
    "              child: Padding(",
    "                padding: const EdgeInsets.all(8.0),",
    "                child: Column(",
    "                  mainAxisSize: MainAxisSize.min,",
    "                  mainAxisAlignment: MainAxisAlignment.center,",
    "                  children: <Widget>[",
    "                    const Text('This is a typical dialog.'),",
    "                    const SizedBox(height: 15),",
    "                    TextButton(",
    "                      onPressed: () {",
    "                        Navigator.pop(context);",
    "                      },",
    "                      child: const Text('Close'),",
    "                    ),",
    "                  ],",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "          child: const Text('Show Dialog'),",
    "        ),",
    "        const SizedBox(height: 10),",
    "        TextButton(",
    "          onPressed: () => showDialog<String>(",
    "            context: context,",
    "            builder: (BuildContext context) => Dialog.fullscreen(",
    "              child: Column(",
    "                mainAxisSize: MainAxisSize.min,",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  const Text('This is a fullscreen dialog.'),",
    "                  const SizedBox(height: 15),",
    "                  TextButton(",
    "                    onPressed: () {",
    "                      Navigator.pop(context);",
    "                    },",
    "                    child: const Text('Close'),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "          child: const Text('Show Fullscreen Dialog'),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showDialog "
},
"Flutter Alert Dialog ": {
  "prefix": "flutter-AlertDialog",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showDialog].",
    "",
    "void main() => runApp(const ShowDialogExampleApp());",
    "",
    "class ShowDialogExampleApp extends StatelessWidget {",
    "  const ShowDialogExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: DialogExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class DialogExample extends StatelessWidget {",
    "  const DialogExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('showDialog Sample')),",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () => _dialogBuilder(context),",
    "          child: const Text('Open Dialog'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Future<void> _dialogBuilder(BuildContext context) {",
    "    return showDialog<void>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return AlertDialog(",
    "          title: const Text('Basic dialog title'),",
    "          content: const Text(",
    "            'A dialog is a type of modal window that\\n'",
    "            'appears in front of app content to\\n'",
    "            'provide critical information, or prompt\\n'",
    "            'for a decision to be made.',",
    "          ),",
    "          actions: <Widget>[",
    "            TextButton(",
    "              style: TextButton.styleFrom(",
    "                textStyle: Theme.of(context).textTheme.labelLarge,",
    "              ),",
    "              child: const Text('Disable'),",
    "              onPressed: () {",
    "                Navigator.of(context).pop();",
    "              },",
    "            ),",
    "            TextButton(",
    "              style: TextButton.styleFrom(",
    "                textStyle: Theme.of(context).textTheme.labelLarge,",
    "              ),",
    "              child: const Text('Enable'),",
    "              onPressed: () {",
    "                Navigator.of(context).pop();",
    "              },",
    "            ),",
    "          ],",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Alert Dialog "
},
"Flutter Divider Dialog ": {
  "prefix": "flutter-Divider",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Divider].",
    "",
    "void main() => runApp(const DividerExampleApp());",
    "",
    "class DividerExampleApp extends StatelessWidget {",
    "  const DividerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Divider Sample')),",
    "        body: const DividerExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DividerExample extends StatelessWidget {",
    "  const DividerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        children: <Widget>[",
    "          const Expanded(",
    "            child: ColoredBox(",
    "              color: Colors.amber,",
    "              child: Center(",
    "                child: Text('Above'),",
    "              ),",
    "            ),",
    "          ),",
    "          const Divider(",
    "            height: 20,",
    "            thickness: 5,",
    "            indent: 20,",
    "            endIndent: 0,",
    "            color: Colors.black,",
    "          ),",
    "          // Subheader example from Material spec.",
    "          // https://material.io/components/dividers#types",
    "          Container(",
    "            padding: const EdgeInsets.only(left: 20),",
    "            child: Align(",
    "              alignment: AlignmentDirectional.centerStart,",
    "              child: Text(",
    "                'Subheader',",
    "                style: Theme.of(context).textTheme.bodySmall,",
    "                textAlign: TextAlign.start,",
    "              ),",
    "            ),",
    "          ),",
    "          Expanded(",
    "            child: ColoredBox(",
    "              color: Theme.of(context).colorScheme.primary,",
    "              child: const Center(",
    "                child: Text('Below'),",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Divider Dialog "
},
"Flutter Vertical Divider Dialog ": {
  "prefix": "flutter-VerticalDivider",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [VerticalDivider].",
    "",
    "void main() => runApp(const VerticalDividerExampleApp());",
    "",
    "class VerticalDividerExampleApp extends StatelessWidget {",
    "  const VerticalDividerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('VerticalDivider Sample')),",
    "        body: const DividerExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DividerExample extends StatelessWidget {",
    "  const DividerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      padding: const EdgeInsets.all(10),",
    "      child: Row(",
    "        children: <Widget>[",
    "          Expanded(",
    "            child: Container(",
    "              decoration: BoxDecoration(",
    "                borderRadius: BorderRadius.circular(10),",
    "                color: Colors.deepPurpleAccent,",
    "              ), ",
    "            ),",
    "          ),",
    "          const VerticalDivider(",
    "            width: 20,",
    "            thickness: 1,",
    "            indent: 20,",
    "            endIndent: 0,",
    "            color: Colors.grey,",
    "          ),",
    "          Expanded(",
    "            child: Container(",
    "              decoration: BoxDecoration(",
    "                borderRadius: BorderRadius.circular(10),",
    "                color: Colors.deepOrangeAccent,",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Vertical Divider Dialog "
},
"Flutter DropDown Example ": {
  "prefix": "flutter-DropdownButton",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DropdownButton].",
    "",
    "const List<String> list = <String>['One', 'Two', 'Three', 'Four'];",
    "",
    "void main() => runApp(const DropdownButtonApp());",
    "",
    "class DropdownButtonApp extends StatelessWidget {",
    "  const DropdownButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DropdownButton Sample')),",
    "        body: const Center(",
    "          child: DropdownButtonExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DropdownButtonExample extends StatefulWidget {",
    "  const DropdownButtonExample({super.key});",
    "",
    "  @override",
    "  State<DropdownButtonExample> createState() => _DropdownButtonExampleState();",
    "}",
    "",
    "class _DropdownButtonExampleState extends State<DropdownButtonExample> {",
    "  String dropdownValue = list.first;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DropdownButton<String>(",
    "      value: dropdownValue,",
    "      icon: const Icon(Icons.arrow_downward),",
    "      elevation: 16,",
    "      style: const TextStyle(color: Colors.deepPurple),",
    "      underline: Container(",
    "        height: 2,",
    "        color: Colors.deepPurpleAccent,",
    "      ),",
    "      onChanged: (String? value) {",
    "        // This is called when the user selects an item.",
    "        setState(() {",
    "          dropdownValue = value!;",
    "        });",
    "      },",
    "      items: list.map<DropdownMenuItem<String>>((String value) {",
    "        return DropdownMenuItem<String>(",
    "          value: value,",
    "          child: Text(value),",
    "        );",
    "      }).toList(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DropDown Example "
},
"Flutter DropdownMenu Example ": {
  "prefix": "flutter-DropdownMenu-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DropdownMenu].",
    "",
    "const List<String> list = <String>['One', 'Two', 'Three', 'Four'];",
    "",
    "void main() => runApp(const DropdownMenuApp());",
    "",
    "class DropdownMenuApp extends StatelessWidget {",
    "  const DropdownMenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3:true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DropdownMenu Sample')),",
    "        body: const Center(",
    "          child: DropdownMenuExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DropdownMenuExample extends StatefulWidget {",
    "  const DropdownMenuExample({super.key});",
    "",
    "  @override",
    "  State<DropdownMenuExample> createState() => _DropdownMenuExampleState();",
    "}",
    "",
    "class _DropdownMenuExampleState extends State<DropdownMenuExample> {",
    "  String dropdownValue = list.first;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DropdownMenu<String>(",
    "      initialSelection: list.first,",
    "      onSelected: (String? value) {",
    "        // This is called when the user selects an item.",
    "        setState(() {",
    "          dropdownValue = value!;",
    "        });",
    "      },",
    "      dropdownMenuEntries: list.map<DropdownMenuEntry<String>>((String value) {",
    "        return DropdownMenuEntry<String>(",
    "          value: value,",
    "          label: value",
    "        );",
    "      }).toList(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DropdownMenu Example "
},
"Flutter Elevated Butto Example ": {
  "prefix": "flutter-elevated-button-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ElevatedButton].",
    "",
    "void main() => runApp(const ElevatedButtonExampleApp());",
    "",
    "class ElevatedButtonExampleApp extends StatelessWidget {",
    "  const ElevatedButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ElevatedButton Sample')),",
    "        body: const ElevatedButtonExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ElevatedButtonExample extends StatefulWidget {",
    "  const ElevatedButtonExample({super.key});",
    "",
    "  @override",
    "  State<ElevatedButtonExample> createState() => _ElevatedButtonExampleState();",
    "}",
    "",
    "class _ElevatedButtonExampleState extends State<ElevatedButtonExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ButtonStyle style = ElevatedButton.styleFrom(textStyle: const TextStyle(fontSize: 20));",
    "",
    "    return Center(",
    "      child: Column(",
    "        mainAxisSize: MainAxisSize.min,",
    "        children: <Widget>[",
    "          ElevatedButton(",
    "            style: style,",
    "            onPressed: null,",
    "            child: const Text('Disabled'),",
    "          ),",
    "          const SizedBox(height: 30),",
    "          ElevatedButton(",
    "            style: style,",
    "            onPressed: () {},",
    "            child: const Text('Enabled'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Elevated Button Example "
}
,
"Flutter ExpansionPanelList Example ": {
  "prefix": "flutter-ExpansionPanelList-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "",
    "void main() => runApp(const ExpansionPanelListRadioExampleApp());",
    "",
    "class ExpansionPanelListRadioExampleApp extends StatelessWidget {",
    "  const ExpansionPanelListRadioExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ExpansionPanelList.radio Sample')),",
    "        body: const ExpansionPanelListRadioExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// stores ExpansionPanel state information",
    "class Item {",
    "  Item({",
    "    required this.id,",
    "    required this.expandedValue,",
    "    required this.headerValue,",
    "  });",
    "",
    "  int id;",
    "  String expandedValue;",
    "  String headerValue;",
    "}",
    "",
    "List<Item> generateItems(int numberOfItems) {",
    "  return List<Item>.generate(numberOfItems, (int index) {",
    "    return Item(",
    "      id: index,",
    "      headerValue: 'Panel $index',",
    "      expandedValue: 'This is item number $index',",
    "    );",
    "  });",
    "}",
    "",
    "class ExpansionPanelListRadioExample extends StatefulWidget {",
    "  const ExpansionPanelListRadioExample({super.key});",
    "",
    "  @override",
    "  State<ExpansionPanelListRadioExample> createState() => _ExpansionPanelListRadioExampleState();",
    "}",
    "",
    "class _ExpansionPanelListRadioExampleState extends State<ExpansionPanelListRadioExample> {",
    "  final List<Item> _data = generateItems(8);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SingleChildScrollView(",
    "      child: Container(",
    "        child: _buildPanel(),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _buildPanel() {",
    "    return ExpansionPanelList.radio(",
    "      initialOpenPanelValue: 2,",
    "      children: _data.map<ExpansionPanelRadio>((Item item) {",
    "        return ExpansionPanelRadio(",
    "            value: item.id,",
    "            headerBuilder: (BuildContext context, bool isExpanded) {",
    "              return ListTile(",
    "                title: Text(item.headerValue),",
    "              );",
    "            },",
    "            body: ListTile(",
    "                title: Text(item.expandedValue),",
    "                subtitle: const Text('To delete this panel, tap the trash can icon'),",
    "                trailing: const Icon(Icons.delete),",
    "                onTap: () {",
    "                  setState(() {",
    "                    _data.removeWhere((Item currentItem) => item == currentItem);",
    "                  });",
    "                }));",
    "      }).toList(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ExpansionPanelList Example "
},
"Flutter Filled Button Example ": {
  "prefix": "flutter-FilledButton-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FilledButton].",
    "",
    "void main() {",
    "  runApp(const FilledButtonApp());",
    "}",
    "",
    "class FilledButtonApp extends StatelessWidget {",
    "  const FilledButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('FilledButton Sample')),",
    "        body: Center(",
    "          child: Row(",
    "            mainAxisSize: MainAxisSize.min,",
    "            children: <Widget>[",
    "              Column(children: <Widget>[",
    "                const SizedBox(height: 30),",
    "                const Text('Filled'),",
    "                const SizedBox(height: 15),",
    "                FilledButton(",
    "                  onPressed: () {},",
    "                  child: const Text('Enabled'),",
    "                ),",
    "                const SizedBox(height: 30),",
    "                const FilledButton(",
    "                  onPressed: null,",
    "                  child: Text('Disabled'),",
    "                ),",
    "              ]),",
    "              const SizedBox(width: 30),",
    "              Column(children: <Widget>[",
    "                const SizedBox(height: 30),",
    "                const Text('Filled tonal'),",
    "                const SizedBox(height: 15),",
    "                FilledButton.tonal(",
    "                  onPressed: () {},",
    "                  child: const Text('Enabled'),",
    "                ),",
    "                const SizedBox(height: 30),",
    "                const FilledButton.tonal(",
    "                  onPressed: null,",
    "                  child: Text('Disabled'),",
    "                ),",
    "              ])",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Filled Button Example "
},
"Flutter Filter Chip Example ": {
  "prefix": "flutter-chip-filter-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "enum ExerciseFilter { walking, running, cycling, hiking }",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('FilterChip Sample'),",
    "        ),",
    "        body: const FilterChipExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FilterChipExample extends StatefulWidget {",
    "  const FilterChipExample({super.key});",
    "",
    "  @override",
    "  State<FilterChipExample> createState() => _FilterChipExampleState();",
    "}",
    "",
    "class _FilterChipExampleState extends State<FilterChipExample> {",
    "  Set<ExerciseFilter> filters = <ExerciseFilter>{};",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Text('Choose an exercise', style: textTheme.labelLarge),",
    "          const SizedBox(height: 5.0),",
    "          Wrap(",
    "            spacing: 5.0,",
    "            children: ExerciseFilter.values.map((ExerciseFilter exercise) {",
    "              return FilterChip(",
    "                label: Text(exercise.name),",
    "                selected: filters.contains(exercise),",
    "                onSelected: (bool selected) {",
    "                  setState(() {",
    "                    if (selected) {",
    "                      filters.add(exercise);",
    "                    } else {",
    "                      filters.remove(exercise);",
    "                    }",
    "                  });",
    "                },",
    "              );",
    "            }).toList(),",
    "          ),",
    "          const SizedBox(height: 10.0),",
    "          Text(",
    "            'Looking for: ${filters.map((ExerciseFilter e) => e.name).join(', ')}',",
    "            style: textTheme.labelLarge,",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Filter Chip Example "
},"Flutter Filter Chip Example ": {
  "prefix": "flutter-FilterChip-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "enum ExerciseFilter { walking, running, cycling, hiking }",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('FilterChip Sample'),",
    "        ),",
    "        body: const FilterChipExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FilterChipExample extends StatefulWidget {",
    "  const FilterChipExample({super.key});",
    "",
    "  @override",
    "  State<FilterChipExample> createState() => _FilterChipExampleState();",
    "}",
    "",
    "class _FilterChipExampleState extends State<FilterChipExample> {",
    "  Set<ExerciseFilter> filters = <ExerciseFilter>{};",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Text('Choose an exercise', style: textTheme.labelLarge),",
    "          const SizedBox(height: 5.0),",
    "          Wrap(",
    "            spacing: 5.0,",
    "            children: ExerciseFilter.values.map((ExerciseFilter exercise) {",
    "              return FilterChip(",
    "                label: Text(exercise.name),",
    "                selected: filters.contains(exercise),",
    "                onSelected: (bool selected) {",
    "                  setState(() {",
    "                    if (selected) {",
    "                      filters.add(exercise);",
    "                    } else {",
    "                      filters.remove(exercise);",
    "                    }",
    "                  });",
    "                },",
    "              );",
    "            }).toList(),",
    "          ),",
    "          const SizedBox(height: 10.0),",
    "          Text(",
    "            'Looking for: ${filters.map((ExerciseFilter e) => e.name).join(', ')}',",
    "            style: textTheme.labelLarge,",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Filter Chip Example "
},
"Flutter FlexibleSpaceBar Example ": {
  "prefix": "flutter-FlexibleSpaceBar-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FlexibleSpaceBar].",
    "",
    "void main() => runApp(const MaterialApp(home: FlexibleSpaceBarExampleApp()));",
    "",
    "class FlexibleSpaceBarExampleApp extends StatelessWidget {",
    "  const FlexibleSpaceBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: CustomScrollView(",
    "        physics: const BouncingScrollPhysics(parent: AlwaysScrollableScrollPhysics()),",
    "        slivers: <Widget>[",
    "          SliverAppBar(",
    "            stretch: true,",
    "            onStretchTrigger: () {",
    "              // Function callback for stretch",
    "              return Future<void>.value();",
    "            },",
    "            expandedHeight: 300.0,",
    "            flexibleSpace: FlexibleSpaceBar(",
    "              stretchModes: const <StretchMode>[",
    "                StretchMode.zoomBackground,",
    "                StretchMode.blurBackground,",
    "                StretchMode.fadeTitle,",
    "              ],",
    "              centerTitle: true,",
    "              title: const Text('Flight Report'),",
    "              background: Stack(",
    "                fit: StackFit.expand,",
    "                children: <Widget>[",
    "                  Image.network(",
    "                    'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg',",
    "                    fit: BoxFit.cover,",
    "                  ),",
    "                  const DecoratedBox(",
    "                    decoration: BoxDecoration(",
    "                      gradient: LinearGradient(",
    "                        begin: Alignment(0.0, 0.5),",
    "                        end: Alignment.center,",
    "                        colors: <Color>[",
    "                          Color(0x60000000),",
    "                          Color(0x00000000),",
    "                        ],",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "          SliverList(",
    "            delegate: SliverChildListDelegate(",
    "              const <Widget>[",
    "                ListTile(",
    "                  leading: Icon(Icons.wb_sunny),",
    "                  title: Text('Sunday'),",
    "                  subtitle: Text('sunny, h: 80, l: 65'),",
    "                ),",
    "                ListTile(",
    "                  leading: Icon(Icons.wb_sunny),",
    "                  title: Text('Monday'),",
    "                  subtitle: Text('sunny, h: 80, l: 65'),",
    "                ),",
    "                // ListTiles++",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FlexibleSpaceBar Example "
},
"Flutter FloatingActionButton Example ": {
  "prefix": "flutter-FloatingActionButton-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FloatingActionButton].",
    "",
    "void main() => runApp(const FloatingActionButtonExampleApp());",
    "",
    "class FloatingActionButtonExampleApp extends StatelessWidget {",
    "  const FloatingActionButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const FabExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class FabExample extends StatelessWidget {",
    "  const FabExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('FloatingActionButton Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Small'),",
    "                const SizedBox(width: 16),",
    "                // An example of the small floating action button.",
    "                //",
    "                // https://m3.material.io/components/floating-action-button/specs#669a1be8-7271-48cb-a74d-dd502d73bda4",
    "                FloatingActionButton.small(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  child: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Regular'),",
    "                const SizedBox(width: 16),",
    "                // An example of the regular floating action button.",
    "                //",
    "                // https://m3.material.io/components/floating-action-button/specs#71504201-7bd1-423d-8bb7-07e0291743e5",
    "                FloatingActionButton(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  child: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Large'),",
    "                const SizedBox(width: 16),",
    "                // An example of the large floating action button.",
    "                //",
    "                // https://m3.material.io/components/floating-action-button/specs#9d7d3d6a-bab7-47cb-be32-5596fbd660fe",
    "                FloatingActionButton.large(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  child: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Extended'),",
    "                const SizedBox(width: 16),",
    "                // An example of the extended floating action button.",
    "                //",
    "                // https://m3.material.io/components/extended-fab/specs#686cb8af-87c9-48e8-a3e1-db9da6f6c69b",
    "                FloatingActionButton.extended(",
    "                  onPressed: () {",
    "                    // Add your onPressed code here!",
    "                  },",
    "                  label: const Text('Add'),",
    "                  icon: const Icon(Icons.add),",
    "                ),",
    "              ],",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FloatingActionButton Example "
},
"Flutter Choice Chip Example ": {
  "prefix": "flutter-chip-choice-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ActionChoice].",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const ActionChoiceExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ActionChoiceExample extends StatefulWidget {",
    "  const ActionChoiceExample({super.key});",
    "",
    "  @override",
    "  State<ActionChoiceExample> createState() => _ActionChoiceExampleState();",
    "}",
    "",
    "class _ActionChoiceExampleState extends State<ActionChoiceExample> {",
    "  int? _value = 1;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('ActionChoice Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          crossAxisAlignment: CrossAxisAlignment.start,",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Text('Choose an item', style: textTheme.labelLarge),",
    "            const SizedBox(height: 10.0),",
    "            Wrap(",
    "              spacing: 5.0,",
    "              children: List<Widget>.generate(",
    "                3,",
    "                (int index) {",
    "                  return ChoiceChip(",
    "                    label: Text('Item $index'),",
    "                    selected: _value == index,",
    "                    onSelected: (bool selected) {",
    "                      setState(() {",
    "                        _value = selected ? index : null;",
    "                      });",
    "                    },",
    "                  );",
    "                },",
    "              ).toList(),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Choice Chip Example "
},"Flutter Choice Chip Example ": {
  "prefix": "flutter-ChoiceChip-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ActionChoice].",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const ActionChoiceExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ActionChoiceExample extends StatefulWidget {",
    "  const ActionChoiceExample({super.key});",
    "",
    "  @override",
    "  State<ActionChoiceExample> createState() => _ActionChoiceExampleState();",
    "}",
    "",
    "class _ActionChoiceExampleState extends State<ActionChoiceExample> {",
    "  int? _value = 1;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('ActionChoice Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          crossAxisAlignment: CrossAxisAlignment.start,",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Text('Choose an item', style: textTheme.labelLarge),",
    "            const SizedBox(height: 10.0),",
    "            Wrap(",
    "              spacing: 5.0,",
    "              children: List<Widget>.generate(",
    "                3,",
    "                (int index) {",
    "                  return ChoiceChip(",
    "                    label: Text('Item $index'),",
    "                    selected: _value == index,",
    "                    onSelected: (bool selected) {",
    "                      setState(() {",
    "                        _value = selected ? index : null;",
    "                      });",
    "                    },",
    "                  );",
    "                },",
    "              ).toList(),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Choice Chip Example "
},
"Flutter onDelete Chip Example ": {
  "prefix": "flutter-chip-ondelete-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DeletableChipAttributes.onDeleted].",
    "",
    "void main() => runApp(const OnDeletedExampleApp());",
    "",
    "class OnDeletedExampleApp extends StatelessWidget {",
    "  const OnDeletedExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('DeletableChipAttributes.onDeleted Sample')),",
    "        body: const Center(",
    "          child: OnDeletedExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class Actor {",
    "  const Actor(this.name, this.initials);",
    "  final String name;",
    "  final String initials;",
    "}",
    "",
    "class CastList extends StatefulWidget {",
    "  const CastList({super.key});",
    "",
    "  @override",
    "  State createState() => CastListState();",
    "}",
    "",
    "class CastListState extends State<CastList> {",
    "  final List<Actor> _cast = <Actor>[",
    "    const Actor('Aaron Burr', 'AB'),",
    "    const Actor('Alexander Hamilton', 'AH'),",
    "    const Actor('Eliza Hamilton', 'EH'),",
    "    const Actor('James Madison', 'JM'),",
    "  ];",
    "",
    "  Iterable<Widget> get actorWidgets {",
    "    return _cast.map((Actor actor) {",
    "      return Padding(",
    "        padding: const EdgeInsets.all(4.0),",
    "        child: Chip(",
    "          avatar: CircleAvatar(child: Text(actor.initials)),",
    "          label: Text(actor.name),",
    "          onDeleted: () {",
    "            setState(() {",
    "              _cast.removeWhere((Actor entry) {",
    "                return entry.name == actor.name;",
    "              });",
    "            });",
    "          },",
    "        ),",
    "      );",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Wrap(",
    "      children: actorWidgets.toList(),",
    "    );",
    "  }",
    "}",
    "",
    "class OnDeletedExample extends StatefulWidget {",
    "  const OnDeletedExample({super.key});",
    "",
    "  @override",
    "  State<OnDeletedExample> createState() => _OnDeletedExampleState();",
    "}",
    "",
    "class _OnDeletedExampleState extends State<OnDeletedExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CastList();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter onDelete Chip Example "
},
"Flutter Icon Button Example ": {
  "prefix": "flutter-IconButton-example",
  "scope":"dart",

  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [IconButton].",
    "",
    "void main() {",
    "  runApp(const IconButtonApp());",
    "}",
    "",
    "class IconButtonApp extends StatelessWidget {",
    "  const IconButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      title: 'Icon Button Types',",
    "      home: const Scaffold(",
    "        body: ButtonTypesExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ButtonTypesExample extends StatelessWidget {",
    "  const ButtonTypesExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const Padding(",
    "      padding: EdgeInsets.all(4.0),",
    "      child: Row(",
    "        children: <Widget>[",
    "          Spacer(),",
    "          ButtonTypesGroup(enabled: true),",
    "          ButtonTypesGroup(enabled: false),",
    "          Spacer(),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ButtonTypesGroup extends StatelessWidget {",
    "  const ButtonTypesGroup({super.key, required this.enabled});",
    "",
    "  final bool enabled;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final VoidCallback? onPressed = enabled ? () {} : null;",
    "",
    "    return Padding(",
    "      padding: const EdgeInsets.all(4.0),",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "        children: <Widget>[",
    "          IconButton(icon: const Icon(Icons.filter_drama), onPressed: onPressed),",
    "",
    "          // Filled icon button",
    "          IconButton.filled(onPressed: onPressed, icon: const Icon(Icons.filter_drama)),",
    "",
    "          // Filled tonal icon button",
    "          IconButton.filledTonal(onPressed: onPressed, icon: const Icon(Icons.filter_drama)),",
    "",
    "          // Outlined icon button",
    "          IconButton.outlined(onPressed: onPressed, icon: const Icon(Icons.filter_drama)),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Icon Button Example "
},
"Flutter ImageClipExample Example ": {
  "prefix": "flutter-image-clip-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "void main() {",
    "  runApp(",
    "    MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Image.frameBuilder Sample')),",
    "        body: const Center(",
    "          child: ImageClipExample(",
    "            image: NetworkImage('https://flutter.github.io/assets-for-api-docs/assets/widgets/puffin.jpg'),",
    "          ),",
    "        ),",
    "      ),",
    "    ),",
    "  );",
    "}",
    "",
    "class ImageClipExample extends StatelessWidget {",
    "  const ImageClipExample({super.key, required this.image});",
    "",
    "  final ImageProvider image;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ClipRRect(",
    "      borderRadius: BorderRadius.circular(100),",
    "      child: Ink.image(",
    "        fit: BoxFit.fill,",
    "        width: 300,",
    "        height: 300,",
    "        image: image,",
    "        child: InkWell(",
    "          onTap: () {/* ... */},",
    "          child: const Align(",
    "            child: Padding(",
    "              padding: EdgeInsets.all(10.0),",
    "              child: Text(",
    "                'PUFFIN',",
    "                style: TextStyle(",
    "                  fontWeight: FontWeight.w900,",
    "                  color: Colors.white,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ImageClipExample Example "
},"Flutter ImageClipExample Example ": {
  "prefix": "flutter-ClipRRect-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "void main() {",
    "  runApp(",
    "    MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Image.frameBuilder Sample')),",
    "        body: const Center(",
    "          child: ImageClipExample(",
    "            image: NetworkImage('https://flutter.github.io/assets-for-api-docs/assets/widgets/puffin.jpg'),",
    "          ),",
    "        ),",
    "      ),",
    "    ),",
    "  );",
    "}",
    "",
    "class ImageClipExample extends StatelessWidget {",
    "  const ImageClipExample({super.key, required this.image});",
    "",
    "  final ImageProvider image;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ClipRRect(",
    "      borderRadius: BorderRadius.circular(100),",
    "      child: Ink.image(",
    "        fit: BoxFit.fill,",
    "        width: 300,",
    "        height: 300,",
    "        image: image,",
    "        child: InkWell(",
    "          onTap: () {/* ... */},",
    "          child: const Align(",
    "            child: Padding(",
    "              padding: EdgeInsets.all(10.0),",
    "              child: Text(",
    "                'PUFFIN',",
    "                style: TextStyle(",
    "                  fontWeight: FontWeight.w900,",
    "                  color: Colors.white,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ImageClipExample Example "
},
"Flutter Inkwell Example ": {
  "prefix": "flutter-InkWell-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InkWell].",
    "",
    "void main() => runApp(const InkWellExampleApp());",
    "",
    "class InkWellExampleApp extends StatelessWidget {",
    "  const InkWellExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('InkWell Sample')),",
    "        body: const Center(",
    "          child: InkWellExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class InkWellExample extends StatefulWidget {",
    "  const InkWellExample({super.key});",
    "",
    "  @override",
    "  State<InkWellExample> createState() => _InkWellExampleState();",
    "}",
    "",
    "class _InkWellExampleState extends State<InkWellExample> {",
    "  double sideLength = 50;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return AnimatedContainer(",
    "      height: sideLength,",
    "      width: sideLength,",
    "      duration: const Duration(seconds: 2),",
    "      curve: Curves.easeIn,",
    "      child: Material(",
    "        color: Colors.yellow,",
    "        child: InkWell(",
    "          onTap: () {",
    "            setState(() {",
    "              sideLength == 50 ? sideLength = 100 : sideLength = 50;",
    "            });",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Inkwell Example "
},
"Flutter Input Chip Example ": {
  "prefix": "flutter-chip-input-example",
  "body": [
    "",
    "// Flutter code sample InputChip.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const InputChipExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class InputChipExample extends StatefulWidget {",
    "  const InputChipExample({super.key});",
    "",
    "  @override",
    "  State<InputChipExample> createState() => _InputChipExampleState();",
    "}",
    "",
    "class _InputChipExampleState extends State<InputChipExample> {",
    "  int inputs = 3;",
    "  int? selectedIndex;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('InputChip Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Wrap(",
    "              alignment: WrapAlignment.center,",
    "              spacing: 5.0,",
    "              children: List<Widget>.generate(",
    "                inputs,",
    "                (int index) {",
    "                  return InputChip(",
    "                    label: Text('Person ${index + 1}'),",
    "                    selected: selectedIndex == index,",
    "                    onSelected: (bool selected) {",
    "                      setState(() {",
    "                        if (selectedIndex == index) {",
    "                          selectedIndex = null;",
    "                        } else {",
    "                          selectedIndex = index;",
    "                        }",
    "                      });",
    "                    },",
    "                    onDeleted: () {",
    "                      setState(() {",
    "                        inputs = inputs - 1;",
    "                      });",
    "                    },",
    "                  );",
    "                },",
    "              ).toList(),",
    "            ),",
    "            const SizedBox(height: 10),",
    "            ElevatedButton(",
    "              onPressed: () {",
    "                setState(() {",
    "                  inputs = 3;",
    "                });",
    "              },",
    "              child: const Text('Reset'),",
    "            )",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Input Chip Example "
},"Flutter Input Chip Example ": {
  "prefix": "flutter-InputChip-example",
  "body": [
    "",
    "// Flutter code sample InputChip.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const ChipApp());",
    "",
    "class ChipApp extends StatelessWidget {",
    "  const ChipApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
    "      home: const InputChipExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class InputChipExample extends StatefulWidget {",
    "  const InputChipExample({super.key});",
    "",
    "  @override",
    "  State<InputChipExample> createState() => _InputChipExampleState();",
    "}",
    "",
    "class _InputChipExampleState extends State<InputChipExample> {",
    "  int inputs = 3;",
    "  int? selectedIndex;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('InputChip Sample'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Wrap(",
    "              alignment: WrapAlignment.center,",
    "              spacing: 5.0,",
    "              children: List<Widget>.generate(",
    "                inputs,",
    "                (int index) {",
    "                  return InputChip(",
    "                    label: Text('Person ${index + 1}'),",
    "                    selected: selectedIndex == index,",
    "                    onSelected: (bool selected) {",
    "                      setState(() {",
    "                        if (selectedIndex == index) {",
    "                          selectedIndex = null;",
    "                        } else {",
    "                          selectedIndex = index;",
    "                        }",
    "                      });",
    "                    },",
    "                    onDeleted: () {",
    "                      setState(() {",
    "                        inputs = inputs - 1;",
    "                      });",
    "                    },",
    "                  );",
    "                },",
    "              ).toList(),",
    "            ),",
    "            const SizedBox(height: 10),",
    "            ElevatedButton(",
    "              onPressed: () {",
    "                setState(() {",
    "                  inputs = 3;",
    "                });",
    "              },",
    "              child: const Text('Reset'),",
    "            )",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Input Chip Example "
},
"Flutter InputDecorator Example ": {
  "prefix": "flutter-InputDecoration-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InputDecorator].",
    "",
    "void main() => runApp(const FloatingLabelStyleErrorExampleApp());",
    "",
    "class FloatingLabelStyleErrorExampleApp extends StatelessWidget {",
    "  const FloatingLabelStyleErrorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('InputDecorator Sample')),",
    "        body: const Center(",
    "          child: InputDecoratorExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class InputDecoratorExample extends StatelessWidget {",
    "  const InputDecoratorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextFormField(",
    "      decoration: InputDecoration(",
    "        border: const OutlineInputBorder(),",
    "        labelText: 'Name',",
    "        // The MaterialStateProperty's value is a text style that is orange",
    "        // by default, but the theme's error color if the input decorator",
    "        // is in its error state.",
    "        floatingLabelStyle: MaterialStateTextStyle.resolveWith(",
    "          (Set<MaterialState> states) {",
    "            final Color color =",
    "                states.contains(MaterialState.error) ? Theme.of(context).colorScheme.error : Colors.orange;",
    "            return TextStyle(color: color, letterSpacing: 1.3);",
    "          },",
    "        ),",
    "      ),",
    "      validator: (String? value) {",
    "        if (value == null || value == '') {",
    "          return 'Enter name';",
    "        }",
    "        return null;",
    "      },",
    "      autovalidateMode: AutovalidateMode.always,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InputDecorator Example "
},
"Flutter ListTile Custon Example ": {
  "prefix": "flutter-listtile-custom-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom list items.",
    "",
    "void main() => runApp(const CustomListItemApp());",
    "",
    "class CustomListItemApp extends StatelessWidget {",
    "  const CustomListItemApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const CustomListItemExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class _ArticleDescription extends StatelessWidget {",
    "  const _ArticleDescription({",
    "    required this.title,",
    "    required this.subtitle,",
    "    required this.author,",
    "    required this.publishDate,",
    "    required this.readDuration,",
    "  });",
    "",
    "  final String title;",
    "  final String subtitle;",
    "  final String author;",
    "  final String publishDate;",
    "  final String readDuration;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        Text(",
    "          title,",
    "          maxLines: 2,",
    "          overflow: TextOverflow.ellipsis,",
    "          style: const TextStyle(",
    "            fontWeight: FontWeight.bold,",
    "          ),",
    "        ),",
    "        const Padding(padding: EdgeInsets.only(bottom: 2.0)),",
    "        Expanded(",
    "          child: Text(",
    "            subtitle,",
    "            maxLines: 2,",
    "            overflow: TextOverflow.ellipsis,",
    "            style: const TextStyle(",
    "              fontSize: 12.0,",
    "              color: Colors.black54,",
    "            ),",
    "          ),",
    "        ),",
    "        Text(",
    "          author,",
    "          style: const TextStyle(",
    "            fontSize: 12.0,",
    "            color: Colors.black87,",
    "          ),",
    "        ),",
    "        Text(",
    "          '$publishDate - $readDuration',",
    "          style: const TextStyle(",
    "            fontSize: 12.0,",
    "            color: Colors.black54,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class CustomListItemTwo extends StatelessWidget {",
    "  const CustomListItemTwo({",
    "    super.key,",
    "    required this.thumbnail,",
    "    required this.title,",
    "    required this.subtitle,",
    "    required this.author,",
    "    required this.publishDate,",
    "    required this.readDuration,",
    "  });",
    "",
    "  final Widget thumbnail;",
    "  final String title;",
    "  final String subtitle;",
    "  final String author;",
    "  final String publishDate;",
    "  final String readDuration;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.symmetric(vertical: 10.0),",
    "      child: SizedBox(",
    "        height: 100,",
    "        child: Row(",
    "          crossAxisAlignment: CrossAxisAlignment.start,",
    "          children: <Widget>[",
    "            AspectRatio(",
    "              aspectRatio: 1.0,",
    "              child: thumbnail,",
    "            ),",
    "            Expanded(",
    "              child: Padding(",
    "                padding: const EdgeInsets.fromLTRB(20.0, 0.0, 2.0, 0.0),",
    "                child: _ArticleDescription(",
    "                  title: title,",
    "                  subtitle: subtitle,",
    "                  author: author,",
    "                  publishDate: publishDate,",
    "                  readDuration: readDuration,",
    "                ),",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CustomListItemExample extends StatelessWidget {",
    "  const CustomListItemExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Custom List Item Sample')),",
    "      body: ListView(",
    "        padding: const EdgeInsets.all(10.0),",
    "        children: <Widget>[",
    "          CustomListItemTwo(",
    "            thumbnail: Container(",
    "              decoration: const BoxDecoration(color: Colors.pink),",
    "            ),",
    "            title: 'Flutter 1.0 Launch',",
    "            subtitle: 'Flutter continues to improve and expand its horizons. '",
    "                'This text should max out at two lines and clip',",
    "            author: 'Dash',",
    "            publishDate: 'Dec 28',",
    "            readDuration: '5 mins',",
    "          ),",
    "          CustomListItemTwo(",
    "            thumbnail: Container(",
    "              decoration: const BoxDecoration(color: Colors.blue),",
    "            ),",
    "            title: 'Flutter 1.2 Release - Continual updates to the framework',",
    "            subtitle: 'Flutter once again improves and makes updates.',",
    "            author: 'Flutter',",
    "            publishDate: 'Feb 26',",
    "            readDuration: '12 mins',",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Custon Example "
},
"Flutter ListTile Custon Example ": {
  "prefix": "flutter-CustomListTile-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom list items.",
    "",
    "void main() => runApp(const CustomListItemApp());",
    "",
    "class CustomListItemApp extends StatelessWidget {",
    "  const CustomListItemApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const CustomListItemExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class _ArticleDescription extends StatelessWidget {",
    "  const _ArticleDescription({",
    "    required this.title,",
    "    required this.subtitle,",
    "    required this.author,",
    "    required this.publishDate,",
    "    required this.readDuration,",
    "  });",
    "",
    "  final String title;",
    "  final String subtitle;",
    "  final String author;",
    "  final String publishDate;",
    "  final String readDuration;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        Text(",
    "          title,",
    "          maxLines: 2,",
    "          overflow: TextOverflow.ellipsis,",
    "          style: const TextStyle(",
    "            fontWeight: FontWeight.bold,",
    "          ),",
    "        ),",
    "        const Padding(padding: EdgeInsets.only(bottom: 2.0)),",
    "        Expanded(",
    "          child: Text(",
    "            subtitle,",
    "            maxLines: 2,",
    "            overflow: TextOverflow.ellipsis,",
    "            style: const TextStyle(",
    "              fontSize: 12.0,",
    "              color: Colors.black54,",
    "            ),",
    "          ),",
    "        ),",
    "        Text(",
    "          author,",
    "          style: const TextStyle(",
    "            fontSize: 12.0,",
    "            color: Colors.black87,",
    "          ),",
    "        ),",
    "        Text(",
    "          '$publishDate - $readDuration',",
    "          style: const TextStyle(",
    "            fontSize: 12.0,",
    "            color: Colors.black54,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class CustomListItemTwo extends StatelessWidget {",
    "  const CustomListItemTwo({",
    "    super.key,",
    "    required this.thumbnail,",
    "    required this.title,",
    "    required this.subtitle,",
    "    required this.author,",
    "    required this.publishDate,",
    "    required this.readDuration,",
    "  });",
    "",
    "  final Widget thumbnail;",
    "  final String title;",
    "  final String subtitle;",
    "  final String author;",
    "  final String publishDate;",
    "  final String readDuration;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.symmetric(vertical: 10.0),",
    "      child: SizedBox(",
    "        height: 100,",
    "        child: Row(",
    "          crossAxisAlignment: CrossAxisAlignment.start,",
    "          children: <Widget>[",
    "            AspectRatio(",
    "              aspectRatio: 1.0,",
    "              child: thumbnail,",
    "            ),",
    "            Expanded(",
    "              child: Padding(",
    "                padding: const EdgeInsets.fromLTRB(20.0, 0.0, 2.0, 0.0),",
    "                child: _ArticleDescription(",
    "                  title: title,",
    "                  subtitle: subtitle,",
    "                  author: author,",
    "                  publishDate: publishDate,",
    "                  readDuration: readDuration,",
    "                ),",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CustomListItemExample extends StatelessWidget {",
    "  const CustomListItemExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Custom List Item Sample')),",
    "      body: ListView(",
    "        padding: const EdgeInsets.all(10.0),",
    "        children: <Widget>[",
    "          CustomListItemTwo(",
    "            thumbnail: Container(",
    "              decoration: const BoxDecoration(color: Colors.pink),",
    "            ),",
    "            title: 'Flutter 1.0 Launch',",
    "            subtitle: 'Flutter continues to improve and expand its horizons. '",
    "                'This text should max out at two lines and clip',",
    "            author: 'Dash',",
    "            publishDate: 'Dec 28',",
    "            readDuration: '5 mins',",
    "          ),",
    "          CustomListItemTwo(",
    "            thumbnail: Container(",
    "              decoration: const BoxDecoration(color: Colors.blue),",
    "            ),",
    "            title: 'Flutter 1.2 Release - Continual updates to the framework',",
    "            subtitle: 'Flutter once again improves and makes updates.',",
    "            author: 'Flutter',",
    "            publishDate: 'Feb 26',",
    "            readDuration: '12 mins',",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Custon Example "
},
"Flutter ListTile Selected Example ": {
  "prefix": "flutter-listtile-selected-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ListTile.selected].",
    "",
    "void main() => runApp(const ListTileApp());",
    "",
    "class ListTileApp extends StatelessWidget {",
    "  const ListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const ListTileExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileExample extends StatefulWidget {",
    "  const ListTileExample({super.key});",
    "",
    "  @override",
    "  State<ListTileExample> createState() => _ListTileExampleState();",
    "}",
    "",
    "class _ListTileExampleState extends State<ListTileExample> {",
    "  int _selectedIndex = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Custom List Item Sample')),",
    "      body: ListView.builder(",
    "        itemCount: 10,",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return ListTile(",
    "            title: Text('Item $index'),",
    "            selected: index == _selectedIndex,",
    "            onTap: () {",
    "              setState(() {",
    "                _selectedIndex = index;",
    "              });",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Selected Example "
},"Flutter ListTile Selected Example ": {
  "prefix": "flutter-ListTile.selected-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ListTile.selected].",
    "",
    "void main() => runApp(const ListTileApp());",
    "",
    "class ListTileApp extends StatelessWidget {",
    "  const ListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const ListTileExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileExample extends StatefulWidget {",
    "  const ListTileExample({super.key});",
    "",
    "  @override",
    "  State<ListTileExample> createState() => _ListTileExampleState();",
    "}",
    "",
    "class _ListTileExampleState extends State<ListTileExample> {",
    "  int _selectedIndex = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Custom List Item Sample')),",
    "      body: ListView.builder(",
    "        itemCount: 10,",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return ListTile(",
    "            title: Text('Item $index'),",
    "            selected: index == _selectedIndex,",
    "            onTap: () {",
    "              setState(() {",
    "                _selectedIndex = index;",
    "              });",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Selected Example "
},
"Flutter ListTile Example ": {
  "prefix": "flutter-ListTile-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ListTile].",
    "",
    "void main() => runApp(const ListTileApp());",
    "",
    "class ListTileApp extends StatelessWidget {",
    "  const ListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const ListTileExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileExample extends StatelessWidget {",
    "  const ListTileExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('ListTile Sample')),",
    "      body: ListView(",
    "        children: const <Widget>[",
    "          Card(child: ListTile(title: Text('One-line ListTile'))),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(),",
    "              title: Text('One-line with leading widget'),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              title: Text('One-line with trailing widget'),",
    "              trailing: Icon(Icons.more_vert),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(),",
    "              title: Text('One-line with both widgets'),",
    "              trailing: Icon(Icons.more_vert),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              title: Text('One-line dense ListTile'),",
    "              dense: true,",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(size: 56.0),",
    "              title: Text('Two-line ListTile'),",
    "              subtitle: Text('Here is a second line'),",
    "              trailing: Icon(Icons.more_vert),",
    "            ),",
    "          ),",
    "          Card(",
    "            child: ListTile(",
    "              leading: FlutterLogo(size: 72.0),",
    "              title: Text('Three-line ListTile'),",
    "              subtitle: Text('A sufficiently long subtitle warrants three lines.'),",
    "              trailing: Icon(Icons.more_vert),",
    "              isThreeLine: true,",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile Example "
},
"MaterialStateBorderSide": {
  "prefix": "flutter-material-state-border",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateBorderSide].",
    "",
    "void main() => runApp(const MaterialStateBorderSideExampleApp());",
    "",
    "class MaterialStateBorderSideExampleApp extends StatelessWidget {",
    "  const MaterialStateBorderSideExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateBorderSide Sample')),",
    "        body: const Center(",
    "          child: MaterialStateBorderSideExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MaterialStateBorderSideExample extends StatefulWidget {",
    "  const MaterialStateBorderSideExample({super.key});",
    "",
    "  @override",
    "  State<MaterialStateBorderSideExample> createState() => _MaterialStateBorderSideExampleState();",
    "}",
    "",
    "class _MaterialStateBorderSideExampleState extends State<MaterialStateBorderSideExample> {",
    "  bool isSelected = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return FilterChip(",
    "      label: const Text('Select chip'),",
    "      selected: isSelected,",
    "      onSelected: (bool value) {",
    "        setState(() {",
    "          isSelected = value;",
    "        });",
    "      },",
    "      side: MaterialStateBorderSide.resolveWith((Set<MaterialState> states) {",
    "        if (states.contains(MaterialState.selected)) {",
    "          return const BorderSide(color: Colors.red);",
    "        }",
    "        return null; // Defer to default value on the theme or widget.",
    "      }),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "MaterialStateBorderSide"
},
"MaterialStateBorderSide": {
  "prefix": "flutter-MaterialStateBorderSide",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateBorderSide].",
    "",
    "void main() => runApp(const MaterialStateBorderSideExampleApp());",
    "",
    "class MaterialStateBorderSideExampleApp extends StatelessWidget {",
    "  const MaterialStateBorderSideExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateBorderSide Sample')),",
    "        body: const Center(",
    "          child: MaterialStateBorderSideExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MaterialStateBorderSideExample extends StatefulWidget {",
    "  const MaterialStateBorderSideExample({super.key});",
    "",
    "  @override",
    "  State<MaterialStateBorderSideExample> createState() => _MaterialStateBorderSideExampleState();",
    "}",
    "",
    "class _MaterialStateBorderSideExampleState extends State<MaterialStateBorderSideExample> {",
    "  bool isSelected = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return FilterChip(",
    "      label: const Text('Select chip'),",
    "      selected: isSelected,",
    "      onSelected: (bool value) {",
    "        setState(() {",
    "          isSelected = value;",
    "        });",
    "      },",
    "      side: MaterialStateBorderSide.resolveWith((Set<MaterialState> states) {",
    "        if (states.contains(MaterialState.selected)) {",
    "          return const BorderSide(color: Colors.red);",
    "        }",
    "        return null; // Defer to default value on the theme or widget.",
    "      }),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "MaterialStateBorderSide"
},
"Flutter Material State Mouse Example ": {
  "prefix": "flutter-material-state-mouse-cursor-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateMouseCursor].",
    "",
    "void main() => runApp(const MaterialStateMouseCursorExampleApp());",
    "",
    "class MaterialStateMouseCursorExampleApp extends StatelessWidget {",
    "  const MaterialStateMouseCursorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateMouseCursor Sample')),",
    "        body: const Center(",
    "          child: MaterialStateMouseCursorExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileCursor extends MaterialStateMouseCursor {",
    "  const ListTileCursor();",
    "",
    "  @override",
    "  MouseCursor resolve(Set<MaterialState> states) {",
    "    if (states.contains(MaterialState.disabled)) {",
    "      return SystemMouseCursors.forbidden;",
    "    }",
    "    return SystemMouseCursors.click;",
    "  }",
    "",
    "  @override",
    "  String get debugDescription => 'ListTileCursor()';",
    "}",
    "",
    "class MaterialStateMouseCursorExample extends StatelessWidget {",
    "  const MaterialStateMouseCursorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const ListTile(",
    "      title: Text('Disabled ListTile'),",
    "      enabled: false,",
    "      mouseCursor: ListTileCursor(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Mouse Example "
},"Flutter Material State Mouse Example ": {
  "prefix": "flutter-MaterialStateMouseCursor-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateMouseCursor].",
    "",
    "void main() => runApp(const MaterialStateMouseCursorExampleApp());",
    "",
    "class MaterialStateMouseCursorExampleApp extends StatelessWidget {",
    "  const MaterialStateMouseCursorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateMouseCursor Sample')),",
    "        body: const Center(",
    "          child: MaterialStateMouseCursorExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileCursor extends MaterialStateMouseCursor {",
    "  const ListTileCursor();",
    "",
    "  @override",
    "  MouseCursor resolve(Set<MaterialState> states) {",
    "    if (states.contains(MaterialState.disabled)) {",
    "      return SystemMouseCursors.forbidden;",
    "    }",
    "    return SystemMouseCursors.click;",
    "  }",
    "",
    "  @override",
    "  String get debugDescription => 'ListTileCursor()';",
    "}",
    "",
    "class MaterialStateMouseCursorExample extends StatelessWidget {",
    "  const MaterialStateMouseCursorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const ListTile(",
    "      title: Text('Disabled ListTile'),",
    "      enabled: false,",
    "      mouseCursor: ListTileCursor(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Mouse Example "
},
"Flutter Material State Outlined Border Example ": {
  "prefix": "flutter-material-state-outlined-border-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateOutlinedBorder].",
    "",
    "void main() => runApp(const MaterialStateOutlinedBorderExampleApp());",
    "",
    "class MaterialStateOutlinedBorderExampleApp extends StatelessWidget {",
    "  const MaterialStateOutlinedBorderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MaterialStateOutlinedBorderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SelectedBorder extends RoundedRectangleBorder implements MaterialStateOutlinedBorder {",
    "  const SelectedBorder();",
    "",
    "  @override",
    "  OutlinedBorder? resolve(Set<MaterialState> states) {",
    "    if (states.contains(MaterialState.selected)) {",
    "      return const RoundedRectangleBorder();",
    "    }",
    "    return null; // Defer to default value on the theme or widget.",
    "  }",
    "}",
    "",
    "class MaterialStateOutlinedBorderExample extends StatefulWidget {",
    "  const MaterialStateOutlinedBorderExample({super.key});",
    "",
    "  @override",
    "  State<MaterialStateOutlinedBorderExample> createState() => _MaterialStateOutlinedBorderExampleState();",
    "}",
    "",
    "class _MaterialStateOutlinedBorderExampleState extends State<MaterialStateOutlinedBorderExample> {",
    "  bool isSelected = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: FilterChip(",
    "        label: const Text('Select chip'),",
    "        selected: isSelected,",
    "        onSelected: (bool value) {",
    "          setState(() {",
    "            isSelected = value;",
    "          });",
    "        },",
    "        shape: const SelectedBorder(),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Outlined Border Example "
},"Flutter Material State Outlined Border Example ": {
  "prefix": "flutter-MaterialStateOutlinedBorder-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateOutlinedBorder].",
    "",
    "void main() => runApp(const MaterialStateOutlinedBorderExampleApp());",
    "",
    "class MaterialStateOutlinedBorderExampleApp extends StatelessWidget {",
    "  const MaterialStateOutlinedBorderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MaterialStateOutlinedBorderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SelectedBorder extends RoundedRectangleBorder implements MaterialStateOutlinedBorder {",
    "  const SelectedBorder();",
    "",
    "  @override",
    "  OutlinedBorder? resolve(Set<MaterialState> states) {",
    "    if (states.contains(MaterialState.selected)) {",
    "      return const RoundedRectangleBorder();",
    "    }",
    "    return null; // Defer to default value on the theme or widget.",
    "  }",
    "}",
    "",
    "class MaterialStateOutlinedBorderExample extends StatefulWidget {",
    "  const MaterialStateOutlinedBorderExample({super.key});",
    "",
    "  @override",
    "  State<MaterialStateOutlinedBorderExample> createState() => _MaterialStateOutlinedBorderExampleState();",
    "}",
    "",
    "class _MaterialStateOutlinedBorderExampleState extends State<MaterialStateOutlinedBorderExample> {",
    "  bool isSelected = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: FilterChip(",
    "        label: const Text('Select chip'),",
    "        selected: isSelected,",
    "        onSelected: (bool value) {",
    "          setState(() {",
    "            isSelected = value;",
    "          });",
    "        },",
    "        shape: const SelectedBorder(),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Outlined Border Example "
},
"Flutter Material State Property Border Example ": {
  "prefix": "flutter-material-state-property-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateProperty].",
    "",
    "void main() => runApp(const MaterialStatePropertyExampleApp());",
    "",
    "class MaterialStatePropertyExampleApp extends StatelessWidget {",
    "  const MaterialStatePropertyExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateProperty Sample')),",
    "        body: const Center(",
    "          child: MaterialStatePropertyExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MaterialStatePropertyExample extends StatelessWidget {",
    "  const MaterialStatePropertyExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    Color getColor(Set<MaterialState> states) {",
    "      const Set<MaterialState> interactiveStates = <MaterialState>{",
    "        MaterialState.pressed,",
    "        MaterialState.hovered,",
    "        MaterialState.focused,",
    "      };",
    "      if (states.any(interactiveStates.contains)) {",
    "        return Colors.blue;",
    "      }",
    "      return Colors.red;",
    "    }",
    "",
    "    return TextButton(",
    "      style: ButtonStyle(",
    "        foregroundColor: MaterialStateProperty.resolveWith(getColor),",
    "      ),",
    "      onPressed: () {},",
    "      child: const Text('TextButton'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Property Border Example "
},"Flutter Material State Property Border Example ": {
  "prefix": "flutter-MaterialStateProperty-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MaterialStateProperty].",
    "",
    "void main() => runApp(const MaterialStatePropertyExampleApp());",
    "",
    "class MaterialStatePropertyExampleApp extends StatelessWidget {",
    "  const MaterialStatePropertyExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MaterialStateProperty Sample')),",
    "        body: const Center(",
    "          child: MaterialStatePropertyExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MaterialStatePropertyExample extends StatelessWidget {",
    "  const MaterialStatePropertyExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    Color getColor(Set<MaterialState> states) {",
    "      const Set<MaterialState> interactiveStates = <MaterialState>{",
    "        MaterialState.pressed,",
    "        MaterialState.hovered,",
    "        MaterialState.focused,",
    "      };",
    "      if (states.any(interactiveStates.contains)) {",
    "        return Colors.blue;",
    "      }",
    "      return Colors.red;",
    "    }",
    "",
    "    return TextButton(",
    "      style: ButtonStyle(",
    "        foregroundColor: MaterialStateProperty.resolveWith(getColor),",
    "      ),",
    "      onPressed: () {},",
    "      child: const Text('TextButton'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Material State Property Border Example "
},
"Flutter CheckBox Menu Property Border Example ": {
  "prefix": "flutter-menu-checkbox-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [CheckboxMenuButton].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "class MyCheckboxMenu extends StatefulWidget {",
    "  const MyCheckboxMenu({super.key, required this.message});",
    "",
    "  final String message;",
    "",
    "  @override",
    "  State<MyCheckboxMenu> createState() => _MyCheckboxMenuState();",
    "}",
    "",
    "class _MyCheckboxMenuState extends State<MyCheckboxMenu> {",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  static const SingleActivator _showShortcut = SingleActivator(LogicalKeyboardKey.keyS, control: true);",
    "  bool _showingMessage = false;",
    "",
    "  @override",
    "  void dispose() {",
    "    _buttonFocusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _setMessageVisibility(bool visible) {",
    "    setState(() {",
    "      _showingMessage = visible;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CallbackShortcuts(",
    "      bindings: <ShortcutActivator, VoidCallback>{",
    "        _showShortcut: () {",
    "          _setMessageVisibility(!_showingMessage);",
    "        },",
    "      },",
    "      child: Column(",
    "        crossAxisAlignment: CrossAxisAlignment.start,",
    "        children: <Widget>[",
    "          MenuAnchor(",
    "            childFocusNode: _buttonFocusNode,",
    "            menuChildren: <Widget>[",
    "              CheckboxMenuButton(",
    "                value: _showingMessage,",
    "                onChanged: (bool? value) {",
    "                  _setMessageVisibility(value!);",
    "                },",
    "                child: const Text('Show Message'),",
    "              ),",
    "            ],",
    "            builder: (BuildContext context, MenuController controller, Widget? child) {",
    "              return TextButton(",
    "                focusNode: _buttonFocusNode,",
    "                onPressed: () {",
    "                  if (controller.isOpen) {",
    "                    controller.close();",
    "                  } else {",
    "                    controller.open();",
    "                  }",
    "                },",
    "                child: const Text('OPEN MENU'),",
    "              );",
    "            },",
    "          ),",
    "          Expanded(",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              child: Column(",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  Padding(",
    "                    padding: const EdgeInsets.all(12.0),",
    "                    child: Text(",
    "                      _showingMessage ? widget.message : '',",
    "                      style: Theme.of(context).textTheme.headlineSmall,",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  static const String kMessage = '\"Talk less. Smile more.\" - A. Burr';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: MyCheckboxMenu(message: kMessage)),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CheckBox Menu Property Border Example "
},"Flutter CheckBox Menu Property Border Example ": {
  "prefix": "flutter-CheckboxMenuButton-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [CheckboxMenuButton].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "class MyCheckboxMenu extends StatefulWidget {",
    "  const MyCheckboxMenu({super.key, required this.message});",
    "",
    "  final String message;",
    "",
    "  @override",
    "  State<MyCheckboxMenu> createState() => _MyCheckboxMenuState();",
    "}",
    "",
    "class _MyCheckboxMenuState extends State<MyCheckboxMenu> {",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  static const SingleActivator _showShortcut = SingleActivator(LogicalKeyboardKey.keyS, control: true);",
    "  bool _showingMessage = false;",
    "",
    "  @override",
    "  void dispose() {",
    "    _buttonFocusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _setMessageVisibility(bool visible) {",
    "    setState(() {",
    "      _showingMessage = visible;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CallbackShortcuts(",
    "      bindings: <ShortcutActivator, VoidCallback>{",
    "        _showShortcut: () {",
    "          _setMessageVisibility(!_showingMessage);",
    "        },",
    "      },",
    "      child: Column(",
    "        crossAxisAlignment: CrossAxisAlignment.start,",
    "        children: <Widget>[",
    "          MenuAnchor(",
    "            childFocusNode: _buttonFocusNode,",
    "            menuChildren: <Widget>[",
    "              CheckboxMenuButton(",
    "                value: _showingMessage,",
    "                onChanged: (bool? value) {",
    "                  _setMessageVisibility(value!);",
    "                },",
    "                child: const Text('Show Message'),",
    "              ),",
    "            ],",
    "            builder: (BuildContext context, MenuController controller, Widget? child) {",
    "              return TextButton(",
    "                focusNode: _buttonFocusNode,",
    "                onPressed: () {",
    "                  if (controller.isOpen) {",
    "                    controller.close();",
    "                  } else {",
    "                    controller.open();",
    "                  }",
    "                },",
    "                child: const Text('OPEN MENU'),",
    "              );",
    "            },",
    "          ),",
    "          Expanded(",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              child: Column(",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  Padding(",
    "                    padding: const EdgeInsets.all(12.0),",
    "                    child: Text(",
    "                      _showingMessage ? widget.message : '',",
    "                      style: Theme.of(context).textTheme.headlineSmall,",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  static const String kMessage = '\"Talk less. Smile more.\" - A. Burr';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: MyCheckboxMenu(message: kMessage)),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CheckBox Menu Property Border Example "
},
"Flutter Menu Radio Property Border Example ": {
  "prefix": "flutter-menu-radio-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [RadioMenuButton].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "class MyRadioMenu extends StatefulWidget {",
    "  const MyRadioMenu({super.key});",
    "",
    "  @override",
    "  State<MyRadioMenu> createState() => _MyRadioMenuState();",
    "}",
    "",
    "class _MyRadioMenuState extends State<MyRadioMenu> {",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  Color _backgroundColor = Colors.red;",
    "  late ShortcutRegistryEntry _entry;",
    "",
    "  static const SingleActivator _redShortcut = SingleActivator(LogicalKeyboardKey.keyR, control: true);",
    "  static const SingleActivator _greenShortcut = SingleActivator(LogicalKeyboardKey.keyG, control: true);",
    "  static const SingleActivator _blueShortcut = SingleActivator(LogicalKeyboardKey.keyB, control: true);",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    _entry = ShortcutRegistry.of(context).addAll(<ShortcutActivator, VoidCallbackIntent>{",
    "      _redShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.red)),",
    "      _greenShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.green)),",
    "      _blueShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.blue)),",
    "    });",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _buttonFocusNode.dispose();",
    "    _entry.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _setBackgroundColor(Color? color) {",
    "    setState(() {",
    "      _backgroundColor = color!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        MenuAnchor(",
    "          childFocusNode: _buttonFocusNode,",
    "          menuChildren: <Widget>[",
    "            RadioMenuButton<Color>(",
    "              value: Colors.red,",
    "              shortcut: _redShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Red Background'),",
    "            ),",
    "            RadioMenuButton<Color>(",
    "              value: Colors.green,",
    "              shortcut: _greenShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Green Background'),",
    "            ),",
    "            RadioMenuButton<Color>(",
    "              value: Colors.blue,",
    "              shortcut: _blueShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Blue Background'),",
    "            ),",
    "          ],",
    "          builder: (BuildContext context, MenuController controller, Widget? child) {",
    "            return TextButton(",
    "              focusNode: _buttonFocusNode,",
    "              onPressed: () {",
    "                if (controller.isOpen) {",
    "                  controller.close();",
    "                } else {",
    "                  controller.open();",
    "                }",
    "              },",
    "              child: const Text('OPEN MENU'),",
    "            );",
    "          },",
    "        ),",
    "        Expanded(",
    "          child: Container(",
    "            color: _backgroundColor,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: MyRadioMenu()),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Menu Radio Property Border Example "
},"Flutter Menu Radio Property Border Example ": {
  "prefix": "flutter-RadioMenuButton-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [RadioMenuButton].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "class MyRadioMenu extends StatefulWidget {",
    "  const MyRadioMenu({super.key});",
    "",
    "  @override",
    "  State<MyRadioMenu> createState() => _MyRadioMenuState();",
    "}",
    "",
    "class _MyRadioMenuState extends State<MyRadioMenu> {",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  Color _backgroundColor = Colors.red;",
    "  late ShortcutRegistryEntry _entry;",
    "",
    "  static const SingleActivator _redShortcut = SingleActivator(LogicalKeyboardKey.keyR, control: true);",
    "  static const SingleActivator _greenShortcut = SingleActivator(LogicalKeyboardKey.keyG, control: true);",
    "  static const SingleActivator _blueShortcut = SingleActivator(LogicalKeyboardKey.keyB, control: true);",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    _entry = ShortcutRegistry.of(context).addAll(<ShortcutActivator, VoidCallbackIntent>{",
    "      _redShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.red)),",
    "      _greenShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.green)),",
    "      _blueShortcut: VoidCallbackIntent(() => _setBackgroundColor(Colors.blue)),",
    "    });",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _buttonFocusNode.dispose();",
    "    _entry.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _setBackgroundColor(Color? color) {",
    "    setState(() {",
    "      _backgroundColor = color!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        MenuAnchor(",
    "          childFocusNode: _buttonFocusNode,",
    "          menuChildren: <Widget>[",
    "            RadioMenuButton<Color>(",
    "              value: Colors.red,",
    "              shortcut: _redShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Red Background'),",
    "            ),",
    "            RadioMenuButton<Color>(",
    "              value: Colors.green,",
    "              shortcut: _greenShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Green Background'),",
    "            ),",
    "            RadioMenuButton<Color>(",
    "              value: Colors.blue,",
    "              shortcut: _blueShortcut,",
    "              groupValue: _backgroundColor,",
    "              onChanged: _setBackgroundColor,",
    "              child: const Text('Blue Background'),",
    "            ),",
    "          ],",
    "          builder: (BuildContext context, MenuController controller, Widget? child) {",
    "            return TextButton(",
    "              focusNode: _buttonFocusNode,",
    "              onPressed: () {",
    "                if (controller.isOpen) {",
    "                  controller.close();",
    "                } else {",
    "                  controller.open();",
    "                }",
    "              },",
    "              child: const Text('OPEN MENU'),",
    "            );",
    "          },",
    "        ),",
    "        Expanded(",
    "          child: Container(",
    "            color: _backgroundColor,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: MyRadioMenu()),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Menu Radio Property Border Example "
},
"Flutter Menu Example ": {
  "prefix": "flutter-MenuAnchor-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [MenuAnchor].",
    "",
    "void main() => runApp(const MenuApp());",
    "",
    "/// An enhanced enum to define the available menus and their shortcuts.",
    "///",
    "/// Using an enum for menu definition is not required, but this illustrates how",
    "/// they could be used for simple menu systems.",
    "enum MenuEntry {",
    "  about('About'),",
    "  showMessage('Show Message', SingleActivator(LogicalKeyboardKey.keyS, control: true)),",
    "  hideMessage('Hide Message', SingleActivator(LogicalKeyboardKey.keyS, control: true)),",
    "  colorMenu('Color Menu'),",
    "  colorRed('Red Background', SingleActivator(LogicalKeyboardKey.keyR, control: true)),",
    "  colorGreen('Green Background', SingleActivator(LogicalKeyboardKey.keyG, control: true)),",
    "  colorBlue('Blue Background', SingleActivator(LogicalKeyboardKey.keyB, control: true));",
    "",
    "  const MenuEntry(this.label, [this.shortcut]);",
    "  final String label;",
    "  final MenuSerializableShortcut? shortcut;",
    "}",
    "",
    "class MyCascadingMenu extends StatefulWidget {",
    "  const MyCascadingMenu({super.key, required this.message});",
    "",
    "  final String message;",
    "",
    "  @override",
    "  State<MyCascadingMenu> createState() => _MyCascadingMenuState();",
    "}",
    "",
    "class _MyCascadingMenuState extends State<MyCascadingMenu> {",
    "  MenuEntry? _lastSelection;",
    "  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');",
    "  ShortcutRegistryEntry? _shortcutsEntry;",
    "",
    "  Color get backgroundColor => _backgroundColor;",
    "  Color _backgroundColor = Colors.red;",
    "  set backgroundColor(Color value) {",
    "    if (_backgroundColor != value) {",
    "      setState(() {",
    "        _backgroundColor = value;",
    "      });",
    "    }",
    "  }",
    "",
    "  bool get showingMessage => _showingMessage;",
    "  bool _showingMessage = false;",
    "  set showingMessage(bool value) {",
    "    if (_showingMessage != value) {",
    "      setState(() {",
    "        _showingMessage = value;",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    // Dispose of any previously registered shortcuts, since they are about to",
    "    // be replaced.",
    "    _shortcutsEntry?.dispose();",
    "    // Collect the shortcuts from the different menu selections so that they can",
    "    // be registered to apply to the entire app. Menus don't register their",
    "    // shortcuts, they only display the shortcut hint text.",
    "    final Map<ShortcutActivator, Intent> shortcuts = <ShortcutActivator, Intent>{",
    "      for (final MenuEntry item in MenuEntry.values)",
    "        if (item.shortcut != null) item.shortcut!: VoidCallbackIntent(() => _activate(item)),",
    "    };",
    "    // Register the shortcuts with the ShortcutRegistry so that they are",
    "    // available to the entire application.",
    "    _shortcutsEntry = ShortcutRegistry.of(context).addAll(shortcuts);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _shortcutsEntry?.dispose();",
    "    _buttonFocusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      crossAxisAlignment: CrossAxisAlignment.start,",
    "      children: <Widget>[",
    "        MenuAnchor(",
    "          childFocusNode: _buttonFocusNode,",
    "          menuChildren: <Widget>[",
    "            MenuItemButton(",
    "              child: Text(MenuEntry.about.label),",
    "              onPressed: () => _activate(MenuEntry.about),",
    "            ),",
    "            if (_showingMessage)",
    "              MenuItemButton(",
    "                onPressed: () => _activate(MenuEntry.hideMessage),",
    "                shortcut: MenuEntry.hideMessage.shortcut,",
    "                child: Text(MenuEntry.hideMessage.label),",
    "              ),",
    "            if (!_showingMessage)",
    "              MenuItemButton(",
    "                onPressed: () => _activate(MenuEntry.showMessage),",
    "                shortcut: MenuEntry.showMessage.shortcut,",
    "                child: Text(MenuEntry.showMessage.label),",
    "              ),",
    "            SubmenuButton(",
    "              menuChildren: <Widget>[",
    "                MenuItemButton(",
    "                  onPressed: () => _activate(MenuEntry.colorRed),",
    "                  shortcut: MenuEntry.colorRed.shortcut,",
    "                  child: Text(MenuEntry.colorRed.label),",
    "                ),",
    "                MenuItemButton(",
    "                  onPressed: () => _activate(MenuEntry.colorGreen),",
    "                  shortcut: MenuEntry.colorGreen.shortcut,",
    "                  child: Text(MenuEntry.colorGreen.label),",
    "                ),",
    "                MenuItemButton(",
    "                  onPressed: () => _activate(MenuEntry.colorBlue),",
    "                  shortcut: MenuEntry.colorBlue.shortcut,",
    "                  child: Text(MenuEntry.colorBlue.label),",
    "                ),",
    "              ],",
    "              child: const Text('Background Color'),",
    "            ),",
    "          ],",
    "          builder: (BuildContext context, MenuController controller, Widget? child) {",
    "            return TextButton(",
    "              focusNode: _buttonFocusNode,",
    "              onPressed: () {",
    "                if (controller.isOpen) {",
    "                  controller.close();",
    "                } else {",
    "                  controller.open();",
    "                }",
    "              },",
    "              child: const Text('OPEN MENU'),",
    "            );",
    "          },",
    "        ),",
    "        Expanded(",
    "          child: Container(",
    "            alignment: Alignment.center,",
    "            color: backgroundColor,",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(12.0),",
    "                  child: Text(",
    "                    showingMessage ? widget.message : '',",
    "                    style: Theme.of(context).textTheme.headlineSmall,",
    "                  ),",
    "                ),",
    "                Text(_lastSelection != null ? 'Last Selected: ${_lastSelection!.label}' : ''),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "",
    "  void _activate(MenuEntry selection) {",
    "    setState(() {",
    "      _lastSelection = selection;",
    "    });",
    "",
    "    switch (selection) {",
    "      case MenuEntry.about:",
    "        showAboutDialog(",
    "          context: context,",
    "          applicationName: 'MenuBar Sample',",
    "          applicationVersion: '1.0.0',",
    "        );",
    "      case MenuEntry.hideMessage:",
    "      case MenuEntry.showMessage:",
    "        showingMessage = !showingMessage;",
    "      case MenuEntry.colorMenu:",
    "        break;",
    "      case MenuEntry.colorRed:",
    "        backgroundColor = Colors.red;",
    "      case MenuEntry.colorGreen:",
    "        backgroundColor = Colors.green;",
    "      case MenuEntry.colorBlue:",
    "        backgroundColor = Colors.blue;",
    "    }",
    "  }",
    "}",
    "",
    "class MenuApp extends StatelessWidget {",
    "  const MenuApp({super.key});",
    "",
    "  static const String kMessage = '\"Talk less. Smile more.\" - A. Burr';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const Scaffold(body: MyCascadingMenu(message: kMessage)),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Menu Example "
},
"Flutter NavigationBar Example": {
  "prefix": "flutter-NavigationBar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationBar].",
    "",
    "void main() => runApp(const NavigationBarApp());",
    "",
    "class NavigationBarApp extends StatelessWidget {",
    "  const NavigationBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(home: NavigationExample());",
    "  }",
    "}",
    "",
    "class NavigationExample extends StatefulWidget {",
    "  const NavigationExample({super.key});",
    "",
    "  @override",
    "  State<NavigationExample> createState() => _NavigationExampleState();",
    "}",
    "",
    "class _NavigationExampleState extends State<NavigationExample> {",
    "  int currentPageIndex = 0;",
    "  NavigationDestinationLabelBehavior labelBehavior = NavigationDestinationLabelBehavior.alwaysShow;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      bottomNavigationBar: NavigationBar(",
    "        labelBehavior: labelBehavior,",
    "        selectedIndex: currentPageIndex,",
    "        onDestinationSelected: (int index) {",
    "          setState(() {",
    "            currentPageIndex = index;",
    "          });",
    "        },",
    "        destinations: const <Widget>[",
    "          NavigationDestination(",
    "            icon: Icon(Icons.explore),",
    "            label: 'Explore',",
    "          ),",
    "          NavigationDestination(",
    "            icon: Icon(Icons.commute),",
    "            label: 'Commute',",
    "          ),",
    "          NavigationDestination(",
    "            selectedIcon: Icon(Icons.bookmark),",
    "            icon: Icon(Icons.bookmark_border),",
    "            label: 'Saved',",
    "          ),",
    "        ],",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Text('Label behavior: ${labelBehavior.name}'),",
    "            const SizedBox(height: 10),",
    "            OverflowBar(",
    "              spacing: 10.0,",
    "              children: <Widget>[",
    "                ElevatedButton(",
    "                  onPressed: () {",
    "                    setState(() {",
    "                      labelBehavior = NavigationDestinationLabelBehavior.alwaysShow;",
    "                    });",
    "                  },",
    "                  child: const Text('alwaysShow'),",
    "                ),",
    "                ElevatedButton(",
    "                  onPressed: () {",
    "                    setState(() {",
    "                      labelBehavior = NavigationDestinationLabelBehavior.onlyShowSelected;",
    "                    });",
    "                  },",
    "                  child: const Text('onlyShowSelected'),",
    "                ),",
    "                ElevatedButton(",
    "                  onPressed: () {",
    "                    setState(() {",
    "                      labelBehavior = NavigationDestinationLabelBehavior.alwaysHide;",
    "                    });",
    "                  },",
    "                  child: const Text('alwaysHide'),",
    "                ),",
    "              ],",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationBar Example"
},
"Flutter NavigationDrawer Example": {
  "prefix": "flutter-NavigationDrawer",
  "scope":"dart",
  "body": [
    "",
    "// Builds an adaptive navigation widget layout. When the screen width is less than",
    "// 450, A [NavigationBar] will be displayed. Otherwise, a [NavigationRail] will be",
    "// displayed on the left side, and also a button to open the [NavigationDrawer].",
    "// All of these navigation widgets are built from an   identical list of data.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationDrawer].",
    "",
    "class ExampleDestination {",
    "  const ExampleDestination(this.label, this.icon, this.selectedIcon);",
    "",
    "  final String label;",
    "  final Widget icon;",
    "  final Widget selectedIcon;",
    "}",
    "",
    "const List<ExampleDestination> destinations = <ExampleDestination>[",
    "  ExampleDestination('page 0', Icon(Icons.widgets_outlined), Icon(Icons.widgets)),",
    "  ExampleDestination('page 1', Icon(Icons.format_paint_outlined), Icon(Icons.format_paint)),",
    "  ExampleDestination('page 2', Icon(Icons.text_snippet_outlined), Icon(Icons.text_snippet)),",
    "  ExampleDestination('page 3', Icon(Icons.invert_colors_on_outlined), Icon(Icons.opacity)),",
    "];",
    "",
    "void main() {",
    "  runApp(",
    "    MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const NavigationDrawerExample(),",
    "    ),",
    "  );",
    "}",
    "",
    "class NavigationDrawerExample extends StatefulWidget {",
    "  const NavigationDrawerExample({super.key});",
    "",
    "  @override",
    "  State<NavigationDrawerExample> createState() => _NavigationDrawerExampleState();",
    "}",
    "",
    "class _NavigationDrawerExampleState extends State<NavigationDrawerExample> {",
    "  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();",
    "",
    "  int screenIndex = 0;",
    "  late bool showNavigationDrawer;",
    "",
    "  void handleScreenChanged(int selectedScreen) {",
    "    setState(() {",
    "      screenIndex = selectedScreen;",
    "    });",
    "  }",
    "",
    "  void openDrawer() {",
    "    scaffoldKey.currentState!.openEndDrawer();",
    "  }",
    "",
    "  Widget buildBottomBarScaffold() {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            Text('Page Index =  $screenIndex'),",
    "          ],",
    "        ),",
    "      ),",
    "      bottomNavigationBar: NavigationBar(",
    "        selectedIndex: screenIndex,",
    "        onDestinationSelected: (int index) {",
    "          setState(() {",
    "            screenIndex = index;",
    "          });",
    "        },",
    "        destinations: destinations.map(",
    "          (ExampleDestination destination) {",
    "            return NavigationDestination(",
    "              label: destination.label,",
    "              icon: destination.icon,",
    "              selectedIcon: destination.selectedIcon,",
    "              tooltip: destination.label,",
    "            );",
    "          },",
    "        ).toList(),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget buildDrawerScaffold(BuildContext context) {",
    "    return Scaffold(",
    "      key: scaffoldKey,",
    "      body: SafeArea(",
    "        bottom: false,",
    "        top: false,",
    "        child: Row(",
    "          children: <Widget>[",
    "            Padding(",
    "              padding: const EdgeInsets.symmetric(horizontal: 5),",
    "              child: NavigationRail(",
    "                minWidth: 50,",
    "                destinations: destinations.map(",
    "                  (ExampleDestination destination) {",
    "                    return NavigationRailDestination(",
    "                      label: Text(destination.label),",
    "                      icon: destination.icon,",
    "                      selectedIcon: destination.selectedIcon,",
    "                    );",
    "                  },",
    "                ).toList(),",
    "                selectedIndex: screenIndex,",
    "                useIndicator: true,",
    "                onDestinationSelected: (int index) {",
    "                  setState(() {",
    "                    screenIndex = index;",
    "                  });",
    "                },",
    "              ),",
    "            ),",
    "            const VerticalDivider(thickness: 1, width: 1),",
    "            Expanded(",
    "              child: Column(",
    "                mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "                children: <Widget>[",
    "                  Text('Page Index =  $screenIndex'),",
    "                  ElevatedButton(",
    "                    onPressed: openDrawer,",
    "                    child: const Text('Open Drawer'),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      endDrawer: NavigationDrawer(",
    "        onDestinationSelected: handleScreenChanged,",
    "        selectedIndex: screenIndex,",
    "        children: <Widget>[",
    "          Padding(",
    "            padding: const EdgeInsets.fromLTRB(28, 16, 16, 10),",
    "            child: Text(",
    "              'Header',",
    "              style: Theme.of(context).textTheme.titleSmall,",
    "            ),",
    "          ),",
    "          ...destinations.map(",
    "            (ExampleDestination destination) {",
    "              return NavigationDrawerDestination(",
    "                label: Text(destination.label),",
    "                icon: destination.icon,",
    "                selectedIcon: destination.selectedIcon,",
    "              );",
    "            },",
    "          ),",
    "          const Padding(",
    "            padding: EdgeInsets.fromLTRB(28, 16, 28, 10),",
    "            child: Divider(),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    showNavigationDrawer = MediaQuery.of(context).size.width >= 450;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return showNavigationDrawer ? buildDrawerScaffold(context) : buildBottomBarScaffold();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationDrawer Example"
},
"Flutter NavigationRail Example": {
  "prefix": "flutter-NavigationRail",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationRail].",
    "",
    "void main() => runApp(const NavigationRailExampleApp());",
    "",
    "class NavigationRailExampleApp extends StatelessWidget {",
    "  const NavigationRailExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: NavRailExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class NavRailExample extends StatefulWidget {",
    "  const NavRailExample({super.key});",
    "",
    "  @override",
    "  State<NavRailExample> createState() => _NavRailExampleState();",
    "}",
    "",
    "class _NavRailExampleState extends State<NavRailExample> {",
    "  int _selectedIndex = 0;",
    "  NavigationRailLabelType labelType = NavigationRailLabelType.all;",
    "  bool showLeading = false;",
    "  bool showTrailing = false;",
    "  double groupAlignment = -1.0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Row(",
    "        children: <Widget>[",
    "          NavigationRail(",
    "            selectedIndex: _selectedIndex,",
    "            groupAlignment: groupAlignment,",
    "            onDestinationSelected: (int index) {",
    "              setState(() {",
    "                _selectedIndex = index;",
    "              });",
    "            },",
    "            labelType: labelType,",
    "            leading: showLeading",
    "                ? FloatingActionButton(",
    "                    elevation: 0,",
    "                    onPressed: () {",
    "                      // Add your onPressed code here!",
    "                    },",
    "                    child: const Icon(Icons.add),",
    "                  )",
    "                : const SizedBox(),",
    "            trailing: showTrailing",
    "                ? IconButton(",
    "                    onPressed: () {",
    "                      // Add your onPressed code here!",
    "                    },",
    "                    icon: const Icon(Icons.more_horiz_rounded),",
    "                  )",
    "                : const SizedBox(),",
    "            destinations: const <NavigationRailDestination>[",
    "              NavigationRailDestination(",
    "                icon: Icon(Icons.favorite_border),",
    "                selectedIcon: Icon(Icons.favorite),",
    "                label: Text('First'),",
    "              ),",
    "              NavigationRailDestination(",
    "                icon: Icon(Icons.bookmark_border),",
    "                selectedIcon: Icon(Icons.book),",
    "                label: Text('Second'),",
    "              ),",
    "              NavigationRailDestination(",
    "                icon: Icon(Icons.star_border),",
    "                selectedIcon: Icon(Icons.star),",
    "                label: Text('Third'),",
    "              ),",
    "            ],",
    "          ),",
    "          const VerticalDivider(thickness: 1, width: 1),",
    "          // This is the main content.",
    "          Expanded(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('selectedIndex: $_selectedIndex'),",
    "                const SizedBox(height: 20),",
    "                Text('Label type: ${labelType.name}'),",
    "                const SizedBox(height: 10),",
    "                OverflowBar(",
    "                  spacing: 10.0,",
    "                  children: <Widget>[",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          labelType = NavigationRailLabelType.none;",
    "                        });",
    "                      },",
    "                      child: const Text('None'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          labelType = NavigationRailLabelType.selected;",
    "                        });",
    "                      },",
    "                      child: const Text('Selected'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          labelType = NavigationRailLabelType.all;",
    "                        });",
    "                      },",
    "                      child: const Text('All'),",
    "                    ),",
    "                  ],",
    "                ),",
    "                const SizedBox(height: 20),",
    "                Text('Group alignment: $groupAlignment'),",
    "                const SizedBox(height: 10),",
    "                OverflowBar(",
    "                  spacing: 10.0,",
    "                  children: <Widget>[",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          groupAlignment = -1.0;",
    "                        });",
    "                      },",
    "                      child: const Text('Top'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          groupAlignment = 0.0;",
    "                        });",
    "                      },",
    "                      child: const Text('Center'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          groupAlignment = 1.0;",
    "                        });",
    "                      },",
    "                      child: const Text('Bottom'),",
    "                    ),",
    "                  ],",
    "                ),",
    "                const SizedBox(height: 20),",
    "                OverflowBar(",
    "                  spacing: 10.0,",
    "                  children: <Widget>[",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          showLeading = !showLeading;",
    "                        });",
    "                      },",
    "                      child: Text(showLeading ? 'Hide Leading' : 'Show Leading'),",
    "                    ),",
    "                    ElevatedButton(",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          showTrailing = !showTrailing;",
    "                        });",
    "                      },",
    "                      child: Text(showTrailing ? 'Hide Trailing' : 'Show Trailing'),",
    "                    ),",
    "                  ],",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationRail Example"
},
"Flutter NavigationRail Extended Example": {
  "prefix": "flutter-NavigationRailExtended",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:ui';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationRail.extendedAnimation].",
    "",
    "void main() => runApp(const ExtendedAnimationExampleApp());",
    "",
    "class ExtendedAnimationExampleApp extends StatelessWidget {",
    "  const ExtendedAnimationExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(",
    "        body: MyNavigationRail(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MyNavigationRail extends StatefulWidget {",
    "  const MyNavigationRail({super.key});",
    "",
    "  @override",
    "  State<MyNavigationRail> createState() => _MyNavigationRailState();",
    "}",
    "",
    "class _MyNavigationRailState extends State<MyNavigationRail> {",
    "  int _selectedIndex = 0;",
    "  bool _extended = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: <Widget>[",
    "        NavigationRail(",
    "          selectedIndex: _selectedIndex,",
    "          extended: _extended,",
    "          leading: MyNavigationRailFab(onPressed: () {",
    "            setState(() {",
    "              _extended = !_extended;",
    "            });",
    "          }),",
    "          onDestinationSelected: (int index) {",
    "            setState(() {",
    "              _selectedIndex = index;",
    "            });",
    "          },",
    "          labelType: NavigationRailLabelType.none,",
    "          destinations: const <NavigationRailDestination>[",
    "            NavigationRailDestination(",
    "              icon: Icon(Icons.favorite_border),",
    "              selectedIcon: Icon(Icons.favorite),",
    "              label: Text('First'),",
    "            ),",
    "            NavigationRailDestination(",
    "              icon: Icon(Icons.bookmark_border),",
    "              selectedIcon: Icon(Icons.book),",
    "              label: Text('Second'),",
    "            ),",
    "            NavigationRailDestination(",
    "              icon: Icon(Icons.star_border),",
    "              selectedIcon: Icon(Icons.star),",
    "              label: Text('Third'),",
    "            ),",
    "          ],",
    "        ),",
    "        const VerticalDivider(thickness: 1, width: 1),",
    "        // This is the main content.",
    "        Expanded(",
    "          child: Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                const Text('Tap on FloatingActionButton to expand'),",
    "                const SizedBox(height: 20),",
    "                Text('selectedIndex: $_selectedIndex'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class MyNavigationRailFab extends StatelessWidget {",
    "  const MyNavigationRailFab({super.key, this.onPressed});",
    "",
    "  final VoidCallback? onPressed;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Animation<double> animation = NavigationRail.extendedAnimation(context);",
    "    return AnimatedBuilder(",
    "      animation: animation,",
    "      builder: (BuildContext context, Widget? child) {",
    "        // The extended fab has a shorter height than the regular fab.",
    "        return Container(",
    "          height: 56,",
    "          padding: EdgeInsets.symmetric(",
    "            vertical: lerpDouble(0, 6, animation.value)!,",
    "          ),",
    "          child: animation.value == 0",
    "              ? FloatingActionButton(",
    "                  onPressed: onPressed,",
    "                  child: const Icon(Icons.add),",
    "                )",
    "              : Align(",
    "                  alignment: AlignmentDirectional.centerStart,",
    "                  widthFactor: animation.value,",
    "                  child: Padding(",
    "                    padding: const EdgeInsetsDirectional.only(start: 8),",
    "                    child: FloatingActionButton.extended(",
    "                      icon: const Icon(Icons.add),",
    "                      label: const Text('CREATE'),",
    "                      onPressed: onPressed,",
    "                    ),",
    "                  ),",
    "                ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NavigationRail Extended Example"
},
"Flutter Outlined Example": {
  "prefix": "flutter-OutlinedButton",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [OutlinedButton].",
    "",
    "void main() => runApp(const OutlinedButtonExampleApp());",
    "",
    "class OutlinedButtonExampleApp extends StatelessWidget {",
    "  const OutlinedButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('OutlinedButton Sample')),",
    "        body: const Center(",
    "          child: OutlinedButtonExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class OutlinedButtonExample extends StatelessWidget {",
    "  const OutlinedButtonExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OutlinedButton(",
    "      onPressed: () {",
    "        debugPrint('Received click');",
    "      },",
    "      child: const Text('Click Me'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Outlined Button Example"
},
"Flutter Page Transition Theme Example": {
  "prefix": "flutter-PageTransitionsTheme",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PageTransitionsTheme].",
    "",
    "void main() => runApp(const PageTransitionsThemeApp());",
    "",
    "class PageTransitionsThemeApp extends StatelessWidget {",
    "  const PageTransitionsThemeApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        useMaterial3: true,",
    "        // Defines the page transition animations used by MaterialPageRoute",
    "        // for different target platforms.",
    "        // Non-specified target platforms will default to",
    "        // ZoomPageTransitionsBuilder().",
    "        pageTransitionsTheme: const PageTransitionsTheme(",
    "          builders: <TargetPlatform, PageTransitionsBuilder>{",
    "            TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),",
    "            TargetPlatform.linux: OpenUpwardsPageTransitionsBuilder(),",
    "            TargetPlatform.macOS: FadeUpwardsPageTransitionsBuilder(),",
    "          },",
    "        ),",
    "      ),",
    "      home: const HomePage(),",
    "    );",
    "  }",
    "}",
    "",
    "class HomePage extends StatelessWidget {",
    "  const HomePage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.blueGrey,",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).push(",
    "              MaterialPageRoute<SecondPage>(",
    "                builder: (BuildContext context) => const SecondPage(),",
    "              ),",
    "            );",
    "          },",
    "          child: const Text('To SecondPage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SecondPage extends StatelessWidget {",
    "  const SecondPage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.purple[200],",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).pop();",
    "          },",
    "          child: const Text('Back to HomePage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Page Transition Theme Example"
},
"Flutter Page Transition Zoom Example": {
  "prefix": "flutter-PageTransition-zoom",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PageTransitionsTheme].",
    "",
    "void main() => runApp(const PageTransitionsThemeApp());",
    "",
    "class PageTransitionsThemeApp extends StatelessWidget {",
    "  const PageTransitionsThemeApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        useMaterial3: true,",
    "        pageTransitionsTheme: const PageTransitionsTheme(",
    "          builders: <TargetPlatform, PageTransitionsBuilder>{",
    "            TargetPlatform.android: ZoomPageTransitionsBuilder(",
    "              allowSnapshotting: false,",
    "            ),",
    "          },",
    "        ),",
    "      ),",
    "      home: const HomePage(),",
    "    );",
    "  }",
    "}",
    "",
    "class HomePage extends StatelessWidget {",
    "  const HomePage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.blueGrey,",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).push(",
    "              MaterialPageRoute<SecondPage>(",
    "                builder: (BuildContext context) => const SecondPage(),",
    "              ),",
    "            );",
    "          },",
    "          child: const Text('To SecondPage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SecondPage extends StatelessWidget {",
    "  const SecondPage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Colors.purple[200],",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: () {",
    "            Navigator.of(context).pop();",
    "          },",
    "          child: const Text('Back to HomePage'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Page Transition Zoom Example"
},
"Flutter Popup Menu Example": {
  "prefix": "flutter-PopupMenuButton",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PopupMenuButton].",
    "",
    "// This is the type used by the popup menu below.",
    "enum SampleItem { itemOne, itemTwo, itemThree }",
    "",
    "void main() => runApp(const PopupMenuApp());",
    "",
    "class PopupMenuApp extends StatelessWidget {",
    "  const PopupMenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: PopupMenuExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class PopupMenuExample extends StatefulWidget {",
    "  const PopupMenuExample({super.key});",
    "",
    "  @override",
    "  State<PopupMenuExample> createState() => _PopupMenuExampleState();",
    "}",
    "",
    "class _PopupMenuExampleState extends State<PopupMenuExample> {",
    "  SampleItem? selectedMenu;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('PopupMenuButton')),",
    "      body: Center(",
    "        child: PopupMenuButton<SampleItem>(",
    "          initialValue: selectedMenu,",
    "          // Callback that sets the selected popup menu item.",
    "          onSelected: (SampleItem item) {",
    "            setState(() {",
    "              selectedMenu = item;",
    "            });",
    "          },",
    "          itemBuilder: (BuildContext context) => <PopupMenuEntry<SampleItem>>[",
    "            const PopupMenuItem<SampleItem>(",
    "              value: SampleItem.itemOne,",
    "              child: Text('Item 1'),",
    "            ),",
    "            const PopupMenuItem<SampleItem>(",
    "              value: SampleItem.itemTwo,",
    "              child: Text('Item 2'),",
    "            ),",
    "            const PopupMenuItem<SampleItem>(",
    "              value: SampleItem.itemThree,",
    "              child: Text('Item 3'),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Popup Menu Example"
},
"Flutter Circular Progress Indicator Example": {
  "prefix": "flutter-CircularProgressIndicator",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [CircularProgressIndicator].",
    "",
    "void main() => runApp(const ProgressIndicatorApp());",
    "",
    "class ProgressIndicatorApp extends StatelessWidget {",
    "  const ProgressIndicatorApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ProgressIndicatorExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ProgressIndicatorExample extends StatefulWidget {",
    "  const ProgressIndicatorExample({super.key});",
    "",
    "  @override",
    "  State<ProgressIndicatorExample> createState() => _ProgressIndicatorExampleState();",
    "}",
    "",
    "class _ProgressIndicatorExampleState extends State<ProgressIndicatorExample> with TickerProviderStateMixin {",
    "  late AnimationController controller;",
    "",
    "  @override",
    "  void initState() {",
    "    controller = AnimationController(",
    "      /// [AnimationController]s can be created with `vsync: this` because of",
    "      /// [TickerProviderStateMixin].",
    "      vsync: this,",
    "      duration: const Duration(seconds: 5),",
    "    )..addListener(() {",
    "        setState(() {});",
    "      });",
    "    controller.repeat(reverse: true);",
    "    super.initState();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Padding(",
    "        padding: const EdgeInsets.all(20.0),",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            Text(",
    "              'Circular progress indicator with a fixed color',",
    "              style: Theme.of(context).textTheme.titleLarge,",
    "            ),",
    "            CircularProgressIndicator(",
    "              value: controller.value,",
    "              semanticsLabel: 'Circular progress indicator',",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Circular Progress Indicator Example"
},
"Flutter Linear Progress Indicator Example": {
  "prefix": "flutter-LinearProgressIndicator",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [LinearProgressIndicator].",
    "",
    "void main() => runApp(const ProgressIndicatorApp());",
    "",
    "class ProgressIndicatorApp extends StatelessWidget {",
    "  const ProgressIndicatorApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ProgressIndicatorExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ProgressIndicatorExample extends StatefulWidget {",
    "  const ProgressIndicatorExample({super.key});",
    "",
    "  @override",
    "  State<ProgressIndicatorExample> createState() => _ProgressIndicatorExampleState();",
    "}",
    "",
    "class _ProgressIndicatorExampleState extends State<ProgressIndicatorExample> with TickerProviderStateMixin {",
    "  late AnimationController controller;",
    "",
    "  @override",
    "  void initState() {",
    "    controller = AnimationController(",
    "      /// [AnimationController]s can be created with `vsync: this` because of",
    "      /// [TickerProviderStateMixin].",
    "      vsync: this,",
    "      duration: const Duration(seconds: 5),",
    "    )..addListener(() {",
    "        setState(() {});",
    "      });",
    "    controller.repeat(reverse: true);",
    "    super.initState();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Padding(",
    "        padding: const EdgeInsets.all(20.0),",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            const Text(",
    "              'Linear progress indicator with a fixed color',",
    "              style: TextStyle(fontSize: 20),",
    "            ),",
    "            LinearProgressIndicator(",
    "              value: controller.value,",
    "              semanticsLabel: 'Linear progress indicator',",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Linear Progress Indicator Example"
},
"Flutter Radio with Builder Example": {
  "prefix": "flutter-radio-with-builder",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Radio.toggleable].",
    "",
    "void main() => runApp(const ToggleableExampleApp());",
    "",
    "class ToggleableExampleApp extends StatelessWidget {",
    "  const ToggleableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Radio Sample')),",
    "        body: const ToggleableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ToggleableExample extends StatefulWidget {",
    "  const ToggleableExample({super.key});",
    "",
    "  @override",
    "  State<ToggleableExample> createState() => _ToggleableExampleState();",
    "}",
    "",
    "class _ToggleableExampleState extends State<ToggleableExample> {",
    "  int? groupValue;",
    "  static const List<String> selections = <String>[",
    "    'Hercules Mulligan',",
    "    'Eliza Hamilton',",
    "    'Philip Schuyler',",
    "    'Maria Reynolds',",
    "    'Samuel Seabury',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: ListView.builder(",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return Row(",
    "            mainAxisSize: MainAxisSize.min,",
    "            children: <Widget>[",
    "              Radio<int>(",
    "                  value: index,",
    "                  groupValue: groupValue,",
    "                  // TRY THIS: Try setting the toggleable value to false and",
    "                  // see how that changes the behavior of the widget.",
    "                  toggleable: true,",
    "                  onChanged: (int? value) {",
    "                    setState(() {",
    "                      groupValue = value;",
    "                    });",
    "                  }),",
    "              Text(selections[index]),",
    "            ],",
    "          );",
    "        },",
    "        itemCount: selections.length,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Radio with Builder Example"
},
"Flutter Radio  Example": {
  "prefix": "flutter-radio",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Radio].",
    "",
    "void main() => runApp(const RadioExampleApp());",
    "",
    "class RadioExampleApp extends StatelessWidget {",
    "  const RadioExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Radio Sample')),",
    "        body: const Center(",
    "          child: RadioExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "enum SingingCharacter { lafayette, jefferson }",
    "",
    "class RadioExample extends StatefulWidget {",
    "  const RadioExample({super.key});",
    "",
    "  @override",
    "  State<RadioExample> createState() => _RadioExampleState();",
    "}",
    "",
    "class _RadioExampleState extends State<RadioExample> {",
    "  SingingCharacter? _character = SingingCharacter.lafayette;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        ListTile(",
    "          title: const Text('Lafayette'),",
    "          leading: Radio<SingingCharacter>(",
    "            value: SingingCharacter.lafayette,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "        ListTile(",
    "          title: const Text('Thomas Jefferson'),",
    "          leading: Radio<SingingCharacter>(",
    "            value: SingingCharacter.jefferson,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Radio  Example"
},"Flutter Radio  Example": {
  "prefix": "flutter-Radio",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Radio].",
    "",
    "void main() => runApp(const RadioExampleApp());",
    "",
    "class RadioExampleApp extends StatelessWidget {",
    "  const RadioExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Radio Sample')),",
    "        body: const Center(",
    "          child: RadioExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "enum SingingCharacter { lafayette, jefferson }",
    "",
    "class RadioExample extends StatefulWidget {",
    "  const RadioExample({super.key});",
    "",
    "  @override",
    "  State<RadioExample> createState() => _RadioExampleState();",
    "}",
    "",
    "class _RadioExampleState extends State<RadioExample> {",
    "  SingingCharacter? _character = SingingCharacter.lafayette;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        ListTile(",
    "          title: const Text('Lafayette'),",
    "          leading: Radio<SingingCharacter>(",
    "            value: SingingCharacter.lafayette,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "        ListTile(",
    "          title: const Text('Thomas Jefferson'),",
    "          leading: Radio<SingingCharacter>(",
    "            value: SingingCharacter.jefferson,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Radio  Example"
},
"Flutter RadioListTileCustom": {
  "prefix": "flutter-listtile-radio-custom",
  "body": [
    "",
    "import 'package:flutter/gestures.dart';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom labeled radio.",
    "",
    "void main() => runApp(const LabeledRadioApp());",
    "",
    "class LabeledRadioApp extends StatelessWidget {",
    "  const LabeledRadioApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Custom Labeled Radio Sample')),",
    "        body: const LabeledRadioExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LinkedLabelRadio extends StatelessWidget {",
    "  const LinkedLabelRadio({",
    "    super.key,",
    "    required this.label,",
    "    required this.padding,",
    "    required this.groupValue,",
    "    required this.value,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final String label;",
    "  final EdgeInsets padding;",
    "  final bool groupValue;",
    "  final bool value;",
    "  final ValueChanged<bool> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: padding,",
    "      child: Row(",
    "        children: <Widget>[",
    "          Radio<bool>(",
    "            groupValue: groupValue,",
    "            value: value,",
    "            onChanged: (bool? newValue) {",
    "              onChanged(newValue!);",
    "            },",
    "          ),",
    "          RichText(",
    "            text: TextSpan(",
    "              text: label,",
    "              style: TextStyle(",
    "                color: Theme.of(context).colorScheme.primary,",
    "                decoration: TextDecoration.underline,",
    "              ),",
    "              recognizer: TapGestureRecognizer()",
    "                ..onTap = () {",
    "                  debugPrint('Label has been tapped.');",
    "                },",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledRadioExample extends StatefulWidget {",
    "  const LabeledRadioExample({super.key});",
    "",
    "  @override",
    "  State<LabeledRadioExample> createState() => _LabeledRadioExampleState();",
    "}",
    "",
    "class _LabeledRadioExampleState extends State<LabeledRadioExample> {",
    "  bool _isRadioSelected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          LinkedLabelRadio(",
    "            label: 'First tappable label text',",
    "            padding: const EdgeInsets.symmetric(horizontal: 5.0),",
    "            value: true,",
    "            groupValue: _isRadioSelected,",
    "            onChanged: (bool newValue) {",
    "              setState(() {",
    "                _isRadioSelected = newValue;",
    "              });",
    "            },",
    "          ),",
    "          LinkedLabelRadio(",
    "            label: 'Second tappable label text',",
    "            padding: const EdgeInsets.symmetric(horizontal: 5.0),",
    "            value: false,",
    "            groupValue: _isRadioSelected,",
    "            onChanged: (bool newValue) {",
    "              setState(() {",
    "                _isRadioSelected = newValue;",
    "              });",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RadioListTileCustom"
},
"Flutter RadioListTile Builder": {
  "prefix": "flutter-listtile-radio-builder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RadioListTile.toggleable].",
    "",
    "void main() => runApp(const RadioListTileApp());",
    "",
    "class RadioListTileApp extends StatelessWidget {",
    "  const RadioListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RadioListTile.toggleable Sample')),",
    "        body: const RadioListTileExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RadioListTileExample extends StatefulWidget {",
    "  const RadioListTileExample({super.key});",
    "",
    "  @override",
    "  State<RadioListTileExample> createState() => _RadioListTileExampleState();",
    "}",
    "",
    "class _RadioListTileExampleState extends State<RadioListTileExample> {",
    "  int? groupValue;",
    "  static const List<String> selections = <String>[",
    "    'Hercules Mulligan',",
    "    'Eliza Hamilton',",
    "    'Philip Schuyler',",
    "    'Maria Reynolds',",
    "    'Samuel Seabury',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: ListView.builder(",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return RadioListTile<int>(",
    "            value: index,",
    "            groupValue: groupValue,",
    "            toggleable: true,",
    "            title: Text(selections[index]),",
    "            onChanged: (int? value) {",
    "              setState(() {",
    "                groupValue = value;",
    "              });",
    "            },",
    "          );",
    "        },",
    "        itemCount: selections.length,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RadioListTile Builder"
},"Flutter RadioListTile Builder": {
  "prefix": "flutter-RadioListTile",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RadioListTile.toggleable].",
    "",
    "void main() => runApp(const RadioListTileApp());",
    "",
    "class RadioListTileApp extends StatelessWidget {",
    "  const RadioListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RadioListTile.toggleable Sample')),",
    "        body: const RadioListTileExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RadioListTileExample extends StatefulWidget {",
    "  const RadioListTileExample({super.key});",
    "",
    "  @override",
    "  State<RadioListTileExample> createState() => _RadioListTileExampleState();",
    "}",
    "",
    "class _RadioListTileExampleState extends State<RadioListTileExample> {",
    "  int? groupValue;",
    "  static const List<String> selections = <String>[",
    "    'Hercules Mulligan',",
    "    'Eliza Hamilton',",
    "    'Philip Schuyler',",
    "    'Maria Reynolds',",
    "    'Samuel Seabury',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: ListView.builder(",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return RadioListTile<int>(",
    "            value: index,",
    "            groupValue: groupValue,",
    "            toggleable: true,",
    "            title: Text(selections[index]),",
    "            onChanged: (int? value) {",
    "              setState(() {",
    "                groupValue = value;",
    "              });",
    "            },",
    "          );",
    "        },",
    "        itemCount: selections.length,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RadioListTile Builder"
},
"Flutter RadioList Tile Builder": {
  "prefix": "flutter-radio-listtile-builder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RadioListTile.toggleable].",
    "",
    "void main() => runApp(const RadioListTileApp());",
    "",
    "class RadioListTileApp extends StatelessWidget {",
    "  const RadioListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RadioListTile.toggleable Sample')),",
    "        body: const RadioListTileExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RadioListTileExample extends StatefulWidget {",
    "  const RadioListTileExample({super.key});",
    "",
    "  @override",
    "  State<RadioListTileExample> createState() => _RadioListTileExampleState();",
    "}",
    "",
    "class _RadioListTileExampleState extends State<RadioListTileExample> {",
    "  int? groupValue;",
    "  static const List<String> selections = <String>[",
    "    'Hercules Mulligan',",
    "    'Eliza Hamilton',",
    "    'Philip Schuyler',",
    "    'Maria Reynolds',",
    "    'Samuel Seabury',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: ListView.builder(",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return RadioListTile<int>(",
    "            value: index,",
    "            groupValue: groupValue,",
    "            toggleable: true,",
    "            title: Text(selections[index]),",
    "            onChanged: (int? value) {",
    "              setState(() {",
    "                groupValue = value;",
    "              });",
    "            },",
    "          );",
    "        },",
    "        itemCount: selections.length,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RadioList Tile Builder"
},
"Flutter RangeSlider Example": {
  "prefix": "flutter-RangeSlider",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RangeSlider].",
    "",
    "void main() => runApp(const RangeSliderExampleApp());",
    "",
    "class RangeSliderExampleApp extends StatelessWidget {",
    "  const RangeSliderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RangeSlider Sample')),",
    "        body: const RangeSliderExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RangeSliderExample extends StatefulWidget {",
    "  const RangeSliderExample({super.key});",
    "",
    "  @override",
    "  State<RangeSliderExample> createState() => _RangeSliderExampleState();",
    "}",
    "",
    "class _RangeSliderExampleState extends State<RangeSliderExample> {",
    "  RangeValues _currentRangeValues = const RangeValues(40, 80);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RangeSlider(",
    "      values: _currentRangeValues,",
    "      max: 100,",
    "      divisions: 5,",
    "      labels: RangeLabels(",
    "        _currentRangeValues.start.round().toString(),",
    "        _currentRangeValues.end.round().toString(),",
    "      ),",
    "      onChanged: (RangeValues values) {",
    "        setState(() {",
    "          _currentRangeValues = values;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RangeSlider Example"
},
"Flutter RefreshIndicator Example": {
  "prefix": "flutter-RefreshIndicator",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RefreshIndicator].",
    "",
    "void main() => runApp(const RefreshIndicatorExampleApp());",
    "",
    "class RefreshIndicatorExampleApp extends StatelessWidget {",
    "  const RefreshIndicatorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RefreshIndicatorExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class RefreshIndicatorExample extends StatefulWidget {",
    "  const RefreshIndicatorExample({super.key});",
    "",
    "  @override",
    "  State<RefreshIndicatorExample> createState() => _RefreshIndicatorExampleState();",
    "}",
    "",
    "class _RefreshIndicatorExampleState extends State<RefreshIndicatorExample> {",
    "  final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey = GlobalKey<RefreshIndicatorState>();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('RefreshIndicator Sample'),",
    "      ),",
    "      body: RefreshIndicator(",
    "        key: _refreshIndicatorKey,",
    "        color: Colors.white,",
    "        backgroundColor: Colors.blue,",
    "        strokeWidth: 4.0,",
    "        onRefresh: () async {",
    "          // Replace this delay with the code to be executed during refresh",
    "          // and return a Future when code finishes execution.",
    "          return Future<void>.delayed(const Duration(seconds: 3));",
    "        },",
    "        // Pull from top to show refresh indicator.",
    "        child: ListView.builder(",
    "          itemCount: 25,",
    "          itemBuilder: (BuildContext context, int index) {",
    "            return ListTile(",
    "              title: Text('Item $index'),",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton.extended(",
    "        onPressed: () {",
    "          // Show refresh indicator programmatically on button tap.",
    "          _refreshIndicatorKey.currentState?.show();",
    "        },",
    "        icon: const Icon(Icons.refresh),",
    "        label: const Text('Show Indicator'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RefreshIndicator Example"
},
"Flutter ReorderableListView Example": {
  "prefix": "flutter-ReorderableListView",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ReorderableListView].",
    "",
    "void main() => runApp(const ReorderableApp());",
    "",
    "class ReorderableApp extends StatelessWidget {",
    "  const ReorderableApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ReorderableListView Sample')),",
    "        body: const ReorderableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ReorderableExample extends StatefulWidget {",
    "  const ReorderableExample({super.key});",
    "",
    "  @override",
    "  State<ReorderableExample> createState() => _ReorderableListViewExampleState();",
    "}",
    "",
    "class _ReorderableListViewExampleState extends State<ReorderableExample> {",
    "  final List<int> _items = List<int>.generate(50, (int index) => index);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ColorScheme colorScheme = Theme.of(context).colorScheme;",
    "    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);",
    "    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);",
    "",
    "    return ReorderableListView(",
    "      padding: const EdgeInsets.symmetric(horizontal: 40),",
    "      children: <Widget>[",
    "        for (int index = 0; index < _items.length; index += 1)",
    "          ListTile(",
    "            key: Key('$index'),",
    "            tileColor: _items[index].isOdd ? oddItemColor : evenItemColor,",
    "            title: Text('Item ${_items[index]}'),",
    "          ),",
    "      ],",
    "      onReorder: (int oldIndex, int newIndex) {",
    "        setState(() {",
    "          if (oldIndex < newIndex) {",
    "            newIndex -= 1;",
    "          }",
    "          final int item = _items.removeAt(oldIndex);",
    "          _items.insert(newIndex, item);",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ReorderableListView Example"
},
"Flutter showmaterial banner Example": {
  "prefix": "flutter-showMaterialBanner",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaffoldMessengerState.showMaterialBanner].",
    "",
    "void main() => runApp(const ShowMaterialBannerExampleApp());",
    "",
    "class ShowMaterialBannerExampleApp extends StatelessWidget {",
    "  const ShowMaterialBannerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ScaffoldMessengerState Sample')),",
    "        body: const Center(",
    "          child: ShowMaterialBannerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ShowMaterialBannerExample extends StatelessWidget {",
    "  const ShowMaterialBannerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OutlinedButton(",
    "      onPressed: () {",
    "        ScaffoldMessenger.of(context).showMaterialBanner(",
    "          const MaterialBanner(",
    "            content: Text('This is a MaterialBanner'),",
    "            actions: <Widget>[",
    "              TextButton(",
    "                onPressed: null,",
    "                child: Text('DISMISS'),",
    "              ),",
    "            ],",
    "          ),",
    "        );",
    "      },",
    "      child: const Text('Show MaterialBanner'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showmaterial banner Example"
},
"Flutter showmaterial banner Example": {
  "prefix": "flutter-show-material-banner",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaffoldMessengerState.showMaterialBanner].",
    "",
    "void main() => runApp(const ShowMaterialBannerExampleApp());",
    "",
    "class ShowMaterialBannerExampleApp extends StatelessWidget {",
    "  const ShowMaterialBannerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ScaffoldMessengerState Sample')),",
    "        body: const Center(",
    "          child: ShowMaterialBannerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ShowMaterialBannerExample extends StatelessWidget {",
    "  const ShowMaterialBannerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OutlinedButton(",
    "      onPressed: () {",
    "        ScaffoldMessenger.of(context).showMaterialBanner(",
    "          const MaterialBanner(",
    "            content: Text('This is a MaterialBanner'),",
    "            actions: <Widget>[",
    "              TextButton(",
    "                onPressed: null,",
    "                child: Text('DISMISS'),",
    "              ),",
    "            ],",
    "          ),",
    "        );",
    "      },",
    "      child: const Text('Show MaterialBanner'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showmaterial banner Example"
},
"Flutter showsnackbar banner Example": {
  "prefix": "flutter-showSnackBar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaffoldMessengerState.showSnackBar].",
    "",
    "void main() => runApp(const ShowSnackBarExampleApp());",
    "",
    "class ShowSnackBarExampleApp extends StatelessWidget {",
    "  const ShowSnackBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ScaffoldMessengerState Sample')),",
    "        body: const Center(",
    "          child: ShowSnackBarExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ShowSnackBarExample extends StatelessWidget {",
    "  const ShowSnackBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OutlinedButton(",
    "      onPressed: () {",
    "        ScaffoldMessenger.of(context).showSnackBar(",
    "          const SnackBar(",
    "            content: Text('A SnackBar has been shown.'),",
    "          ),",
    "        );",
    "      },",
    "      child: const Text('Show SnackBar'),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showsnackbar banner Example"
},
"Flutter show Bottom Sheet Example": {
  "prefix": "flutter-showBottomSheet",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaffoldState.showBottomSheet].",
    "",
    "void main() => runApp(const ShowBottomSheetExampleApp());",
    "",
    "class ShowBottomSheetExampleApp extends StatelessWidget {",
    "  const ShowBottomSheetExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ScaffoldState Sample')),",
    "        body: const ShowBottomSheetExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ShowBottomSheetExample extends StatelessWidget {",
    "  const ShowBottomSheetExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: ElevatedButton(",
    "        child: const Text('showBottomSheet'),",
    "        onPressed: () {",
    "          Scaffold.of(context).showBottomSheet<void>(",
    "            (BuildContext context) {",
    "              return Container(",
    "                height: 200,",
    "                color: Colors.amber,",
    "                child: Center(",
    "                  child: Column(",
    "                    mainAxisAlignment: MainAxisAlignment.center,",
    "                    mainAxisSize: MainAxisSize.min,",
    "                    children: <Widget>[",
    "                      const Text('BottomSheet'),",
    "                      ElevatedButton(",
    "                        child: const Text('Close BottomSheet'),",
    "                        onPressed: () {",
    "                          Navigator.pop(context);",
    "                        },",
    "                      ),",
    "                    ],",
    "                  ),",
    "                ),",
    "              );",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter show Bottom Sheet Example"
},
"Flutter drawer Example": {
  "prefix": "flutter-Drawer",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Scaffold.drawer].",
    "",
    "void main() => runApp(const DrawerExampleApp());",
    "",
    "class DrawerExampleApp extends StatelessWidget {",
    "  const DrawerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: DrawerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class DrawerExample extends StatefulWidget {",
    "  const DrawerExample({super.key});",
    "",
    "  @override",
    "  State<DrawerExample> createState() => _DrawerExampleState();",
    "}",
    "",
    "class _DrawerExampleState extends State<DrawerExample> {",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "",
    "  void _openDrawer() {",
    "    _scaffoldKey.currentState!.openDrawer();",
    "  }",
    "",
    "  void _closeDrawer() {",
    "    Navigator.of(context).pop();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      key: _scaffoldKey,",
    "      appBar: AppBar(title: const Text('Drawer Demo')),",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: _openDrawer,",
    "          child: const Text('Open Drawer'),",
    "        ),",
    "      ),",
    "      drawer: Drawer(",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text('This is the Drawer'),",
    "              ElevatedButton(",
    "                onPressed: _closeDrawer,",
    "                child: const Text('Close Drawer'),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "      // Disable opening the drawer with a swipe gesture.",
    "      drawerEnableOpenDragGesture: true,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter drawer Example"
},
"Flutter  End Drawer Example": {
  "prefix": "flutter-endDrawer",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Scaffold.endDrawer].",
    "",
    "void main() => runApp(const EndDrawerExampleApp());",
    "",
    "class EndDrawerExampleApp extends StatelessWidget {",
    "  const EndDrawerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: EndDrawerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class EndDrawerExample extends StatefulWidget {",
    "  const EndDrawerExample({super.key});",
    "",
    "  @override",
    "  State<EndDrawerExample> createState() => _EndDrawerExampleState();",
    "}",
    "",
    "class _EndDrawerExampleState extends State<EndDrawerExample> {",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "",
    "  void _openEndDrawer() {",
    "    _scaffoldKey.currentState!.openEndDrawer();",
    "  }",
    "",
    "  void _closeEndDrawer() {",
    "    Navigator.of(context).pop();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      key: _scaffoldKey,",
    "      appBar: AppBar(title: const Text('Drawer Demo')),",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: _openEndDrawer,",
    "          child: const Text('Open End Drawer'),",
    "        ),",
    "      ),",
    "      endDrawer: Drawer(",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text('This is the Drawer'),",
    "              ElevatedButton(",
    "                onPressed: _closeEndDrawer,",
    "                child: const Text('Close Drawer'),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "      // Disable opening the end drawer with a swipe gesture.",
    "      endDrawerEnableOpenDragGesture: false,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  End Drawer Example"
},
"Flutter  scrollbar Example": {
  "prefix": "flutter-Scrollbar",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Scrollbar].",
    "",
    "void main() => runApp(const ScrollbarExampleApp());",
    "",
    "class ScrollbarExampleApp extends StatelessWidget {",
    "  const ScrollbarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Scrollbar Sample')),",
    "        body: const ScrollbarExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ScrollbarExample extends StatefulWidget {",
    "  const ScrollbarExample({super.key});",
    "",
    "  @override",
    "  State<ScrollbarExample> createState() => _ScrollbarExampleState();",
    "}",
    "",
    "class _ScrollbarExampleState extends State<ScrollbarExample> {",
    "  final ScrollController _controllerOne = ScrollController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scrollbar(",
    "      controller: _controllerOne,",
    "      thumbVisibility: true,",
    "      child: GridView.builder(",
    "        controller: _controllerOne,",
    "        itemCount: 120,",
    "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return Center(",
    "            child: Text('item $index'),",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  scrollbar Example"
},
"Flutter Search Anchor  Example": {
  "prefix": "flutter-SearchAnchor",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SearchAnchor.bar].",
    "",
    "void main() => runApp(const SearchBarApp());",
    "",
    "class SearchBarApp extends StatefulWidget {",
    "  const SearchBarApp({super.key});",
    "",
    "  @override",
    "  State<SearchBarApp> createState() => _SearchBarAppState();",
    "}",
    "",
    "class _SearchBarAppState extends State<SearchBarApp> {",
    "  Color? selectedColorSeed;",
    "  List<ColorLabel> searchHistory = <ColorLabel>[];",
    "",
    "  Iterable<Widget> getHistoryList(SearchController controller) {",
    "    return searchHistory.map(",
    "      (ColorLabel color) => ListTile(",
    "        leading: const Icon(Icons.history),",
    "        title: Text(color.label),",
    "        trailing: IconButton(",
    "          icon: const Icon(Icons.call_missed),",
    "          onPressed: () {",
    "            controller.text = color.label;",
    "            controller.selection = TextSelection.collapsed(offset: controller.text.length);",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Iterable<Widget> getSuggestions(SearchController controller) {",
    "    final String input = controller.value.text;",
    "    return ColorLabel.values.where((ColorLabel color) => color.label.contains(input)).map(",
    "          (ColorLabel filteredColor) => ListTile(",
    "            leading: CircleAvatar(backgroundColor: filteredColor.color),",
    "            title: Text(filteredColor.label),",
    "            trailing: IconButton(",
    "              icon: const Icon(Icons.call_missed),",
    "              onPressed: () {",
    "                controller.text = filteredColor.label;",
    "                controller.selection = TextSelection.collapsed(offset: controller.text.length);",
    "              },",
    "            ),",
    "            onTap: () {",
    "              controller.closeView(filteredColor.label);",
    "              handleSelection(filteredColor);",
    "            },",
    "          ),",
    "        );",
    "  }",
    "",
    "  void handleSelection(ColorLabel selectedColor) {",
    "    setState(() {",
    "      selectedColorSeed = selectedColor.color;",
    "      if (searchHistory.length >= 5) {",
    "        searchHistory.removeLast();",
    "      }",
    "      searchHistory.insert(0, selectedColor);",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData themeData = ThemeData(useMaterial3: true, colorSchemeSeed: selectedColorSeed);",
    "    final ColorScheme colors = themeData.colorScheme;",
    "",
    "    return MaterialApp(",
    "      theme: themeData,",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Search Bar Sample')),",
    "        body: Align(",
    "          alignment: Alignment.topCenter,",
    "          child: Column(",
    "            children: <Widget>[",
    "              SearchAnchor.bar(",
    "                barHintText: 'Search colors',",
    "                suggestionsBuilder: (BuildContext context, SearchController controller) {",
    "                  if (controller.text.isEmpty) {",
    "                    if (searchHistory.isNotEmpty) {",
    "                      return getHistoryList(controller);",
    "                    }",
    "                    return <Widget>[Center(child: Text('No search history.', style: TextStyle(color: colors.outline)))];",
    "                  }",
    "                  return getSuggestions(controller);",
    "                },",
    "              ),",
    "              cardSize,",
    "              Card(color: colors.primary, child: cardSize),",
    "              Card(color: colors.onPrimary, child: cardSize),",
    "              Card(color: colors.primaryContainer, child: cardSize),",
    "              Card(color: colors.onPrimaryContainer, child: cardSize),",
    "              Card(color: colors.secondary, child: cardSize),",
    "              Card(color: colors.onSecondary, child: cardSize),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "SizedBox cardSize = const SizedBox(",
    "  width: 80,",
    "  height: 30,",
    ");",
    "",
    "enum ColorLabel {",
    "  red('red', Colors.red),",
    "  orange('orange', Colors.orange),",
    "  yellow('yellow', Colors.yellow),",
    "  green('green', Colors.green),",
    "  blue('blue', Colors.blue),",
    "  indigo('indigo', Colors.indigo),",
    "  violet('violet', Color(0xFF8F00FF)),",
    "  purple('purple', Colors.purple),",
    "  pink('pink', Colors.pink),",
    "  silver('silver', Color(0xFF808080)),",
    "  gold('gold', Color(0xFFFFD700)),",
    "  beige('beige', Color(0xFFF5F5DC)),",
    "  brown('brown', Colors.brown),",
    "  grey('grey', Colors.grey),",
    "  black('black', Colors.black),",
    "  white('white', Colors.white);",
    "",
    "  const ColorLabel(this.label, this.color);",
    "  final String label;",
    "  final Color color;",
    "}",
    ""
  ],
  "description": "Flutter Search Anchor  Example"
},
"Flutter Search Anchor with Debounce Example": {
  "prefix": "flutter-SearchAnchor-async",
"scope":"dart",
  "body": [
    "",
    "import 'dart:async';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SearchAnchor] that demonstrates fetching the",
    "/// suggestions asynchronously and debouncing the network calls.",
    "",
    "const Duration fakeAPIDuration = Duration(seconds: 1);",
    "const Duration debounceDuration = Duration(milliseconds: 500);",
    "",
    "void main() => runApp(const SearchAnchorAsyncExampleApp());",
    "",
    "class SearchAnchorAsyncExampleApp extends StatelessWidget {",
    "  const SearchAnchorAsyncExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('SearchAnchor - async and debouncing'),",
    "        ),",
    "        body: const Center(",
    "          child: _AsyncSearchAnchor(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _AsyncSearchAnchor extends StatefulWidget {",
    "  const _AsyncSearchAnchor();",
    "",
    "  @override",
    "  State<_AsyncSearchAnchor > createState() => _AsyncSearchAnchorState();",
    "}",
    "",
    "class _AsyncSearchAnchorState extends State<_AsyncSearchAnchor > {",
    "  // The query currently being searched for. If null, there is no pending",
    "  // request.",
    "  String? _currentQuery;",
    "",
    "  // The most recent suggestions received from the API.",
    "  late Iterable<Widget> _lastOptions = <Widget>[];",
    "",
    "  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;",
    "",
    "  // Calls the \"remote\" API to search with the given query. Returns null when",
    "  // the call has been made obsolete.",
    "  Future<Iterable<String>?> _search(String query) async {",
    "    _currentQuery = query;",
    "",
    "    // In a real application, there should be some error handling here.",
    "    final Iterable<String> options = await _FakeAPI.search(_currentQuery!);",
    "",
    "    // If another search happened after this one, throw away these options.",
    "    if (_currentQuery != query) {",
    "      return null;",
    "    }",
    "    _currentQuery = null;",
    "",
    "    return options;",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SearchAnchor(",
    "      builder: (BuildContext context, SearchController controller) {",
    "        return IconButton(",
    "          icon: const Icon(Icons.search),",
    "          onPressed: () {",
    "            controller.openView();",
    "          },",
    "        );",
    "      },",
    "      suggestionsBuilder: (BuildContext context, SearchController controller) async {",
    "        final List<String>? options = (await _debouncedSearch(controller.text))?.toList();",
    "        if (options == null) {",
    "          return _lastOptions;",
    "        }",
    "        _lastOptions = List<ListTile>.generate(options.length, (int index) {",
    "          final String item = options[index];",
    "          return ListTile(",
    "            title: Text(item),",
    "            onTap: () {",
    "              debugPrint('You just selected $item');",
    "            },",
    "          );",
    "        });",
    "",
    "        return _lastOptions;",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "// Mimics a remote API.",
    "class _FakeAPI {",
    "  static const List<String> _kOptions = <String>[",
    "    'aardvark',",
    "    'bobcat',",
    "    'chameleon',",
    "  ];",
    "",
    "  // Searches the options, but injects a fake \"network\" delay.",
    "  static Future<Iterable<String>> search(String query) async {",
    "    await Future<void>.delayed(fakeAPIDuration); // Fake 1 second delay.",
    "    if (query == '') {",
    "      return const Iterable<String>.empty();",
    "    }",
    "    return _kOptions.where((String option) {",
    "      return option.contains(query.toLowerCase());",
    "    });",
    "  }",
    "}",
    "",
    "typedef _Debounceable<S, T> = Future<S?> Function(T parameter);",
    "",
    "/// Returns a new function that is a debounced version of the given function.",
    "///",
    "/// This means that the original function will be called only after no calls",
    "/// have been made for the given Duration.",
    "_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {",
    "  _DebounceTimer? debounceTimer;",
    "",
    "  return (T parameter) async {",
    "    if (debounceTimer != null && !debounceTimer!.isCompleted) {",
    "      debounceTimer!.cancel();",
    "    }",
    "    debounceTimer = _DebounceTimer();",
    "    try {",
    "      await debounceTimer!.future;",
    "    } catch (error) {",
    "      if (error is _CancelException) {",
    "        return null;",
    "      }",
    "      rethrow;",
    "    }",
    "    return function(parameter);",
    "  };",
    "}",
    "",
    "// A wrapper around Timer used for debouncing.",
    "class _DebounceTimer {",
    "  _DebounceTimer() {",
    "    _timer = Timer(debounceDuration, _onComplete);",
    "  }",
    "",
    "  late final Timer _timer;",
    "  final Completer<void> _completer = Completer<void>();",
    "",
    "  void _onComplete() {",
    "    _completer.complete();",
    "  }",
    "",
    "  Future<void> get future => _completer.future;",
    "",
    "  bool get isCompleted => _completer.isCompleted;",
    "",
    "  void cancel() {",
    "    _timer.cancel();",
    "    _completer.completeError(const _CancelException());",
    "  }",
    "}",
    "",
    "// An exception indicating that the timer was canceled.",
    "class _CancelException implements Exception {",
    "  const _CancelException();",
    "}",
    ""
  ],
  "description": "Flutter Search Anchor with Debounce Example"
},
"Flutter Search bar Example": {
  "prefix": "flutter-SearchBar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SearchBar].",
    "",
    "void main() => runApp(const SearchBarApp());",
    "",
    "class SearchBarApp extends StatefulWidget {",
    "  const SearchBarApp({super.key});",
    "",
    "  @override",
    "  State<SearchBarApp> createState() => _SearchBarAppState();",
    "}",
    "",
    "class _SearchBarAppState extends State<SearchBarApp> {",
    "  bool isDark = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData themeData = ThemeData(useMaterial3: true, brightness: isDark ? Brightness.dark : Brightness.light);",
    "",
    "    return MaterialApp(",
    "      theme: themeData,",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Search Bar Sample')),",
    "        body: Padding(",
    "          padding: const EdgeInsets.all(8.0),",
    "          child: SearchAnchor(",
    "            builder: (BuildContext context, SearchController controller) {",
    "              return SearchBar(",
    "                controller: controller,",
    "                padding: const MaterialStatePropertyAll<EdgeInsets>(EdgeInsets.symmetric(horizontal: 16.0)),",
    "                onTap: () { controller.openView(); },",
    "                onChanged: (_) { controller.openView(); },",
    "                leading: const Icon(Icons.search),",
    "                trailing: <Widget>[",
    "                  Tooltip(",
    "                    message: 'Change brightness mode',",
    "                    child: IconButton(",
    "                      isSelected: isDark,",
    "                      onPressed: () {",
    "                        setState(() {",
    "                          isDark = !isDark;",
    "                        });",
    "                      },",
    "                      icon: const Icon(Icons.wb_sunny_outlined),",
    "                      selectedIcon: const Icon(Icons.brightness_2_outlined),",
    "                    ),",
    "                  )",
    "                ],",
    "              );",
    "            },",
    "            suggestionsBuilder: (BuildContext context, SearchController controller) {",
    "              return List<ListTile>.generate(5, (int index) {",
    "                final String item = 'item $index';",
    "                return ListTile(",
    "                  title: Text(item),",
    "                  onTap: () {",
    "                    setState(() {",
    "                      controller.closeView(item);",
    "                    });",
    "                  },",
    "                );",
    "              });",
    "            }),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Search bar Example"
},
"Flutter Segmented Button Example": {
  "prefix": "flutter-SegmentedButton",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SegmentedButton].",
    "",
    "void main() {",
    "  runApp(const SegmentedButtonApp());",
    "}",
    "",
    "class SegmentedButtonApp extends StatelessWidget {",
    "  const SegmentedButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const Scaffold(",
    "        body: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              Spacer(),",
    "              Text('Single choice'),",
    "              SingleChoice(),",
    "              SizedBox(height: 20),",
    "              Text('Multiple choice'),",
    "              MultipleChoice(),",
    "              Spacer(),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "enum Calendar { day, week, month, year }",
    "",
    "class SingleChoice extends StatefulWidget {",
    "  const SingleChoice({super.key});",
    "",
    "  @override",
    "  State<SingleChoice> createState() => _SingleChoiceState();",
    "}",
    "",
    "class _SingleChoiceState extends State<SingleChoice> {",
    "  Calendar calendarView = Calendar.day;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SegmentedButton<Calendar>(",
    "      segments: const <ButtonSegment<Calendar>>[",
    "        ButtonSegment<Calendar>(value: Calendar.day, label: Text('Day'), icon: Icon(Icons.calendar_view_day)),",
    "        ButtonSegment<Calendar>(value: Calendar.week, label: Text('Week'), icon: Icon(Icons.calendar_view_week)),",
    "        ButtonSegment<Calendar>(value: Calendar.month, label: Text('Month'), icon: Icon(Icons.calendar_view_month)),",
    "        ButtonSegment<Calendar>(value: Calendar.year, label: Text('Year'), icon: Icon(Icons.calendar_today)),",
    "      ],",
    "      selected: <Calendar>{calendarView},",
    "      onSelectionChanged: (Set<Calendar> newSelection) {",
    "        setState(() {",
    "          // By default there is only a single segment that can be",
    "          // selected at one time, so its value is always the first",
    "          // item in the selected set.",
    "          calendarView = newSelection.first;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "enum Sizes { extraSmall, small, medium, large, extraLarge }",
    "",
    "class MultipleChoice extends StatefulWidget {",
    "  const MultipleChoice({super.key});",
    "",
    "  @override",
    "  State<MultipleChoice> createState() => _MultipleChoiceState();",
    "}",
    "",
    "class _MultipleChoiceState extends State<MultipleChoice> {",
    "  Set<Sizes> selection = <Sizes>{Sizes.large, Sizes.extraLarge};",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SegmentedButton<Sizes>(",
    "      segments: const <ButtonSegment<Sizes>>[",
    "        ButtonSegment<Sizes>(value: Sizes.extraSmall, label: Text('XS')),",
    "        ButtonSegment<Sizes>(value: Sizes.small, label: Text('S')),",
    "        ButtonSegment<Sizes>(value: Sizes.medium, label: Text('M')),",
    "        ButtonSegment<Sizes>(",
    "          value: Sizes.large,",
    "          label: Text('L'),",
    "        ),",
    "        ButtonSegment<Sizes>(value: Sizes.extraLarge, label: Text('XL')),",
    "      ],",
    "      selected: selection,",
    "      onSelectionChanged: (Set<Sizes> newSelection) {",
    "        setState(() {",
    "          selection = newSelection;",
    "        });",
    "      },",
    "      multiSelectionEnabled: true,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Segmented Button Example"
},
"Flutter Selectable Region Example": {
  "prefix": "flutter-SelectableRegion",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/rendering.dart';",
    "",
    "/// Flutter code sample for [SelectableRegion].",
    "",
    "void main() => runApp(const SelectableRegionExampleApp());",
    "",
    "class SelectableRegionExampleApp extends StatelessWidget {",
    "  const SelectableRegionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: SelectionArea(",
    "        child: Scaffold(",
    "          appBar: AppBar(title: const Text('SelectableRegion Sample')),",
    "          body: const Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Select this icon', style: TextStyle(fontSize: 30)),",
    "                SizedBox(height: 10),",
    "                MySelectableAdapter(child: Icon(Icons.key, size: 30)),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MySelectableAdapter extends StatelessWidget {",
    "  const MySelectableAdapter({super.key, required this.child});",
    "",
    "  final Widget child;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final SelectionRegistrar? registrar = SelectionContainer.maybeOf(context);",
    "    if (registrar == null) {",
    "      return child;",
    "    }",
    "    return MouseRegion(",
    "      cursor: SystemMouseCursors.text,",
    "      child: _SelectableAdapter(",
    "        registrar: registrar,",
    "        child: child,",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _SelectableAdapter extends SingleChildRenderObjectWidget {",
    "  const _SelectableAdapter({",
    "    required this.registrar,",
    "    required Widget child,",
    "  }) : super(child: child);",
    "",
    "  final SelectionRegistrar registrar;",
    "",
    "  @override",
    "  _RenderSelectableAdapter createRenderObject(BuildContext context) {",
    "    return _RenderSelectableAdapter(",
    "      DefaultSelectionStyle.of(context).selectionColor!,",
    "      registrar,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void updateRenderObject(BuildContext context, _RenderSelectableAdapter renderObject) {",
    "    renderObject",
    "      ..selectionColor = DefaultSelectionStyle.of(context).selectionColor!",
    "      ..registrar = registrar;",
    "  }",
    "}",
    "",
    "class _RenderSelectableAdapter extends RenderProxyBox with Selectable, SelectionRegistrant {",
    "  _RenderSelectableAdapter(",
    "    Color selectionColor,",
    "    SelectionRegistrar registrar,",
    "  )   : _selectionColor = selectionColor,",
    "        _geometry = ValueNotifier<SelectionGeometry>(_noSelection) {",
    "    this.registrar = registrar;",
    "    _geometry.addListener(markNeedsPaint);",
    "  }",
    "",
    "  static const SelectionGeometry _noSelection = SelectionGeometry(status: SelectionStatus.none, hasContent: true);",
    "  final ValueNotifier<SelectionGeometry> _geometry;",
    "",
    "  Color get selectionColor => _selectionColor;",
    "  late Color _selectionColor;",
    "  set selectionColor(Color value) {",
    "    if (_selectionColor == value) {",
    "      return;",
    "    }",
    "    _selectionColor = value;",
    "    markNeedsPaint();",
    "  }",
    "",
    "  // ValueListenable APIs",
    "",
    "  @override",
    "  void addListener(VoidCallback listener) => _geometry.addListener(listener);",
    "",
    "  @override",
    "  void removeListener(VoidCallback listener) => _geometry.removeListener(listener);",
    "",
    "  @override",
    "  SelectionGeometry get value => _geometry.value;",
    "",
    "  // Selectable APIs.",
    "",
    "  // Adjust this value to enlarge or shrink the selection highlight.",
    "  static const double _padding = 10.0;",
    "  Rect _getSelectionHighlightRect() {",
    "    return Rect.fromLTWH(0 - _padding, 0 - _padding, size.width + _padding * 2, size.height + _padding * 2);",
    "  }",
    "",
    "  Offset? _start;",
    "  Offset? _end;",
    "  void _updateGeometry() {",
    "    if (_start == null || _end == null) {",
    "      _geometry.value = _noSelection;",
    "      return;",
    "    }",
    "    final Rect renderObjectRect = Rect.fromLTWH(0, 0, size.width, size.height);",
    "    final Rect selectionRect = Rect.fromPoints(_start!, _end!);",
    "    if (renderObjectRect.intersect(selectionRect).isEmpty) {",
    "      _geometry.value = _noSelection;",
    "    } else {",
    "      final Rect selectionRect = _getSelectionHighlightRect();",
    "      final SelectionPoint firstSelectionPoint = SelectionPoint(",
    "        localPosition: selectionRect.bottomLeft,",
    "        lineHeight: selectionRect.size.height,",
    "        handleType: TextSelectionHandleType.left,",
    "      );",
    "      final SelectionPoint secondSelectionPoint = SelectionPoint(",
    "        localPosition: selectionRect.bottomRight,",
    "        lineHeight: selectionRect.size.height,",
    "        handleType: TextSelectionHandleType.right,",
    "      );",
    "      final bool isReversed;",
    "      if (_start!.dy > _end!.dy) {",
    "        isReversed = true;",
    "      } else if (_start!.dy < _end!.dy) {",
    "        isReversed = false;",
    "      } else {",
    "        isReversed = _start!.dx > _end!.dx;",
    "      }",
    "      _geometry.value = SelectionGeometry(",
    "        status: SelectionStatus.uncollapsed,",
    "        hasContent: true,",
    "        startSelectionPoint: isReversed ? secondSelectionPoint : firstSelectionPoint,",
    "        endSelectionPoint: isReversed ? firstSelectionPoint : secondSelectionPoint,",
    "        selectionRects: <Rect>[selectionRect],",
    "      );",
    "    }",
    "  }",
    "",
    "  @override",
    "  SelectionResult dispatchSelectionEvent(SelectionEvent event) {",
    "    SelectionResult result = SelectionResult.none;",
    "    switch (event.type) {",
    "      case SelectionEventType.startEdgeUpdate:",
    "      case SelectionEventType.endEdgeUpdate:",
    "        final Rect renderObjectRect = Rect.fromLTWH(0, 0, size.width, size.height);",
    "        // Normalize offset in case it is out side of the rect.",
    "        final Offset point = globalToLocal((event as SelectionEdgeUpdateEvent).globalPosition);",
    "        final Offset adjustedPoint = SelectionUtils.adjustDragOffset(renderObjectRect, point);",
    "        if (event.type == SelectionEventType.startEdgeUpdate) {",
    "          _start = adjustedPoint;",
    "        } else {",
    "          _end = adjustedPoint;",
    "        }",
    "        result = SelectionUtils.getResultBasedOnRect(renderObjectRect, point);",
    "      case SelectionEventType.clear:",
    "        _start = _end = null;",
    "      case SelectionEventType.selectAll:",
    "      case SelectionEventType.selectWord:",
    "        _start = Offset.zero;",
    "        _end = Offset.infinite;",
    "      case SelectionEventType.granularlyExtendSelection:",
    "        result = SelectionResult.end;",
    "        final GranularlyExtendSelectionEvent extendSelectionEvent = event as GranularlyExtendSelectionEvent;",
    "        // Initialize the offset it there is no ongoing selection.",
    "        if (_start == null || _end == null) {",
    "          if (extendSelectionEvent.forward) {",
    "            _start = _end = Offset.zero;",
    "          } else {",
    "            _start = _end = Offset.infinite;",
    "          }",
    "        }",
    "        // Move the corresponding selection edge.",
    "        final Offset newOffset = extendSelectionEvent.forward ? Offset.infinite : Offset.zero;",
    "        if (extendSelectionEvent.isEnd) {",
    "          if (newOffset == _end) {",
    "            result = extendSelectionEvent.forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _end = newOffset;",
    "        } else {",
    "          if (newOffset == _start) {",
    "            result = extendSelectionEvent.forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _start = newOffset;",
    "        }",
    "      case SelectionEventType.directionallyExtendSelection:",
    "        result = SelectionResult.end;",
    "        final DirectionallyExtendSelectionEvent extendSelectionEvent = event as DirectionallyExtendSelectionEvent;",
    "        // Convert to local coordinates.",
    "        final double horizontalBaseLine = globalToLocal(Offset(event.dx, 0)).dx;",
    "        final Offset newOffset;",
    "        final bool forward;",
    "        switch (extendSelectionEvent.direction) {",
    "          case SelectionExtendDirection.backward:",
    "          case SelectionExtendDirection.previousLine:",
    "            forward = false;",
    "            // Initialize the offset it there is no ongoing selection.",
    "            if (_start == null || _end == null) {",
    "              _start = _end = Offset.infinite;",
    "            }",
    "            // Move the corresponding selection edge.",
    "            if (extendSelectionEvent.direction == SelectionExtendDirection.previousLine || horizontalBaseLine < 0) {",
    "              newOffset = Offset.zero;",
    "            } else {",
    "              newOffset = Offset.infinite;",
    "            }",
    "          case SelectionExtendDirection.nextLine:",
    "          case SelectionExtendDirection.forward:",
    "            forward = true;",
    "            // Initialize the offset it there is no ongoing selection.",
    "            if (_start == null || _end == null) {",
    "              _start = _end = Offset.zero;",
    "            }",
    "            // Move the corresponding selection edge.",
    "            if (extendSelectionEvent.direction == SelectionExtendDirection.nextLine ||",
    "                horizontalBaseLine > size.width) {",
    "              newOffset = Offset.infinite;",
    "            } else {",
    "              newOffset = Offset.zero;",
    "            }",
    "        }",
    "        if (extendSelectionEvent.isEnd) {",
    "          if (newOffset == _end) {",
    "            result = forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _end = newOffset;",
    "        } else {",
    "          if (newOffset == _start) {",
    "            result = forward ? SelectionResult.next : SelectionResult.previous;",
    "          }",
    "          _start = newOffset;",
    "        }",
    "    }",
    "    _updateGeometry();",
    "    return result;",
    "  }",
    "",
    "  // This method is called when users want to copy selected content in this",
    "  // widget into clipboard.",
    "  @override",
    "  SelectedContent? getSelectedContent() {",
    "    return value.hasSelection ? const SelectedContent(plainText: 'Custom Text') : null;",
    "  }",
    "",
    "  LayerLink? _startHandle;",
    "  LayerLink? _endHandle;",
    "",
    "  @override",
    "  void pushHandleLayers(LayerLink? startHandle, LayerLink? endHandle) {",
    "    if (_startHandle == startHandle && _endHandle == endHandle) {",
    "      return;",
    "    }",
    "    _startHandle = startHandle;",
    "    _endHandle = endHandle;",
    "    markNeedsPaint();",
    "  }",
    "",
    "  @override",
    "  void paint(PaintingContext context, Offset offset) {",
    "    super.paint(context, offset);",
    "    if (!_geometry.value.hasSelection) {",
    "      return;",
    "    }",
    "    // Draw the selection highlight.",
    "    final Paint selectionPaint = Paint()",
    "      ..style = PaintingStyle.fill",
    "      ..color = _selectionColor;",
    "    context.canvas.drawRect(_getSelectionHighlightRect().shift(offset), selectionPaint);",
    "",
    "    // Push the layer links if any.",
    "    if (_startHandle != null) {",
    "      context.pushLayer(",
    "        LeaderLayer(",
    "          link: _startHandle!,",
    "          offset: offset + value.startSelectionPoint!.localPosition,",
    "        ),",
    "        (PaintingContext context, Offset offset) {},",
    "        Offset.zero,",
    "      );",
    "    }",
    "    if (_endHandle != null) {",
    "      context.pushLayer(",
    "        LeaderLayer(",
    "          link: _endHandle!,",
    "          offset: offset + value.endSelectionPoint!.localPosition,",
    "        ),",
    "        (PaintingContext context, Offset offset) {},",
    "        Offset.zero,",
    "      );",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _geometry.dispose();",
    "    super.dispose();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Region Example"
},
"Flutter Selectable Area Example": {
  "prefix": "flutter-SelectionArea",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SelectionArea].",
    "",
    "void main() => runApp(const SelectionAreaExampleApp());",
    "",
    "class SelectionAreaExampleApp extends StatelessWidget {",
    "  const SelectionAreaExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: SelectionArea(",
    "        child: Scaffold(",
    "          appBar: AppBar(title: const Text('SelectionArea Sample')),",
    "          body: const Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Row 1'),",
    "                Text('Row 2'),",
    "                Text('Row 3'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Area Example"
},"Flutter Selectable Area Example": {
  "prefix": "flutter-selectable-area",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SelectionArea].",
    "",
    "void main() => runApp(const SelectionAreaExampleApp());",
    "",
    "class SelectionAreaExampleApp extends StatelessWidget {",
    "  const SelectionAreaExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: SelectionArea(",
    "        child: Scaffold(",
    "          appBar: AppBar(title: const Text('SelectionArea Sample')),",
    "          body: const Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Row 1'),",
    "                Text('Row 2'),",
    "                Text('Row 3'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Area Example"
},
"Flutter Selectable Conntainer": {
  "prefix": "flutter-selectable-container",
  "scope":"dart",
  "body": [
    "",
    "// Flutter example for [SelectionContainer.disabled].",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SelectionContainerDisabledExampleApp());",
    "",
    "class SelectionContainerDisabledExampleApp extends StatelessWidget {",
    "  const SelectionContainerDisabledExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SelectionContainer.disabled Sample')),",
    "        body: const Center(",
    "          child: SelectionArea(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Selectable text'),",
    "                SelectionContainer.disabled(child: Text('Non-selectable text')),",
    "                Text('Selectable text'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Conntainer"
},
"Flutter Selectable Conntainer": {
  "prefix": "flutter-SelectionContainer",
  "scope":"dart",
  "body": [
    "",
    "// Flutter example for [SelectionContainer.disabled].",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SelectionContainerDisabledExampleApp());",
    "",
    "class SelectionContainerDisabledExampleApp extends StatelessWidget {",
    "  const SelectionContainerDisabledExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SelectionContainer.disabled Sample')),",
    "        body: const Center(",
    "          child: SelectionArea(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Selectable text'),",
    "                SelectionContainer.disabled(child: Text('Non-selectable text')),",
    "                Text('Selectable text'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Selectable Conntainer"
},
"Flutter Slider": {
  "prefix": "flutter-Slider",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Slider].",
    "",
    "void main() => runApp(const SliderApp());",
    "",
    "class SliderApp extends StatelessWidget {",
    "  const SliderApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        colorSchemeSeed: const Color(0xff6750a4),",
    "        useMaterial3: true,",
    "      ),",
    "      home: const SliderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SliderExample extends StatefulWidget {",
    "  const SliderExample({super.key});",
    "",
    "  @override",
    "  State<SliderExample> createState() => _SliderExampleState();",
    "}",
    "",
    "class _SliderExampleState extends State<SliderExample> {",
    "  double _currentSliderValue = 20;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Slider')),",
    "      body: Slider(",
    "        value: _currentSliderValue,",
    "        max: 100,",
    "        divisions: 5,",
    "        label: _currentSliderValue.round().toString(),",
    "        onChanged: (double value) {",
    "          setState(() {",
    "            _currentSliderValue = value;",
    "          });",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Slider"
},
"Flutter Snackbar Example": {
  "prefix": "flutter-SnackBar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SnackBar].",
    "",
    "void main() => runApp(const SnackBarExampleApp());",
    "",
    "class SnackBarExampleApp extends StatelessWidget {",
    "  const SnackBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SnackBar Sample')),",
    "        body: const Center(",
    "          child: SnackBarExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SnackBarExample extends StatelessWidget {",
    "  const SnackBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ElevatedButton(",
    "      child: const Text('Show Snackbar'),",
    "      onPressed: () {",
    "        ScaffoldMessenger.of(context).showSnackBar(",
    "          SnackBar(",
    "            action: SnackBarAction(",
    "              label: 'Action',",
    "              onPressed: () {",
    "                // Code to execute.",
    "              },",
    "            ),",
    "            content: const Text('Awesome SnackBar!'),",
    "            duration: const Duration(milliseconds: 1500),",
    "            width: 280.0, // Width of the SnackBar.",
    "            padding: const EdgeInsets.symmetric(",
    "              horizontal: 8.0, // Inner padding for SnackBar content.",
    "            ),",
    "            behavior: SnackBarBehavior.floating,",
    "            shape: RoundedRectangleBorder(",
    "              borderRadius: BorderRadius.circular(10.0),",
    "            ),",
    "          ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Snackbar Example"
},
"Flutter Stepper Example": {
  "prefix": "flutter-Stepper",
  "scope":"dart"
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Stepper].",
    "",
    "void main() => runApp(const StepperExampleApp());",
    "",
    "class StepperExampleApp extends StatelessWidget {",
    "  const StepperExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Stepper Sample')),",
    "        body: const Center(",
    "          child: StepperExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class StepperExample extends StatefulWidget {",
    "  const StepperExample({super.key});",
    "",
    "  @override",
    "  State<StepperExample> createState() => _StepperExampleState();",
    "}",
    "",
    "class _StepperExampleState extends State<StepperExample> {",
    "  int _index = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Stepper(",
    "      currentStep: _index,",
    "      onStepCancel: () {",
    "        if (_index > 0) {",
    "          setState(() {",
    "            _index -= 1;",
    "          });",
    "        }",
    "      },",
    "      onStepContinue: () {",
    "        if (_index <= 0) {",
    "          setState(() {",
    "            _index += 1;",
    "          });",
    "        }",
    "      },",
    "      onStepTapped: (int index) {",
    "        setState(() {",
    "          _index = index;",
    "        });",
    "      },",
    "      steps: <Step>[",
    "        Step(",
    "          title: const Text('Step 1 title'),",
    "          content: Container(",
    "            alignment: Alignment.centerLeft,",
    "            child: const Text('Content for Step 1'),",
    "          ),",
    "        ),",
    "        const Step(",
    "          title: Text('Step 2 title'),",
    "          content: Text('Content for Step 2'),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Stepper Example"
},
"Flutter Switch Example": {
  "prefix": "flutter-Switch",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Switch].",
    "",
    "void main() => runApp(const SwitchApp());",
    "",
    "class SwitchApp extends StatelessWidget {",
    "  const SwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Switch Sample')),",
    "        body: const Center(",
    "          child: SwitchExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SwitchExample extends StatefulWidget {",
    "  const SwitchExample({super.key});",
    "",
    "  @override",
    "  State<SwitchExample> createState() => _SwitchExampleState();",
    "}",
    "",
    "class _SwitchExampleState extends State<SwitchExample> {",
    "  bool light = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Switch(",
    "      // This bool value toggles the switch.",
    "      value: light,",
    "      activeColor: Colors.red,",
    "      onChanged: (bool value) {",
    "        // This is called when the user toggles the switch.",
    "        setState(() {",
    "          light = value;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Switch Example"
},
"Flutter Switch Example": {
  "prefix": "flutter-Switch Adaptive",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Switch].",
    "",
    "void main() => runApp(const SwitchApp());",
    "",
    "class SwitchApp extends StatelessWidget {",
    "  const SwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData.light(useMaterial3: true).copyWith(",
    "        // Use the ambient [CupetinoThemeData] to style all widgets which would",
    "        // otherwise use iOS defaults.",
    "        cupertinoOverrideTheme: const CupertinoThemeData(applyThemeToAll: true),",
    "      ),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Switch Sample')),",
    "        body: const Center(",
    "          child: SwitchExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SwitchExample extends StatefulWidget {",
    "  const SwitchExample({super.key});",
    "",
    "  @override",
    "  State<SwitchExample> createState() => _SwitchExampleState();",
    "}",
    "",
    "class _SwitchExampleState extends State<SwitchExample> {",
    "  bool light = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        Switch.adaptive(",
    "          value: light,",
    "          onChanged: (bool value) {",
    "            setState(() {",
    "              light = value;",
    "            });",
    "          },",
    "        ),",
    "        Switch.adaptive(",
    "          // Don't use the ambient [CupetinoThemeData] to style this switch.",
    "          applyCupertinoTheme: false,",
    "          value: light,",
    "          onChanged: (bool value) {",
    "            setState(() {",
    "              light = value;",
    "            });",
    "          },",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Switch Example"
},
"Flutter Switch List Tile Example": {
  "prefix": "flutter-SwitchListTile",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SwitchListTile].",
    "",
    "void main() => runApp(const SwitchListTileApp());",
    "",
    "class SwitchListTileApp extends StatelessWidget {",
    "  const SwitchListTileApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(appBar: AppBar(title: const Text('SwitchListTile Sample')), body: const SwitchListTileExample()),",
    "    );",
    "  }",
    "}",
    "",
    "class SwitchListTileExample extends StatefulWidget {",
    "  const SwitchListTileExample({super.key});",
    "",
    "  @override",
    "  State<SwitchListTileExample> createState() => _SwitchListTileExampleState();",
    "}",
    "",
    "class _SwitchListTileExampleState extends State<SwitchListTileExample> {",
    "  bool switchValue1 = true;",
    "  bool switchValue2 = true;",
    "  bool switchValue3 = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Column(",
    "        children: <Widget>[",
    "          SwitchListTile(",
    "            value: switchValue1,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                switchValue1 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text('Supporting text'),",
    "          ),",
    "          const Divider(height: 0),",
    "          SwitchListTile(",
    "            value: switchValue2,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                switchValue2 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text(",
    "                'Longer supporting text to demonstrate how the text wraps and the switch is centered vertically with the text.'),",
    "          ),",
    "          const Divider(height: 0),",
    "          SwitchListTile(",
    "            value: switchValue3,",
    "            onChanged: (bool? value) {",
    "              setState(() {",
    "                switchValue3 = value!;",
    "              });",
    "            },",
    "            title: const Text('Headline'),",
    "            subtitle: const Text(",
    "                \"Longer supporting text to demonstrate how the text wraps and how setting 'SwitchListTile.isThreeLine = true' aligns the switch to the top vertically with the text.\"),",
    "            isThreeLine: true,",
    "          ),",
    "          const Divider(height: 0),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Switch List Tile Example"
},
"Flutter  Custom Switch List Tile Example": {
  "prefix": "flutter-custom-SwitchListTile",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom labeled switch.",
    "",
    "void main() => runApp(const LabeledSwitchApp());",
    "",
    "class LabeledSwitchApp extends StatelessWidget {",
    "  const LabeledSwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Custom Labeled Switch Sample')),",
    "        body: const Center(",
    "          child: LabeledSwitchExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledSwitch extends StatelessWidget {",
    "  const LabeledSwitch({",
    "    super.key,",
    "    required this.label,",
    "    required this.padding,",
    "    required this.value,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final String label;",
    "  final EdgeInsets padding;",
    "  final bool value;",
    "  final ValueChanged<bool> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return InkWell(",
    "      onTap: () {",
    "        onChanged(!value);",
    "      },",
    "      child: Padding(",
    "        padding: padding,",
    "        child: Row(",
    "          children: <Widget>[",
    "            Expanded(child: Text(label)),",
    "            Switch(",
    "              value: value,",
    "              onChanged: (bool newValue) {",
    "                onChanged(newValue);",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledSwitchExample extends StatefulWidget {",
    "  const LabeledSwitchExample({super.key});",
    "",
    "  @override",
    "  State<LabeledSwitchExample> createState() => _LabeledSwitchExampleState();",
    "}",
    "",
    "class _LabeledSwitchExampleState extends State<LabeledSwitchExample> {",
    "  bool _isSelected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return LabeledSwitch(",
    "      label: 'This is the label text',",
    "      padding: const EdgeInsets.symmetric(horizontal: 20.0),",
    "      value: _isSelected,",
    "      onChanged: (bool newValue) {",
    "        setState(() {",
    "          _isSelected = newValue;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Custom Switch List Tile Example"
},"Flutter  Custom Switch List Tile Example": {
  "prefix": "flutter-custom-switchlisttile",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for custom labeled switch.",
    "",
    "void main() => runApp(const LabeledSwitchApp());",
    "",
    "class LabeledSwitchApp extends StatelessWidget {",
    "  const LabeledSwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Custom Labeled Switch Sample')),",
    "        body: const Center(",
    "          child: LabeledSwitchExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledSwitch extends StatelessWidget {",
    "  const LabeledSwitch({",
    "    super.key,",
    "    required this.label,",
    "    required this.padding,",
    "    required this.value,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final String label;",
    "  final EdgeInsets padding;",
    "  final bool value;",
    "  final ValueChanged<bool> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return InkWell(",
    "      onTap: () {",
    "        onChanged(!value);",
    "      },",
    "      child: Padding(",
    "        padding: padding,",
    "        child: Row(",
    "          children: <Widget>[",
    "            Expanded(child: Text(label)),",
    "            Switch(",
    "              value: value,",
    "              onChanged: (bool newValue) {",
    "                onChanged(newValue);",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class LabeledSwitchExample extends StatefulWidget {",
    "  const LabeledSwitchExample({super.key});",
    "",
    "  @override",
    "  State<LabeledSwitchExample> createState() => _LabeledSwitchExampleState();",
    "}",
    "",
    "class _LabeledSwitchExampleState extends State<LabeledSwitchExample> {",
    "  bool _isSelected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return LabeledSwitch(",
    "      label: 'This is the label text',",
    "      padding: const EdgeInsets.symmetric(horizontal: 20.0),",
    "      value: _isSelected,",
    "      onChanged: (bool newValue) {",
    "        setState(() {",
    "          _isSelected = newValue;",
    "        });",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Custom Switch List Tile Example"
},
"Flutter  TabController Example": {
  "prefix": "flutter-TabController",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TabController].",
    "",
    "void main() => runApp(const TabControllerExampleApp());",
    "",
    "class TabControllerExampleApp extends StatelessWidget {",
    "  const TabControllerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TabControllerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "const List<Tab> tabs = <Tab>[",
    "  Tab(text: 'Zeroth'),",
    "  Tab(text: 'First'),",
    "  Tab(text: 'Second'),",
    "];",
    "",
    "class TabControllerExample extends StatelessWidget {",
    "  const TabControllerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTabController(",
    "      length: tabs.length,",
    "      // The Builder widget is used to have a different BuildContext to access",
    "      // closest DefaultTabController.",
    "      child: Builder(builder: (BuildContext context) {",
    "        final TabController tabController = DefaultTabController.of(context);",
    "        tabController.addListener(() {",
    "          if (!tabController.indexIsChanging) {",
    "            // Your code goes here.",
    "            // To get index of current tab use tabController.index",
    "          }",
    "        });",
    "        return Scaffold(",
    "          appBar: AppBar(",
    "            bottom: const TabBar(",
    "              tabs: tabs,",
    "            ),",
    "          ),",
    "          body: TabBarView(",
    "            children: tabs.map((Tab tab) {",
    "              return Center(",
    "                child: Text(",
    "                  '${tab.text!} Tab',",
    "                  style: Theme.of(context).textTheme.headlineSmall,",
    "                ),",
    "              );",
    "            }).toList(),",
    "          ),",
    "        );",
    "      }),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  TabController Example"
},
"Flutter  Tab bar Example": {
  "prefix": "flutter-TabBar",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TabBar].",
    "",
    "void main() => runApp(const TabBarApp());",
    "",
    "class TabBarApp extends StatelessWidget {",
    "  const TabBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const TabBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TabBarExample extends StatefulWidget {",
    "  const TabBarExample({super.key});",
    "",
    "  @override",
    "  State<TabBarExample> createState() => _TabBarExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _TabBarExampleState extends State<TabBarExample> with TickerProviderStateMixin {",
    "  late final TabController _tabController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _tabController = TabController(length: 3, vsync: this);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _tabController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('TabBar Sample'),",
    "        bottom: TabBar(",
    "          controller: _tabController,",
    "          tabs: const <Widget>[",
    "            Tab(",
    "              icon: Icon(Icons.cloud_outlined),",
    "            ),",
    "            Tab(",
    "              icon: Icon(Icons.beach_access_sharp),",
    "            ),",
    "            Tab(",
    "              icon: Icon(Icons.brightness_5_sharp),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      body: TabBarView(",
    "        controller: _tabController,",
    "        children: const <Widget>[",
    "          Center(",
    "            child: Text(\"It's cloudy here\"),",
    "          ),",
    "          Center(",
    "            child: Text(\"It's rainy here\"),",
    "          ),",
    "          Center(",
    "            child: Text(\"It's sunny here\"),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  TabController Example"
},
"Flutter  Tab Bar primary  Example": {
  "prefix": "flutter-TabBar primary secodary",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TabBar].",
    "",
    "void main() => runApp(const TabBarApp());",
    "",
    "class TabBarApp extends StatelessWidget {",
    "  const TabBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const TabBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TabBarExample extends StatelessWidget {",
    "  const TabBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTabController(",
    "      initialIndex: 1,",
    "      length: 3,",
    "      child: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Primary and secondary TabBar'),",
    "          bottom: const TabBar(",
    "            dividerColor: Colors.transparent,",
    "            tabs: <Widget>[",
    "              Tab(",
    "                text: 'Flights',",
    "                icon: Icon(Icons.flight),",
    "              ),",
    "              Tab(",
    "                text: 'Trips',",
    "                icon: Icon(Icons.luggage),",
    "              ),",
    "              Tab(",
    "                text: 'Explore',",
    "                icon: Icon(Icons.explore),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "        body: const TabBarView(",
    "          children: <Widget>[",
    "            NestedTabBar('Flights'),",
    "            NestedTabBar('Trips'),",
    "            NestedTabBar('Explore'),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class NestedTabBar extends StatefulWidget {",
    "  const NestedTabBar(this.outerTab, {super.key});",
    "",
    "  final String outerTab;",
    "",
    "  @override",
    "  State<NestedTabBar> createState() => _NestedTabBarState();",
    "}",
    "",
    "class _NestedTabBarState extends State<NestedTabBar> with TickerProviderStateMixin {",
    "  late final TabController _tabController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _tabController = TabController(length: 2, vsync: this);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _tabController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        TabBar.secondary(",
    "          controller: _tabController,",
    "          tabs: const <Widget>[",
    "            Tab(text: 'Overview'),",
    "            Tab(text: 'Specifications'),",
    "          ],",
    "        ),",
    "        Expanded(",
    "          child: TabBarView(",
    "            controller: _tabController,",
    "            children: <Widget>[",
    "              Card(",
    "                margin: const EdgeInsets.all(16.0),",
    "                child: Center(child: Text('${widget.outerTab}: Overview tab')),",
    "              ),",
    "              Card(",
    "                margin: const EdgeInsets.all(16.0),",
    "                child: Center(child: Text('${widget.outerTab}: Specifications tab')),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Tab Bar primary  Example"
},
"Flutter  Text button  Example": {
  "prefix": "flutter-TextButton",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TextButton].",
    "",
    "void main() => runApp(const TextButtonExampleApp());",
    "",
    "class TextButtonExampleApp extends StatelessWidget {",
    "  const TextButtonExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('TextButton Sample')),",
    "        body: const TextButtonExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TextButtonExample extends StatelessWidget {",
    "  const TextButtonExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisSize: MainAxisSize.min,",
    "        children: <Widget>[",
    "          TextButton(",
    "            style: TextButton.styleFrom(",
    "              textStyle: const TextStyle(fontSize: 20),",
    "            ),",
    "            onPressed: null,",
    "            child: const Text('Disabled'),",
    "          ),",
    "          const SizedBox(height: 30),",
    "          TextButton(",
    "            style: TextButton.styleFrom(",
    "              textStyle: const TextStyle(fontSize: 20),",
    "            ),",
    "            onPressed: () {},",
    "            child: const Text('Enabled'),",
    "          ),",
    "          const SizedBox(height: 30),",
    "          ClipRRect(",
    "            borderRadius: BorderRadius.circular(4),",
    "            child: Stack(",
    "              children: <Widget>[",
    "                Positioned.fill(",
    "                  child: Container(",
    "                    decoration: const BoxDecoration(",
    "                      gradient: LinearGradient(",
    "                        colors: <Color>[",
    "                          Color(0xFF0D47A1),",
    "                          Color(0xFF1976D2),",
    "                          Color(0xFF42A5F5),",
    "                        ],",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ),",
    "                TextButton(",
    "                  style: TextButton.styleFrom(",
    "                    foregroundColor: Colors.white,",
    "                    padding: const EdgeInsets.all(16.0),",
    "                    textStyle: const TextStyle(fontSize: 20),",
    "                  ),",
    "                  onPressed: () {},",
    "                  child: const Text('Gradient'),",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Text button  Example"
},
"Flutter  Text button selected   Example": {
  "prefix": "flutter-TextButton-selected",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TextButton].",
    "",
    "void main() {",
    "  runApp(const MaterialApp(home: Home()));",
    "}",
    "",
    "class SelectableButton extends StatefulWidget {",
    "  const SelectableButton({",
    "    super.key,",
    "    required this.selected,",
    "    this.style,",
    "    required this.onPressed,",
    "    required this.child,",
    "  });",
    "",
    "  final bool selected;",
    "  final ButtonStyle? style;",
    "  final VoidCallback? onPressed;",
    "  final Widget child;",
    "",
    "  @override",
    "  State<SelectableButton> createState() => _SelectableButtonState();",
    "}",
    "",
    "class _SelectableButtonState extends State<SelectableButton> {",
    "  late final MaterialStatesController statesController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    statesController = MaterialStatesController(<MaterialState>{if (widget.selected) MaterialState.selected});",
    "  }",
    "",
    "  @override",
    "  void didUpdateWidget(SelectableButton oldWidget) {",
    "    super.didUpdateWidget(oldWidget);",
    "    if (widget.selected != oldWidget.selected) {",
    "      statesController.update(MaterialState.selected, widget.selected);",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextButton(",
    "      statesController: statesController,",
    "      style: widget.style,",
    "      onPressed: widget.onPressed,",
    "      child: widget.child,",
    "    );",
    "  }",
    "}",
    "",
    "class Home extends StatefulWidget {",
    "  const Home({super.key});",
    "",
    "  @override",
    "  State<Home> createState() => _HomeState();",
    "}",
    "",
    "class _HomeState extends State<Home> {",
    "  bool selected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: SelectableButton(",
    "          selected: selected,",
    "          style: ButtonStyle(",
    "            foregroundColor: MaterialStateProperty.resolveWith<Color?>(",
    "              (Set<MaterialState> states) {",
    "                if (states.contains(MaterialState.selected)) {",
    "                  return Colors.white;",
    "                }",
    "                return null; // defer to the defaults",
    "              },",
    "            ),",
    "            backgroundColor: MaterialStateProperty.resolveWith<Color?>(",
    "              (Set<MaterialState> states) {",
    "                if (states.contains(MaterialState.selected)) {",
    "                  return Colors.indigo;",
    "                }",
    "                return null; // defer to the defaults",
    "              },",
    "            ),",
    "          ),",
    "          onPressed: () {",
    "            setState(() {",
    "              selected = !selected;",
    "            });",
    "          },",
    "          child: const Text('toggle selected'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Text button selected   Example"
},
"Flutter  Text Field Example": {
  "prefix": "flutter-TextField",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TextField].",
    "",
    "class ObscuredTextFieldSample extends StatelessWidget {",
    "  const ObscuredTextFieldSample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const SizedBox(",
    "      width: 250,",
    "      child: TextField(",
    "        obscureText: true,",
    "        decoration: InputDecoration(",
    "          border: OutlineInputBorder(),",
    "          labelText: 'Password',",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TextFieldExampleApp extends StatelessWidget {",
    "  const TextFieldExampleApp({super.key});",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Obscured Textfield')),",
    "        body: const Center(",
    "          child: ObscuredTextFieldSample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "void main() => runApp(const TextFieldExampleApp());",
    ""
  ],
  "description": "Flutter  Text Field selected   Example"
},
"Flutter  Text Form Field selected   Example": {
  "prefix": "flutter-TextFormField",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [TextFormField].",
    "",
    "void main() => runApp(const TextFormFieldExampleApp());",
    "",
    "class TextFormFieldExampleApp extends StatelessWidget {",
    "  const TextFormFieldExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TextFormFieldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TextFormFieldExample extends StatefulWidget {",
    "  const TextFormFieldExample({super.key});",
    "",
    "  @override",
    "  State<TextFormFieldExample> createState() => _TextFormFieldExampleState();",
    "}",
    "",
    "class _TextFormFieldExampleState extends State<TextFormFieldExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: Center(",
    "        child: Shortcuts(",
    "          shortcuts: const <ShortcutActivator, Intent>{",
    "            // Pressing space in the field will now move to the next field.",
    "            SingleActivator(LogicalKeyboardKey.space): NextFocusIntent(),",
    "          },",
    "          child: FocusTraversalGroup(",
    "            child: Form(",
    "              autovalidateMode: AutovalidateMode.always,",
    "              onChanged: () {",
    "                Form.of(primaryFocus!.context!).save();",
    "              },",
    "              child: Wrap(",
    "                children: List<Widget>.generate(5, (int index) {",
    "                  return Padding(",
    "                    padding: const EdgeInsets.all(8.0),",
    "                    child: ConstrainedBox(",
    "                      constraints: BoxConstraints.tight(const Size(200, 50)),",
    "                      child: TextFormField(",
    "                        onSaved: (String? value) {",
    "                          debugPrint('Value for field $index saved as \"$value\"');",
    "                        },",
    "                      ),",
    "                    ),",
    "                  );",
    "                }),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Text Form Field selected   Example"
},
"Flutter  Time picker, Radio button  Example": {
  "prefix": "flutter-timepicker",
   "scope":"dart",
  "body": [
    "// Copyright 2014 The Flutter Authors. All rights reserved.",
    "// Use of this source code is governed by a BSD-style license that can be",
    "// found in the LICENSE file.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showTimePicker].",
    "",
    "void main() {",
    "  runApp(const ShowTimePickerApp());",
    "}",
    "",
    "class ShowTimePickerApp extends StatefulWidget {",
    "  const ShowTimePickerApp({super.key});",
    "",
    "  @override",
    "  State<ShowTimePickerApp> createState() => _ShowTimePickerAppState();",
    "}",
    "",
    "class _ShowTimePickerAppState extends State<ShowTimePickerApp> {",
    "  ThemeMode themeMode = ThemeMode.dark;",
    "  bool useMaterial3 = true;",
    "",
    "  void setThemeMode(ThemeMode mode) {",
    "    setState(() {",
    "      themeMode = mode;",
    "    });",
    "  }",
    "",
    "  void setUseMaterial3(bool? value) {",
    "    setState(() {",
    "      useMaterial3 = value!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData.light(useMaterial3: useMaterial3),",
    "      darkTheme: ThemeData.dark(useMaterial3: useMaterial3),",
    "      themeMode: themeMode,",
    "      home: TimePickerOptions(",
    "        themeMode: themeMode,",
    "        useMaterial3: useMaterial3,",
    "        setThemeMode: setThemeMode,",
    "        setUseMaterial3: setUseMaterial3,",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TimePickerOptions extends StatefulWidget {",
    "  const TimePickerOptions({",
    "    super.key,",
    "    required this.themeMode,",
    "    required this.useMaterial3,",
    "    required this.setThemeMode,",
    "    required this.setUseMaterial3,",
    "  });",
    "",
    "  final ThemeMode themeMode;",
    "  final bool useMaterial3;",
    "  final ValueChanged<ThemeMode> setThemeMode;",
    "  final ValueChanged<bool?> setUseMaterial3;",
    "",
    "  @override",
    "  State<TimePickerOptions> createState() => _TimePickerOptionsState();",
    "}",
    "",
    "class _TimePickerOptionsState extends State<TimePickerOptions> {",
    "  TimeOfDay? selectedTime;",
    "  TimePickerEntryMode entryMode = TimePickerEntryMode.dial;",
    "  Orientation? orientation;",
    "  TextDirection textDirection = TextDirection.ltr;",
    "  MaterialTapTargetSize tapTargetSize = MaterialTapTargetSize.padded;",
    "  bool use24HourTime = false;",
    "",
    "  void _entryModeChanged(TimePickerEntryMode? value) {",
    "    if (value != entryMode) {",
    "      setState(() {",
    "        entryMode = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _orientationChanged(Orientation? value) {",
    "    if (value != orientation) {",
    "      setState(() {",
    "        orientation = value;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _textDirectionChanged(TextDirection? value) {",
    "    if (value != textDirection) {",
    "      setState(() {",
    "        textDirection = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _tapTargetSizeChanged(MaterialTapTargetSize? value) {",
    "    if (value != tapTargetSize) {",
    "      setState(() {",
    "        tapTargetSize = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _use24HourTimeChanged(bool? value) {",
    "    if (value != use24HourTime) {",
    "      setState(() {",
    "        use24HourTime = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _themeModeChanged(ThemeMode? value) {",
    "    widget.setThemeMode(value!);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: Column(",
    "        children: <Widget>[",
    "          Expanded(",
    "            child: GridView(",
    "              gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(",
    "                maxCrossAxisExtent: 350,",
    "                mainAxisSpacing: 4,",
    "                mainAxisExtent: 200 * MediaQuery.textScaleFactorOf(context),",
    "                crossAxisSpacing: 4,",
    "              ),",
    "              children: <Widget>[",
    "                EnumCard<TimePickerEntryMode>(",
    "                  choices: TimePickerEntryMode.values,",
    "                  value: entryMode,",
    "                  onChanged: _entryModeChanged,",
    "                ),",
    "                EnumCard<ThemeMode>(",
    "                  choices: ThemeMode.values,",
    "                  value: widget.themeMode,",
    "                  onChanged: _themeModeChanged,",
    "                ),",
    "                EnumCard<TextDirection>(",
    "                  choices: TextDirection.values,",
    "                  value: textDirection,",
    "                  onChanged: _textDirectionChanged,",
    "                ),",
    "                EnumCard<MaterialTapTargetSize>(",
    "                  choices: MaterialTapTargetSize.values,",
    "                  value: tapTargetSize,",
    "                  onChanged: _tapTargetSizeChanged,",
    "                ),",
    "                ChoiceCard<Orientation?>(",
    "                  choices: const <Orientation?>[...Orientation.values, null],",
    "                  value: orientation,",
    "                  title: '$Orientation',",
    "                  choiceLabels: <Orientation?, String>{",
    "                    for (final Orientation choice in Orientation.values) choice: choice.name,",
    "                    null: 'from MediaQuery',",
    "                  },",
    "                  onChanged: _orientationChanged,",
    "                ),",
    "                ChoiceCard<bool>(",
    "                  choices: const <bool>[false, true],",
    "                  value: use24HourTime,",
    "                  onChanged: _use24HourTimeChanged,",
    "                  title: 'Time Mode',",
    "                  choiceLabels: const <bool, String>{",
    "                    false: '12-hour am/pm time',",
    "                    true: '24-hour time',",
    "                  },",
    "                ),",
    "                ChoiceCard<bool>(",
    "                  choices: const <bool>[false, true],",
    "                  value: widget.useMaterial3,",
    "                  onChanged: widget.setUseMaterial3,",
    "                  title: 'Material Version',",
    "                  choiceLabels: const <bool, String>{",
    "                    false: 'Material 2',",
    "                    true: 'Material 3',",
    "                  },",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "          SingleChildScrollView(",
    "            scrollDirection: Axis.horizontal,",
    "            child: Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(12.0),",
    "                  child: ElevatedButton(",
    "                    child: const Text('Open time picker'),",
    "                    onPressed: () async {",
    "                      final TimeOfDay? time = await showTimePicker(",
    "                        context: context,",
    "                        initialTime: selectedTime ?? TimeOfDay.now(),",
    "                        initialEntryMode: entryMode,",
    "                        orientation: orientation,",
    "                        builder: (BuildContext context, Widget? child) {",
    "                          // We just wrap these environmental changes around the",
    "                          // child in this builder so that we can apply the",
    "                          // options selected above. In regular usage, this is",
    "                          // rarely necessary, because the default values are",
    "                          // usually used as-is.",
    "                          return Theme(",
    "                            data: Theme.of(context).copyWith(",
    "                              materialTapTargetSize: tapTargetSize,",
    "                            ),",
    "                            child: Directionality(",
    "                              textDirection: textDirection,",
    "                              child: MediaQuery(",
    "                                data: MediaQuery.of(context).copyWith(",
    "                                  alwaysUse24HourFormat: use24HourTime,",
    "                                ),",
    "                                child: child!,",
    "                              ),",
    "                            ),",
    "                          );",
    "                        },",
    "                      );",
    "                      setState(() {",
    "                        selectedTime = time;",
    "                      });",
    "                    },",
    "                  ),",
    "                ),",
    "                if (selectedTime != null) Text('Selected time: ${selectedTime!.format(context)}'),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This is a simple card that presents a set of radio buttons (inside of a",
    "// RadioSelection, defined below) for the user to select from.",
    "class ChoiceCard<T extends Object?> extends StatelessWidget {",
    "  const ChoiceCard({",
    "    super.key,",
    "    required this.value,",
    "    required this.choices,",
    "    required this.onChanged,",
    "    required this.choiceLabels,",
    "    required this.title,",
    "  });",
    "",
    "  final T value;",
    "  final Iterable<T> choices;",
    "  final Map<T, String> choiceLabels;",
    "  final String title;",
    "  final ValueChanged<T?> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Card(",
    "      // If the card gets too small, let it scroll both directions.",
    "      child: SingleChildScrollView(",
    "        child: SingleChildScrollView(",
    "          scrollDirection: Axis.horizontal,",
    "          child: Padding(",
    "            padding: const EdgeInsets.all(8.0),",
    "            child: Column(",
    "              crossAxisAlignment: CrossAxisAlignment.start,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(8.0),",
    "                  child: Text(title),",
    "                ),",
    "                for (final T choice in choices)",
    "                  RadioSelection<T>(",
    "                    value: choice,",
    "                    groupValue: value,",
    "                    onChanged: onChanged,",
    "                    child: Text(choiceLabels[choice]!),",
    "                  ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This aggregates a ChoiceCard so that it presents a set of radio buttons for",
    "// the allowed enum values for the user to select from.",
    "class EnumCard<T extends Enum> extends StatelessWidget {",
    "  const EnumCard({",
    "    super.key,",
    "    required this.value,",
    "    required this.choices,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final T value;",
    "  final Iterable<T> choices;",
    "  final ValueChanged<T?> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ChoiceCard<T>(",
    "        value: value,",
    "        choices: choices,",
    "        onChanged: onChanged,",
    "        choiceLabels: <T, String>{",
    "          for (final T choice in choices) choice: choice.name,",
    "        },",
    "        title: value.runtimeType.toString());",
    "  }",
    "}",
    "",
    "// A button that has a radio button on one side and a label child. Tapping on",
    "// the label or the radio button selects the item.",
    "class RadioSelection<T extends Object?> extends StatefulWidget {",
    "  const RadioSelection({",
    "    super.key,",
    "    required this.value,",
    "    required this.groupValue,",
    "    required this.onChanged,",
    "    required this.child,",
    "  });",
    "",
    "  final T value;",
    "  final T? groupValue;",
    "  final ValueChanged<T?> onChanged;",
    "  final Widget child;",
    "",
    "  @override",
    "  State<RadioSelection<T>> createState() => _RadioSelectionState<T>();",
    "}",
    "",
    "class _RadioSelectionState<T extends Object?> extends State<RadioSelection<T>> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      mainAxisSize: MainAxisSize.min,",
    "      children: <Widget>[",
    "        Padding(",
    "          padding: const EdgeInsetsDirectional.only(end: 8),",
    "          child: Radio<T>(",
    "            groupValue: widget.groupValue,",
    "            value: widget.value,",
    "            onChanged: widget.onChanged,",
    "          ),",
    "        ),",
    "        GestureDetector(onTap: () => widget.onChanged(widget.value), child: widget.child),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Time picker, Radio button  Example"
},"Flutter  Time picker, Radio button  Example": {
  "prefix": "flutter-showTimePicker",
   "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showTimePicker].",
    "",
    "void main() {",
    "  runApp(const ShowTimePickerApp());",
    "}",
    "",
    "class ShowTimePickerApp extends StatefulWidget {",
    "  const ShowTimePickerApp({super.key});",
    "",
    "  @override",
    "  State<ShowTimePickerApp> createState() => _ShowTimePickerAppState();",
    "}",
    "",
    "class _ShowTimePickerAppState extends State<ShowTimePickerApp> {",
    "  ThemeMode themeMode = ThemeMode.dark;",
    "  bool useMaterial3 = true;",
    "",
    "  void setThemeMode(ThemeMode mode) {",
    "    setState(() {",
    "      themeMode = mode;",
    "    });",
    "  }",
    "",
    "  void setUseMaterial3(bool? value) {",
    "    setState(() {",
    "      useMaterial3 = value!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData.light(useMaterial3: useMaterial3),",
    "      darkTheme: ThemeData.dark(useMaterial3: useMaterial3),",
    "      themeMode: themeMode,",
    "      home: TimePickerOptions(",
    "        themeMode: themeMode,",
    "        useMaterial3: useMaterial3,",
    "        setThemeMode: setThemeMode,",
    "        setUseMaterial3: setUseMaterial3,",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TimePickerOptions extends StatefulWidget {",
    "  const TimePickerOptions({",
    "    super.key,",
    "    required this.themeMode,",
    "    required this.useMaterial3,",
    "    required this.setThemeMode,",
    "    required this.setUseMaterial3,",
    "  });",
    "",
    "  final ThemeMode themeMode;",
    "  final bool useMaterial3;",
    "  final ValueChanged<ThemeMode> setThemeMode;",
    "  final ValueChanged<bool?> setUseMaterial3;",
    "",
    "  @override",
    "  State<TimePickerOptions> createState() => _TimePickerOptionsState();",
    "}",
    "",
    "class _TimePickerOptionsState extends State<TimePickerOptions> {",
    "  TimeOfDay? selectedTime;",
    "  TimePickerEntryMode entryMode = TimePickerEntryMode.dial;",
    "  Orientation? orientation;",
    "  TextDirection textDirection = TextDirection.ltr;",
    "  MaterialTapTargetSize tapTargetSize = MaterialTapTargetSize.padded;",
    "  bool use24HourTime = false;",
    "",
    "  void _entryModeChanged(TimePickerEntryMode? value) {",
    "    if (value != entryMode) {",
    "      setState(() {",
    "        entryMode = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _orientationChanged(Orientation? value) {",
    "    if (value != orientation) {",
    "      setState(() {",
    "        orientation = value;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _textDirectionChanged(TextDirection? value) {",
    "    if (value != textDirection) {",
    "      setState(() {",
    "        textDirection = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _tapTargetSizeChanged(MaterialTapTargetSize? value) {",
    "    if (value != tapTargetSize) {",
    "      setState(() {",
    "        tapTargetSize = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _use24HourTimeChanged(bool? value) {",
    "    if (value != use24HourTime) {",
    "      setState(() {",
    "        use24HourTime = value!;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _themeModeChanged(ThemeMode? value) {",
    "    widget.setThemeMode(value!);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      child: Column(",
    "        children: <Widget>[",
    "          Expanded(",
    "            child: GridView(",
    "              gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(",
    "                maxCrossAxisExtent: 350,",
    "                mainAxisSpacing: 4,",
    "                mainAxisExtent: 200 * MediaQuery.textScaleFactorOf(context),",
    "                crossAxisSpacing: 4,",
    "              ),",
    "              children: <Widget>[",
    "                EnumCard<TimePickerEntryMode>(",
    "                  choices: TimePickerEntryMode.values,",
    "                  value: entryMode,",
    "                  onChanged: _entryModeChanged,",
    "                ),",
    "                EnumCard<ThemeMode>(",
    "                  choices: ThemeMode.values,",
    "                  value: widget.themeMode,",
    "                  onChanged: _themeModeChanged,",
    "                ),",
    "                EnumCard<TextDirection>(",
    "                  choices: TextDirection.values,",
    "                  value: textDirection,",
    "                  onChanged: _textDirectionChanged,",
    "                ),",
    "                EnumCard<MaterialTapTargetSize>(",
    "                  choices: MaterialTapTargetSize.values,",
    "                  value: tapTargetSize,",
    "                  onChanged: _tapTargetSizeChanged,",
    "                ),",
    "                ChoiceCard<Orientation?>(",
    "                  choices: const <Orientation?>[...Orientation.values, null],",
    "                  value: orientation,",
    "                  title: '$Orientation',",
    "                  choiceLabels: <Orientation?, String>{",
    "                    for (final Orientation choice in Orientation.values) choice: choice.name,",
    "                    null: 'from MediaQuery',",
    "                  },",
    "                  onChanged: _orientationChanged,",
    "                ),",
    "                ChoiceCard<bool>(",
    "                  choices: const <bool>[false, true],",
    "                  value: use24HourTime,",
    "                  onChanged: _use24HourTimeChanged,",
    "                  title: 'Time Mode',",
    "                  choiceLabels: const <bool, String>{",
    "                    false: '12-hour am/pm time',",
    "                    true: '24-hour time',",
    "                  },",
    "                ),",
    "                ChoiceCard<bool>(",
    "                  choices: const <bool>[false, true],",
    "                  value: widget.useMaterial3,",
    "                  onChanged: widget.setUseMaterial3,",
    "                  title: 'Material Version',",
    "                  choiceLabels: const <bool, String>{",
    "                    false: 'Material 2',",
    "                    true: 'Material 3',",
    "                  },",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "          SingleChildScrollView(",
    "            scrollDirection: Axis.horizontal,",
    "            child: Row(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(12.0),",
    "                  child: ElevatedButton(",
    "                    child: const Text('Open time picker'),",
    "                    onPressed: () async {",
    "                      final TimeOfDay? time = await showTimePicker(",
    "                        context: context,",
    "                        initialTime: selectedTime ?? TimeOfDay.now(),",
    "                        initialEntryMode: entryMode,",
    "                        orientation: orientation,",
    "                        builder: (BuildContext context, Widget? child) {",
    "                          // We just wrap these environmental changes around the",
    "                          // child in this builder so that we can apply the",
    "                          // options selected above. In regular usage, this is",
    "                          // rarely necessary, because the default values are",
    "                          // usually used as-is.",
    "                          return Theme(",
    "                            data: Theme.of(context).copyWith(",
    "                              materialTapTargetSize: tapTargetSize,",
    "                            ),",
    "                            child: Directionality(",
    "                              textDirection: textDirection,",
    "                              child: MediaQuery(",
    "                                data: MediaQuery.of(context).copyWith(",
    "                                  alwaysUse24HourFormat: use24HourTime,",
    "                                ),",
    "                                child: child!,",
    "                              ),",
    "                            ),",
    "                          );",
    "                        },",
    "                      );",
    "                      setState(() {",
    "                        selectedTime = time;",
    "                      });",
    "                    },",
    "                  ),",
    "                ),",
    "                if (selectedTime != null) Text('Selected time: ${selectedTime!.format(context)}'),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This is a simple card that presents a set of radio buttons (inside of a",
    "// RadioSelection, defined below) for the user to select from.",
    "class ChoiceCard<T extends Object?> extends StatelessWidget {",
    "  const ChoiceCard({",
    "    super.key,",
    "    required this.value,",
    "    required this.choices,",
    "    required this.onChanged,",
    "    required this.choiceLabels,",
    "    required this.title,",
    "  });",
    "",
    "  final T value;",
    "  final Iterable<T> choices;",
    "  final Map<T, String> choiceLabels;",
    "  final String title;",
    "  final ValueChanged<T?> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Card(",
    "      // If the card gets too small, let it scroll both directions.",
    "      child: SingleChildScrollView(",
    "        child: SingleChildScrollView(",
    "          scrollDirection: Axis.horizontal,",
    "          child: Padding(",
    "            padding: const EdgeInsets.all(8.0),",
    "            child: Column(",
    "              crossAxisAlignment: CrossAxisAlignment.start,",
    "              children: <Widget>[",
    "                Padding(",
    "                  padding: const EdgeInsets.all(8.0),",
    "                  child: Text(title),",
    "                ),",
    "                for (final T choice in choices)",
    "                  RadioSelection<T>(",
    "                    value: choice,",
    "                    groupValue: value,",
    "                    onChanged: onChanged,",
    "                    child: Text(choiceLabels[choice]!),",
    "                  ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This aggregates a ChoiceCard so that it presents a set of radio buttons for",
    "// the allowed enum values for the user to select from.",
    "class EnumCard<T extends Enum> extends StatelessWidget {",
    "  const EnumCard({",
    "    super.key,",
    "    required this.value,",
    "    required this.choices,",
    "    required this.onChanged,",
    "  });",
    "",
    "  final T value;",
    "  final Iterable<T> choices;",
    "  final ValueChanged<T?> onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ChoiceCard<T>(",
    "        value: value,",
    "        choices: choices,",
    "        onChanged: onChanged,",
    "        choiceLabels: <T, String>{",
    "          for (final T choice in choices) choice: choice.name,",
    "        },",
    "        title: value.runtimeType.toString());",
    "  }",
    "}",
    "",
    "// A button that has a radio button on one side and a label child. Tapping on",
    "// the label or the radio button selects the item.",
    "class RadioSelection<T extends Object?> extends StatefulWidget {",
    "  const RadioSelection({",
    "    super.key,",
    "    required this.value,",
    "    required this.groupValue,",
    "    required this.onChanged,",
    "    required this.child,",
    "  });",
    "",
    "  final T value;",
    "  final T? groupValue;",
    "  final ValueChanged<T?> onChanged;",
    "  final Widget child;",
    "",
    "  @override",
    "  State<RadioSelection<T>> createState() => _RadioSelectionState<T>();",
    "}",
    "",
    "class _RadioSelectionState<T extends Object?> extends State<RadioSelection<T>> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      mainAxisSize: MainAxisSize.min,",
    "      children: <Widget>[",
    "        Padding(",
    "          padding: const EdgeInsetsDirectional.only(end: 8),",
    "          child: Radio<T>(",
    "            groupValue: widget.groupValue,",
    "            value: widget.value,",
    "            onChanged: widget.onChanged,",
    "          ),",
    "        ),",
    "        GestureDetector(onTap: () => widget.onChanged(widget.value), child: widget.child),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Time picker, Radio button  Example"
},
"Flutter  Toggle Button  Example": {
  "prefix": "flutter-ToggleButtons",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ToggleButtons].",
    "",
    "const List<Widget> fruits = <Widget>[Text('Apple'), Text('Banana'), Text('Orange')];",
    "",
    "const List<Widget> vegetables = <Widget>[Text('Tomatoes'), Text('Potatoes'), Text('Carrots')];",
    "",
    "const List<Widget> icons = <Widget>[",
    "  Icon(Icons.sunny),",
    "  Icon(Icons.cloud),",
    "  Icon(Icons.ac_unit),",
    "];",
    "",
    "void main() => runApp(const ToggleButtonsExampleApp());",
    "",
    "class ToggleButtonsExampleApp extends StatelessWidget {",
    "  const ToggleButtonsExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const ToggleButtonsSample(title: 'ToggleButtons Sample'),",
    "    );",
    "  }",
    "}",
    "",
    "class ToggleButtonsSample extends StatefulWidget {",
    "  const ToggleButtonsSample({super.key, required this.title});",
    "",
    "  final String title;",
    "",
    "  @override",
    "  State<ToggleButtonsSample> createState() => _ToggleButtonsSampleState();",
    "}",
    "",
    "class _ToggleButtonsSampleState extends State<ToggleButtonsSample> {",
    "  final List<bool> _selectedFruits = <bool>[true, false, false];",
    "  final List<bool> _selectedVegetables = <bool>[false, true, false];",
    "  final List<bool> _selectedWeather = <bool>[false, false, true];",
    "  bool vertical = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData theme = Theme.of(context);",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(widget.title)),",
    "      body: Center(",
    "        child: SingleChildScrollView(",
    "          child: Column(",
    "            mainAxisSize: MainAxisSize.min,",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              // ToggleButtons with a single selection.",
    "              Text('Single-select', style: theme.textTheme.titleSmall),",
    "              const SizedBox(height: 5),",
    "              ToggleButtons(",
    "                direction: vertical ? Axis.vertical : Axis.horizontal,",
    "                onPressed: (int index) {",
    "                  setState(() {",
    "                    // The button that is tapped is set to true, and the others to false.",
    "                    for (int i = 0; i < _selectedFruits.length; i++) {",
    "                      _selectedFruits[i] = i == index;",
    "                    }",
    "                  });",
    "                },",
    "                borderRadius: const BorderRadius.all(Radius.circular(8)),",
    "                selectedBorderColor: Colors.red[700],",
    "                selectedColor: Colors.white,",
    "                fillColor: Colors.red[200],",
    "                color: Colors.red[400],",
    "                constraints: const BoxConstraints(",
    "                  minHeight: 40.0,",
    "                  minWidth: 80.0,",
    "                ),",
    "                isSelected: _selectedFruits,",
    "                children: fruits,",
    "              ),",
    "              const SizedBox(height: 20),",
    "              // ToggleButtons with a multiple selection.",
    "              Text('Multi-select', style: theme.textTheme.titleSmall),",
    "              const SizedBox(height: 5),",
    "              ToggleButtons(",
    "                direction: vertical ? Axis.vertical : Axis.horizontal,",
    "                onPressed: (int index) {",
    "                  // All buttons are selectable.",
    "                  setState(() {",
    "                    _selectedVegetables[index] = !_selectedVegetables[index];",
    "                  });",
    "                },",
    "                borderRadius: const BorderRadius.all(Radius.circular(8)),",
    "                selectedBorderColor: Colors.green[700],",
    "                selectedColor: Colors.white,",
    "                fillColor: Colors.green[200],",
    "                color: Colors.green[400],",
    "                constraints: const BoxConstraints(",
    "                  minHeight: 40.0,",
    "                  minWidth: 80.0,",
    "                ),",
    "                isSelected: _selectedVegetables,",
    "                children: vegetables,",
    "              ),",
    "              const SizedBox(height: 20),",
    "              // ToggleButtons with icons only.",
    "              Text('Icon-only', style: theme.textTheme.titleSmall),",
    "              const SizedBox(height: 5),",
    "              ToggleButtons(",
    "                direction: vertical ? Axis.vertical : Axis.horizontal,",
    "                onPressed: (int index) {",
    "                  setState(() {",
    "                    // The button that is tapped is set to true, and the others to false.",
    "                    for (int i = 0; i < _selectedWeather.length; i++) {",
    "                      _selectedWeather[i] = i == index;",
    "                    }",
    "                  });",
    "                },",
    "                borderRadius: const BorderRadius.all(Radius.circular(8)),",
    "                selectedBorderColor: Colors.blue[700],",
    "                selectedColor: Colors.white,",
    "                fillColor: Colors.blue[200],",
    "                color: Colors.blue[400],",
    "                isSelected: _selectedWeather,",
    "                children: icons,",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton.extended(",
    "        onPressed: () {",
    "          setState(() {",
    "            // When the button is pressed, ToggleButtons direction is changed.",
    "            vertical = !vertical;",
    "          });",
    "        },",
    "        icon: const Icon(Icons.screen_rotation_outlined),",
    "        label: Text(vertical ? 'Horizontal' : 'Vertical'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Toggle Button  Example"
},
"Flutter  Tooltip  Example": {
  "prefix": "flutter-Tooltip",
  "scope":"dart",
  "body": [

    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Tooltip].",
    "",
    "void main() => runApp(const TooltipExampleApp());",
    "",
    "class TooltipExampleApp extends StatelessWidget {",
    "  const TooltipExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TooltipSample(title: 'Tooltip Sample'),",
    "    );",
    "  }",
    "}",
    "",
    "class TooltipSample extends StatelessWidget {",
    "  const TooltipSample({super.key, required this.title});",
    "",
    "  final String title;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final GlobalKey<TooltipState> tooltipkey = GlobalKey<TooltipState>();",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(title)),",
    "      body: Center(",
    "        child: Tooltip(",
    "          // Provide a global key with the \"TooltipState\" type to show",
    "          // the tooltip manually when trigger mode is set to manual.",
    "          key: tooltipkey,",
    "          triggerMode: TooltipTriggerMode.manual,",
    "          showDuration: const Duration(seconds: 1),",
    "          message: 'I am a Tooltip',",
    "          child: const Text('Tap on the FAB'),",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton.extended(",
    "        onPressed: () {",
    "          // Show Tooltip programmatically on button tap.",
    "          tooltipkey.currentState?.ensureTooltipVisible();",
    "        },",
    "        label: const Text('Show Tooltip'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Tooltip  Example"
},
"Flutter  Animated Grid  Example": {
  "prefix": "flutter-AnimatedGrid",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedGrid].",
    "",
    "void main() {",
    "  runApp(const AnimatedGridSample());",
    "}",
    "",
    "class AnimatedGridSample extends StatefulWidget {",
    "  const AnimatedGridSample({super.key});",
    "",
    "  @override",
    "  State<AnimatedGridSample> createState() => _AnimatedGridSampleState();",
    "}",
    "",
    "class _AnimatedGridSampleState extends State<AnimatedGridSample> {",
    "  final GlobalKey<AnimatedGridState> _gridKey = GlobalKey<AnimatedGridState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _gridKey,",
    "      initialItems: <int>[0, 1, 2, 3, 4, 5],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 6;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  // Used to build an item after it has been removed from the list. This method",
    "  // is needed because a removed item remains visible until its animation has",
    "  // completed (even though it's gone as far as this ListModel is concerned).",
    "  // The widget will be used by the [AnimatedGridState.removeItem] method's",
    "  // [AnimatedGridRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: item,",
    "      removing: true,",
    "      // No gesture detector here: we don't want removed items to be interactive.",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    setState(() {",
    "      _list.insert(index, _nextItem++);",
    "    });",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      setState(() {",
    "        _list.removeAt(_list.indexOf(_selectedItem!));",
    "        _selectedItem = null;",
    "      });",
    "    } else if (_list.length > 0) {",
    "      setState(() {",
    "        _list.removeAt(_list.length - 1);",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text(",
    "            'AnimatedGrid',",
    "            style: TextStyle(fontSize: 30),",
    "          ),",
    "          centerTitle: true,",
    "          leading: IconButton(",
    "            icon: const Icon(Icons.remove_circle),",
    "            iconSize: 32,",
    "            onPressed: (_list.length > 0) ? _remove : null,",
    "            tooltip: 'remove the selected item',",
    "          ),",
    "          actions: <Widget>[",
    "            IconButton(",
    "              icon: const Icon(Icons.add_circle),",
    "              iconSize: 32,",
    "              onPressed: _insert,",
    "              tooltip: 'insert a new item',",
    "            ),",
    "          ],",
    "        ),",
    "        body: Padding(",
    "          padding: const EdgeInsets.all(16.0),",
    "          child: AnimatedGrid(",
    "            key: _gridKey,",
    "            gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(",
    "              maxCrossAxisExtent: 100.0,",
    "              mainAxisSpacing: 10.0,",
    "              crossAxisSpacing: 10.0,",
    "            ),",
    "            initialItemCount: _list.length,",
    "            itemBuilder: _buildItem,",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder<T> = Widget Function(T item, BuildContext context, Animation<double> animation);",
    "",
    "/// Keeps a Dart [List] in sync with an [AnimatedGrid].",
    "///",
    "/// The [insert] and [removeAt] methods apply to both the internal list and",
    "/// the animated list that belongs to [listKey].",
    "///",
    "/// This class only exposes as much of the Dart List API as is needed by the",
    "/// sample app. More list methods are easily added, however methods that",
    "/// mutate the list must make the same changes to the animated list in terms",
    "/// of [AnimatedGridState.insertItem] and [AnimatedGrid.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<AnimatedGridState> listKey;",
    "  final RemovedItemBuilder<E> removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  AnimatedGridState? get _animatedGrid => listKey.currentState;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedGrid!.insertItem(",
    "      index,",
    "      duration: const Duration(milliseconds: 500),",
    "    );",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedGrid!.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) {",
    "          return removedItemBuilder(removedItem, context, animation);",
    "        },",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "/// Displays its integer item as 'item N' on a Card whose color is based on",
    "/// the item's value.",
    "///",
    "/// The text is displayed in bright green if [selected] is",
    "/// true. This widget's height is based on the [animation] parameter, it",
    "/// varies from 0 to 128 as the animation varies from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    this.removing = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "  final bool removing;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    TextStyle textStyle = Theme.of(context).textTheme.headlineMedium!;",
    "    if (selected) {",
    "      textStyle = textStyle.copyWith(color: Colors.lightGreenAccent[400]);",
    "    }",
    "    return Padding(",
    "      padding: const EdgeInsets.all(2.0),",
    "      child: ScaleTransition(",
    "        scale: CurvedAnimation(parent: animation, curve: removing ? Curves.easeInOut : Curves.bounceOut),",
    "        child: GestureDetector(",
    "          behavior: HitTestBehavior.opaque,",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text('${item + 1}', style: textStyle),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Animated Grid  Example"
},
"Flutter  SliverAnimatedGrid  Example": {
  "prefix": "flutter-SliverAnimatedGrid",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverAnimatedGrid].",
    "",
    "void main() => runApp(const SliverAnimatedGridSample());",
    "",
    "class SliverAnimatedGridSample extends StatefulWidget {",
    "  const SliverAnimatedGridSample({super.key});",
    "",
    "  @override",
    "  State<SliverAnimatedGridSample> createState() => _SliverAnimatedGridSampleState();",
    "}",
    "",
    "class _SliverAnimatedGridSampleState extends State<SliverAnimatedGridSample> {",
    "  final GlobalKey<SliverAnimatedGridState> _listKey = GlobalKey<SliverAnimatedGridState>();",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "  final GlobalKey<ScaffoldMessengerState> _scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _listKey,",
    "      initialItems: <int>[0, 1, 2, 3, 4, 5],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 6;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  // Used to build an item after it has been removed from the list. This",
    "  // method is needed because a removed item remains visible until its",
    "  // animation has completed (even though it's gone as far this ListModel is",
    "  // concerned). The widget will be used by the",
    "  // [AnimatedGridState.removeItem] method's",
    "  // [AnimatedGridRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      removing: true,",
    "      item: item,",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    _list.insert(index, _nextItem++);",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      _list.removeAt(_list.indexOf(_selectedItem!));",
    "    } else {",
    "      _list.removeAt(_list.length - 1);",
    "    }",
    "    setState(() {",
    "      _selectedItem = null;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      scaffoldMessengerKey: _scaffoldMessengerKey,",
    "      debugShowCheckedModeBanner: false,",
    "      home: Scaffold(",
    "        key: _scaffoldKey,",
    "        body: CustomScrollView(",
    "          slivers: <Widget>[",
    "            SliverAppBar(",
    "              title: const Text(",
    "                'SliverAnimatedGrid',",
    "                style: TextStyle(fontSize: 30),",
    "              ),",
    "              expandedHeight: 60,",
    "              centerTitle: true,",
    "              backgroundColor: Colors.amber[900],",
    "              leading: IconButton(",
    "                icon: const Icon(Icons.remove_circle),",
    "                onPressed: _remove,",
    "                tooltip: 'Remove the selected item, or the last item if none selected.',",
    "                iconSize: 32,",
    "              ),",
    "              actions: <Widget>[",
    "                IconButton(",
    "                  icon: const Icon(Icons.add_circle),",
    "                  onPressed: _insert,",
    "                  tooltip: 'Insert a new item.',",
    "                  iconSize: 32,",
    "                ),",
    "              ],",
    "            ),",
    "            SliverAnimatedGrid(",
    "              key: _listKey,",
    "              initialItemCount: _list.length,",
    "              gridDelegate: const SliverGridDelegateWithMaxCrossAxisExtent(",
    "                maxCrossAxisExtent: 100.0,",
    "                mainAxisSpacing: 10.0,",
    "                crossAxisSpacing: 10.0,",
    "              ),",
    "              itemBuilder: _buildItem,",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder = Widget Function(int item, BuildContext context, Animation<double> animation);",
    "",
    "// Keeps a Dart [List] in sync with an [AnimatedGrid].",
    "//",
    "// The [insert] and [removeAt] methods apply to both the internal list and",
    "// the animated list that belongs to [listKey].",
    "//",
    "// This class only exposes as much of the Dart List API as is needed by the",
    "// sample app. More list methods are easily added, however methods that",
    "// mutate the list must make the same changes to the animated list in terms",
    "// of [AnimatedGridState.insertItem] and [AnimatedGrid.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<SliverAnimatedGridState> listKey;",
    "  final RemovedItemBuilder removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  SliverAnimatedGridState get _animatedGrid => listKey.currentState!;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedGrid.insertItem(index);",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedGrid.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) => removedItemBuilder(index, context, animation),",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "// Displays its integer item as 'Item N' on a Card whose color is based on",
    "// the item's value.",
    "//",
    "// The card turns gray when [selected] is true. This widget's height",
    "// is based on the [animation] parameter. It varies as the animation value",
    "// transitions from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    this.removing = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "  final bool removing;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.only(",
    "        left: 2.0,",
    "        right: 2.0,",
    "        top: 2.0,",
    "      ),",
    "      child: ScaleTransition(",
    "        scale: CurvedAnimation(parent: animation, curve: removing ? Curves.easeInOut : Curves.bounceOut),",
    "        child: GestureDetector(",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: selected ? Colors.black12 : Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text(",
    "                  (item + 1).toString(),",
    "                  style: Theme.of(context).textTheme.headlineMedium,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  SliverAnimatedGrid  Example"
},
"Flutter  SliverAnimatedList  Example": {
  "prefix": "flutter-SliverAnimatedList",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverAnimatedList].",
    "",
    "void main() => runApp(const SliverAnimatedListSample());",
    "",
    "class SliverAnimatedListSample extends StatefulWidget {",
    "  const SliverAnimatedListSample({super.key});",
    "",
    "  @override",
    "  State<SliverAnimatedListSample> createState() => _SliverAnimatedListSampleState();",
    "}",
    "",
    "class _SliverAnimatedListSampleState extends State<SliverAnimatedListSample> {",
    "  final GlobalKey<SliverAnimatedListState> _listKey = GlobalKey<SliverAnimatedListState>();",
    "  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();",
    "  final GlobalKey<ScaffoldMessengerState> _scaffoldMessengerKey = GlobalKey<ScaffoldMessengerState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _listKey,",
    "      initialItems: <int>[0, 1, 2],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 3;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  /// The builder function used to build items that have been removed.",
    "  ///",
    "  /// Used to build an item after it has been removed from the list. This method",
    "  /// is needed because a removed item remains visible until its animation has",
    "  /// completed (even though it's gone as far this ListModel is concerned). The",
    "  /// widget will be used by the [AnimatedListState.removeItem] method's",
    "  /// [AnimatedRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: item,",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    _list.insert(index, _nextItem++);",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      _list.removeAt(_list.indexOf(_selectedItem!));",
    "      setState(() {",
    "        _selectedItem = null;",
    "      });",
    "    } else {",
    "      _scaffoldMessengerKey.currentState!.showSnackBar(const SnackBar(",
    "        content: Text(",
    "          'Select an item to remove from the list.',",
    "          style: TextStyle(fontSize: 20),",
    "        ),",
    "      ));",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      scaffoldMessengerKey: _scaffoldMessengerKey,",
    "      home: Scaffold(",
    "        key: _scaffoldKey,",
    "        body: CustomScrollView(",
    "          slivers: <Widget>[",
    "            SliverAppBar(",
    "              title: const Text(",
    "                'SliverAnimatedList',",
    "                style: TextStyle(fontSize: 30),",
    "              ),",
    "              expandedHeight: 60,",
    "              centerTitle: true,",
    "              backgroundColor: Colors.amber[900],",
    "              leading: IconButton(",
    "                icon: const Icon(Icons.add_circle),",
    "                onPressed: _insert,",
    "                tooltip: 'Insert a new item.',",
    "                iconSize: 32,",
    "              ),",
    "              actions: <Widget>[",
    "                IconButton(",
    "                  icon: const Icon(Icons.remove_circle),",
    "                  onPressed: _remove,",
    "                  tooltip: 'Remove the selected item.',",
    "                  iconSize: 32,",
    "                ),",
    "              ],",
    "            ),",
    "            SliverAnimatedList(",
    "              key: _listKey,",
    "              initialItemCount: _list.length,",
    "              itemBuilder: _buildItem,",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder<E> = Widget Function(E item, BuildContext context, Animation<double> animation);",
    "",
    "// Keeps a Dart [List] in sync with an [AnimatedList].",
    "//",
    "// The [insert] and [removeAt] methods apply to both the internal list and",
    "// the animated list that belongs to [listKey].",
    "//",
    "// This class only exposes as much of the Dart List API as is needed by the",
    "// sample app. More list methods are easily added, however methods that",
    "// mutate the list must make the same changes to the animated list in terms",
    "// of [AnimatedListState.insertItem] and [AnimatedList.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<SliverAnimatedListState> listKey;",
    "  final RemovedItemBuilder<E> removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  SliverAnimatedListState get _animatedList => listKey.currentState!;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedList.insertItem(index);",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedList.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) => removedItemBuilder(removedItem, context, animation),",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "// Displays its integer item as 'Item N' on a Card whose color is based on",
    "// the item's value.",
    "//",
    "// The card turns gray when [selected] is true. This widget's height",
    "// is based on the [animation] parameter. It varies as the animation value",
    "// transitions from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.only(",
    "        left: 2.0,",
    "        right: 2.0,",
    "        top: 2.0,",
    "      ),",
    "      child: SizeTransition(",
    "        sizeFactor: animation,",
    "        child: GestureDetector(",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: selected ? Colors.black12 : Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text(",
    "                  'Item $item',",
    "                  style: Theme.of(context).textTheme.headlineMedium,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  SliverAnimatedList  Example"
},
"Flutter  AnimatedList  Example": {
  "prefix": "flutter-AnimatedList",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedList].",
    "",
    "void main() {",
    "  runApp(const AnimatedListSample());",
    "}",
    "",
    "class AnimatedListSample extends StatefulWidget {",
    "  const AnimatedListSample({super.key});",
    "",
    "  @override",
    "  State<AnimatedListSample> createState() => _AnimatedListSampleState();",
    "}",
    "",
    "class _AnimatedListSampleState extends State<AnimatedListSample> {",
    "  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();",
    "  late ListModel<int> _list;",
    "  int? _selectedItem;",
    "  late int _nextItem; // The next item inserted when the user presses the '+' button.",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _list = ListModel<int>(",
    "      listKey: _listKey,",
    "      initialItems: <int>[0, 1, 2],",
    "      removedItemBuilder: _buildRemovedItem,",
    "    );",
    "    _nextItem = 3;",
    "  }",
    "",
    "  // Used to build list items that haven't been removed.",
    "  Widget _buildItem(BuildContext context, int index, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: _list[index],",
    "      selected: _selectedItem == _list[index],",
    "      onTap: () {",
    "        setState(() {",
    "          _selectedItem = _selectedItem == _list[index] ? null : _list[index];",
    "        });",
    "      },",
    "    );",
    "  }",
    "",
    "  /// The builder function used to build items that have been removed.",
    "  ///",
    "  /// Used to build an item after it has been removed from the list. This method",
    "  /// is needed because a removed item remains visible until its animation has",
    "  /// completed (even though it's gone as far as this ListModel is concerned).",
    "  /// The widget will be used by the [AnimatedListState.removeItem] method's",
    "  /// [AnimatedRemovedItemBuilder] parameter.",
    "  Widget _buildRemovedItem(int item, BuildContext context, Animation<double> animation) {",
    "    return CardItem(",
    "      animation: animation,",
    "      item: item,",
    "      // No gesture detector here: we don't want removed items to be interactive.",
    "    );",
    "  }",
    "",
    "  // Insert the \"next item\" into the list model.",
    "  void _insert() {",
    "    final int index = _selectedItem == null ? _list.length : _list.indexOf(_selectedItem!);",
    "    _list.insert(index, _nextItem++);",
    "  }",
    "",
    "  // Remove the selected item from the list model.",
    "  void _remove() {",
    "    if (_selectedItem != null) {",
    "      _list.removeAt(_list.indexOf(_selectedItem!));",
    "      setState(() {",
    "        _selectedItem = null;",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('AnimatedList'),",
    "          actions: <Widget>[",
    "            IconButton(",
    "              icon: const Icon(Icons.add_circle),",
    "              onPressed: _insert,",
    "              tooltip: 'insert a new item',",
    "            ),",
    "            IconButton(",
    "              icon: const Icon(Icons.remove_circle),",
    "              onPressed: _remove,",
    "              tooltip: 'remove the selected item',",
    "            ),",
    "          ],",
    "        ),",
    "        body: Padding(",
    "          padding: const EdgeInsets.all(16.0),",
    "          child: AnimatedList(",
    "            key: _listKey,",
    "            initialItemCount: _list.length,",
    "            itemBuilder: _buildItem,",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef RemovedItemBuilder<T> = Widget Function(T item, BuildContext context, Animation<double> animation);",
    "",
    "/// Keeps a Dart [List] in sync with an [AnimatedList].",
    "///",
    "/// The [insert] and [removeAt] methods apply to both the internal list and",
    "/// the animated list that belongs to [listKey].",
    "///",
    "/// This class only exposes as much of the Dart List API as is needed by the",
    "/// sample app. More list methods are easily added, however methods that",
    "/// mutate the list must make the same changes to the animated list in terms",
    "/// of [AnimatedListState.insertItem] and [AnimatedList.removeItem].",
    "class ListModel<E> {",
    "  ListModel({",
    "    required this.listKey,",
    "    required this.removedItemBuilder,",
    "    Iterable<E>? initialItems,",
    "  }) : _items = List<E>.from(initialItems ?? <E>[]);",
    "",
    "  final GlobalKey<AnimatedListState> listKey;",
    "  final RemovedItemBuilder<E> removedItemBuilder;",
    "  final List<E> _items;",
    "",
    "  AnimatedListState? get _animatedList => listKey.currentState;",
    "",
    "  void insert(int index, E item) {",
    "    _items.insert(index, item);",
    "    _animatedList!.insertItem(index);",
    "  }",
    "",
    "  E removeAt(int index) {",
    "    final E removedItem = _items.removeAt(index);",
    "    if (removedItem != null) {",
    "      _animatedList!.removeItem(",
    "        index,",
    "        (BuildContext context, Animation<double> animation) {",
    "          return removedItemBuilder(removedItem, context, animation);",
    "        },",
    "      );",
    "    }",
    "    return removedItem;",
    "  }",
    "",
    "  int get length => _items.length;",
    "",
    "  E operator [](int index) => _items[index];",
    "",
    "  int indexOf(E item) => _items.indexOf(item);",
    "}",
    "",
    "/// Displays its integer item as 'item N' on a Card whose color is based on",
    "/// the item's value.",
    "///",
    "/// The text is displayed in bright green if [selected] is",
    "/// true. This widget's height is based on the [animation] parameter, it",
    "/// varies from 0 to 128 as the animation varies from 0.0 to 1.0.",
    "class CardItem extends StatelessWidget {",
    "  const CardItem({",
    "    super.key,",
    "    this.onTap,",
    "    this.selected = false,",
    "    required this.animation,",
    "    required this.item,",
    "  }) : assert(item >= 0);",
    "",
    "  final Animation<double> animation;",
    "  final VoidCallback? onTap;",
    "  final int item;",
    "  final bool selected;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    TextStyle textStyle = Theme.of(context).textTheme.headlineMedium!;",
    "    if (selected) {",
    "      textStyle = textStyle.copyWith(color: Colors.lightGreenAccent[400]);",
    "    }",
    "    return Padding(",
    "      padding: const EdgeInsets.all(2.0),",
    "      child: SizeTransition(",
    "        sizeFactor: animation,",
    "        child: GestureDetector(",
    "          behavior: HitTestBehavior.opaque,",
    "          onTap: onTap,",
    "          child: SizedBox(",
    "            height: 80.0,",
    "            child: Card(",
    "              color: Colors.primaries[item % Colors.primaries.length],",
    "              child: Center(",
    "                child: Text('Item $item', style: textStyle),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AnimatedList  Example"
},
"Flutter  Animatedsize  Example": {
  "prefix": "flutter-AnimatedSize",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedSize].",
    "",
    "void main() => runApp(const AnimatedSizeExampleApp());",
    "",
    "class AnimatedSizeExampleApp extends StatelessWidget {",
    "  const AnimatedSizeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AnimatedSize Sample')),",
    "        body: const Center(",
    "          child: AnimatedSizeExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedSizeExample extends StatefulWidget {",
    "  const AnimatedSizeExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedSizeExample> createState() => _AnimatedSizeExampleState();",
    "}",
    "",
    "class _AnimatedSizeExampleState extends State<AnimatedSizeExample> {",
    "  double _size = 50.0;",
    "  bool _large = false;",
    "",
    "  void _updateSize() {",
    "    setState(() {",
    "      _size = _large ? 250.0 : 100.0;",
    "      _large = !_large;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return GestureDetector(",
    "      onTap: () => _updateSize(),",
    "      child: ColoredBox(",
    "        color: Colors.amberAccent,",
    "        child: AnimatedSize(",
    "          curve: Curves.easeIn,",
    "          duration: const Duration(seconds: 1),",
    "          child: FlutterLogo(size: _size),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  Animatedsize  Example"
},
"Flutter  AnimatedSwitcher  Example": {
  "prefix": "flutter-AnimatedSwitcher",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedSwitcher].",
    "",
    "void main() => runApp(const AnimatedSwitcherExampleApp());",
    "",
    "class AnimatedSwitcherExampleApp extends StatelessWidget {",
    "  const AnimatedSwitcherExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: AnimatedSwitcherExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedSwitcherExample extends StatefulWidget {",
    "  const AnimatedSwitcherExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedSwitcherExample> createState() => _AnimatedSwitcherExampleState();",
    "}",
    "",
    "class _AnimatedSwitcherExampleState extends State<AnimatedSwitcherExample> {",
    "  int _count = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ColoredBox(",
    "      color: Colors.white,",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          AnimatedSwitcher(",
    "            duration: const Duration(milliseconds: 500),",
    "            transitionBuilder: (Widget child, Animation<double> animation) {",
    "              return ScaleTransition(scale: animation, child: child);",
    "            },",
    "            child: Text(",
    "              '$_count',",
    "              // This key causes the AnimatedSwitcher to interpret this as a \"new\"",
    "              // child each time the count changes, so that it will begin its animation",
    "              // when the count changes.",
    "              key: ValueKey<int>(_count),",
    "              style: Theme.of(context).textTheme.headlineMedium,",
    "            ),",
    "          ),",
    "          ElevatedButton(",
    "            child: const Text('Increment'),",
    "            onPressed: () {",
    "              setState(() {",
    "                _count += 1;",
    "              });",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AnimatedSwitcher  Example"
},
"Flutter  AppLifecycleListener  Example": {
  "prefix": "flutter-AppLifecycleListener",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/scheduler.dart';",
    "",
    "/// Flutter code sample for [AppLifecycleListener].",
    "",
    "void main() {",
    "  runApp(const AppLifecycleListenerExample());",
    "}",
    "",
    "class AppLifecycleListenerExample extends StatelessWidget {",
    "  const AppLifecycleListenerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: AppLifecycleDisplay()),",
    "    );",
    "  }",
    "}",
    "",
    "class AppLifecycleDisplay extends StatefulWidget {",
    "  const AppLifecycleDisplay({super.key});",
    "",
    "  @override",
    "  State<AppLifecycleDisplay> createState() => _AppLifecycleDisplayState();",
    "}",
    "",
    "class _AppLifecycleDisplayState extends State<AppLifecycleDisplay> {",
    "  late final AppLifecycleListener _listener;",
    "  final ScrollController _scrollController = ScrollController();",
    "  final List<String> _states = <String>[];",
    "  late AppLifecycleState? _state;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _state = SchedulerBinding.instance.lifecycleState;",
    "    _listener = AppLifecycleListener(",
    "      onShow: () => _handleTransition('show'),",
    "      onResume: () => _handleTransition('resume'),",
    "      onHide: () => _handleTransition('hide'),",
    "      onInactive: () => _handleTransition('inactive'),",
    "      onPause: () => _handleTransition('pause'),",
    "      onDetach: () => _handleTransition('detach'),",
    "      onRestart: () => _handleTransition('restart'),",
    "      // This fires for each state change. Callbacks above fire only for",
    "      // specific state transitions.",
    "      onStateChange: _handleStateChange,",
    "    );",
    "    if (_state != null) {",
    "      _states.add(_state!.name);",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _listener.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _handleTransition(String name) {",
    "    setState(() {",
    "      _states.add(name);",
    "    });",
    "    _scrollController.animateTo(",
    "      _scrollController.position.maxScrollExtent,",
    "      duration: const Duration(milliseconds: 200),",
    "      curve: Curves.easeOut,",
    "    );",
    "  }",
    "",
    "  void _handleStateChange(AppLifecycleState state) {",
    "    setState(() {",
    "      _state = state;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: SizedBox(",
    "        width: 300,",
    "        child: SingleChildScrollView(",
    "          controller: _scrollController,",
    "          child: Column(",
    "            children: <Widget>[",
    "              Text('Current State: ${_state ?? 'Not initialized yet'}'),",
    "              const SizedBox(height: 30),",
    "              Text('State History:\\n  ${_states.join('\\n  ')}'),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AppLifecycleListener  Example"
},
"Flutter  AppLifecycleListener  Example": {
  "prefix": "flutter-AppLifecycleListener_two",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:ui';",
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [AppLifecycleListener].",
    "",
    "void main() {",
    "  runApp(const AppLifecycleListenerExample());",
    "}",
    "",
    "class AppLifecycleListenerExample extends StatelessWidget {",
    "  const AppLifecycleListenerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(body: ApplicationExitControl()),",
    "    );",
    "  }",
    "}",
    "",
    "class ApplicationExitControl extends StatefulWidget {",
    "  const ApplicationExitControl({super.key});",
    "",
    "  @override",
    "  State<ApplicationExitControl> createState() => _ApplicationExitControlState();",
    "}",
    "",
    "class _ApplicationExitControlState extends State<ApplicationExitControl> {",
    "  late final AppLifecycleListener _listener;",
    "  bool _shouldExit = false;",
    "  String _lastExitResponse = 'No exit requested yet';",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _listener = AppLifecycleListener(",
    "      onExitRequested: _handleExitRequest,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _listener.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  Future<void> _quit() async {",
    "    final AppExitType exitType = _shouldExit ? AppExitType.required : AppExitType.cancelable;",
    "    await ServicesBinding.instance.exitApplication(exitType);",
    "  }",
    "",
    "  Future<AppExitResponse> _handleExitRequest() async {",
    "    final AppExitResponse response = _shouldExit ? AppExitResponse.exit : AppExitResponse.cancel;",
    "    setState(() {",
    "      _lastExitResponse = 'App responded ${response.name} to exit request';",
    "    });",
    "    return response;",
    "  }",
    "",
    "  void _radioChanged(bool? value) {",
    "    value ??= true;",
    "    if (_shouldExit == value) {",
    "      return;",
    "    }",
    "    setState(() {",
    "      _shouldExit = value!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: SizedBox(",
    "        width: 300,",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            RadioListTile<bool>(",
    "              title: const Text('Do Not Allow Exit'),",
    "              groupValue: _shouldExit,",
    "              value: false,",
    "              onChanged: _radioChanged,",
    "            ),",
    "            RadioListTile<bool>(",
    "              title: const Text('Allow Exit'),",
    "              groupValue: _shouldExit,",
    "              value: true,",
    "              onChanged: _radioChanged,",
    "            ),",
    "            const SizedBox(height: 30),",
    "            ElevatedButton(",
    "              onPressed: _quit,",
    "              child: const Text('Quit'),",
    "            ),",
    "            const SizedBox(height: 30),",
    "            Text('Exit Request: $_lastExitResponse'),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  AppLifecycleListener  Example"
},
"Flutter  FutureBuilder  Example": {
  "prefix": "flutter-FutureBuilder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FutureBuilder].",
    "",
    "void main() => runApp(const FutureBuilderExampleApp());",
    "",
    "class FutureBuilderExampleApp extends StatelessWidget {",
    "  const FutureBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: FutureBuilderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class FutureBuilderExample extends StatefulWidget {",
    "  const FutureBuilderExample({super.key});",
    "",
    "  @override",
    "  State<FutureBuilderExample> createState() => _FutureBuilderExampleState();",
    "}",
    "",
    "class _FutureBuilderExampleState extends State<FutureBuilderExample> {",
    "  final Future<String> _calculation = Future<String>.delayed(",
    "    const Duration(seconds: 2),",
    "    () => 'Data Loaded',",
    "  );",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTextStyle(",
    "      style: Theme.of(context).textTheme.displayMedium!,",
    "      textAlign: TextAlign.center,",
    "      child: FutureBuilder<String>(",
    "        future: _calculation, // a previously-obtained Future<String> or null",
    "        builder: (BuildContext context, AsyncSnapshot<String> snapshot) {",
    "          List<Widget> children;",
    "          if (snapshot.hasData) {",
    "            children = <Widget>[",
    "              const Icon(",
    "                Icons.check_circle_outline,",
    "                color: Colors.green,",
    "                size: 60,",
    "              ),",
    "              Padding(",
    "                padding: const EdgeInsets.only(top: 16),",
    "                child: Text('Result: ${snapshot.data}'),",
    "              ),",
    "            ];",
    "          } else if (snapshot.hasError) {",
    "            children = <Widget>[",
    "              const Icon(",
    "                Icons.error_outline,",
    "                color: Colors.red,",
    "                size: 60,",
    "              ),",
    "              Padding(",
    "                padding: const EdgeInsets.only(top: 16),",
    "                child: Text('Error: ${snapshot.error}'),",
    "              ),",
    "            ];",
    "          } else {",
    "            children = const <Widget>[",
    "              SizedBox(",
    "                width: 60,",
    "                height: 60,",
    "                child: CircularProgressIndicator(),",
    "              ),",
    "              Padding(",
    "                padding: EdgeInsets.only(top: 16),",
    "                child: Text('Awaiting result...'),",
    "              ),",
    "            ];",
    "          }",
    "          return Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: children,",
    "            ),",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  FutureBuilder  Example"
},
"Flutter  StreamBuilder  Example": {
  "prefix": "flutter-StreamBuilder ",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:async';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [StreamBuilder].",
    "",
    "void main() => runApp(const StreamBuilderExampleApp());",
    "",
    "class StreamBuilderExampleApp extends StatelessWidget {",
    "  const StreamBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: StreamBuilderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class StreamBuilderExample extends StatefulWidget {",
    "  const StreamBuilderExample({super.key});",
    "",
    "  @override",
    "  State<StreamBuilderExample> createState() => _StreamBuilderExampleState();",
    "}",
    "",
    "class _StreamBuilderExampleState extends State<StreamBuilderExample> {",
    "  final Stream<int> _bids = (() {",
    "    late final StreamController<int> controller;",
    "    controller = StreamController<int>(",
    "      onListen: () async {",
    "        await Future<void>.delayed(const Duration(seconds: 1));",
    "        controller.add(1);",
    "        await Future<void>.delayed(const Duration(seconds: 1));",
    "        await controller.close();",
    "      },",
    "    );",
    "    return controller.stream;",
    "  })();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTextStyle(",
    "      style: Theme.of(context).textTheme.displayMedium!,",
    "      textAlign: TextAlign.center,",
    "      child: Container(",
    "        alignment: FractionalOffset.center,",
    "        color: Colors.white,",
    "        child: StreamBuilder<int>(",
    "          stream: _bids,",
    "          builder: (BuildContext context, AsyncSnapshot<int> snapshot) {",
    "            List<Widget> children;",
    "            if (snapshot.hasError) {",
    "              children = <Widget>[",
    "                const Icon(",
    "                  Icons.error_outline,",
    "                  color: Colors.red,",
    "                  size: 60,",
    "                ),",
    "                Padding(",
    "                  padding: const EdgeInsets.only(top: 16),",
    "                  child: Text('Error: ${snapshot.error}'),",
    "                ),",
    "                Padding(",
    "                  padding: const EdgeInsets.only(top: 8),",
    "                  child: Text('Stack trace: ${snapshot.stackTrace}'),",
    "                ),",
    "              ];",
    "            } else {",
    "              switch (snapshot.connectionState) {",
    "                case ConnectionState.none:",
    "                  children = const <Widget>[",
    "                    Icon(",
    "                      Icons.info,",
    "                      color: Colors.blue,",
    "                      size: 60,",
    "                    ),",
    "                    Padding(",
    "                      padding: EdgeInsets.only(top: 16),",
    "                      child: Text('Select a lot'),",
    "                    ),",
    "                  ];",
    "                case ConnectionState.waiting:",
    "                  children = const <Widget>[",
    "                    SizedBox(",
    "                      width: 60,",
    "                      height: 60,",
    "                      child: CircularProgressIndicator(),",
    "                    ),",
    "                    Padding(",
    "                      padding: EdgeInsets.only(top: 16),",
    "                      child: Text('Awaiting bids...'),",
    "                    ),",
    "                  ];",
    "                case ConnectionState.active:",
    "                  children = <Widget>[",
    "                    const Icon(",
    "                      Icons.check_circle_outline,",
    "                      color: Colors.green,",
    "                      size: 60,",
    "                    ),",
    "                    Padding(",
    "                      padding: const EdgeInsets.only(top: 16),",
    "                      child: Text('\\$${snapshot.data}'),",
    "                    ),",
    "                  ];",
    "                case ConnectionState.done:",
    "                  children = <Widget>[",
    "                    const Icon(",
    "                      Icons.info,",
    "                      color: Colors.blue,",
    "                      size: 60,",
    "                    ),",
    "                    Padding(",
    "                      padding: const EdgeInsets.only(top: 16),",
    "                      child: Text('\\$${snapshot.data} (closed)'),",
    "                    ),",
    "                  ];",
    "              }",
    "            }",
    "",
    "            return Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: children,",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  StreamBuilder  Example"
},
"Flutter  RawAutocomplete  Example": {
  "prefix": "flutter-RawAutocomplete",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RawAutocomplete].",
    "",
    "void main() => runApp(const AutocompleteExampleApp());",
    "",
    "class AutocompleteExampleApp extends StatelessWidget {",
    "  const AutocompleteExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('RawAutocomplete Custom Type'),",
    "        ),",
    "        body: const Center(",
    "          child: AutocompleteCustomTypeExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// An example of a type that someone might want to autocomplete a list of.",
    "@immutable",
    "class User {",
    "  const User({",
    "    required this.email,",
    "    required this.name,",
    "  });",
    "",
    "  final String email;",
    "  final String name;",
    "",
    "  @override",
    "  String toString() {",
    "    return '$name, $email';",
    "  }",
    "",
    "  @override",
    "  bool operator ==(Object other) {",
    "    if (other.runtimeType != runtimeType) {",
    "      return false;",
    "    }",
    "    return other is User && other.name == name && other.email == email;",
    "  }",
    "",
    "  @override",
    "  int get hashCode => Object.hash(email, name);",
    "}",
    "",
    "class AutocompleteCustomTypeExample extends StatelessWidget {",
    "  const AutocompleteCustomTypeExample({super.key});",
    "",
    "  static const List<User> _userOptions = <User>[",
    "    User(name: 'Alice', email: 'alice@example.com'),",
    "    User(name: 'Bob', email: 'bob@example.com'),",
    "    User(name: 'Charlie', email: 'charlie123@gmail.com'),",
    "  ];",
    "",
    "  static String _displayStringForOption(User option) => option.name;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RawAutocomplete<User>(",
    "      optionsBuilder: (TextEditingValue textEditingValue) {",
    "        return _userOptions.where((User option) {",
    "          // Search based on User.toString, which includes both name and",
    "          // email, even though the display string is just the name.",
    "          return option.toString().contains(textEditingValue.text.toLowerCase());",
    "        });",
    "      },",
    "      displayStringForOption: _displayStringForOption,",
    "      fieldViewBuilder: (",
    "        BuildContext context,",
    "        TextEditingController textEditingController,",
    "        FocusNode focusNode,",
    "        VoidCallback onFieldSubmitted,",
    "      ) {",
    "        return TextFormField(",
    "          controller: textEditingController,",
    "          focusNode: focusNode,",
    "          onFieldSubmitted: (String value) {",
    "            onFieldSubmitted();",
    "          },",
    "        );",
    "      },",
    "      optionsViewBuilder: (BuildContext context, AutocompleteOnSelected<User> onSelected, Iterable<User> options) {",
    "        return Align(",
    "          alignment: Alignment.topLeft,",
    "          child: Material(",
    "            elevation: 4.0,",
    "            child: SizedBox(",
    "              height: 200.0,",
    "              child: ListView.builder(",
    "                padding: const EdgeInsets.all(8.0),",
    "                itemCount: options.length,",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  final User option = options.elementAt(index);",
    "                  return GestureDetector(",
    "                    onTap: () {",
    "                      onSelected(option);",
    "                    },",
    "                    child: ListTile(",
    "                      title: Text(_displayStringForOption(option)),",
    "                    ),",
    "                  );",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter  RawAutocomplete  Example"
},
"Flutter Split RawAutocomplete  Example": {
  "prefix": "flutter-RawAutocomplete_split",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for split[RawAutocomplete.focusNode] .",
    "",
    "void main() => runApp(const AutocompleteExampleApp());",
    "",
    "class AutocompleteExampleApp extends StatelessWidget {",
    "  const AutocompleteExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RawAutocompleteSplit(),",
    "    );",
    "  }",
    "}",
    "",
    "const List<String> _options = <String>[",
    "  'aardvark',",
    "  'bobcat',",
    "  'chameleon',",
    "];",
    "",
    "class RawAutocompleteSplit extends StatefulWidget {",
    "  const RawAutocompleteSplit({super.key});",
    "",
    "  @override",
    "  RawAutocompleteSplitState createState() => RawAutocompleteSplitState();",
    "}",
    "",
    "class RawAutocompleteSplitState extends State<RawAutocompleteSplit> {",
    "  final TextEditingController _textEditingController = TextEditingController();",
    "  final FocusNode _focusNode = FocusNode();",
    "  final GlobalKey _autocompleteKey = GlobalKey();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        // This is where the real field is being built.",
    "        title: TextFormField(",
    "          controller: _textEditingController,",
    "          focusNode: _focusNode,",
    "          decoration: const InputDecoration(",
    "            hintText: 'Split RawAutocomplete App',",
    "          ),",
    "          onFieldSubmitted: (String value) {",
    "            RawAutocomplete.onFieldSubmitted<String>(_autocompleteKey);",
    "          },",
    "        ),",
    "      ),",
    "      body: Align(",
    "        alignment: Alignment.topLeft,",
    "        child: RawAutocomplete<String>(",
    "          key: _autocompleteKey,",
    "          focusNode: _focusNode,",
    "          textEditingController: _textEditingController,",
    "          optionsBuilder: (TextEditingValue textEditingValue) {",
    "            return _options.where((String option) {",
    "              return option.contains(textEditingValue.text.toLowerCase());",
    "            }).toList();",
    "          },",
    "          optionsViewBuilder: (",
    "            BuildContext context,",
    "            AutocompleteOnSelected<String> onSelected,",
    "            Iterable<String> options,",
    "          ) {",
    "            return Material(",
    "              elevation: 4.0,",
    "              child: ListView(",
    "                children: options",
    "                    .map((String option) => GestureDetector(",
    "                          onTap: () {",
    "                            onSelected(option);",
    "                          },",
    "                          child: ListTile(",
    "                            title: Text(option),",
    "                          ),",
    "                        ))",
    "                    .toList(),",
    "              ),",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Split RawAutocomplete  Example"
},
"Flutter DropdowFormField  Example": {
  "prefix": "flutter-DropdowFormField",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DropdowFormField].",
    "",
    "void main() => runApp(const DropdowFormField());",
    "",
    "class DropdowFormField extends StatelessWidget {",
    "  const DropdowFormField({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('RawAutocomplete Form'),",
    "        ),",
    "        body: const Center(",
    "          child: DropdowForm(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DropdowForm extends StatefulWidget {",
    "  const DropdowForm({super.key});",
    "",
    "  @override",
    "  DropdowFormState createState() => DropdowFormState();",
    "}",
    "",
    "class DropdowFormState extends State<DropdowForm> {",
    "  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();",
    "  String? _dropdownValue;",
    "",
    "",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Form(",
    "      key: _formKey,",
    "      child: Column(",
    "        children: <Widget>[",
    "          DropdownButtonFormField<String>(",
    "            value: _dropdownValue,",
    "            icon: const Icon(Icons.arrow_downward),",
    "            hint: const Text('This is a regular DropdownButtonFormField'),",
    "            elevation: 16,",
    "            style: const TextStyle(color: Colors.deepPurple),",
    "            onChanged: (String? newValue) {",
    "              setState(() {",
    "                _dropdownValue = newValue;",
    "              });",
    "            },",
    "            items: <String>['One', 'Two', 'Free', 'Four'].map<DropdownMenuItem<String>>((String value) {",
    "              return DropdownMenuItem<String>(",
    "                value: value,",
    "                child: Text(value),",
    "              );",
    "            }).toList(),",
    "            validator: (String? value) {",
    "              if (value == null) {",
    "                return 'Must make a selection.';",
    "              }",
    "              return null;",
    "            },",
    "          ),",
    "         ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DropdowFormField  Example"
},
"Flutter AutofillGroup  Example": {
  "prefix": "flutter-AutofillGroup",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AutofillGroup].",
    "",
    "void main() => runApp(const AutofillGroupExampleApp());",
    "",
    "class AutofillGroupExampleApp extends StatelessWidget {",
    "  const AutofillGroupExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AutofillGroup Sample')),",
    "        body: const AutofillGroupExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AutofillGroupExample extends StatefulWidget {",
    "  const AutofillGroupExample({super.key});",
    "",
    "  @override",
    "  State<AutofillGroupExample> createState() => _AutofillGroupExampleState();",
    "}",
    "",
    "class _AutofillGroupExampleState extends State<AutofillGroupExample> {",
    "  bool isSameAddress = true;",
    "  final TextEditingController shippingAddress1 = TextEditingController();",
    "  final TextEditingController shippingAddress2 = TextEditingController();",
    "  final TextEditingController billingAddress1 = TextEditingController();",
    "  final TextEditingController billingAddress2 = TextEditingController();",
    "",
    "  final TextEditingController creditCardNumber = TextEditingController();",
    "  final TextEditingController creditCardSecurityCode = TextEditingController();",
    "",
    "  final TextEditingController phoneNumber = TextEditingController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListView(",
    "      children: <Widget>[",
    "        const Text('Shipping address'),",
    "        // The address fields are grouped together as some platforms are",
    "        // capable of autofilling all of these fields in one go.",
    "        AutofillGroup(",
    "          child: Column(",
    "            children: <Widget>[",
    "              TextField(",
    "                controller: shippingAddress1,",
    "                autofillHints: const <String>[AutofillHints.streetAddressLine1],",
    "              ),",
    "              TextField(",
    "                controller: shippingAddress2,",
    "                autofillHints: const <String>[AutofillHints.streetAddressLine2],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "        const Text('Billing address'),",
    "        Checkbox(",
    "          value: isSameAddress,",
    "          onChanged: (bool? newValue) {",
    "            if (newValue != null) {",
    "              setState(() {",
    "                isSameAddress = newValue;",
    "              });",
    "            }",
    "          },",
    "        ),",
    "        // Again the address fields are grouped together for the same reason.",
    "        if (!isSameAddress)",
    "          AutofillGroup(",
    "            child: Column(",
    "              children: <Widget>[",
    "                TextField(",
    "                  controller: billingAddress1,",
    "                  autofillHints: const <String>[",
    "                    AutofillHints.streetAddressLine1,",
    "                  ],",
    "                ),",
    "                TextField(",
    "                  controller: billingAddress2,",
    "                  autofillHints: const <String>[",
    "                    AutofillHints.streetAddressLine2,",
    "                  ],",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        const Text('Credit Card Information'),",
    "        // The credit card number and the security code are grouped together",
    "        // as some platforms are capable of autofilling both fields.",
    "        AutofillGroup(",
    "          child: Column(",
    "            children: <Widget>[",
    "              TextField(",
    "                controller: creditCardNumber,",
    "                autofillHints: const <String>[AutofillHints.creditCardNumber],",
    "              ),",
    "              TextField(",
    "                controller: creditCardSecurityCode,",
    "                autofillHints: const <String>[",
    "                  AutofillHints.creditCardSecurityCode,",
    "                ],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "        const Text('Contact Phone Number'),",
    "        // The phone number field can still be autofilled despite lacking an",
    "        // `AutofillScope`.",
    "        TextField(",
    "          controller: phoneNumber,",
    "          autofillHints: const <String>[AutofillHints.telephoneNumber],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AutofillGroup  Example"
},
"Flutter AbsorbPointer  Example": {
  "prefix": "flutter-AbsorbPointer",
  "scope":"dart",
  "body": [
    ".",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AbsorbPointer].",
    "",
    "void main() => runApp(const AbsorbPointerApp());",
    "",
    "class AbsorbPointerApp extends StatelessWidget {",
    "  const AbsorbPointerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AbsorbPointer Sample')),",
    "        body: const Center(",
    "          child: AbsorbPointerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AbsorbPointerExample extends StatelessWidget {",
    "  const AbsorbPointerExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Stack(",
    "      alignment: AlignmentDirectional.center,",
    "      children: <Widget>[",
    "        ",
    "        SizedBox(",
    "          width: 100.0,",
    "          height: 200.0,",
    "          child: AbsorbPointer(",
    "            child: ElevatedButton(",
    "              style: ElevatedButton.styleFrom(",
    "                backgroundColor: Colors.blue.shade200,",
    "              ),",
    "              onPressed: () {",
    "                              print(\"gg\");",
    "",
    "              },",
    "              child: null,",
    "            ),",
    "          ),",
    "        ),",
    "        SizedBox(",
    "          width: 200.0,",
    "          height: 100.0,",
    "          child: ElevatedButton(",
    "            onPressed: () {",
    "              print(\"ff\");",
    "            },",
    "            child: null,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AbsorbPointer  Example"
},
"Flutter Actions Shortcut Example": {
  "prefix": "flutter-Actions",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [Action.Action.overridable].",
    "",
    "void main() {",
    "  runApp(",
    "    const MaterialApp(",
    "      home: Scaffold(",
    "        body: Center(child: VerificationCodeGenerator()),",
    "      ),",
    "    ),",
    "  );",
    "}",
    "",
    "const CopyTextIntent copyTextIntent = CopyTextIntent._();",
    "",
    "class CopyTextIntent extends Intent {",
    "  const CopyTextIntent._();",
    "}",
    "",
    "class CopyableText extends StatelessWidget {",
    "  const CopyableText({super.key, required this.text});",
    "",
    "  final String text;",
    "",
    "  void _copy(CopyTextIntent intent) => Clipboard.setData(ClipboardData(text: text));",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Action<CopyTextIntent> defaultCopyAction = CallbackAction<CopyTextIntent>(onInvoke: _copy);",
    "    return Shortcuts(",
    "      shortcuts: const <ShortcutActivator, Intent>{",
    "        SingleActivator(LogicalKeyboardKey.keyC, control: true): copyTextIntent",
    "      },",
    "      child: Actions(",
    "        actions: <Type, Action<Intent>>{",
    "          // The Action is made overridable so the VerificationCodeGenerator",
    "          // widget can override how copying is handled.",
    "          CopyTextIntent: Action<CopyTextIntent>.overridable(defaultAction: defaultCopyAction, context: context),",
    "        },",
    "        child: Focus(",
    "          autofocus: true,",
    "          child: DefaultTextStyle.merge(",
    "            style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),",
    "            child: Text(text),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class VerificationCodeGenerator extends StatelessWidget {",
    "  const VerificationCodeGenerator({super.key});",
    "",
    "  void _copy(CopyTextIntent intent) {",
    "    debugPrint('Content copied');",
    "    Clipboard.setData(const ClipboardData(text: '111222333'));",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Actions(",
    "      actions: <Type, Action<Intent>>{CopyTextIntent: CallbackAction<CopyTextIntent>(onInvoke: _copy)},",
    "      child: const Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Text('Press Ctrl-C to Copy'),",
    "          SizedBox(height: 10),",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              CopyableText(text: '111'),",
    "              SizedBox(width: 5),",
    "              CopyableText(text: '222'),",
    "              SizedBox(width: 5),",
    "              CopyableText(text: '333'),",
    "            ],",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Actions Shortcut Example"
},
"Flutter Actions Shortcut Example": {
  "prefix": "flutter-shortcutkey",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [Action.Action.overridable].",
    "",
    "void main() {",
    "  runApp(",
    "    const MaterialApp(",
    "      home: Scaffold(",
    "        body: Center(child: VerificationCodeGenerator()),",
    "      ),",
    "    ),",
    "  );",
    "}",
    "",
    "const CopyTextIntent copyTextIntent = CopyTextIntent._();",
    "",
    "class CopyTextIntent extends Intent {",
    "  const CopyTextIntent._();",
    "}",
    "",
    "class CopyableText extends StatelessWidget {",
    "  const CopyableText({super.key, required this.text});",
    "",
    "  final String text;",
    "",
    "  void _copy(CopyTextIntent intent) => Clipboard.setData(ClipboardData(text: text));",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Action<CopyTextIntent> defaultCopyAction = CallbackAction<CopyTextIntent>(onInvoke: _copy);",
    "    return Shortcuts(",
    "      shortcuts: const <ShortcutActivator, Intent>{",
    "        SingleActivator(LogicalKeyboardKey.keyC, control: true): copyTextIntent",
    "      },",
    "      child: Actions(",
    "        actions: <Type, Action<Intent>>{",
    "          // The Action is made overridable so the VerificationCodeGenerator",
    "          // widget can override how copying is handled.",
    "          CopyTextIntent: Action<CopyTextIntent>.overridable(defaultAction: defaultCopyAction, context: context),",
    "        },",
    "        child: Focus(",
    "          autofocus: true,",
    "          child: DefaultTextStyle.merge(",
    "            style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),",
    "            child: Text(text),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class VerificationCodeGenerator extends StatelessWidget {",
    "  const VerificationCodeGenerator({super.key});",
    "",
    "  void _copy(CopyTextIntent intent) {",
    "    debugPrint('Content copied');",
    "    Clipboard.setData(const ClipboardData(text: '111222333'));",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Actions(",
    "      actions: <Type, Action<Intent>>{CopyTextIntent: CallbackAction<CopyTextIntent>(onInvoke: _copy)},",
    "      child: const Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Text('Press Ctrl-C to Copy'),",
    "          SizedBox(height: 10),",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              CopyableText(text: '111'),",
    "              SizedBox(width: 5),",
    "              CopyableText(text: '222'),",
    "              SizedBox(width: 5),",
    "              CopyableText(text: '333'),",
    "            ],",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Actions Shortcut Example"
},
"Flutter AspectRatio Example": {
  "prefix": "flutter-AspectRatio",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AspectRatio].",
    "",
    "void main() => runApp(const AspectRatioApp());",
    "",
    "class AspectRatioApp extends StatelessWidget {",
    "  const AspectRatioApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AspectRatio Sample')),",
    "        body: const AspectRatioExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AspectRatioExample extends StatelessWidget {",
    "  const AspectRatioExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      color: Colors.blue,",
    "      alignment: Alignment.center,",
    "      width: double.infinity,",
    "      height: 100.0,",
    "      child: AspectRatio(",
    "        aspectRatio: 16 / 9,",
    "        child: Container(",
    "          color: Colors.green,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AspectRatio Example"
},
"Flutter ClipRRect Example": {
  "prefix": "flutter-ClipRRect",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ClipRRect].",
    "",
    "void main() => runApp(const ClipRRectApp());",
    "",
    "class ClipRRectApp extends StatelessWidget {",
    "  const ClipRRectApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ClipRRect Sample')),",
    "        body: const ClipRRectExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ClipRRectExample extends StatelessWidget {",
    "  const ClipRRectExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    const TextStyle style = TextStyle(color: Colors.white);",
    "",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "        children: <Widget>[",
    "          Container(",
    "            alignment: Alignment.center,",
    "            constraints: const BoxConstraints(",
    "              maxWidth: 300,",
    "              maxHeight: 100,",
    "            ),",
    "            color: Colors.blue,",
    "            child: const Text('No ClipRRect', style: style),",
    "          ),",
    "          ClipRRect(",
    "            borderRadius: BorderRadius.circular(30.0),",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              constraints: const BoxConstraints(",
    "                maxWidth: 300,",
    "                maxHeight: 100,",
    "              ),",
    "              color: Colors.green,",
    "              child: const Text('ClipRRect', style: style),",
    "            ),",
    "          ),",
    "          ClipRRect(",
    "            borderRadius: const BorderRadius.only(",
    "              topLeft: Radius.circular(10.0),",
    "              topRight: Radius.circular(20.0),",
    "              bottomRight: Radius.circular(30.0),",
    "              bottomLeft: Radius.circular(40.0),",
    "            ),",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              constraints: const BoxConstraints(",
    "                maxWidth: 300,",
    "                maxHeight: 100,",
    "              ),",
    "              color: Colors.purple,",
    "              child: const Text('ClipRRect', style: style),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ClipRRect Example"
},
"Flutter CustomMultiChildLayout Example": {
  "prefix": "flutter-CustomMultiChildLayout",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [CustomMultiChildLayout].",
    "",
    "void main() => runApp(const CustomMultiChildLayoutApp());",
    "",
    "class CustomMultiChildLayoutApp extends StatelessWidget {",
    "  const CustomMultiChildLayoutApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Directionality(",
    "        // TRY THIS: Try changing the direction here and hot-reloading to",
    "        // see the layout change.",
    "        textDirection: TextDirection.ltr,",
    "        child: Scaffold(",
    "          body: CustomMultiChildLayoutExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "/// Lays out the children in a cascade, where the top corner of the next child",
    "/// is a little above (`overlap`) the lower end corner of the previous child.",
    "///",
    "/// Will relayout if the text direction changes.",
    "class _CascadeLayoutDelegate extends MultiChildLayoutDelegate {",
    "  _CascadeLayoutDelegate({",
    "    required this.colors,",
    "    required this.overlap,",
    "    required this.textDirection,",
    "  });",
    "",
    "  final Map<String, Color> colors;",
    "  final double overlap;",
    "  final TextDirection textDirection;",
    "",
    "  // Perform layout will be called when re-layout is needed.",
    "  @override",
    "  void performLayout(Size size) {",
    "    final double columnWidth = size.width / colors.length;",
    "    Offset childPosition = Offset.zero;",
    "    switch (textDirection) {",
    "      case TextDirection.rtl:",
    "        childPosition += Offset(size.width, 0);",
    "      case TextDirection.ltr:",
    "        break;",
    "    }",
    "    for (final String color in colors.keys) {",
    "      // layoutChild must be called exactly once for each child.",
    "      final Size currentSize = layoutChild(",
    "        color,",
    "        BoxConstraints(maxHeight: size.height, maxWidth: columnWidth),",
    "      );",
    "      // positionChild must be called to change the position of a child from",
    "      // what it was in the previous layout. Each child starts at (0, 0) for the",
    "      // first layout.",
    "      switch (textDirection) {",
    "        case TextDirection.rtl:",
    "          positionChild(color, childPosition - Offset(currentSize.width, 0));",
    "          childPosition += Offset(-currentSize.width, currentSize.height - overlap);",
    "        case TextDirection.ltr:",
    "          positionChild(color, childPosition);",
    "          childPosition += Offset(currentSize.width, currentSize.height - overlap);",
    "      }",
    "    }",
    "  }",
    "",
    "  // shouldRelayout is called to see if the delegate has changed and requires a",
    "  // layout to occur. Should only return true if the delegate state itself",
    "  // changes: changes in the CustomMultiChildLayout attributes will",
    "  // automatically cause a relayout, like any other widget.",
    "  @override",
    "  bool shouldRelayout(_CascadeLayoutDelegate oldDelegate) {",
    "    return oldDelegate.textDirection != textDirection || oldDelegate.overlap != overlap;",
    "  }",
    "}",
    "",
    "class CustomMultiChildLayoutExample extends StatelessWidget {",
    "  const CustomMultiChildLayoutExample({super.key});",
    "",
    "  static const Map<String, Color> _colors = <String, Color>{",
    "    'Red': Colors.red,",
    "    'Green': Colors.green,",
    "    'Blue': Colors.blue,",
    "    'Cyan': Colors.cyan,",
    "  };",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomMultiChildLayout(",
    "      delegate: _CascadeLayoutDelegate(",
    "        colors: _colors,",
    "        overlap: 30.0,",
    "        textDirection: Directionality.of(context),",
    "      ),",
    "      children: <Widget>[",
    "        // Create all of the colored boxes in the colors map.",
    "        for (final MapEntry<String, Color> entry in _colors.entries)",
    "          // The \"id\" can be any Object, not just a String.",
    "          LayoutId(",
    "            id: entry.key,",
    "            child: Container(",
    "              color: entry.value,",
    "              width: 100.0,",
    "              height: 100.0,",
    "              alignment: Alignment.center,",
    "              child: Text(entry.key),",
    "            ),",
    "          ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CustomMultiChildLayout Example"
},
"Flutter Expanded Example": {
  "prefix": "flutter-Expanded",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Expanded].",
    "",
    "void main() => runApp(const ExpandedApp());",
    "",
    "class ExpandedApp extends StatelessWidget {",
    "  const ExpandedApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Expanded Row Sample'),",
    "        ),",
    "        body: const ExpandedExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ExpandedExample extends StatelessWidget {",
    "  const ExpandedExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Row(",
    "        children: <Widget>[",
    "          Expanded(",
    "            flex: 2,",
    "            child: Container(",
    "              color: Colors.amber,",
    "              height: 100,",
    "            ),",
    "          ),",
    "          Container(",
    "            color: Colors.blue,",
    "            height: 100,",
    "            width: 50,",
    "          ),",
    "          Expanded(",
    "            child: Container(",
    "              color: Colors.amber,",
    "              height: 100,",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Expanded Example"
},
"Flutter Fittedbox Example": {
  "prefix": "flutter-FittedBox",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FittedBox].",
    "",
    "void main() => runApp(const FittedBoxApp());",
    "",
    "class FittedBoxApp extends StatelessWidget {",
    "  const FittedBoxApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('FittedBox Sample')),",
    "        body: const Center(",
    "          child: FittedBoxExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FittedBoxExample extends StatelessWidget {",
    "  const FittedBoxExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      height: 400,",
    "      width: 300,",
    "      color: Colors.blue,",
    "      child: const FittedBox(",
    "        // TRY THIS: Try changing the fit types to see how they change the way",
    "        // the placeholder fits into the container.",
    "        fit: BoxFit.fill,",
    "        child: Placeholder(),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Fittedbox Example"
},
"Flutter Flow Example": {
  "prefix": "flutter-Flow",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Flow].",
    "",
    "void main() => runApp(const FlowApp());",
    "",
    "class FlowApp extends StatelessWidget {",
    "  const FlowApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Flow Example'),",
    "        ),",
    "        body: const FlowMenu(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FlowMenu extends StatefulWidget {",
    "  const FlowMenu({super.key});",
    "",
    "  @override",
    "  State<FlowMenu> createState() => _FlowMenuState();",
    "}",
    "",
    "class _FlowMenuState extends State<FlowMenu>",
    "    with SingleTickerProviderStateMixin {",
    "  late AnimationController menuAnimation;",
    "  IconData lastTapped = Icons.notifications;",
    "  final List<IconData> menuItems = <IconData>[",
    "    Icons.home,",
    "    Icons.new_releases,",
    "    Icons.notifications,",
    "    Icons.settings,",
    "    Icons.menu,",
    "  ];",
    "",
    "  void _updateMenu(IconData icon) {",
    "    if (icon != Icons.menu) {",
    "      setState(() => lastTapped = icon);",
    "    }",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    menuAnimation = AnimationController(",
    "      duration: const Duration(milliseconds: 250),",
    "      vsync: this,",
    "    );",
    "  }",
    "",
    "  Widget flowMenuItem(IconData icon) {",
    "    final double buttonDiameter =",
    "        MediaQuery.of(context).size.width / menuItems.length;",
    "    return Padding(",
    "      padding: const EdgeInsets.symmetric(vertical: 8.0),",
    "      child: RawMaterialButton(",
    "        fillColor: lastTapped == icon ? Colors.amber[700] : Colors.blue,",
    "        splashColor: Colors.amber[100],",
    "        shape: const CircleBorder(),",
    "        constraints: BoxConstraints.tight(Size(buttonDiameter, buttonDiameter)),",
    "        onPressed: () {",
    "          _updateMenu(icon);",
    "          menuAnimation.status == AnimationStatus.completed",
    "              ? menuAnimation.reverse()",
    "              : menuAnimation.forward();",
    "        },",
    "        child: Icon(",
    "          icon,",
    "          color: Colors.white,",
    "          size: 45.0,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Flow(",
    "      delegate: FlowMenuDelegate(menuAnimation: menuAnimation),",
    "      children:",
    "          menuItems.map<Widget>((IconData icon) => flowMenuItem(icon)).toList(),",
    "    );",
    "  }",
    "}",
    "",
    "class FlowMenuDelegate extends FlowDelegate {",
    "  FlowMenuDelegate({required this.menuAnimation})",
    "      : super(repaint: menuAnimation);",
    "",
    "  final Animation<double> menuAnimation;",
    "",
    "  @override",
    "  bool shouldRepaint(FlowMenuDelegate oldDelegate) {",
    "    return menuAnimation != oldDelegate.menuAnimation;",
    "  }",
    "",
    "  @override",
    "  void paintChildren(FlowPaintingContext context) {",
    "    double dx = 0.0;",
    "    for (int i = 0; i < context.childCount; ++i) {",
    "      dx = context.getChildSize(i)!.width * i;",
    "      context.paintChild(",
    "        i,",
    "        transform: Matrix4.translationValues(",
    "          dx * menuAnimation.value,",
    "          0,",
    "          0,",
    "        ),",
    "      );",
    "    }",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Flow Example"
},
"Flutter FractionallySizedBox Example": {
  "prefix": "flutter-FractionallySizedBox",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FractionallySizedBox].",
    "",
    "void main() => runApp(const FractionallySizedBoxApp());",
    "",
    "class FractionallySizedBoxApp extends StatelessWidget {",
    "  const FractionallySizedBoxApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('FractionallySizedBox Sample')),",
    "        body: const FractionallySizedBoxExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FractionallySizedBoxExample extends StatelessWidget {",
    "  const FractionallySizedBoxExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SizedBox.expand(",
    "      child: FractionallySizedBox(",
    "        widthFactor: 0.5,",
    "        heightFactor: 0.5,",
    "        alignment: FractionalOffset.center,",
    "        child: DecoratedBox(",
    "          decoration: BoxDecoration(",
    "            border: Border.all(",
    "              color: Colors.blue,",
    "              width: 4,",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FractionallySizedBox Example"
},
"Flutter IgnorePointer  Example": {
  "prefix": "flutter-IgnorePointer",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [IgnorePointer].",
    "",
    "void main() => runApp(const IgnorePointerApp());",
    "",
    "class IgnorePointerApp extends StatelessWidget {",
    "  const IgnorePointerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          centerTitle: true,",
    "          title: const Text('IgnorePointer Sample'),",
    "        ),",
    "        body: const Center(child: IgnorePointerExample()),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class IgnorePointerExample extends StatefulWidget {",
    "  const IgnorePointerExample({super.key});",
    "",
    "  @override",
    "  State<IgnorePointerExample> createState() => _IgnorePointerExampleState();",
    "}",
    "",
    "class _IgnorePointerExampleState extends State<IgnorePointerExample> {",
    "  bool ignoring = false;",
    "  void setIgnoring(bool newValue) {",
    "    setState(() {",
    "      ignoring = newValue;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "      children: <Widget>[",
    "        Text('Ignoring: $ignoring'),",
    "        IgnorePointer(",
    "          ignoring: ignoring,",
    "          child: ElevatedButton(",
    "            style: ElevatedButton.styleFrom(",
    "              padding: const EdgeInsets.all(24.0),",
    "            ),",
    "            onPressed: () {},",
    "            child: const Text('Click me!'),",
    "          ),",
    "        ),",
    "        FilledButton(",
    "          onPressed: () {",
    "            setIgnoring(!ignoring);",
    "          },",
    "          child: Text(",
    "            ignoring ? 'Set ignoring to false' : 'Set ignoring to true',",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter IgnorePointer  Example"
},
"Flutter IndexedStack  Example": {
  "prefix": "flutter-IndexedStack",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [IndexedStack].",
    "",
    "void main() => runApp(const IndexedStackApp());",
    "",
    "class IndexedStackApp extends StatelessWidget {",
    "  const IndexedStackApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('IndexedStack Sample')),",
    "        body: const IndexedStackExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class IndexedStackExample extends StatefulWidget {",
    "  const IndexedStackExample({super.key});",
    "",
    "  @override",
    "  State<IndexedStackExample> createState() => _IndexedStackExampleState();",
    "}",
    "",
    "class _IndexedStackExampleState extends State<IndexedStackExample> {",
    "  List<String> names = <String>['Dash', 'John', 'Mary'];",
    "  int index = 0;",
    "  final TextEditingController fieldText = TextEditingController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        SizedBox(",
    "          width: 300,",
    "          child: TextField(",
    "            decoration: const InputDecoration(",
    "              border: OutlineInputBorder(),",
    "              hintText: 'Enter the name for a person to track',",
    "            ),",
    "            onSubmitted: (String value) {",
    "              setState(() {",
    "                names.add(value);",
    "              });",
    "              fieldText.clear();",
    "            },",
    "            controller: fieldText,",
    "          ),",
    "        ),",
    "        const SizedBox(height: 50),",
    "        Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            GestureDetector(",
    "              onTap: () {",
    "                setState(() {",
    "                  if (index == 0) {",
    "                    index = names.length - 1;",
    "                  } else {",
    "                    index -= 1;",
    "                  }",
    "                });",
    "              },",
    "              child: const Icon(Icons.chevron_left, key: Key('gesture1')),",
    "            ),",
    "            Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                IndexedStack(",
    "                  index: index,",
    "                  children: <Widget>[",
    "                    for (final String name in names) PersonTracker(name: name)",
    "                  ],",
    "                )",
    "              ],",
    "            ),",
    "            GestureDetector(",
    "              onTap: () {",
    "                setState(() {",
    "                  if (index == names.length - 1) {",
    "                    index = 0;",
    "                  } else {",
    "                    index += 1;",
    "                  }",
    "                });",
    "              },",
    "              child: const Icon(Icons.chevron_right, key: Key('gesture2')),",
    "            ),",
    "          ],",
    "        )",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class PersonTracker extends StatefulWidget {",
    "  const PersonTracker({super.key, required this.name});",
    "  final String name;",
    "  @override",
    "  State<PersonTracker> createState() => _PersonTrackerState();",
    "}",
    "",
    "class _PersonTrackerState extends State<PersonTracker> {",
    "  int counter = 0;",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      key: Key(widget.name),",
    "      decoration: BoxDecoration(",
    "        color: const Color.fromARGB(255, 239, 248, 255),",
    "        border: Border.all(color: const Color.fromARGB(255, 54, 60, 244)),",
    "        borderRadius: const BorderRadius.all(Radius.circular(10)),",
    "      ),",
    "      padding: const EdgeInsets.all(16.0),",
    "      child: Column(",
    "        children: <Widget>[",
    "          Text('Name: ${widget.name}'),",
    "          Text('Score: $counter'),",
    "          TextButton.icon(",
    "            key: Key('increment${widget.name}'),",
    "            icon: const Icon(Icons.add),",
    "            onPressed: () {",
    "              setState(() {",
    "                counter += 1;",
    "              });",
    "            },",
    "            label: const Text('Increment'),",
    "          )",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter IndexedStack  Example"
},
"Flutter Listener  Example": {
  "prefix": "flutter-Listener",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Listener].",
    "",
    "void main() => runApp(const ListenerApp());",
    "",
    "class ListenerApp extends StatelessWidget {",
    "  const ListenerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Listener Sample')),",
    "        body: const Center(",
    "          child: ListenerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListenerExample extends StatefulWidget {",
    "  const ListenerExample({super.key});",
    "",
    "  @override",
    "  State<ListenerExample> createState() => _ListenerExampleState();",
    "}",
    "",
    "class _ListenerExampleState extends State<ListenerExample> {",
    "  int _downCounter = 0;",
    "  int _upCounter = 0;",
    "  double x = 0.0;",
    "  double y = 0.0;",
    "",
    "  void _incrementDown(PointerEvent details) {",
    "    _updateLocation(details);",
    "    setState(() {",
    "      _downCounter++;",
    "    });",
    "  }",
    "",
    "  void _incrementUp(PointerEvent details) {",
    "    _updateLocation(details);",
    "    setState(() {",
    "      _upCounter++;",
    "    });",
    "  }",
    "",
    "  void _updateLocation(PointerEvent details) {",
    "    setState(() {",
    "      x = details.position.dx;",
    "      y = details.position.dy;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ConstrainedBox(",
    "      constraints: BoxConstraints.tight(const Size(300.0, 200.0)),",
    "      child: Listener(",
    "        onPointerDown: _incrementDown,",
    "        onPointerMove: _updateLocation,",
    "        onPointerUp: _incrementUp,",
    "        child: ColoredBox(",
    "          color: Colors.lightBlueAccent,",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text(",
    "                  'You have pressed or released in this area this many times:'),",
    "              Text(",
    "                '$_downCounter presses\\n$_upCounter releases',",
    "                style: Theme.of(context).textTheme.headlineMedium,",
    "              ),",
    "              Text(",
    "                'The cursor is here: (${x.toStringAsFixed(2)}, ${y.toStringAsFixed(2)})',",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Listener  Example"
},
"Flutter  Mouse Listener  Example": {
  "prefix": "flutter-MouseListener",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Listener].",
    "",
    "void main() => runApp(const ListenerApp());",
    "",
    "class ListenerApp extends StatelessWidget {",
    "  const ListenerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Listener Sample')),",
    "        body: const Center(",
    "          child: ListenerExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListenerExample extends StatefulWidget {",
    "  const ListenerExample({super.key});",
    "",
    "  @override",
    "  State<ListenerExample> createState() => _ListenerExampleState();",
    "}",
    "",
    "class _ListenerExampleState extends State<ListenerExample> {",
    "  int _downCounter = 0;",
    "  int _upCounter = 0;",
    "  double x = 0.0;",
    "  double y = 0.0;",
    "",
    "  void _incrementDown(PointerEvent details) {",
    "    _updateLocation(details);",
    "    setState(() {",
    "      _downCounter++;",
    "    });",
    "  }",
    "",
    "  void _incrementUp(PointerEvent details) {",
    "    _updateLocation(details);",
    "    setState(() {",
    "      _upCounter++;",
    "    });",
    "  }",
    "",
    "  void _updateLocation(PointerEvent details) {",
    "    setState(() {",
    "      x = details.position.dx;",
    "      y = details.position.dy;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ConstrainedBox(",
    "      constraints: BoxConstraints.tight(const Size(300.0, 200.0)),",
    "      child: Listener(",
    "        onPointerDown: _incrementDown,",
    "        onPointerMove: _updateLocation,",
    "        onPointerUp: _incrementUp,",
    "        child: ColoredBox(",
    "          color: Colors.lightBlueAccent,",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text(",
    "                  'You have pressed or released in this area this many times:'),",
    "              Text(",
    "                '$_downCounter presses\\n$_upCounter releases',",
    "                style: Theme.of(context).textTheme.headlineMedium,",
    "              ),",
    "              Text(",
    "                'The cursor is here: (${x.toStringAsFixed(2)}, ${y.toStringAsFixed(2)})',",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Mouse Listener  Example"
},
"Flutter MOUSE REGION  Example": {
  "prefix": "flutter-MouseRegion",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MouseRegion.onExit].",
    "",
    "void main() => runApp(const MouseRegionApp());",
    "",
    "class MouseRegionApp extends StatelessWidget {",
    "  const MouseRegionApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MouseRegion.onExit Sample')),",
    "        body: const Center(",
    "          child: MouseRegionExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// A region that hides its content one second after being hovered.",
    "class MyTimedButton extends StatefulWidget {",
    "  const MyTimedButton(",
    "      {super.key, required this.onEnterButton, required this.onExitButton});",
    "",
    "  final VoidCallback onEnterButton;",
    "  final VoidCallback onExitButton;",
    "",
    "  @override",
    "  State<MyTimedButton> createState() => _MyTimedButton();",
    "}",
    "",
    "class _MyTimedButton extends State<MyTimedButton> {",
    "  bool regionIsHidden = false;",
    "  bool hovered = false;",
    "",
    "  Future<void> startCountdown() async {",
    "    await Future<void>.delayed(const Duration(seconds: 1));",
    "    hideButton();",
    "  }",
    "",
    "  void hideButton() {",
    "    setState(() {",
    "      regionIsHidden = true;",
    "    });",
    "    // This statement is necessary.",
    "    if (hovered) {",
    "      widget.onExitButton();",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SizedBox(",
    "      width: 100,",
    "      height: 100,",
    "      child: MouseRegion(",
    "        child: regionIsHidden",
    "            ? null",
    "            : MouseRegion(",
    "                onEnter: (_) {",
    "                  widget.onEnterButton();",
    "                  setState(() {",
    "                    hovered = true;",
    "                  });",
    "                  startCountdown();",
    "                },",
    "                onExit: (_) {",
    "                  setState(() {",
    "                    hovered = false;",
    "                  });",
    "                  widget.onExitButton();",
    "                },",
    "                child: Container(color: Colors.red),",
    "              ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MouseRegionExample extends StatefulWidget {",
    "  const MouseRegionExample({super.key});",
    "",
    "  @override",
    "  State<MouseRegionExample> createState() => _MouseRegionExampleState();",
    "}",
    "",
    "class _MouseRegionExampleState extends State<MouseRegionExample> {",
    "  Key key = UniqueKey();",
    "  bool hovering = false;",

    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        ElevatedButton(",
    "          onPressed: () {",
    "            setState(() {",
    "              key = UniqueKey();",
    "            });",
    "          },",
    "          child: const Text('Refresh'),",
    "        ),",
    "        if (hovering) const Text('Hovering'),",
    "        if (!hovering) const Text('Not hovering'),",
    "        MyTimedButton(",
    "          key: key,",
    "          onEnterButton: () {",
    "            setState(() {",
    "              hovering = true;",
    "            });",
    "          },",
    "          onExitButton: () {",
    "            setState(() {",
    "              hovering = false;",
    "            });",
    "          },",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter MOUSE REGION  Example"
},
"Flutter Offstage  Example": {
  "prefix": "flutter-offstage",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Offstage].",
    "",
    "void main() => runApp(const OffstageApp());",
    "",
    "class OffstageApp extends StatelessWidget {",
    "  const OffstageApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Offstage Sample')),",
    "        body: const Center(",
    "          child: OffstageExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class OffstageExample extends StatefulWidget {",
    "  const OffstageExample({super.key});",
    "",
    "  @override",
    "  State<OffstageExample> createState() => _OffstageExampleState();",
    "}",
    "",
    "class _OffstageExampleState extends State<OffstageExample> {",
    "  final GlobalKey _key = GlobalKey();",
    "  bool _offstage = true;",
    "",
    "  Size _getFlutterLogoSize() {",
    "    final RenderBox renderLogo =",
    "        _key.currentContext!.findRenderObject()! as RenderBox;",
    "    return renderLogo.size;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        Offstage(",
    "          offstage: _offstage,",
    "          child: FlutterLogo(",
    "            key: _key,",
    "            size: 150.0,",
    "          ),",
    "        ),",
    "        Text('Flutter logo is offstage: $_offstage'),",
    "        ElevatedButton(",
    "          child: const Text('Toggle Offstage Value'),",
    "          onPressed: () {",
    "            setState(() {",
    "              _offstage = !_offstage;",
    "            });",
    "          },",
    "        ),",
    "        if (_offstage)",
    "          ElevatedButton(",
    "              child: const Text('Get Flutter Logo size'),",
    "              onPressed: () {",
    "                ScaffoldMessenger.of(context).showSnackBar(",
    "                  SnackBar(",
    "                    content:",
    "                        Text('Flutter Logo size is ${_getFlutterLogoSize()}'),",
    "                  ),",
    "                );",
    "              }),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Offstage  Example"
},
"Flutter OverflowBox Example": {
  "prefix": "flutter-OverflowBox",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [OverflowBox].",
    "",
    "void main() => runApp(const OverflowBoxApp());",
    "",
    "class OverflowBoxApp extends StatelessWidget {",
    "  const OverflowBoxApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('OverflowBox Sample')),",
    "        body: const Center(",
    "          child: OverflowBoxExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class OverflowBoxExample extends StatelessWidget {",
    "  const OverflowBoxExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        const Text('Cover Me'),",
    "        // This parent container has fixed width and",
    "        // height of 100 pixels.",
    "        Container(",
    "          width: 100,",
    "          height: 100,",
    "          color: Theme.of(context).colorScheme.secondaryContainer,",
    "          // This OverflowBox imposes its own constraints of maxWidth",
    "          // and maxHeight of 200 pixels on its child which allows the",
    "          // child to overflow the parent container.",
    "          child: const OverflowBox(",
    "            maxWidth: 200,",
    "            maxHeight: 200,",
    "            // Without the OverflowBox, the child widget would be",
    "            // constrained to the size of the parent container",
    "            // and would not overflow the parent container.",
    "            child: FlutterLogo(size: 200),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter OverflowBox Example"
},
"Flutter PhysicalShape Example": {
  "prefix": "flutter-PhysicalShape",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PhysicalShape].",
    "",
    "void main() => runApp(const PhysicalShapeApp());",
    "",
    "class PhysicalShapeApp extends StatelessWidget {",
    "  const PhysicalShapeApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('PhysicalShape Sample'),",
    "        ),",
    "        body: const Center(child: PhysicalShapeExample()),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class PhysicalShapeExample extends StatelessWidget {",
    "  const PhysicalShapeExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return PhysicalShape(",
    "      elevation: 5.0,",
    "      clipper: ShapeBorderClipper(",
    "        shape: RoundedRectangleBorder(",
    "          borderRadius: BorderRadius.circular(10.0),",
    "        ),",
    "      ),",
    "      color: Colors.orange,",
    "      child: const SizedBox(",
    "        height: 200.0,",
    "        width: 200.0,",
    "        child: Center(",
    "          child: Text(",
    "            'Hello, World!',",
    "            style: TextStyle(",
    "              color: Colors.white,",
    "              fontSize: 20.0,",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter PhysicalShape Example"
},
"Flutter WidgetsBindingsObserver Example": {
  "prefix": "flutter-WidgetBindingsObserver",
  "scope":"dart"
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [WidgetBindingsObserver].",
    "",
    "void main() => runApp(const WidgetBindingObserverExampleApp());",
    "",
    "class WidgetBindingObserverExampleApp extends StatelessWidget {",
    "  const WidgetBindingObserverExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('WidgetBindingsObserver Sample')),",
    "        body: const WidgetBindingsObserverSample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class WidgetBindingsObserverSample extends StatefulWidget {",
    "  const WidgetBindingsObserverSample({super.key});",
    "",
    "  @override",
    "  State<WidgetBindingsObserverSample> createState() =>",
    "      _WidgetBindingsObserverSampleState();",
    "}",
    "",
    "class _WidgetBindingsObserverSampleState",
    "    extends State<WidgetBindingsObserverSample> with WidgetsBindingObserver {",
    "  final List<AppLifecycleState> _stateHistoryList = <AppLifecycleState>[];",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    WidgetsBinding.instance.addObserver(this);",
    "    if (WidgetsBinding.instance.lifecycleState != null) {",
    "      _stateHistoryList.add(WidgetsBinding.instance.lifecycleState!);",
    "    }",
    "  }",
    "",
    "  @override",
    "  void didChangeAppLifecycleState(AppLifecycleState state) {",
    "    setState(() {",
    "      _stateHistoryList.add(state);",
    "    });",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    WidgetsBinding.instance.removeObserver(this);",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    if (_stateHistoryList.isNotEmpty) {",
    "      return ListView.builder(",
    "        key: const ValueKey<String>('stateHistoryList'),",
    "        itemCount: _stateHistoryList.length,",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return Text('state is: ${_stateHistoryList[index]}');",
    "        },",
    "      );",
    "    }",
    "",
    "    return const Center(",
    "        child: Text('There are no AppLifecycleStates to show.'));",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter WidgetBindingsObserver Example"
},
"Futter ColorFiltered Example": {
  "prefix": "flutter-ColorFiltered",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ColorFiltered].",
    "",
    "void main() => runApp(const ColorFilteredExampleApp());",
    "",
    "class ColorFilteredExampleApp extends StatelessWidget {",
    "  const ColorFilteredExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ColorFiltered Sample')),",
    "        body: const ColorFilteredExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ColorFilteredExample extends StatelessWidget {",
    "  const ColorFilteredExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SingleChildScrollView(",
    "      child: Column(",
    "        children: <Widget>[",
    "          ColorFiltered(",
    "            colorFilter: const ColorFilter.mode(",
    "              Colors.red,",
    "              BlendMode.modulate,",
    "            ),",
    "            child: Image.network(",
    "              'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg',",
    "            ),",
    "          ),",
    "          ColorFiltered(",
    "            colorFilter: const ColorFilter.mode(",
    "              Colors.grey,",
    "              BlendMode.saturation,",
    "            ),",
    "            child: Image.network(",
    "              'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg',",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Futter ColorFiltered Example"
},
"Futter Dismissible Example": {
  "prefix": "flutter-Dismissible",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Dismissible].",
    "",
    "void main() => runApp(const DismissibleExampleApp());",
    "",
    "class DismissibleExampleApp extends StatelessWidget {",
    "  const DismissibleExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Dismissible Sample')),",
    "        body: const DismissibleExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DismissibleExample extends StatefulWidget {",
    "  const DismissibleExample({super.key});",
    "",
    "  @override",
    "  State<DismissibleExample> createState() => _DismissibleExampleState();",
    "}",
    "",
    "class _DismissibleExampleState extends State<DismissibleExample> {",
    "  List<int> items = List<int>.generate(100, (int index) => index);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListView.builder(",
    "      itemCount: items.length,",
    "      padding: const EdgeInsets.symmetric(vertical: 16),",
    "      itemBuilder: (BuildContext context, int index) {",
    "        return Dismissible(",
    "          background: Container(",
    "            color: Colors.green,",
    "          ),",
    "          key: ValueKey<int>(items[index]),",
    "          onDismissed: (DismissDirection direction) {",
    "            setState(() {",
    "              items.removeAt(index);",
    "            });",
    "          },",
    "          child: ListTile(",
    "            title: Text(",
    "              'Item ${items[index]}',",
    "            ),",
    "          ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Futter Dismissible Example"
},
"Futter Draggable Example": {
  "prefix": "flutter-Draggable",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Draggable].",
    "",
    "void main() => runApp(const DraggableExampleApp());",
    "",
    "class DraggableExampleApp extends StatelessWidget {",
    "  const DraggableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Draggable Sample')),",
    "        body: const DraggableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DraggableExample extends StatefulWidget {",
    "  const DraggableExample({super.key});",
    "",
    "  @override",
    "  State<DraggableExample> createState() => _DraggableExampleState();",
    "}",
    "",
    "class _DraggableExampleState extends State<DraggableExample> {",
    "  int acceptedData = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "      children: <Widget>[",
    "        Draggable<int>(",
    "          // Data is the value this Draggable stores.",
    "          data: 10,",
    "          feedback: Container(",
    "            color: Colors.deepOrange,",
    "            height: 100,",
    "            width: 100,",
    "            child: const Icon(Icons.directions_run),",
    "          ),",
    "          childWhenDragging: Container(",
    "            height: 100.0,",
    "            width: 100.0,",
    "            color: Colors.pinkAccent,",
    "            child: const Center(",
    "              child: Text('Child When Dragging'),",
    "            ),",
    "          ),",
    "          child: Container(",
    "            height: 100.0,",
    "            width: 100.0,",
    "            color: Colors.lightGreenAccent,",
    "            child: const Center(",
    "              child: Text('Draggable'),",
    "            ),",
    "          ),",
    "        ),",
    "        DragTarget<int>(",
    "          builder: (",
    "            BuildContext context,",
    "            List<dynamic> accepted,",
    "            List<dynamic> rejected,",
    "          ) {",
    "            return Container(",
    "              height: 100.0,",
    "              width: 100.0,",
    "              color: Colors.cyan,",
    "              child: Center(",
    "                child: Text('Value is updated to: $acceptedData'),",
    "              ),",
    "            );",
    "          },",
    "          onAccept: (int data) {",
    "            setState(() {",
    "              acceptedData += data;",
    "            });",
    "          },",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Futter Draggable Example"
},
"Flutter KeyboardInsertedContent Example": {
  "prefix": "keyboard inserted content",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:typed_data';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [EditableText.onContentInserted].",
    "",
    "void main() => runApp(const KeyboardInsertedContentApp());",
    "",
    "class KeyboardInsertedContentApp extends StatelessWidget {",
    "  const KeyboardInsertedContentApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: KeyboardInsertedContentDemo(),",
    "    );",
    "  }",
    "}",
    "",
    "class KeyboardInsertedContentDemo extends StatefulWidget {",
    "  const KeyboardInsertedContentDemo({super.key});",
    "",
    "  @override",
    "  State<KeyboardInsertedContentDemo> createState() =>",
    "      _KeyboardInsertedContentDemoState();",
    "}",
    "",
    "class _KeyboardInsertedContentDemoState",
    "    extends State<KeyboardInsertedContentDemo> {",
    "  final TextEditingController _controller = TextEditingController();",
    "  Uint8List? bytes;",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Keyboard Inserted Content Sample')),",
    "      body: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          const Text(",
    "              \"Here's a text field that supports inserting only png or gif content:\"),",
    "          TextField(",
    "            controller: _controller,",
    "            contentInsertionConfiguration: ContentInsertionConfiguration(",
    "              allowedMimeTypes: const <String>['image/png', 'image/gif'],",
    "              onContentInserted: (KeyboardInsertedContent data) async {",
    "                if (data.data != null) {",
    "                  setState(() {",
    "                    bytes = data.data;",
    "                  });",
    "                }",
    "              },",
    "            ),",
    "          ),",
    "          if (bytes != null)",
    "            const Text(\"Here's the most recently inserted content:\"),",
    "          if (bytes != null) Image.memory(bytes!),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter KeyboardInsertedContent Example"
},"Flutter KeyboardInsertedContent Example": {
  "prefix": "flutter-Textfield-Input-Configuration",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:typed_data';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [EditableText.onContentInserted].",
    "",
    "void main() => runApp(const KeyboardInsertedContentApp());",
    "",
    "class KeyboardInsertedContentApp extends StatelessWidget {",
    "  const KeyboardInsertedContentApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: KeyboardInsertedContentDemo(),",
    "    );",
    "  }",
    "}",
    "",
    "class KeyboardInsertedContentDemo extends StatefulWidget {",
    "  const KeyboardInsertedContentDemo({super.key});",
    "",
    "  @override",
    "  State<KeyboardInsertedContentDemo> createState() =>",
    "      _KeyboardInsertedContentDemoState();",
    "}",
    "",
    "class _KeyboardInsertedContentDemoState",
    "    extends State<KeyboardInsertedContentDemo> {",
    "  final TextEditingController _controller = TextEditingController();",
    "  Uint8List? bytes;",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Keyboard Inserted Content Sample')),",
    "      body: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          const Text(",
    "              \"Here's a text field that supports inserting only png or gif content:\"),",
    "          TextField(",
    "            controller: _controller,",
    "            contentInsertionConfiguration: ContentInsertionConfiguration(",
    "              allowedMimeTypes: const <String>['image/png', 'image/gif'],",
    "              onContentInserted: (KeyboardInsertedContent data) async {",
    "                if (data.data != null) {",
    "                  setState(() {",
    "                    bytes = data.data;",
    "                  });",
    "                }",
    "              },",
    "            ),",
    "          ),",
    "          if (bytes != null)",
    "            const Text(\"Here's the most recently inserted content:\"),",
    "          if (bytes != null) Image.memory(bytes!),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter KeyboardInsertedContent Example"
},"Flutter FocusNode Example": {
  "prefix": "flutter-FocusNode",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [FocusNode].",
    "",
    "void main() => runApp(const FocusNodeExampleApp());",
    "",
    "class FocusNodeExampleApp extends StatelessWidget {",
    "  const FocusNodeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('FocusNode Sample')),",
    "        body: const FocusNodeExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ColorfulButton extends StatefulWidget {",
    "  const ColorfulButton({super.key});",
    "",
    "  @override",
    "  State<ColorfulButton> createState() => _ColorfulButtonState();",
    "}",
    "",
    "class _ColorfulButtonState extends State<ColorfulButton> {",
    "  late FocusNode _node;",
    "  bool _focused = false;",
    "  late FocusAttachment _nodeAttachment;",
    "  Color _color = Colors.white;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _node = FocusNode(debugLabel: 'Button');",
    "    _node.addListener(_handleFocusChange);",
    "    _nodeAttachment = _node.attach(context, onKey: _handleKeyPress);",
    "  }",
    "",
    "  void _handleFocusChange() {",
    "    if (_node.hasFocus != _focused) {",
    "      setState(() {",
    "        _focused = _node.hasFocus;",
    "      });",
    "    }",
    "  }",
    "",
    "  KeyEventResult _handleKeyPress(FocusNode node, RawKeyEvent event) {",
    "    if (event is RawKeyDownEvent) {",
    "      debugPrint('Focus node ${node.debugLabel} got key event: ${event.logicalKey}');",
    "      if (event.logicalKey == LogicalKeyboardKey.keyR) {",
    "        debugPrint('Changing color to red.');",
    "        setState(() {",
    "          _color = Colors.red;",
    "        });",
    "        return KeyEventResult.handled;",
    "      } else if (event.logicalKey == LogicalKeyboardKey.keyG) {",
    "        debugPrint('Changing color to green.');",
    "        setState(() {",
    "          _color = Colors.green;",
    "        });",
    "        return KeyEventResult.handled;",
    "      } else if (event.logicalKey == LogicalKeyboardKey.keyB) {",
    "        debugPrint('Changing color to blue.');",
    "        setState(() {",
    "          _color = Colors.blue;",
    "        });",
    "        return KeyEventResult.handled;",
    "      }",
    "    }",
    "    return KeyEventResult.ignored;",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _node.removeListener(_handleFocusChange);",
    "    // The attachment will automatically be detached in dispose().",
    "    _node.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    _nodeAttachment.reparent();",
    "    return GestureDetector(",
    "      onTap: () {",
    "        if (_focused) {",
    "          _node.unfocus();",
    "        } else {",
    "          _node.requestFocus();",
    "        }",
    "      },",
    "      child: Center(",
    "        child: Container(",
    "          width: 400,",
    "          height: 100,",
    "          color: _focused ? _color : Colors.white,",
    "          alignment: Alignment.center,",
    "          child: Text(_focused ? \"I'm in color! Press R,G,B!\" : 'Press to focus'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FocusNodeExample extends StatelessWidget {",
    "  const FocusNodeExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "    return DefaultTextStyle(",
    "      style: textTheme.headlineMedium!,",
    "      child: const ColorfulButton(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FocusNode Example"
},
"Flutter FocusScope Example": {
  "prefix": "flutter-FocusScope",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FocusScope].",
    "",
    "void main() => runApp(const FocusScopeExampleApp());",
    "",
    "class FocusScopeExampleApp extends StatelessWidget {",
    "  const FocusScopeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: FocusScopeExample(),",
    "    );",
    "  }",
    "}",
    "",
    "/// A demonstration pane.",
    "///",
    "/// This is just a separate widget to simplify the example.",
    "class Pane extends StatelessWidget {",
    "  const Pane({",
    "    super.key,",
    "    required this.focusNode,",
    "    this.onPressed,",
    "    required this.backgroundColor,",
    "    required this.icon,",
    "    this.child,",
    "  });",
    "",
    "  final FocusNode focusNode;",
    "  final VoidCallback? onPressed;",
    "  final Color backgroundColor;",
    "  final Widget icon;",
    "  final Widget? child;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Material(",
    "      color: backgroundColor,",
    "      child: Stack(",
    "        fit: StackFit.expand,",
    "        children: <Widget>[",
    "          Center(",
    "            child: child,",
    "          ),",
    "          Align(",
    "            alignment: Alignment.topLeft,",
    "            child: IconButton(",
    "              autofocus: true,",
    "              focusNode: focusNode,",
    "              onPressed: onPressed,",
    "              icon: icon,",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FocusScopeExample extends StatefulWidget {",
    "  const FocusScopeExample({super.key});",
    "",
    "  @override",
    "  State<FocusScopeExample> createState() => _FocusScopeExampleState();",
    "}",
    "",
    "class _FocusScopeExampleState extends State<FocusScopeExample> {",
    "  bool backdropIsVisible = false;",
    "  FocusNode backdropNode = FocusNode(debugLabel: 'Close Backdrop Button');",
    "  FocusNode foregroundNode = FocusNode(debugLabel: 'Option Button');",
    "",
    "  @override",
    "  void dispose() {",
    "    backdropNode.dispose();",
    "    foregroundNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  Widget _buildStack(BuildContext context, BoxConstraints constraints) {",
    "    final Size stackSize = constraints.biggest;",
    "    return Stack(",
    "      fit: StackFit.expand,",
    "      // The backdrop is behind the front widget in the Stack, but the widgets",
    "      // would still be active and traversable without the FocusScope.",
    "      children: <Widget>[",
    "        // TRY THIS: Try removing this FocusScope entirely to see how it affects",
    "        // the behavior. Without this FocusScope, the \"ANOTHER BUTTON TO FOCUS\"",
    "        // button, and the IconButton in the backdrop Pane would be focusable",
    "        // even when the backdrop wasn't visible.",
    "        FocusScope(",
    "          // TRY THIS: Try commenting out this line. Notice that the focus",
    "          // starts on the backdrop and is stuck there? It seems like the app is",
    "          // non-responsive, but it actually isn't. This line makes sure that",
    "          // this focus scope and its children can't be focused when they're not",
    "          // visible. It might help to make the background color of the",
    "          // foreground pane semi-transparent to see it clearly.",
    "          canRequestFocus: backdropIsVisible,",
    "          child: Pane(",
    "            icon: const Icon(Icons.close),",
    "            focusNode: backdropNode,",
    "            backgroundColor: Colors.lightBlue,",
    "            onPressed: () => setState(() => backdropIsVisible = false),",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                // This button would be not visible, but still focusable from",
    "                // the foreground pane without the FocusScope.",
    "                ElevatedButton(",
    "                  onPressed: () => debugPrint('You pressed the other button!'),",
    "                  child: const Text('ANOTHER BUTTON TO FOCUS'),",
    "                ),",
    "                DefaultTextStyle(",
    "                  style: Theme.of(context).textTheme.displayMedium!,",
    "                  child: const Text('BACKDROP'),",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "        AnimatedPositioned(",
    "          curve: Curves.easeInOut,",
    "          duration: const Duration(milliseconds: 300),",
    "          top: backdropIsVisible ? stackSize.height * 0.9 : 0.0,",
    "          width: stackSize.width,",
    "          height: stackSize.height,",
    "          onEnd: () {",
    "            if (backdropIsVisible) {",
    "              backdropNode.requestFocus();",
    "            } else {",
    "              foregroundNode.requestFocus();",
    "            }",
    "          },",
    "          child: Pane(",
    "            icon: const Icon(Icons.menu),",
    "            focusNode: foregroundNode,",
    "            // TRY THIS: Try changing this to Colors.green.withOpacity(0.8) to see for",
    "            // yourself that the hidden components do/don't get focus.",
    "            backgroundColor: Colors.green,",
    "            onPressed: backdropIsVisible",
    "                ? null",
    "                : () => setState(() => backdropIsVisible = true),",
    "            child: DefaultTextStyle(",
    "              style: Theme.of(context).textTheme.displayMedium!,",
    "              child: const Text('FOREGROUND'),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    // Use a LayoutBuilder so that we can base the size of the stack on the size",
    "    // of its parent.",
    "    return LayoutBuilder(builder: _buildStack);",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FocusScope Example"
},
"Flutter OrderedTraversalPolicy Example": {
  "prefix": "flutter-OrderedTraversalPolicy",
  "scope":"dart",
  "body": [
    "",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [OrderedTraversalPolicy].",
    "",
    "void main() => runApp(const OrderedTraversalPolicyExampleApp());",
    "",
    "class OrderedTraversalPolicyExampleApp extends StatelessWidget {",
    "  const OrderedTraversalPolicyExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('OrderedTraversalPolicy Sample')),",
    "        body: const Center(",
    "          child: OrderedTraversalPolicyExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DemoButton extends StatelessWidget {",
    "  const DemoButton({",
    "    super.key,",
    "    required this.name,",
    "    this.autofocus = false,",
    "    required this.order,",
    "  });",
    "",
    "  final String name;",
    "  final bool autofocus;",
    "  final double order;",
    "",
    "  void _handleOnPressed() {",
    "    debugPrint('Button $name pressed.');",
    "    debugDumpFocusTree();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return FocusTraversalOrder(",
    "      order: NumericFocusOrder(order),",
    "      child: TextButton(",
    "        autofocus: autofocus,",
    "        onPressed: () => _handleOnPressed(),",
    "        child: Text(name),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class OrderedTraversalPolicyExample extends StatelessWidget {",
    "  const OrderedTraversalPolicyExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return FocusTraversalGroup(",
    "      policy: OrderedTraversalPolicy(),",
    "      child: const Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              DemoButton(name: 'Six', order: 6),",
    "            ],",
    "          ),",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              DemoButton(name: 'Five', order: 5),",
    "              DemoButton(name: 'Four', order: 4),",
    "            ],",
    "          ),",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              DemoButton(name: 'Three', order: 3),",
    "              DemoButton(name: 'Two', order: 2),",
    "              DemoButton(name: 'One', order: 1, autofocus: true),",
    "            ],",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter OrderedTraversalPolicy Example"
},
"Flutter Form Example": {
  "prefix": "flutter-Form",
  "scope":"dart",
  "body": [
    "",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Form].",
    "",
    "void main() => runApp(const FormExampleApp());",
    "",
    "class FormExampleApp extends StatelessWidget {",
    "  const FormExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Form Sample')),",
    "        body: const FormExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class FormExample extends StatefulWidget {",
    "  const FormExample({super.key});",
    "",
    "  @override",
    "  State<FormExample> createState() => _FormExampleState();",
    "}",
    "",
    "class _FormExampleState extends State<FormExample> {",
    "  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Form(",
    "      key: _formKey,",
    "      child: Column(",
    "        crossAxisAlignment: CrossAxisAlignment.start,",
    "        children: <Widget>[",
    "          TextFormField(",
    "            decoration: const InputDecoration(",
    "              hintText: 'Enter your email',",
    "            ),",
    "            validator: (String? value) {",
    "              if (value == null || value.isEmpty) {",
    "                return 'Please enter some text';",
    "              }",
    "              return null;",
    "            },",
    "          ),",
    "          Padding(",
    "            padding: const EdgeInsets.symmetric(vertical: 16.0),",
    "            child: ElevatedButton(",
    "              onPressed: () {",
    "                // Validate will return true if the form is valid, or false if",
    "                // the form is invalid.",
    "                if (_formKey.currentState!.validate()) {",
    "                  // Process data.",
    "                }",
    "              },",
    "              child: const Text('Submit'),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Form Example"
},
"Flutter ErrorWidget Example": {
  "prefix": "flutter-ErrorWidget",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ErrorWidget].",
    "",
    "void main() {",
    "  // Set the ErrorWidget's builder before the app is started.",
    "  ErrorWidget.builder = (FlutterErrorDetails details) {",
    "    // If we're in debug mode, use the normal error widget which shows the error",
    "    // message:",
    "    if (kDebugMode) {",
    "      return ErrorWidget(details.exception);",
    "    }",
    "    // In release builds, show a yellow-on-blue message instead:",
    "    return Container(",
    "      alignment: Alignment.center,",
    "      child: Text(",
    "        'Er   ror!\\n${details.exception}',",
    "        style: const TextStyle(color: Colors.yellow),",
    "        textAlign: TextAlign.center,",
    "        textDirection: TextDirection.ltr,",
    "      ),",
    "    );",
    "  };",
    "",
    "  // Start the app.",
    "  runApp(const ErrorWidgetExampleApp());",
    "}",
    "",
    "class ErrorWidgetExampleApp extends StatefulWidget {",
    "  const ErrorWidgetExampleApp({super.key});",
    "",
    "  @override",
    "  State<ErrorWidgetExampleApp> createState() => _ErrorWidgetExampleAppState();",
    "}",
    "",
    "class _ErrorWidgetExampleAppState extends State<ErrorWidgetExampleApp> {",
    "  bool throwError = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    if (throwError) {",
    "      // Since the error widget is only used during a build, in this contrived example,",
    "      // we purposely throw an exception in a build function.",
    "      return Builder(",
    "        builder: (BuildContext context) {",
    "          throw Exception('oh no, an error');",
    "        },",
    "      );",
    "    } else {",
    "      return MaterialApp(",
    "        home: Scaffold(",
    "          appBar: AppBar(title: const Text('ErrorWidget Sample')),",
    "          body: Center(",
    "            child: TextButton(",
    "                onPressed: () {",
    "                  setState(() {",
    "                    throwError = true;",
    "                  });",
    "                },",
    "                child: const Text('Error Prone')),",
    "          ),",
    "        ),",
    "      );",
    "    }",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ErrorWidget Example"
},
"Flutter GestureDetector Example": {
  "prefix": "flutter-GestureDetector",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/gestures.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [GestureDetector].",
    "",
    "void main() {",
    "  debugPrintGestureArenaDiagnostics = true;",
    "  runApp(const NestedGestureDetectorsApp());",
    "}",
    "",
    "enum _OnTapWinner { none, yellow, green }",
    "",
    "class NestedGestureDetectorsApp extends StatelessWidget {",
    "  const NestedGestureDetectorsApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Nested GestureDetectors')),",
    "        body: const NestedGestureDetectorsExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class NestedGestureDetectorsExample extends StatefulWidget {",
    "  const NestedGestureDetectorsExample({super.key});",
    "",
    "  @override",
    "  State<NestedGestureDetectorsExample> createState() =>",
    "      _NestedGestureDetectorsExampleState();",
    "}",
    "",
    "class _NestedGestureDetectorsExampleState",
    "    extends State<NestedGestureDetectorsExample> {",
    "  bool _isYellowTranslucent = false;",
    "  _OnTapWinner _winner = _OnTapWinner.none;",
    "  final Border highlightBorder = Border.all(color: Colors.red, width: 5);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      children: <Widget>[",
    "        Expanded(",
    "          child: GestureDetector(",
    "            onTap: () {",
    "              debugPrint('Green onTap');",
    "              setState(() {",
    "                _winner = _OnTapWinner.green;",
    "              });",
    "            },",
    "            onTapDown: (_) => debugPrint('Green onTapDown'),",
    "            onTapCancel: () => debugPrint('Green onTapCancel'),",
    "            child: Container(",
    "              alignment: Alignment.center,",
    "              decoration: BoxDecoration(",
    "                border: _winner == _OnTapWinner.green ? highlightBorder : null,",
    "                color: Colors.green,",
    "              ),",
    "              child: GestureDetector(",
    "                // Setting behavior to transparent or opaque as no impact on",
    "                // parent-child hit testing. A tap on 'Yellow' is also in",
    "                // 'Green' bounds. Both enter the gesture arena, 'Yellow' wins",
    "                // because it is in front.",
    "                behavior: _isYellowTranslucent",
    "                    ? HitTestBehavior.translucent",
    "                    : HitTestBehavior.opaque,",
    "                onTap: () {",
    "                  debugPrint('Yellow onTap');",
    "                  setState(() {",
    "                    _winner = _OnTapWinner.yellow;",
    "                  });",
    "                },",
    "                child: Container(",
    "                  alignment: Alignment.center,",
    "                  decoration: BoxDecoration(",
    "                    border:",
    "                        _winner == _OnTapWinner.yellow ? highlightBorder : null,",
    "                    color: Colors.amber,",
    "                  ),",
    "                  width: 200,",
    "                  height: 200,",
    "                  child: Text(",
    "                    'HitTextBehavior.${_isYellowTranslucent ? 'translucent' : 'opaque'}',",
    "                    textAlign: TextAlign.center,",
    "                  ),",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "        Padding(",
    "          padding: const EdgeInsets.all(8.0),",
    "          child: Row(",
    "            children: <Widget>[",
    "              ElevatedButton(",
    "                child: const Text('Reset'),",
    "                onPressed: () {",
    "                  setState(() {",
    "                    _isYellowTranslucent = false;",
    "                    _winner = _OnTapWinner.none;",
    "                  });",
    "                },",
    "              ),",
    "              const SizedBox(width: 8),",
    "              ElevatedButton(",
    "                child: Text(",
    "                  'Set Yellow behavior to ${_isYellowTranslucent ? 'opaque' : 'translucent'}',",
    "                ),",
    "                onPressed: () {",
    "                  setState(() => _isYellowTranslucent = !_isYellowTranslucent);",
    "                },",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    debugPrintGestureArenaDiagnostics = false;",
    "    super.dispose();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter GestureDetector Example"
},
"Flutter Hero Example": {
  "prefix": "flutter-Hero",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Hero].",
    "",
    "void main() => runApp(const HeroApp());",
    "",
    "class HeroApp extends StatelessWidget {",
    "  const HeroApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: HeroExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class HeroExample extends StatelessWidget {",
    "  const HeroExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('Hero Sample')),",
    "      body: Column(",
    "        crossAxisAlignment: CrossAxisAlignment.start,",
    "        children: <Widget>[",
    "          const SizedBox(height: 20.0),",
    "          ListTile(",
    "            leading: const Hero(",
    "              tag: 'hero-rectangle',",
    "              child: BoxWidget(size: Size(50.0, 50.0)),",
    "            ),",
    "            onTap: () => _gotoDetailsPage(context),",
    "            title: const Text(",
    "              'Tap on the icon to view hero animation transition.',",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  void _gotoDetailsPage(BuildContext context) {",
    "    Navigator.of(context).push(MaterialPageRoute<void>(",
    "      builder: (BuildContext context) => Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Second Page'),",
    "        ),",
    "        body: const Center(",
    "          child: Hero(",
    "            tag: 'hero-rectangle',",
    "            child: BoxWidget(size: Size(200.0, 200.0)),",
    "          ),",
    "        ),",
    "      ),",
    "    ));",
    "  }",
    "}",
    "",
    "class BoxWidget extends StatelessWidget {",
    "  const BoxWidget({super.key, required this.size});",
    "",
    "  final Size size;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      width: size.width,",
    "      height: size.height,",
    "      color: Colors.blue,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Hero Example"
},
"Flutter Network Image Example": {
  "prefix": "flutter-Image.network",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Image.network()].",
    "",
    "void main() => runApp(const LoadingBuilderExampleApp());",
    "",
    "class LoadingBuilderExampleApp extends StatelessWidget {",
    "  const LoadingBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: LoadingBuilderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class LoadingBuilderExample extends StatelessWidget {",
    "  const LoadingBuilderExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DecoratedBox(",
    "      decoration: BoxDecoration(",
    "        color: Colors.white,",
    "        border: Border.all(),",
    "        borderRadius: BorderRadius.circular(20),",
    "      ),",
    "      child: Image.network(",
    "        'https://flutter.github.io/assets-for-api-docs/assets/widgets/falcon.jpg',",
    "        loadingBuilder: (BuildContext context, Widget child,",
    "            ImageChunkEvent? loadingProgress) {",
    "          if (loadingProgress == null) {",
    "            return child;",
    "          }",
    "          return Center(",
    "            child: CircularProgressIndicator(",
    "              value: loadingProgress.expectedTotalBytes != null",
    "                  ? loadingProgress.cumulativeBytesLoaded /",
    "                      loadingProgress.expectedTotalBytes!",
    "                  : null,",
    "            ),",
    "          );",
    "        },",
    "        frameBuilder: (BuildContext context, Widget child, int? frame,",
    "            bool wasSynchronouslyLoaded) {",
    "          if (wasSynchronouslyLoaded) {",
    "            return child;",
    "          }",
    "          return AnimatedOpacity(",
    "            opacity: frame == null ? 0 : 1,",
    "            duration: const Duration(seconds: 1),",
    "            curve: Curves.easeOut,",
    "            child: child,",
    "          );",
    "        },",
    "        errorBuilder:",
    "            (BuildContext context, Object exception, StackTrace? stackTrace) {",
    "          // Appropriate logging or analytics, e.g.",
    "          // myAnalytics.recordError(",
    "          //   'An error occurred loading \"https://example.does.not.exist/image.jpg\"',",
    "          //   exception,",
    "          //   stackTrace,",
    "          // );",
    "          return const Text('😢');",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Network Image Example"
},
"Flutter AnimatedAlign Example": {
  "prefix": "flutter-AnimatedAlign",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedAlign].",
    "",
    "void main() => runApp(const AnimatedAlignExampleApp());",
    "",
    "class AnimatedAlignExampleApp extends StatelessWidget {",
    "  const AnimatedAlignExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AnimatedAlign Sample')),",
    "        body: const AnimatedAlignExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedAlignExample extends StatefulWidget {",
    "  const AnimatedAlignExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedAlignExample> createState() => _AnimatedAlignExampleState();",
    "}",
    "",
    "class _AnimatedAlignExampleState extends State<AnimatedAlignExample> {",
    "  bool selected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return GestureDetector(",
    "      onTap: () {",
    "        setState(() {",
    "          selected = !selected;",
    "        });",
    "      },",
    "      child: Center(",
    "        child: Container(",
    "          width: 250.0,",
    "          height: 250.0,",
    "          color: Colors.red,",
    "          child: AnimatedAlign(",
    "            alignment: selected ? Alignment.topRight : Alignment.bottomLeft,",
    "            duration: const Duration(seconds: 1),",
    "            curve: Curves.fastOutSlowIn,",
    "            child: const FlutterLogo(size: 50.0),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedAlign Example"
},
"Flutter AnimatedContainer Example": {
  "prefix": "flutter-AnimatedContainer",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedContainer].",
    "",
    "void main() => runApp(const AnimatedContainerExampleApp());",
    "",
    "class AnimatedContainerExampleApp extends StatelessWidget {",
    "  const AnimatedContainerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AnimatedContainer Sample')),",
    "        body: const AnimatedContainerExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedContainerExample extends StatefulWidget {",
    "  const AnimatedContainerExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedContainerExample> createState() =>",
    "      _AnimatedContainerExampleState();",
    "}",
    "",
    "class _AnimatedContainerExampleState extends State<AnimatedContainerExample> {",
    "  bool selected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return GestureDetector(",
    "      onTap: () {",
    "        setState(() {",
    "          selected = !selected;",
    "        });",
    "      },",
    "      child: Center(",
    "        child: AnimatedContainer(",
    "          width: selected ? 200.0 : 100.0,",
    "          height: selected ? 100.0 : 200.0,",
    "          color: selected ? Colors.red : Colors.blue,",
    "          alignment:",
    "              selected ? Alignment.center : AlignmentDirectional.topCenter,",
    "          duration: const Duration(seconds: 2),",
    "          curve: Curves.fastOutSlowIn,",
    "          child: const FlutterLogo(size: 75),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedContainer Example"
},
"Flutter AnimatedFractionallySizedBox Example": {
  "prefix": "flutter-AnimatedFractionallySizedBox",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedFractionallySizedBox].",
    "",
    "void main() => runApp(const AnimatedFractionallySizedBoxExampleApp());",
    "",
    "class AnimatedFractionallySizedBoxExampleApp extends StatelessWidget {",
    "  const AnimatedFractionallySizedBoxExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar:",
    "            AppBar(title: const Text('AnimatedFractionallySizedBox Sample')),",
    "        body: const AnimatedFractionallySizedBoxExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedFractionallySizedBoxExample extends StatefulWidget {",
    "  const AnimatedFractionallySizedBoxExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedFractionallySizedBoxExample> createState() =>",
    "      _AnimatedFractionallySizedBoxExampleState();",
    "}",
    "",
    "class _AnimatedFractionallySizedBoxExampleState",
    "    extends State<AnimatedFractionallySizedBoxExample> {",
    "  bool selected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return GestureDetector(",
    "      onTap: () {",
    "        setState(() {",
    "          selected = !selected;",
    "        });",
    "      },",
    "      child: Center(",
    "        child: SizedBox(",
    "          width: 200,",
    "          height: 200,",
    "          child: ColoredBox(",
    "            color: Colors.red,",
    "            child: AnimatedFractionallySizedBox(",
    "              widthFactor: selected ? 0.25 : 0.75,",
    "              heightFactor: selected ? 0.75 : 0.25,",
    "              alignment: selected ? Alignment.topLeft : Alignment.bottomRight,",
    "              duration: const Duration(seconds: 1),",
    "              curve: Curves.fastOutSlowIn,",
    "              child: const ColoredBox(",
    "                color: Colors.blue,",
    "                child: FlutterLogo(size: 75),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedFractionallySizedBox Example"
},
"Flutter AnimatedPadding Example": {
  "prefix": "flutter-AnimatedPadding",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedPadding].",
    "",
    "void main() => runApp(const AnimatedPaddingExampleApp());",
    "",
    "class AnimatedPaddingExampleApp extends StatelessWidget {",
    "  const AnimatedPaddingExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AnimatedPadding Sample')),",
    "        body: const AnimatedPaddingExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedPaddingExample extends StatefulWidget {",
    "  const AnimatedPaddingExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedPaddingExample> createState() => _AnimatedPaddingExampleState();",
    "}",
    "",
    "class _AnimatedPaddingExampleState extends State<AnimatedPaddingExample> {",
    "  double padValue = 0.0;",
    "  void _updatePadding(double value) {",
    "    setState(() {",
    "      padValue = value;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.center,",
    "      children: <Widget>[",
    "        AnimatedPadding(",
    "          padding: EdgeInsets.all(padValue),",
    "          duration: const Duration(milliseconds: 400),",
    "          curve: Curves.easeInOut,",
    "          child: Container(",
    "            width: MediaQuery.of(context).size.width,",
    "            height: MediaQuery.of(context).size.height / 5,",
    "            color: Colors.blue,",
    "          ),",
    "        ),",
    "        Text('Padding: $padValue'),",
    "        ElevatedButton(",
    "            child: const Text('Change padding'),",
    "            onPressed: () {",
    "              _updatePadding(padValue == 0.0 ? 100.0 : 0.0);",
    "            }),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedPadding Example"
},
"Flutter AnimatedPositioned Example": {
  "prefix": "flutter-AnimatedPositioned",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedPositioned].",
    "",
    "void main() => runApp(const AnimatedPositionedExampleApp());",
    "",
    "class AnimatedPositionedExampleApp extends StatelessWidget {",
    "  const AnimatedPositionedExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('AnimatedPositioned Sample')),",
    "        body: const Center(",
    "          child: AnimatedPositionedExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedPositionedExample extends StatefulWidget {",
    "  const AnimatedPositionedExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedPositionedExample> createState() =>",
    "      _AnimatedPositionedExampleState();",
    "}",
    "",
    "class _AnimatedPositionedExampleState extends State<AnimatedPositionedExample> {",
    "  bool selected = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SizedBox(",
    "      width: 200,",
    "      height: 350,",
    "      child: Stack(",
    "        children: <Widget>[",
    "          AnimatedPositioned(",
    "            width: selected ? 200.0 : 50.0,",
    "            height: selected ? 50.0 : 200.0,",
    "            top: selected ? 50.0 : 150.0,",
    "            duration: const Duration(seconds: 2),",
    "            curve: Curves.fastOutSlowIn,",
    "            child: GestureDetector(",
    "              onTap: () {",
    "                setState(() {",
    "                  selected = !selected;",
    "                });",
    "              },",
    "              child: const ColoredBox(",
    "                color: Colors.blue,",
    "                child: Center(child: Text('Tap me')),",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedPositioned Example"
},
"Flutter AnimatedSlide Example": {
  "prefix": "flutter-AnimatedSlide",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedSlide].",
    "",
    "void main() => runApp(const AnimatedSlideApp());",
    "",
    "class AnimatedSlideApp extends StatelessWidget {",
    "  const AnimatedSlideApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const AnimatedSlideExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedSlideExample extends StatefulWidget {",
    "  const AnimatedSlideExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedSlideExample> createState() => _AnimatedSlideExampleState();",
    "}",
    "",
    "class _AnimatedSlideExampleState extends State<AnimatedSlideExample> {",
    "  Offset offset = Offset.zero;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('AnimatedSlide Sample')),",
    "      body: Padding(",
    "        padding: const EdgeInsets.all(16.0),",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            Expanded(",
    "              child: Row(",
    "                children: <Widget>[",
    "                  Expanded(",
    "                    child: Container(",
    "                      alignment: Alignment.center,",
    "                      padding: const EdgeInsets.all(50.0),",
    "                      child: AnimatedSlide(",
    "                        offset: offset,",
    "                        duration: const Duration(milliseconds: 500),",
    "                        curve: Curves.easeInOut,",
    "                        child: const FlutterLogo(size: 50.0),",
    "                      ),",
    "                    ),",
    "                  ),",
    "                  Column(",
    "                    children: <Widget>[",
    "                      Text('Y', style: textTheme.bodyMedium),",
    "                      Expanded(",
    "                        child: RotatedBox(",
    "                          quarterTurns: 1,",
    "                          child: Slider(",
    "                            min: -5.0,",
    "                            max: 5.0,",
    "                            value: offset.dy,",
    "                            onChanged: (double value) {",
    "                              setState(() {",
    "                                offset = Offset(offset.dx, value);",
    "                              });",
    "                            },",
    "                          ),",
    "                        ),",
    "                      ),",
    "                    ],",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "            Row(",
    "              mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "              children: <Widget>[",
    "                Text('X', style: textTheme.bodyMedium),",
    "                Expanded(",
    "                  child: Slider(",
    "                    min: -5.0,",
    "                    max: 5.0,",
    "                    value: offset.dx,",
    "                    onChanged: (double value) {",
    "                      setState(() {",
    "                        offset = Offset(value, offset.dy);",
    "                      });",
    "                    },",
    "                  ),",
    "                ),",
    "                const SizedBox(width: 48.0),",
    "              ],",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedSlide Example"
},
"Flutter SliverAnimatedOpacity Example": {
  "prefix": "flutter-SliverAnimatedOpacity",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverAnimatedOpacity].",
    "",
    "void main() => runApp(const SliverAnimatedOpacityExampleApp());",
    "",
    "class SliverAnimatedOpacityExampleApp extends StatelessWidget {",
    "  const SliverAnimatedOpacityExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverAnimatedOpacity Sample')),",
    "        body: const Center(",
    "          child: SliverAnimatedOpacityExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverAnimatedOpacityExample extends StatefulWidget {",
    "  const SliverAnimatedOpacityExample({super.key});",
    "",
    "  @override",
    "  State<SliverAnimatedOpacityExample> createState() =>",
    "      _SliverAnimatedOpacityExampleState();",
    "}",
    "",
    "class _SliverAnimatedOpacityExampleState",
    "    extends State<SliverAnimatedOpacityExample>",
    "    with SingleTickerProviderStateMixin {",
    "  bool _visible = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(slivers: <Widget>[",
    "      SliverAnimatedOpacity(",
    "        opacity: _visible ? 1.0 : 0.0,",
    "        duration: const Duration(milliseconds: 500),",
    "        sliver: SliverFixedExtentList(",
    "          itemExtent: 100.0,",
    "          delegate: SliverChildBuilderDelegate(",
    "            (BuildContext context, int index) {",
    "              return Container(",
    "                color: index.isEven ? Colors.indigo[200] : Colors.orange[200],",
    "              );",
    "            },",
    "            childCount: 5,",
    "          ),",
    "        ),",
    "      ),",
    "      SliverToBoxAdapter(",
    "          child: FloatingActionButton(",
    "        onPressed: () {",
    "          setState(() {",
    "            _visible = !_visible;",
    "          });",
    "        },",
    "        tooltip: 'Toggle opacity',",
    "        child: const Icon(Icons.flip),",
    "      )),",
    "    ]);",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverAnimatedOpacity Example"
},
"Flutter InheritedModel Example": {
  "prefix": "flutter-InheritedModel",
"scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InheritedModel].",
    "",
    "enum LogoAspect { backgroundColor, large }",
    "",
    "void main() => runApp(const InheritedModelApp());",
    "",
    "class InheritedModelApp extends StatelessWidget {",
    "  const InheritedModelApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: InheritedModelExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class LogoModel extends InheritedModel<LogoAspect> {",
    "  const LogoModel({",
    "    super.key,",
    "    this.backgroundColor,",
    "    this.large,",
    "    required super.child,",
    "  });",
    "",
    "  final Color? backgroundColor;",
    "  final bool? large;",
    "",
    "  static Color? backgroundColorOf(BuildContext context) {",
    "    return InheritedModel.inheritFrom<LogoModel>(context,",
    "            aspect: LogoAspect.backgroundColor)",
    "        ?.backgroundColor;",
    "  }",
    "",
    "  static bool sizeOf(BuildContext context) {",
    "    return InheritedModel.inheritFrom<LogoModel>(context,",
    "                aspect: LogoAspect.large)",
    "            ?.large ??",
    "        false;",
    "  }",
    "",
    "  @override",
    "  bool updateShouldNotify(LogoModel oldWidget) {",
    "    return backgroundColor != oldWidget.backgroundColor ||",
    "        large != oldWidget.large;",
    "  }",
    "",
    "  @override",
    "  bool updateShouldNotifyDependent(",
    "      LogoModel oldWidget, Set<LogoAspect> dependencies) {",
    "    if (backgroundColor != oldWidget.backgroundColor &&",
    "        dependencies.contains(LogoAspect.backgroundColor)) {",
    "      return true;",
    "    }",
    "    if (large != oldWidget.large && dependencies.contains(LogoAspect.large)) {",
    "      return true;",
    "    }",
    "    return false;",
    "  }",
    "}",
    "",
    "class InheritedModelExample extends StatefulWidget {",
    "  const InheritedModelExample({super.key});",
    "",
    "  @override",
    "  State<InheritedModelExample> createState() => _InheritedModelExampleState();",
    "}",
    "",
    "class _InheritedModelExampleState extends State<InheritedModelExample> {",
    "  bool large = false;",
    "  Color color = Colors.blue;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('InheritedModel Sample')),",
    "      body: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "        children: <Widget>[",
    "          Center(",
    "            child: LogoModel(",
    "              backgroundColor: color,",
    "              large: large,",
    "              child: const BackgroundWidget(",
    "                child: LogoWidget(),",
    "              ),",
    "            ),",
    "          ),",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "            children: <Widget>[",
    "              ElevatedButton(",
    "                onPressed: () {",
    "                  ScaffoldMessenger.of(context).showSnackBar(",
    "                    const SnackBar(",
    "                      content: Text('Rebuilt Background'),",
    "                      duration: Duration(milliseconds: 500),",
    "                    ),",
    "                  );",
    "                  setState(() {",
    "                    if (color == Colors.blue) {",
    "                      color = Colors.red;",
    "                    } else {",
    "                      color = Colors.blue;",
    "                    }",
    "                  });",
    "                },",
    "                child: const Text('Update background'),",
    "              ),",
    "              ElevatedButton(",
    "                onPressed: () {",
    "                  ScaffoldMessenger.of(context).showSnackBar(",
    "                    const SnackBar(",
    "                      content: Text('Rebuilt LogoWidget'),",
    "                      duration: Duration(milliseconds: 500),",
    "                    ),",
    "                  );",
    "                  setState(() {",
    "                    large = !large;",
    "                  });",
    "                },",
    "                child: const Text('Resize Logo'),",
    "              ),",
    "            ],",
    "          )",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class BackgroundWidget extends StatelessWidget {",
    "  const BackgroundWidget({super.key, required this.child});",
    "",
    "  final Widget child;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Color color = LogoModel.backgroundColorOf(context)!;",
    "",
    "    return AnimatedContainer(",
    "      padding: const EdgeInsets.all(12.0),",
    "      color: color,",
    "      duration: const Duration(seconds: 2),",
    "      curve: Curves.fastOutSlowIn,",
    "      child: child,",
    "    );",
    "  }",
    "}",
    "",
    "class LogoWidget extends StatelessWidget {",
    "  const LogoWidget({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final bool largeLogo = LogoModel.sizeOf(context);",
    "",
    "    return AnimatedContainer(",
    "      padding: const EdgeInsets.all(20.0),",
    "      duration: const Duration(seconds: 2),",
    "      curve: Curves.fastLinearToSlowEaseIn,",
    "      alignment: Alignment.center,",
    "      child: FlutterLogo(size: largeLogo ? 200.0 : 100.0),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InheritedModel Example"
},
"Flutter InheritedNotifier Example": {
  "prefix": "flutter-InheritedNotifier",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:math' as math;",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InheritedNotifier].",
    "",
    "void main() => runApp(const InheritedNotifierExampleApp());",
    "",
    "class InheritedNotifierExampleApp extends StatelessWidget {",
    "  const InheritedNotifierExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: InheritedNotifierExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SpinModel extends InheritedNotifier<AnimationController> {",
    "  const SpinModel({",
    "    super.key,",
    "    super.notifier,",
    "    required super.child,",
    "  });",
    "",
    "  static double of(BuildContext context) {",
    "    return context",
    "        .dependOnInheritedWidgetOfExactType<SpinModel>()!",
    "        .notifier!",
    "        .value;",
    "  }",
    "}",
    "",
    "class Spinner extends StatelessWidget {",
    "  const Spinner({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Transform.rotate(",
    "      angle: SpinModel.of(context) * 2.0 * math.pi,",
    "      child: Container(",
    "        width: 100,",
    "        height: 100,",
    "        color: Colors.green,",
    "        child: const Center(",
    "          child: Text('Whee!'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class InheritedNotifierExample extends StatefulWidget {",
    "  const InheritedNotifierExample({super.key});",
    "",
    "  @override",
    "  State<InheritedNotifierExample> createState() =>",
    "      _InheritedNotifierExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _InheritedNotifierExampleState extends State<InheritedNotifierExample>",
    "    with TickerProviderStateMixin {",
    "  late AnimationController _controller;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _controller = AnimationController(",
    "      duration: const Duration(seconds: 10),",
    "      vsync: this,",
    "    )..repeat();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"Inherited Nsotifier\"),",
    "      ),",
    "      body: Column(",
    "        children: [",
    "          SpinModel(",
    "            notifier: _controller,",
    "            child: const Row(",
    "              mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "              children: <Widget>[",
    "                Spinner(),",
    "                Spinner(),",
    "                Spinner(),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InheritedNotifier Example"
},
"Flutter InheritedTheme Example": {
  "prefix": "flutter-InheritedTheme",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InheritedTheme].",
    "",
    "void main() {",
    "  runApp(const InheritedThemeExampleApp());",
    "}",
    "",
    "class MyAppBody extends StatelessWidget {",
    "  const MyAppBody({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final NavigatorState navigator = Navigator.of(context);",
    "    // This InheritedTheme.capture() saves references to themes that are",
    "    // found above the context provided to this widget's build method",
    "    // excluding themes are found above the navigator. Those themes do",
    "    // not have to be captured, because they will already be visible from",
    "    // the new route pushed onto said navigator.",
    "    // Themes are captured outside of the route's builder because when the",
    "    // builder executes, the context may not be valid anymore.",
    "    final CapturedThemes themes =",
    "        InheritedTheme.capture(from: context, to: navigator.context);",
    "    return GestureDetector(",
    "      onTap: () {",
    "        Navigator.of(context).push(",
    "          MaterialPageRoute<void>(",
    "            builder: (BuildContext _) {",
    "              // Wrap the actual child of the route in the previously",
    "              // captured themes.",
    "              return themes.wrap(",
    "                Container(",
    "                  alignment: Alignment.center,",
    "                  color: Colors.white,",
    "                  child: const Text('Hello World'),",
    "                ),",
    "              );",
    "            },",
    "          ),",
    "        );",
    "      },",
    "      child: const Center(child: Text('Tap Here')),",
    "    );",
    "  }",
    "}",
    "",
    "class InheritedThemeExampleApp extends StatelessWidget {",
    "  const InheritedThemeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: Scaffold(",
    "        // Override the DefaultTextStyle defined by the Scaffold.",
    "        // Descendant widgets will inherit this big blue text style.",
    "        body: DefaultTextStyle(",
    "          style: TextStyle(fontSize: 48, color: Colors.blue),",
    "          child: MyAppBody(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InheritedTheme Example"
},
"Flutter [InteractiveViewer.builder Example": {
  "prefix": "flutter-InteractiveViewer_builder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:vector_math/vector_math_64.dart' show Quad, Vector3;",
    "",
    "/// Flutter code sample for [InteractiveViewer.builder].",
    "",
    "void main() => runApp(const IVBuilderExampleApp());",
    "",
    "class IVBuilderExampleApp extends StatelessWidget {",
    "  const IVBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('IV Builder Example'),",
    "        ),",
    "        body: const _IVBuilderExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _IVBuilderExample extends StatefulWidget {",
    "  const _IVBuilderExample();",
    "",
    "  @override",
    "  State<_IVBuilderExample> createState() => _IVBuilderExampleState();",
    "}",
    "",
    "class _IVBuilderExampleState extends State<_IVBuilderExample> {",
    "  static const double _cellWidth = 160.0;",
    "  static const double _cellHeight = 80.0;",
    "",
    "  // Returns the axis aligned bounding box for the given Quad, which might not",
    "  // be axis aligned.",
    "  Rect axisAlignedBoundingBox(Quad quad) {",
    "    double xMin = quad.point0.x;",
    "    double xMax = quad.point0.x;",
    "    double yMin = quad.point0.y;",
    "    double yMax = quad.point0.y;",
    "    for (final Vector3 point in <Vector3>[",
    "      quad.point1,",
    "      quad.point2,",
    "      quad.point3,",
    "    ]) {",
    "      if (point.x < xMin) {",
    "        xMin = point.x;",
    "      } else if (point.x > xMax) {",
    "        xMax = point.x;",
    "      }",
    "",
    "      if (point.y < yMin) {",
    "        yMin = point.y;",
    "      } else if (point.y > yMax) {",
    "        yMax = point.y;",
    "      }",
    "    }",
    "",
    "    return Rect.fromLTRB(xMin, yMin, xMax, yMax);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: LayoutBuilder(",
    "        builder: (BuildContext context, BoxConstraints constraints) {",
    "          return InteractiveViewer.builder(",
    "            boundaryMargin: const EdgeInsets.all(double.infinity),",
    "            builder: (BuildContext context, Quad viewport) {",
    "              return _TableBuilder(",
    "                cellWidth: _cellWidth,",
    "                cellHeight: _cellHeight,",
    "                viewport: axisAlignedBoundingBox(viewport),",
    "                builder: (BuildContext context, int row, int column) {",
    "                  return Container(",
    "                    height: _cellHeight,",
    "                    width: _cellWidth,",
    "                    color: row % 2 + column % 2 == 1",
    "                        ? Colors.white",
    "                        : Colors.grey.withOpacity(0.1),",
    "                    child: Align(",
    "                      child: Text('$row x $column'),",
    "                    ),",
    "                  );",
    "                },",
    "              );",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "typedef _CellBuilder = Widget Function(",
    "    BuildContext context, int row, int column);",
    "",
    "class _TableBuilder extends StatelessWidget {",
    "  const _TableBuilder({",
    "    required this.cellWidth,",
    "    required this.cellHeight,",
    "    required this.viewport,",
    "    required this.builder,",
    "  });",
    "",
    "  final double cellWidth;",
    "  final double cellHeight;",
    "  final Rect viewport;",
    "  final _CellBuilder builder;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final int firstRow = (viewport.top / cellHeight).floor();",
    "    final int lastRow = (viewport.bottom / cellHeight).ceil();",
    "    final int firstCol = (viewport.left / cellWidth).floor();",
    "    final int lastCol = (viewport.right / cellWidth).ceil();",
    "",
    "    // This will create and render exactly (lastRow - firstRow) * (lastCol - firstCol) cells",
    "",
    "    return SizedBox(",
    "      // Stack needs constraints, even though we then Clip.none outside of them.",
    "      // InteractiveViewer.builder always sets constrained to false, giving infinite constraints to the child.",
    "      // See: https://master-api.flutter.dev/flutter/widgets/InteractiveViewer/constrained.html",
    "      width: 1,",
    "      height: 1,",
    "      child: Stack(",
    "        clipBehavior: Clip.none,",
    "        children: <Widget>[",
    "          for (int row = firstRow; row < lastRow; row++)",
    "            for (int col = firstCol; col < lastCol; col++)",
    "              Positioned(",
    "                left: col * cellWidth,",
    "                top: row * cellHeight,",
    "                child: builder(context, row, col),",
    "              ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InteractiveViewer.builder Example"
},
"Flutter InteractiveViewer.constrained Example": {
  "prefix": "flutter-InteractiveViewer_constrained",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InteractiveViewer.constrained].",
    "",
    "void main() => runApp(const ConstrainedExampleApp());",
    "",
    "class ConstrainedExampleApp extends StatelessWidget {",
    "  const ConstrainedExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('IV Constrained Sample')),",
    "        body: const ConstrainedExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ConstrainedExample extends StatelessWidget {",
    "  const ConstrainedExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    const int rowCount = 48;",
    "    const int columnCount = 6;",
    "",
    "    return InteractiveViewer(",
    "      panAxis: PanAxis.aligned,",
    "      constrained: false,",
    "      scaleEnabled: false,",
    "      child: Table(",
    "        columnWidths: <int, TableColumnWidth>{",
    "          for (int column = 0; column < columnCount; column += 1)",
    "            column: const FixedColumnWidth(200.0),",
    "        },",
    "        children: <TableRow>[",
    "          for (int row = 0; row < rowCount; row += 1)",
    "            TableRow(",
    "              children: <Widget>[",
    "                for (int column = 0; column < columnCount; column += 1)",
    "                  Container(",
    "                    height: 26,",
    "                    color: row % 2 + column % 2 == 1",
    "                        ? Colors.white",
    "                        : Colors.grey.withOpacity(0.1),",
    "                    child: Align(",
    "                      alignment: Alignment.centerLeft,",
    "                      child: Text('$row x $column'),",
    "                    ),",
    "                  ),",
    "              ],",
    "            ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InteractiveViewer.constrained Example"
},
"Flutter InteractiveViewer.transformationController Example": {
  "prefix": "flutter-InteractiveViewer_transformationController",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [InteractiveViewer.transformationController].",
    "",
    "void main() => runApp(const TransformationControllerExampleApp());",
    "",
    "class TransformationControllerExampleApp extends StatelessWidget {",
    "  const TransformationControllerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TransformationControllerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TransformationControllerExample extends StatefulWidget {",
    "  const TransformationControllerExample({super.key});",
    "",
    "  @override",
    "  State<TransformationControllerExample> createState() =>",
    "      _TransformationControllerExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _TransformationControllerExampleState",
    "    extends State<TransformationControllerExample>",
    "    with TickerProviderStateMixin {",
    "  final TransformationController _transformationController =",
    "      TransformationController();",
    "  Animation<Matrix4>? _animationReset;",
    "  late final AnimationController _controllerReset;",
    "",
    "  void _onAnimateReset() {",
    "    _transformationController.value = _animationReset!.value;",
    "    if (!_controllerReset.isAnimating) {",
    "      _animationReset!.removeListener(_onAnimateReset);",
    "      _animationReset = null;",
    "      _controllerReset.reset();",
    "    }",
    "  }",
    "",
    "  void _animateResetInitialize() {",
    "    _controllerReset.reset();",
    "    _animationReset = Matrix4Tween(",
    "      begin: _transformationController.value,",
    "      end: Matrix4.identity(),",
    "    ).animate(_controllerReset);",
    "    _animationReset!.addListener(_onAnimateReset);",
    "    _controllerReset.forward();",
    "  }",
    "",
    "// Stop a running reset to home transform animation.",
    "  void _animateResetStop() {",
    "    _controllerReset.stop();",
    "    _animationReset?.removeListener(_onAnimateReset);",
    "    _animationReset = null;",
    "    _controllerReset.reset();",
    "  }",
    "",
    "  void _onInteractionStart(ScaleStartDetails details) {",
    "    // If the user tries to cause a transformation while the reset animation is",
    "    // running, cancel the reset animation.",
    "    if (_controllerReset.status == AnimationStatus.forward) {",
    "      _animateResetStop();",
    "    }",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _controllerReset = AnimationController(",
    "      vsync: this,",
    "      duration: const Duration(milliseconds: 400),",
    "    );",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _controllerReset.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      backgroundColor: Theme.of(context).colorScheme.primary,",
    "      appBar: AppBar(",
    "        automaticallyImplyLeading: false,",
    "        title: const Text('IV  transformation Controller demo'),",
    "      ),",
    "      body: Center(",
    "        child: InteractiveViewer(",
    "          boundaryMargin: const EdgeInsets.all(double.infinity),",
    "          transformationController: _transformationController,",
    "          minScale: 0.1,",
    "          maxScale: 1.0,",
    "          onInteractionStart: _onInteractionStart,",
    "          child: Container(",
    "            decoration: const BoxDecoration(",
    "              gradient: LinearGradient(",
    "                begin: Alignment.topCenter,",
    "                end: Alignment.bottomCenter,",
    "                colors: <Color>[Colors.orange, Colors.red],",
    "                stops: <double>[0.0, 1.0],",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "      persistentFooterButtons: <Widget>[",
    "        IconButton(",
    "          onPressed: _animateResetInitialize,",
    "          tooltip: 'Reset',",
    "          color: Theme.of(context).colorScheme.surface,",
    "          icon: const Icon(Icons.replay),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter InteractiveViewer.transformationController Example"
},
"Flutter LayoutBuilder Example": {
  "prefix": "flutter-LayoutBuilder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [LayoutBuilder].",
    "",
    "void main() => runApp(const LayoutBuilderExampleApp());",
    "",
    "class LayoutBuilderExampleApp extends StatelessWidget {",
    "  const LayoutBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: LayoutBuilderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class LayoutBuilderExample extends StatelessWidget {",
    "  const LayoutBuilderExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: const Text('LayoutBuilder Example')),",
    "      body: LayoutBuilder(",
    "        builder: (BuildContext context, BoxConstraints constraints) {",
    "          if (constraints.maxWidth > 600) {",
    "            return _buildWideContainers();",
    "          } else {",
    "            return _buildNormalContainer();",
    "          }",
    "        },",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _buildNormalContainer() {",
    "    return Center(",
    "      child: Container(",
    "        height: 100.0,",
    "        width: 100.0,",
    "        color: Colors.red,",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _buildWideContainers() {",
    "    return Center(",
    "      child: Row(",
    "        mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "        children: <Widget>[",
    "          Container(",
    "            height: 100.0,",
    "            width: 100.0,",
    "            color: Colors.red,",
    "          ),",
    "          Container(",
    "            height: 100.0,",
    "            width: 100.0,",
    "            color: Colors.yellow,",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter LayoutBuilder Example"
},
"Flutter Magnifier Example": {
  "prefix": "flutter-Magnifier",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const MagnifierExampleApp());",
    "",
    "class MagnifierExampleApp extends StatefulWidget {",
    "  const MagnifierExampleApp({super.key});",
    "",
    "  @override",
    "  State<MagnifierExampleApp> createState() => _MagnifierExampleAppState();",
    "}",
    "",
    "class _MagnifierExampleAppState extends State<MagnifierExampleApp> {",
    "  Offset dragGesturePosition = Offset.zero;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        body: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text('Drag on the logo!'),",
    "              RepaintBoundary(",
    "                child: Stack(",
    "                  children: <Widget>[",
    "                    GestureDetector(",
    "                      onPanUpdate: (DragUpdateDetails details) => setState(",
    "                        () {",
    "                          dragGesturePosition = details.localPosition;",
    "                        },",
    "                      ),",
    "                      child: const FlutterLogo(size: 200),",
    "                    ),",
    "                    Positioned(",
    "                      left: dragGesturePosition.dx,",
    "                      top: dragGesturePosition.dy,",
    "                      child: const RawMagnifier(",
    "                        decoration: MagnifierDecoration(",
    "                          shape: CircleBorder(",
    "                            side: BorderSide(color: Colors.pink, width: 3),",
    "                          ),",
    "                        ),",
    "                        size: Size(100, 100),",
    "                        magnificationScale: 2,",
    "                      ),",
    "                    )",
    "                  ],",
    "                ),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Magnifier Example"
},
"Flutter MediaQueryData.systemGestureInsets Example": {
  "prefix": "system gesture",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MediaQueryData.systemGestureInsets].",
    "",
    "void main() => runApp(const SystemGestureInsetsExampleApp());",
    "",
    "class SystemGestureInsetsExampleApp extends StatelessWidget {",
    "  const SystemGestureInsetsExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SystemGestureInsetsExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SystemGestureInsetsExample extends StatefulWidget {",
    "  const SystemGestureInsetsExample({super.key});",
    "",
    "  @override",
    "  State<SystemGestureInsetsExample> createState() =>",
    "      _SystemGestureInsetsExampleState();",
    "}",
    "",
    "class _SystemGestureInsetsExampleState",
    "    extends State<SystemGestureInsetsExample> {",
    "  double _currentValue = 0.2;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final EdgeInsets systemGestureInsets =",
    "        MediaQuery.of(context).systemGestureInsets;",
    "    return Scaffold(",
    "      appBar:",
    "          AppBar(title: const Text('Pad Slider to avoid systemGestureInsets')),",
    "      body: Padding(",
    "        padding: EdgeInsets.only(",
    "          // only left and right padding are needed here",
    "          left: systemGestureInsets.left,",
    "          right: systemGestureInsets.right,",
    "        ),",
    "        child: Slider(",
    "          value: _currentValue,",
    "          onChanged: (double newValue) {",
    "            setState(() {",
    "              _currentValue = newValue;",
    "            });",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter MediaQueryData.systemGestureInsets Example using media query"
},
"Flutter MediaQueryData.systemGestureInsets Example": {
  "prefix": "MediaQueryData.systemGestureInsets",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MediaQueryData.systemGestureInsets].",
    "",
    "void main() => runApp(const SystemGestureInsetsExampleApp());",
    "",
    "class SystemGestureInsetsExampleApp extends StatelessWidget {",
    "  const SystemGestureInsetsExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SystemGestureInsetsExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SystemGestureInsetsExample extends StatefulWidget {",
    "  const SystemGestureInsetsExample({super.key});",
    "",
    "  @override",
    "  State<SystemGestureInsetsExample> createState() =>",
    "      _SystemGestureInsetsExampleState();",
    "}",
    "",
    "class _SystemGestureInsetsExampleState",
    "    extends State<SystemGestureInsetsExample> {",
    "  double _currentValue = 0.2;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final EdgeInsets systemGestureInsets =",
    "        MediaQuery.of(context).systemGestureInsets;",
    "    return Scaffold(",
    "      appBar:",
    "          AppBar(title: const Text('Pad Slider to avoid systemGestureInsets')),",
    "      body: Padding(",
    "        padding: EdgeInsets.only(",
    "          // only left and right padding are needed here",
    "          left: systemGestureInsets.left,",
    "          right: systemGestureInsets.right,",
    "        ),",
    "        child: Slider(",
    "          value: _currentValue,",
    "          onChanged: (double newValue) {",
    "            setState(() {",
    "              _currentValue = newValue;",
    "            });",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter MediaQueryData.systemGestureInsets Example using media query"
},
"Flutter RestorableRouteFuture Example": {
  "prefix": "flutter-RestorableRouteFuture",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RestorableRouteFuture].",
    "",
    "void main() => runApp(const RestorableRouteFutureExampleApp());",
    "",
    "class RestorableRouteFutureExampleApp extends StatelessWidget {",
    "  const RestorableRouteFutureExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      restorationScopeId: 'app',",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RestorableRouteFuture Example')),",
    "        body: const MyHome(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MyHome extends StatefulWidget {",
    "  const MyHome({super.key});",
    "",
    "  @override",
    "  State<MyHome> createState() => _MyHomeState();",
    "}",
    "",
    "class _MyHomeState extends State<MyHome> with RestorationMixin {",
    "  final RestorableInt _lastCount = RestorableInt(0);",
    "  late RestorableRouteFuture<int> _counterRoute;",
    "",
    "  @override",
    "  String get restorationId => 'home';",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _counterRoute = RestorableRouteFuture<int>(",
    "        onPresent: (NavigatorState navigator, Object? arguments) {",
    "      // Defines what route should be shown (and how it should be added",
    "      // to the navigator) when `RestorableRouteFuture.present` is called.",
    "      return navigator.restorablePush(",
    "        _counterRouteBuilder,",
    "        arguments: arguments,",
    "      );",
    "    }, onComplete: (int count) {",
    "      // Defines what should happen with the return value when the route",
    "      // completes.",
    "      setState(() {",
    "        _lastCount.value = count;",
    "      });",
    "    });",
    "  }",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    // Register the `RestorableRouteFuture` with the state restoration framework.",
    "    registerForRestoration(_counterRoute, 'route');",
    "    registerForRestoration(_lastCount, 'count');",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    super.dispose();",
    "    _lastCount.dispose();",
    "    _counterRoute.dispose();",
    "  }",
    "",
    "  // A static `RestorableRouteBuilder` that can re-create the route during",
    "  // state restoration.",
    "  @pragma('vm:entry-point')",
    "  static Route<int> _counterRouteBuilder(",
    "      BuildContext context, Object? arguments) {",
    "    return MaterialPageRoute<int>(",
    "      builder: (BuildContext context) => MyCounter(",
    "        title: arguments!.toString(),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisSize: MainAxisSize.min,",
    "        children: <Widget>[",
    "          Text('Last count: ${_lastCount.value}'),",
    "          ElevatedButton(",
    "            onPressed: () {",
    "              // Show the route defined by the `RestorableRouteFuture`.",
    "              _counterRoute.present('Awesome Counter');",
    "            },",
    "            child: const Text('Open Counter'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// Widget for the route pushed by the `RestorableRouteFuture`.",
    "class MyCounter extends StatefulWidget {",
    "  const MyCounter({super.key, required this.title});",
    "",
    "  final String title;",
    "",
    "  @override",
    "  State<MyCounter> createState() => _MyCounterState();",
    "}",
    "",
    "class _MyCounterState extends State<MyCounter> with RestorationMixin {",
    "  final RestorableInt _count = RestorableInt(0);",
    "",
    "  @override",
    "  String get restorationId => 'counter';",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    registerForRestoration(_count, 'count');",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    super.dispose();",
    "    _count.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(widget.title),",
    "        leading: BackButton(",
    "          onPressed: () {",
    "            // Return the current count of the counter from this route.",
    "            Navigator.of(context).pop(_count.value);",
    "          },",
    "        ),",
    "      ),",
    "      body: Center(",
    "        child: Text('Count: ${_count.value}'),",
    "      ),",
    "      floatingActionButton: FloatingActionButton(",
    "        child: const Icon(Icons.add),",
    "        onPressed: () {",
    "          setState(() {",
    "            _count.value++;",
    "          });",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RestorableRouteFuture Example"
},
"Flutter NestedScrollViewState Example": {
  "prefix": "flutter-NestedScrollViewState",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NestedScrollViewState].",
    "",
    "void main() => runApp(const NestedScrollViewStateExampleApp());",
    "",
    "class NestedScrollViewStateExampleApp extends StatelessWidget {",
    "  const NestedScrollViewStateExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: NestedScrollViewStateExample(),",
    "    );",
    "  }",
    "}",
    "",
    "final GlobalKey<NestedScrollViewState> globalKey = GlobalKey();",
    "",
    "class NestedScrollViewStateExample extends StatelessWidget {",
    "  const NestedScrollViewStateExample({super.key});",
    "",
    "  @override",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: NestedScrollView(",
    "        key: globalKey,",
    "        headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {",
    "          return const <Widget>[",
    "            SliverAppBar(",
    "              title: Text('NestedScrollViewState Demo!'),",
    "            ),",
    "          ];",
    "        },",
    "        body: const CustomScrollView(",
    "            // Body slivers go here!",
    "            ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  ScrollController get innerController {",
    "    return globalKey.currentState!.innerController;",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NestedScrollViewState Example"
},
"Flutter NestedScrollView  With TabExample": {
  "prefix": "flutter-NestedScrollView_tab",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NestedScrollView].",
    "",
    "void main() => runApp(const NestedScrollViewExampleApp());",
    "",
    "class NestedScrollViewExampleApp extends StatelessWidget {",
    "  const NestedScrollViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: NestedScrollViewExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class NestedScrollViewExample extends StatelessWidget {",
    "  const NestedScrollViewExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final List<String> tabs = <String>['Tab 1', 'Tab 2'];",
    "    return DefaultTabController(",
    "      length: tabs.length, // This is the number of tabs.",
    "      child: Scaffold(",
    "        body: NestedScrollView(",
    "          headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {",
    "            // These are the slivers that show up in the \"outer\" scroll view.",
    "            return <Widget>[",
    "              SliverOverlapAbsorber(",
    "                // This widget takes the overlapping behavior of the SliverAppBar,",
    "                // and redirects it to the SliverOverlapInjector below. If it is",
    "                // missing, then it is possible for the nested \"inner\" scroll view",
    "                // below to end up under the SliverAppBar even when the inner",
    "                // scroll view thinks it has not been scrolled.",
    "                // This is not necessary if the \"headerSliverBuilder\" only builds",
    "                // widgets that do not overlap the next sliver.",
    "                handle:",
    "                    NestedScrollView.sliverOverlapAbsorberHandleFor(context),",
    "                sliver: SliverAppBar(",
    "                  title:",
    "                      const Text('Books'), // This is the title in the app bar.",
    "                  pinned: true,",
    "                  expandedHeight: 150.0,",
    "                  // The \"forceElevated\" property causes the SliverAppBar to show",
    "                  // a shadow. The \"innerBoxIsScrolled\" parameter is true when the",
    "                  // inner scroll view is scrolled beyond its \"zero\" point, i.e.",
    "                  // when it appears to be scrolled below the SliverAppBar.",
    "                  // Without this, there are cases where the shadow would appear",
    "                  // or not appear inappropriately, because the SliverAppBar is",
    "                  // not actually aware of the precise position of the inner",
    "                  // scroll views.",
    "                  forceElevated: innerBoxIsScrolled,",
    "                  bottom: TabBar(",
    "                    // These are the widgets to put in each tab in the tab bar.",
    "                    tabs: tabs.map((String name) => Tab(text: name)).toList(),",
    "                  ),",
    "                ),",
    "              ),",
    "            ];",
    "          },",
    "          body: TabBarView(",
    "            // These are the contents of the tab views, below the tabs.",
    "            children: tabs.map((String name) {",
    "              return SafeArea(",
    "                top: false,",
    "                bottom: false,",
    "                child: Builder(",
    "                  // This Builder is needed to provide a BuildContext that is",
    "                  // \"inside\" the NestedScrollView, so that",
    "                  // sliverOverlapAbsorberHandleFor() can find the",
    "                  // NestedScrollView.",
    "                  builder: (BuildContext context) {",
    "                    return CustomScrollView(",
    "                      // The \"controller\" and \"primary\" members should be left",
    "                      // unset, so that the NestedScrollView can control this",
    "                      // inner scroll view.",
    "                      // If the \"controller\" property is set, then this scroll",
    "                      // view will not be associated with the NestedScrollView.",
    "                      // The PageStorageKey should be unique to this ScrollView;",
    "                      // it allows the list to remember its scroll position when",
    "                      // the tab view is not on the screen.",
    "                      key: PageStorageKey<String>(name),",
    "                      slivers: <Widget>[",
    "                        SliverOverlapInjector(",
    "                          // This is the flip side of the SliverOverlapAbsorber",
    "                          // above.",
    "                          handle:",
    "                              NestedScrollView.sliverOverlapAbsorberHandleFor(",
    "                                  context),",
    "                        ),",
    "                        SliverPadding(",
    "                          padding: const EdgeInsets.all(8.0),",
    "                          // In this example, the inner scroll view has",
    "                          // fixed-height list items, hence the use of",
    "                          // SliverFixedExtentList. However, one could use any",
    "                          // sliver widget here, e.g. SliverList or SliverGrid.",
    "                          sliver: SliverFixedExtentList(",
    "                            // The items in this example are fixed to 48 pixels",
    "                            // high. This matches the Material Design spec for",
    "                            // ListTile widgets.",
    "                            itemExtent: 48.0,",
    "                            delegate: SliverChildBuilderDelegate(",
    "                              (BuildContext context, int index) {",
    "                                // This builder is called for each child.",
    "                                // In this example, we just number each list item.",
    "                                return ListTile(",
    "                                  title: Text('Item $index'),",
    "                                );",
    "                              },",
    "                              // The childCount of the SliverChildBuilderDelegate",
    "                              // specifies how many children this inner list",
    "                              // has. In this example, each tab has a list of",
    "                              // exactly 30 items, but this is arbitrary.",
    "                              childCount: 30,",
    "                            ),",
    "                          ),",
    "                        ),",
    "                      ],",
    "                    );",
    "                  },",
    "                ),",
    "              );",
    "            }).toList(),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NestedScrollView  With TabExample"
},
"Flutter NestedScrollView  With Floating Example": {
  "prefix": "flutter-NestedScrollView_floating",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NestedScrollView].",
    "",
    "void main() => runApp(const NestedScrollViewExampleApp());",
    "",
    "class NestedScrollViewExampleApp extends StatelessWidget {",
    "  const NestedScrollViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: NestedScrollViewExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class NestedScrollViewExample extends StatelessWidget {",
    "  const NestedScrollViewExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "        body: NestedScrollView(",
    "            // Setting floatHeaderSlivers to true is required in order to float",
    "            // the outer slivers over the inner scrollable.",
    "            floatHeaderSlivers: true,",
    "            headerSliverBuilder:",
    "                (BuildContext context, bool innerBoxIsScrolled) {",
    "              return <Widget>[",
    "                SliverAppBar(",
    "                  title: const Text('Floating Nested SliverAppBar'),",
    "                  floating: true,",
    "                  expandedHeight: 200.0,",
    "                  forceElevated: innerBoxIsScrolled,",
    "                ),",
    "              ];",
    "            },",
    "            body: ListView.builder(",
    "                padding: const EdgeInsets.all(8),",
    "                itemCount: 30,",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  return SizedBox(",
    "                    height: 50,",
    "                    child: Center(child: Text('Item $index')),",
    "                  );",
    "                })));",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NestedScrollView  With Floating Example"
},
"Flutter NestedScrollView  With Snapping Example": {
  "prefix": "flutter-NestedScrollView_snapping",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NestedScrollView].",
    "",
    "void main() => runApp(const NestedScrollViewExampleApp());",
    "",
    "class NestedScrollViewExampleApp extends StatelessWidget {",
    "  const NestedScrollViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: NestedScrollViewExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class NestedScrollViewExample extends StatelessWidget {",
    "  const NestedScrollViewExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "        body: NestedScrollView(headerSliverBuilder:",
    "            (BuildContext context, bool innerBoxIsScrolled) {",
    "      return <Widget>[",
    "        SliverOverlapAbsorber(",
    "          handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context),",
    "          sliver: SliverAppBar(",
    "            title: const Text('Snapping Nested SliverAppBar'),",
    "            floating: true,",
    "            snap: true,",
    "            expandedHeight: 200.0,",
    "            forceElevated: innerBoxIsScrolled,",
    "          ),",
    "        ),",
    "      ];",
    "    }, body: Builder(builder: (BuildContext context) {",
    "      return CustomScrollView(",
    "        // The \"controller\" and \"primary\" members should be left unset, so that",
    "        // the NestedScrollView can control this inner scroll view.",
    "        // If the \"controller\" property is set, then this scroll view will not",
    "        // be associated with the NestedScrollView.",
    "        slivers: <Widget>[",
    "          SliverOverlapInjector(",
    "              handle: NestedScrollView.sliverOverlapAbsorberHandleFor(context)),",
    "          SliverFixedExtentList(",
    "            itemExtent: 48.0,",
    "            delegate: SliverChildBuilderDelegate(",
    "              (BuildContext context, int index) =>",
    "                  ListTile(title: Text('Item $index')),",
    "              childCount: 30,",
    "            ),",
    "          ),",
    "        ],",
    "      );",
    "    })));",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter NestedScrollView  With Snapping Example"
},
"Flutter Scroll Notification  W Example": {
  "prefix": "flutter-ScrollNotification",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Notification].",
    "",
    "void main() => runApp(const NotificationExampleApp());",
    "",
    "class NotificationExampleApp extends StatelessWidget {",
    "  const NotificationExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: NotificationExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class NotificationExample extends StatelessWidget {",
    "  const NotificationExample({super.key});",
    "",
    "  static const List<String> _tabs = <String>['Months', 'Days'];",
    "  static const List<String> _months = <String>[",
    "    'January',",
    "    'February',",
    "    'March',",
    "  ];",
    "  static const List<String> _days = <String>[",
    "    'Sunday',",
    "    'Monday',",
    "    'Tuesday',",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTabController(",
    "      length: _tabs.length,",
    "      child: Scaffold(",
    "        // Listens to the scroll events and returns the current position.",
    "        body: NotificationListener<ScrollNotification>(",
    "          onNotification: (ScrollNotification scrollNotification) {",
    "            if (scrollNotification is ScrollStartNotification) {",
    "              debugPrint('Scrolling has started');",
    "            } else if (scrollNotification is ScrollEndNotification) {",
    "              debugPrint('Scrolling has ended');",
    "            }",
    "            // Return true to cancel the notification bubbling.",
    "            return true;",
    "          },",
    "          child: NestedScrollView(",
    "            headerSliverBuilder:",
    "                (BuildContext context, bool innerBoxIsScrolled) {",
    "              return <Widget>[",
    "                SliverAppBar(",
    "                  title: const Text('Notification Sample'),",
    "                  pinned: true,",
    "                  floating: true,",
    "                  bottom: TabBar(",
    "                    tabs: _tabs.map((String name) => Tab(text: name)).toList(),",
    "                  ),",
    "                ),",
    "              ];",
    "            },",
    "            body: TabBarView(",
    "              children: <Widget>[",
    "                ListView.builder(",
    "                  itemCount: _months.length,",
    "                  itemBuilder: (BuildContext context, int index) {",
    "                    return ListTile(title: Text(_months[index]));",
    "                  },",
    "                ),",
    "                ListView.builder(",
    "                  itemCount: _days.length,",
    "                  itemBuilder: (BuildContext context, int index) {",
    "                    return ListTile(title: Text(_days[index]));",
    "                  },",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Scroll Notification   Example"
},
"Flutter OverflowBar Example": {
  "prefix": "flutte-OverflowBar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [OverflowBar].",
    "",
    "void main() => runApp(const OverflowBarExampleApp());",
    "",
    "class OverflowBarExampleApp extends StatelessWidget {",
    "  const OverflowBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('OverflowBar Sample')),",
    "        body: const Center(",
    "          child: OverflowBarExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class OverflowBarExample extends StatelessWidget {",
    "  const OverflowBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      alignment: Alignment.center,",
    "      padding: const EdgeInsets.all(16),",
    "      color: Colors.black.withOpacity(0.15),",
    "      child: Material(",
    "        color: Colors.white,",
    "        elevation: 24,",
    "        shape: const RoundedRectangleBorder(",
    "            borderRadius: BorderRadius.all(Radius.circular(4))),",
    "        child: Padding(",
    "          padding: const EdgeInsets.all(8),",
    "          child: SingleChildScrollView(",
    "            child: Column(",
    "              mainAxisSize: MainAxisSize.min,",
    "              crossAxisAlignment: CrossAxisAlignment.stretch,",
    "              children: <Widget>[",
    "                const SizedBox(height: 128, child: Placeholder()),",
    "                Align(",
    "                  alignment: AlignmentDirectional.centerEnd,",
    "                  child: OverflowBar(",
    "                    spacing: 8,",
    "                    overflowAlignment: OverflowBarAlignment.end,",
    "                    children: <Widget>[",
    "                      TextButton(child: const Text('Cancel'), onPressed: () {}),",
    "                      TextButton(",
    "                          child: const Text('Really Really Cancel'),",
    "                          onPressed: () {}),",
    "                      OutlinedButton(child: const Text('OK'), onPressed: () {}),",
    "                    ],",
    "                  ),",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter OverflowBar Example"
},
"Flutter OverlayPortal Example": {
  "prefix": "flutter-OverlayPortal",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [OverlayPortal].",
    "",
    "void main() => runApp(const OverlayPortalExampleApp());",
    "",
    "class OverlayPortalExampleApp extends StatelessWidget {",
    "  const OverlayPortalExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('OverlayPortal Example')),",
    "        body: const Center(child: ClickableTooltipWidget()),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ClickableTooltipWidget extends StatefulWidget {",
    "  const ClickableTooltipWidget({super.key});",
    "",
    "  @override",
    "  State<StatefulWidget> createState() => ClickableTooltipWidgetState();",
    "}",
    "",
    "class ClickableTooltipWidgetState extends State<ClickableTooltipWidget> {",
    "  final OverlayPortalController _tooltipController = OverlayPortalController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextButton(",
    "      onPressed: _tooltipController.toggle,",
    "      child: DefaultTextStyle(",
    "        style: DefaultTextStyle.of(context).style.copyWith(fontSize: 50),",
    "        child: OverlayPortal(",
    "          controller: _tooltipController,",
    "          overlayChildBuilder: (BuildContext context) {",
    "            return const Positioned(",
    "              right: 50,",
    "              bottom: 50,",
    "              child: ColoredBox(",
    "                color: Colors.amberAccent,",
    "                child: Text('tooltip'),",
    "              ),",
    "            );",
    "          },",
    "          child: const Text('Press to show/hide tooltip'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter OverlayPortal Example"
},
"Flutter Overlay Example": {
  "prefix": "flutter-Overlay",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Overlay].",
    "",
    "void main() => runApp(const OverlayApp());",
    "",
    "class OverlayApp extends StatelessWidget {",
    "  const OverlayApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: OverlayExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class OverlayExample extends StatefulWidget {",
    "  const OverlayExample({super.key});",
    "",
    "  @override",
    "  State<OverlayExample> createState() => _OverlayExampleState();",
    "}",
    "",
    "class _OverlayExampleState extends State<OverlayExample> {",
    "  OverlayEntry? overlayEntry;",
    "  int currentPageIndex = 0;",
    "",
    "  void createHighlightOverlay({",
    "    required AlignmentDirectional alignment,",
    "    required Color borderColor,",
    "  }) {",
    "    // Remove the existing OverlayEntry.",
    "    removeHighlightOverlay();",
    "",
    "    assert(overlayEntry == null);",
    "",
    "    overlayEntry = OverlayEntry(",
    "      // Create a new OverlayEntry.",
    "      builder: (BuildContext context) {",
    "        // Align is used to position the highlight overlay",
    "        // relative to the NavigationBar destination.",
    "        return SafeArea(",
    "          child: Align(",
    "            alignment: alignment,",
    "            heightFactor: 1.0,",
    "            child: DefaultTextStyle(",
    "              style: const TextStyle(",
    "                color: Colors.blue,",
    "                fontWeight: FontWeight.bold,",
    "                fontSize: 14.0,",
    "              ),",
    "              child: Column(",
    "                mainAxisSize: MainAxisSize.min,",
    "                children: <Widget>[",
    "                  const Text('Tap here for'),",
    "                  Builder(builder: (BuildContext context) {",
    "                    switch (currentPageIndex) {",
    "                      case 0:",
    "                        return const Column(",
    "                          children: <Widget>[",
    "                            Text(",
    "                              'Explore page',",
    "                              style: TextStyle(",
    "                                color: Colors.red,",
    "                              ),",
    "                            ),",
    "                            Icon(",
    "                              Icons.arrow_downward,",
    "                              color: Colors.red,",
    "                            ),",
    "                          ],",
    "                        );",
    "                      case 1:",
    "                        return const Column(",
    "                          children: <Widget>[",
    "                            Text(",
    "                              'Commute page',",
    "                              style: TextStyle(",
    "                                color: Colors.green,",
    "                              ),",
    "                            ),",
    "                            Icon(",
    "                              Icons.arrow_downward,",
    "                              color: Colors.green,",
    "                            ),",
    "                          ],",
    "                        );",
    "                      case 2:",
    "                        return const Column(",
    "                          children: <Widget>[",
    "                            Text(",
    "                              'Saved page',",
    "                              style: TextStyle(",
    "                                color: Colors.orange,",
    "                              ),",
    "                            ),",
    "                            Icon(",
    "                              Icons.arrow_downward,",
    "                              color: Colors.orange,",
    "                            ),",
    "                          ],",
    "                        );",
    "                      default:",
    "                        return const Text('No page selected.');",
    "                    }",
    "                  }),",
    "                  SizedBox(",
    "                    width: MediaQuery.of(context).size.width / 3,",
    "                    height: 80.0,",
    "                    child: Center(",
    "                      child: Container(",
    "                        decoration: BoxDecoration(",
    "                          border: Border.all(",
    "                            color: borderColor,",
    "                            width: 4.0,",
    "                          ),",
    "                        ),",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        );",
    "      },",
    "    );",
    "",
    "    // Add the OverlayEntry to the Overlay.",
    "    Overlay.of(context, debugRequiredFor: widget).insert(overlayEntry!);",
    "  }",
    "",
    "  // Remove the OverlayEntry.",
    "  void removeHighlightOverlay() {",
    "    overlayEntry?.remove();",
    "    overlayEntry = null;",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    // Make sure to remove OverlayEntry when the widget is disposed.",
    "    removeHighlightOverlay();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Overlay Sample'),",
    "      ),",
    "      bottomNavigationBar: NavigationBar(",
    "        selectedIndex: currentPageIndex,",
    "        destinations: const <NavigationDestination>[",
    "          NavigationDestination(",
    "            icon: Icon(Icons.explore),",
    "            label: 'Explore',",
    "          ),",
    "          NavigationDestination(",
    "            icon: Icon(Icons.commute),",
    "            label: 'Commute',",
    "          ),",
    "          NavigationDestination(",
    "            selectedIcon: Icon(Icons.bookmark),",
    "            icon: Icon(Icons.bookmark_border),",
    "            label: 'Saved',",
    "          ),",
    "        ],",
    "      ),",
    "      body: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          Text(",
    "            'Use Overlay to highlight a NavigationBar destination',",
    "            style: Theme.of(context).textTheme.bodyMedium,",
    "          ),",
    "          const SizedBox(height: 20.0),",
    "          Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              // This creates a highlight Overlay for",
    "              // the Explore item.",
    "              ElevatedButton(",
    "                onPressed: () {",
    "                  setState(() {",
    "                    currentPageIndex = 0;",
    "                  });",
    "                  createHighlightOverlay(",
    "                    alignment: AlignmentDirectional.bottomStart,",
    "                    borderColor: Colors.red,",
    "                  );",
    "                },",
    "                child: const Text('Explore'),",
    "              ),",
    "              const SizedBox(width: 20.0),",
    "              // This creates a highlight Overlay for",
    "              // the Commute item.",
    "              ElevatedButton(",
    "                onPressed: () {",
    "                  setState(() {",
    "                    currentPageIndex = 1;",
    "                  });",
    "                  createHighlightOverlay(",
    "                    alignment: AlignmentDirectional.bottomCenter,",
    "                    borderColor: Colors.green,",
    "                  );",
    "                },",
    "                child: const Text('Commute'),",
    "              ),",
    "              const SizedBox(width: 20.0),",
    "              // This creates a highlight Overlay for",
    "              // the Saved item.",
    "              ElevatedButton(",
    "                onPressed: () {",
    "                  setState(() {",
    "                    currentPageIndex = 2;",
    "                  });",
    "                  createHighlightOverlay(",
    "                    alignment: AlignmentDirectional.bottomEnd,",
    "                    borderColor: Colors.orange,",
    "                  );",
    "                },",
    "                child: const Text('Saved'),",
    "              ),",
    "            ],",
    "          ),",
    "          const SizedBox(height: 10.0),",
    "          ElevatedButton(",
    "            onPressed: () {",
    "              removeHighlightOverlay();",
    "            },",
    "            child: const Text('Remove Overlay'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Overlay Example"
},
"Flutter GlowingOverscrollIndicator Example": {
  "prefix": "flutter-scroll indicator glowing",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [GlowingOverscrollIndicator].",
    "",
    "void main() => runApp(const GlowingOverscrollIndicatorExampleApp());",
    "",
    "class GlowingOverscrollIndicatorExampleApp extends StatelessWidget {",
    "  const GlowingOverscrollIndicatorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('GlowingOverscrollIndicator Sample')),",
    "        body: const GlowingOverscrollIndicatorExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class GlowingOverscrollIndicatorExample extends StatelessWidget {",
    "  const GlowingOverscrollIndicatorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final double leadingPaintOffset =",
    "        MediaQuery.of(context).padding.top + AppBar().preferredSize.height;",
    "    return NotificationListener<OverscrollIndicatorNotification>(",
    "      onNotification: (OverscrollIndicatorNotification notification) {",
    "        if (notification.leading) {",
    "          notification.paintOffset = leadingPaintOffset;",
    "        }",
    "        return false;",
    "      },",
    "      child: CustomScrollView(",
    "        slivers: <Widget>[",
    "          const SliverAppBar(title: Text('Custom PaintOffset')),",
    "          SliverToBoxAdapter(",
    "            child: Container(",
    "              color: Colors.amberAccent,",
    "              height: 100,",
    "              child: const Center(child: Text('Glow all day!')),",
    "            ),",
    "          ),",
    "          const SliverFillRemaining(child: FlutterLogo()),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter GlowingOverscrollIndicator Example"
},
"Flutter GlowingOverscrollIndicator Example": {
  "prefix": "flutter-GlowingOverscrollIndicator",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [GlowingOverscrollIndicator].",
    "",
    "void main() => runApp(const GlowingOverscrollIndicatorExampleApp());",
    "",
    "class GlowingOverscrollIndicatorExampleApp extends StatelessWidget {",
    "  const GlowingOverscrollIndicatorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('GlowingOverscrollIndicator Sample')),",
    "        body: const GlowingOverscrollIndicatorExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class GlowingOverscrollIndicatorExample extends StatelessWidget {",
    "  const GlowingOverscrollIndicatorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final double leadingPaintOffset =",
    "        MediaQuery.of(context).padding.top + AppBar().preferredSize.height;",
    "    return NotificationListener<OverscrollIndicatorNotification>(",
    "      onNotification: (OverscrollIndicatorNotification notification) {",
    "        if (notification.leading) {",
    "          notification.paintOffset = leadingPaintOffset;",
    "        }",
    "        return false;",
    "      },",
    "      child: CustomScrollView(",
    "        slivers: <Widget>[",
    "          const SliverAppBar(title: Text('Custom PaintOffset')),",
    "          SliverToBoxAdapter(",
    "            child: Container(",
    "              color: Colors.amberAccent,",
    "              height: 100,",
    "              child: const Center(child: Text('Glow all day!')),",
    "            ),",
    "          ),",
    "          const SliverFillRemaining(child: FlutterLogo()),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter GlowingOverscrollIndicator Example"
},
"Flutter PageStorage Example": {
  "prefix": "flutter-PageStorage",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PageStorage].",
    "",
    "void main() => runApp(const PageStorageExampleApp());",
    "",
    "class PageStorageExampleApp extends StatelessWidget {",
    "  const PageStorageExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MyHomePage(),",
    "    );",
    "  }",
    "}",
    "",
    "class MyHomePage extends StatefulWidget {",
    "  const MyHomePage({super.key});",
    "",
    "  @override",
    "  State<MyHomePage> createState() => _MyHomePageState();",
    "}",
    "",
    "class _MyHomePageState extends State<MyHomePage> {",
    "  final List<Widget> pages = const <Widget>[",
    "    ColorBoxPage(",
    "      key: PageStorageKey<String>('pageOne'),",
    "    ),",
    "    ColorBoxPage(",
    "      key: PageStorageKey<String>('pageTwo'),",
    "    ),",
    "  ];",
    "  int currentTab = 0;",
    "  final PageStorageBucket _bucket = PageStorageBucket();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Persistence Example'),",
    "      ),",
    "      body: PageStorage(",
    "        bucket: _bucket,",
    "        child: pages[currentTab],",
    "      ),",
    "      bottomNavigationBar: BottomNavigationBar(",
    "        currentIndex: currentTab,",
    "        onTap: (int index) {",
    "          setState(() {",
    "            currentTab = index;",
    "          });",
    "        },",
    "        items: const <BottomNavigationBarItem>[",
    "          BottomNavigationBarItem(",
    "            icon: Icon(Icons.home),",
    "            label: 'page 1',",
    "          ),",
    "          BottomNavigationBarItem(",
    "            icon: Icon(Icons.settings),",
    "            label: 'page2',",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ColorBoxPage extends StatelessWidget {",
    "  const ColorBoxPage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListView.builder(",
    "      itemExtent: 250.0,",
    "      itemBuilder: (BuildContext context, int index) => Container(",
    "        padding: const EdgeInsets.all(10.0),",
    "        child: Material(",
    "          color: index.isEven ? Colors.cyan : Colors.deepOrange,",
    "          child: Center(",
    "            child: Text(index.toString()),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter PageStorage Example , It persist page data"
},
"Flutter PageView Example": {
  "prefix": "flutter-PageView",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PageView].",
    "",
    "void main() => runApp(const PageViewExampleApp());",
    "",
    "class PageViewExampleApp extends StatelessWidget {",
    "  const PageViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('PageView Sample')),",
    "        body: const PageViewExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class PageViewExample extends StatelessWidget {",
    "  const PageViewExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final PageController controller = PageController();",
    "    return PageView(",
    "      /// [PageView.scrollDirection] defaults to [Axis.horizontal].",
    "      /// Use [Axis.vertical] to scroll vertically.",
    "      controller: controller,",
    "      children: const <Widget>[",
    "        Center(",
    "          child: Text('First Page'),",
    "        ),",
    "        Center(",
    "          child: Text('Second Page'),",
    "        ),",
    "        Center(",
    "          child: Text('Third Page'),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter PageView Example"
},
"Flutter PreferredSize Example": {
  "prefix": "flutter-PreferredSize",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PreferredSize].",
    "",
    "void main() => runApp(const PreferredSizeExampleApp());",
    "",
    "class PreferredSizeExampleApp extends StatelessWidget {",
    "  const PreferredSizeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: PreferredSizeExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AppBarContent extends StatelessWidget {",
    "  const AppBarContent({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.end,",
    "      children: <Widget>[",
    "        Padding(",
    "          padding: const EdgeInsets.symmetric(horizontal: 10),",
    "          child: Row(",
    "            children: <Widget>[",
    "              const Text(",
    "                'PreferredSize Sample',",
    "                style: TextStyle(color: Colors.white),",
    "              ),",
    "              const Spacer(),",
    "              IconButton(",
    "                icon: const Icon(",
    "                  Icons.search,",
    "                  size: 20,",
    "                ),",
    "                color: Colors.white,",
    "                onPressed: () {},",
    "              ),",
    "              IconButton(",
    "                icon: const Icon(",
    "                  Icons.more_vert,",
    "                  size: 20,",
    "                ),",
    "                color: Colors.white,",
    "                onPressed: () {},",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class PreferredSizeExample extends StatelessWidget {",
    "  const PreferredSizeExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: PreferredSize(",
    "        preferredSize: const Size.fromHeight(80.0),",
    "        child: Container(",
    "          decoration: const BoxDecoration(",
    "            gradient: LinearGradient(",
    "              colors: <Color>[Colors.blue, Colors.pink],",
    "            ),",
    "          ),",
    "          child: const AppBarContent(),",
    "        ),",
    "      ),",
    "      body: const Center(",
    "        child: Text('Content'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter PreferredSize Example"
},
"Flutter Extend appbar Example": {
  "prefix": "flutter-Appbar-custom",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PreferredSize].",
    "",
    "void main() => runApp(const PreferredSizeExampleApp());",
    "",
    "class PreferredSizeExampleApp extends StatelessWidget {",
    "  const PreferredSizeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: PreferredSizeExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AppBarContent extends StatelessWidget {",
    "  const AppBarContent({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Column(",
    "      mainAxisAlignment: MainAxisAlignment.end,",
    "      children: <Widget>[",
    "        Padding(",
    "          padding: const EdgeInsets.symmetric(horizontal: 10),",
    "          child: Row(",
    "            children: <Widget>[",
    "              const Text(",
    "                'PreferredSize Sample',",
    "                style: TextStyle(color: Colors.white),",
    "              ),",
    "              const Spacer(),",
    "              IconButton(",
    "                icon: const Icon(",
    "                  Icons.search,",
    "                  size: 20,",
    "                ),",
    "                color: Colors.white,",
    "                onPressed: () {},",
    "              ),",
    "              IconButton(",
    "                icon: const Icon(",
    "                  Icons.more_vert,",
    "                  size: 20,",
    "                ),",
    "                color: Colors.white,",
    "                onPressed: () {},",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class PreferredSizeExample extends StatelessWidget {",
    "  const PreferredSizeExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: PreferredSize(",
    "        preferredSize: const Size.fromHeight(80.0),",
    "        child: Container(",
    "          decoration: const BoxDecoration(",
    "            gradient: LinearGradient(",
    "              colors: <Color>[Colors.blue, Colors.pink],",
    "            ),",
    "          ),",
    "          child: const AppBarContent(),",
    "        ),",
    "      ),",
    "      body: const Center(",
    "        child: Text('Content'),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Extend appbar Example"
},
"Flutter RestorationMixin Example": {
  "prefix": "flutter-RestorationMixin",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RestorationMixin].",
    "",
    "void main() => runApp(const RestorationExampleApp());",
    "",
    "class RestorationExampleApp extends StatelessWidget {",
    "  const RestorationExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      restorationScopeId: 'app',",
    "      title: 'Restorable Counter',",
    "      home: RestorableCounter(restorationId: 'counter'),",
    "    );",
    "  }",
    "}",
    "",
    "class RestorableCounter extends StatefulWidget {",
    "  const RestorableCounter({super.key, this.restorationId});",
    "",
    "  final String? restorationId;",
    "",
    "  @override",
    "  State<RestorableCounter> createState() => _RestorableCounterState();",
    "}",
    "",
    "// The [State] object uses the [RestorationMixin] to make the current value",
    "// of the counter restorable.",
    "class _RestorableCounterState extends State<RestorableCounter> with RestorationMixin {",
    "  // The current value of the counter is stored in a [RestorableProperty].",
    "  // During state restoration it is automatically restored to its old value.",
    "  // If no restoration data is available to restore the counter from, it is",
    "  // initialized to the specified default value of zero.",
    "  final RestorableInt _counter = RestorableInt(0);",
    "",
    "  // In this example, the restoration ID for the mixin is passed in through",
    "  // the [StatefulWidget]'s constructor.",
    "  @override",
    "  String? get restorationId => widget.restorationId;",
    "",
    "  @override",
    "  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {",
    "    // All restorable properties must be registered with the mixin. After",
    "    // registration, the counter either has its old value restored or is",
    "    // initialized to its default value.",
    "    registerForRestoration(_counter, 'count');",
    "  }",
    "",
    "  void _incrementCounter() {",
    "    setState(() {",
    "      // The current value of the property can be accessed and modified via",
    "      // the value getter and setter.",
    "      _counter.value++;",
    "    });",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _counter.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Restorable Counter'),",
    "      ),",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            const Text(",
    "              'You have pushed the button this many times:',",
    "            ),",
    "            Text(",
    "              '${_counter.value}',",
    "              style: Theme.of(context).textTheme.headlineMedium,",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton(",
    "        onPressed: _incrementCounter,",
    "        tooltip: 'Increment',",
    "        child: const Icon(Icons.add),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RestorationMixin Example"
},
"Flutter PopupRoute Example": {
  "prefix": "flutter-PopupRoute",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PopupRoute].",
    "",
    "void main() => runApp(const PopupRouteApp());",
    "",
    "class PopupRouteApp extends StatelessWidget {",
    "  const PopupRouteApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: PopupRouteExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class PopupRouteExample extends StatelessWidget {",
    "  const PopupRouteExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            // This shows a dismissible dialog.",
    "            Navigator.of(context).push(DismissibleDialog<void>());",
    "          },",
    "          child: const Text('Open DismissibleDialog'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DismissibleDialog<T> extends PopupRoute<T> {",
    "  @override",
    "  Color? get barrierColor => Colors.black.withAlpha(0x50);",
    "",
    "  // This allows the popup to be dismissed by tapping the scrim or by pressing",
    "  // the escape key on the keyboard.",
    "  @override",
    "  bool get barrierDismissible => true;",
    "",
    "  @override",
    "  String? get barrierLabel => 'Dismissible Dialog';",
    "",
    "  @override",
    "  Duration get transitionDuration => const Duration(milliseconds: 300);",
    "",
    "  @override",
    "  Widget buildPage(BuildContext context, Animation<double> animation,",
    "      Animation<double> secondaryAnimation) {",
    "    return Center(",
    "      // Provide DefaultTextStyle to ensure that the dialog's text style",
    "      // matches the rest of the text in the app.",
    "      child: DefaultTextStyle(",
    "        style: Theme.of(context).textTheme.bodyMedium!,",
    "        // UnconstrainedBox is used to make the dialog size itself",
    "        // to fit to the size of the content.",
    "        child: UnconstrainedBox(",
    "          child: Container(",
    "            padding: const EdgeInsets.all(20.0),",
    "            decoration: BoxDecoration(",
    "              borderRadius: BorderRadius.circular(10),",
    "              color: Colors.white,",
    "            ),",
    "            child: Column(",
    "              children: <Widget>[",
    "                Text('Dismissible Dialog',",
    "                    style: Theme.of(context).textTheme.headlineSmall),",
    "                const SizedBox(height: 20),",
    "                const Text('Tap in the scrim or press escape key to dismiss.'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter PopupRoute Example"
},
"Flutter show Dialog Custom Example": {
  "prefix": "flutter-show dialog custom",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PopupRoute].",
    "",
    "void main() => runApp(const PopupRouteApp());",
    "",
    "class PopupRouteApp extends StatelessWidget {",
    "  const PopupRouteApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: PopupRouteExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class PopupRouteExample extends StatelessWidget {",
    "  const PopupRouteExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            // This shows a dismissible dialog.",
    "            Navigator.of(context).push(DismissibleDialog<void>());",
    "          },",
    "          child: const Text('Open DismissibleDialog'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DismissibleDialog<T> extends PopupRoute<T> {",
    "  @override",
    "  Color? get barrierColor => Colors.black.withAlpha(0x50);",
    "",
    "  // This allows the popup to be dismissed by tapping the scrim or by pressing",
    "  // the escape key on the keyboard.",
    "  @override",
    "  bool get barrierDismissible => true;",
    "",
    "  @override",
    "  String? get barrierLabel => 'Dismissible Dialog';",
    "",
    "  @override",
    "  Duration get transitionDuration => const Duration(milliseconds: 300);",
    "",
    "  @override",
    "  Widget buildPage(BuildContext context, Animation<double> animation,",
    "      Animation<double> secondaryAnimation) {",
    "    return Center(",
    "      // Provide DefaultTextStyle to ensure that the dialog's text style",
    "      // matches the rest of the text in the app.",
    "      child: DefaultTextStyle(",
    "        style: Theme.of(context).textTheme.bodyMedium!,",
    "        // UnconstrainedBox is used to make the dialog size itself",
    "        // to fit to the size of the content.",
    "        child: UnconstrainedBox(",
    "          child: Container(",
    "            padding: const EdgeInsets.all(20.0),",
    "            decoration: BoxDecoration(",
    "              borderRadius: BorderRadius.circular(10),",
    "              color: Colors.white,",
    "            ),",
    "            child: Column(",
    "              children: <Widget>[",
    "                Text('SHow Dialog Custom',",
    "                    style: Theme.of(context).textTheme.headlineSmall),",
    "                Text('Dismissible Dialog',",
    "                    style: Theme.of(context).textTheme.headlineSmall),",
    "                const SizedBox(height: 20),",
    "                const Text('Tap in the scrim or press escape key to dismiss.'),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter show Dialog Custom Example"
},
"Flutter showGeneralDialogExample": {
  "prefix": "flutter-showGeneralDialog",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [showGeneralDialog].",
    "",
    "void main() => runApp(const GeneralDialogApp());",
    "",
    "class GeneralDialogApp extends StatelessWidget {",
    "  const GeneralDialogApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      restorationScopeId: 'app',",
    "      home: GeneralDialogExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class GeneralDialogExample extends StatelessWidget {",
    "  const GeneralDialogExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: OutlinedButton(",
    "          onPressed: () {",
    "            /// This shows an alert dialog.",
    "            Navigator.of(context).restorablePush(_dialogBuilder);",
    "          },",
    "          child: const Text('Open Dialog'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<Object?> _dialogBuilder(",
    "      BuildContext context, Object? arguments) {",
    "    return RawDialogRoute<void>(",
    "      pageBuilder: (",
    "        BuildContext context,",
    "        Animation<double> animation,",
    "        Animation<double> secondaryAnimation,",
    "      ) {",
    "        return const AlertDialog(title: Text('showGeneralDialog!'));",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showGeneralDialogExample"
},
"Flutter ScrollNotificationObserver": {
  "prefix": "flutter-ScrollNotificationObserver",
"scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScrollNotificationObserver].",
    "",
    "void main() => runApp(const ScrollNotificationObserverApp());",
    "",
    "class ScrollNotificationObserverApp extends StatelessWidget {",
    "  const ScrollNotificationObserverApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      // The Scaffold widget contains a [ScrollNotificationObserver].",
    "      // This is used by [AppBar] for its scrolled under behavior.",
    "      //",
    "      // We can use [ScrollNotificationObserver.maybeOf] to get the",
    "      // state of this [ScrollNotificationObserver] from descendants",
    "      // of the Scaffold widget.",
    "      //",
    "      // If you're not using a [Scaffold] widget, you can create a  [ScrollNotificationObserver]",
    "      // to notify its descendants of scroll notifications by adding it to the subtree.",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('ScrollNotificationObserver Sample'),",
    "        ),",
    "        body: const ScrollNotificationObserverExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ScrollNotificationObserverExample extends StatefulWidget {",
    "  const ScrollNotificationObserverExample({super.key});",
    "",
    "  @override",
    "  State<ScrollNotificationObserverExample> createState() =>",
    "      _ScrollNotificationObserverExampleState();",
    "}",
    "",
    "class _ScrollNotificationObserverExampleState",
    "    extends State<ScrollNotificationObserverExample> {",
    "  ScrollNotificationObserverState? _scrollNotificationObserver;",
    "  ScrollController controller = ScrollController();",
    "  bool _scrolledDown = false;",
    "",
    "  @override",
    "  void didChangeDependencies() {",
    "    super.didChangeDependencies();",
    "    // Remove any previous listener.",
    "    _scrollNotificationObserver?.removeListener(_handleScrollNotification);",
    "    // Get the ScrollNotificationObserverState from the Scaffold widget.",
    "    _scrollNotificationObserver = ScrollNotificationObserver.maybeOf(context);",
    "    // Add a new listener.",
    "    _scrollNotificationObserver?.addListener(_handleScrollNotification);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    if (_scrollNotificationObserver != null) {",
    "      _scrollNotificationObserver!.removeListener(_handleScrollNotification);",
    "      _scrollNotificationObserver = null;",
    "    }",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _handleScrollNotification(ScrollNotification notification) {",
    "    // Check if the notification is a scroll update notification and if the",
    "    // `notification.depth` is 0. This way we only listen to the scroll",
    "    // notifications from the closest scrollable, instead of those that may be nested.",
    "    if (notification is ScrollUpdateNotification &&",
    "        defaultScrollNotificationPredicate(notification)) {",
    "      final ScrollMetrics metrics = notification.metrics;",
    "      // Check if the user scrolled down.",
    "      if (_scrolledDown != metrics.extentBefore > 0) {",
    "        setState(() {",
    "          _scrolledDown = metrics.extentBefore > 0;",
    "        });",
    "      }",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Stack(",
    "      children: <Widget>[",
    "        SampleList(controller: controller),",
    "        // Show the button only if the user scrolled down.",
    "        if (_scrolledDown)",
    "          Positioned(",
    "            right: 25,",
    "            bottom: 20,",
    "            child: Center(",
    "              child: GestureDetector(",
    "                onTap: () {",
    "                  // Scroll to the top when the user taps the button.",
    "                  controller.animateTo(0,",
    "                      duration: const Duration(milliseconds: 200),",
    "                      curve: Curves.fastOutSlowIn);",
    "                },",
    "                child: const Card(",
    "                  child: Padding(",
    "                    padding: EdgeInsets.all(8.0),",
    "                    child: Column(",
    "                      children: <Widget>[",
    "                        Icon(Icons.arrow_upward_rounded),",
    "                        Text('Scroll to top')",
    "                      ],",
    "                    ),",
    "                  ),",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class SampleList extends StatelessWidget {",
    "  const SampleList({super.key, required this.controller});",
    "",
    "  final ScrollController controller;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListView.builder(",
    "      controller: controller,",
    "      itemCount: 30,",
    "      itemBuilder: (BuildContext context, int index) {",
    "        return ListTile(title: Text('Item $index'));",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ScrollNotificationObserver"
},
"Flutter ScrollController & ScrollNotification": {
  "prefix": "flutter-ScrollController&ScrollNotification",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScrollController] & [ScrollNotification].",
    "",
    "void main() => runApp(const ScrollNotificationDemo());",
    "",
    "class ScrollNotificationDemo extends StatefulWidget {",
    "  const ScrollNotificationDemo({super.key});",
    "",
    "  @override",
    "  State<ScrollNotificationDemo> createState() => _ScrollNotificationDemoState();",
    "}",
    "",
    "class _ScrollNotificationDemoState extends State<ScrollNotificationDemo> {",
    "  ScrollNotification? _lastNotification;",
    "  late final ScrollController _controller;",
    "  bool _useController = true;",
    "",
    "  // This method handles the notification from the ScrollController.",
    "  void _handleControllerNotification() {",
    "    print('Notified through the scroll controller.');",
    "    // Access the position directly through the controller for details on the",
    "    // scroll position.",
    "  }",
    "",
    "  // This method handles the notification from the NotificationListener.",
    "  bool _handleScrollNotification(ScrollNotification notification) {",
    "    print('Notified through scroll notification.');",
    "    // The position can still be accessed through the scroll controller, but",
    "    // the notification object provides more details about the activity that is",
    "    // occurring.",
    "    if (_lastNotification.runtimeType != notification.runtimeType) {",
    "      setState(() {",
    "        // Call set state to respond to a change in the scroll notification.",
    "        _lastNotification = notification;",
    "      });",
    "    }",
    "",
    "    // Returning false allows the notification to continue bubbling up to",
    "    // ancestor listeners. If we wanted the notification to stop bubbling,",
    "    // return true.",
    "    return false;",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    _controller = ScrollController();",
    "    if (_useController) {",
    "      // When listening to scrolling via the ScrollController, call",
    "      // `addListener` on the controller.",
    "      _controller.addListener(_handleControllerNotification);",
    "    }",
    "    super.initState();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    // ListView.separated works very similarly to this example with",
    "    // CustomScrollView & SliverList.",
    "    Widget body = CustomScrollView(",
    "      // Provide the scroll controller to the scroll view.",
    "      controller: _controller,",
    "      slivers: <Widget>[",
    "        SliverList.separated(",
    "          itemCount: 50,",
    "          itemBuilder: (_, int index) {",
    "            return Padding(",
    "              padding: const EdgeInsets.symmetric(",
    "                vertical: 8.0,",
    "                horizontal: 20.0,",
    "              ),",
    "              child: Text('Item $index'),",
    "            );",
    "          },",
    "          separatorBuilder: (_, __) => const Divider(",
    "            indent: 20,",
    "            endIndent: 20,",
    "            thickness: 2,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "",
    "    if (!_useController) {",
    "      // If we are not using a ScrollController to listen to scrolling,",
    "      // let's use a NotificationListener. Similar, but with a different",
    "      // handler that provides information on what scrolling is occurring.",
    "      body = NotificationListener<ScrollNotification>(",
    "        onNotification: _handleScrollNotification,",
    "        child: body,",
    "      );",
    "    }",
    "",
    "    return MaterialApp(",
    "      theme: ThemeData.from(",
    "        useMaterial3: true,",
    "        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blueGrey),",
    "      ),",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Listening to a ScrollPosition'),",
    "          bottom: PreferredSize(",
    "            preferredSize: const Size.fromHeight(70),",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "              children: <Widget>[",
    "                if (!_useController)",
    "                  Text('Scroll notification: scroll controller'),",
    "                Text('Last notification: ${_lastNotification.runtimeType}'),",
    "                if (!_useController) const SizedBox.square(dimension: 10),",
    "                Row(",
    "                  mainAxisAlignment: MainAxisAlignment.center,",
    "                  children: <Widget>[",
    "                    const Text('with:'),",
    "                    Radio<bool>(",
    "                      value: true,",
    "                      groupValue: _useController,",
    "                      onChanged: _handleRadioChange,",
    "                    ),",
    "                    const Text('ScrollController'),",
    "                    Radio<bool>(",
    "                      value: false,",
    "                      groupValue: _useController,",
    "                      onChanged: _handleRadioChange,",
    "                    ),",
    "                    const Text('NotificationListener'),",
    "                  ],",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "        body: body,",
    "      ),",
    "    );",
    "  }",
    "",
    "  void _handleRadioChange(bool? value) {",
    "    if (value == null) {",
    "      return;",
    "    }",
    "    if (value != _useController) {",
    "      setState(() {",
    "        // Respond to a change in selected radio button, and add/remove the",
    "        // listener to the scroll controller.",
    "        _useController = value;",
    "        if (_useController) {",
    "          _controller.addListener(_handleControllerNotification);",
    "        } else {",
    "          _controller.removeListener(_handleControllerNotification);",
    "        }",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.removeListener(_handleControllerNotification);",
    "    super.dispose();",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ScrollController & ScrollNotification"
},
"Flutter ScrollController with Onscroll": {
  "prefix": "flutter-ScrollController&OnScroll",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScrollController].",
    "",
    "void main() => runApp(const ScrollControllerDemo());",
    "",
    "class ScrollControllerDemo extends StatefulWidget {",
    "  const ScrollControllerDemo({super.key});",
    "",
    "  @override",
    "  State<ScrollControllerDemo> createState() => _ScrollControllerDemoState();",
    "}",
    "",
    "class _ScrollControllerDemoState extends State<ScrollControllerDemo> {",
    "  late final ScrollController _controller;",
    "  bool isScrolling = false;",
    "",
    "  void _handleScrollChange() {",
    "    if (isScrolling != _controller.position.isScrollingNotifier.value) {",
    "      setState(() {",
    "        isScrolling = _controller.position.isScrollingNotifier.value;",
    "      });",
    "    }",
    "  }",
    "",
    "  void _handlePositionAttach(ScrollPosition position) {",
    "    // From here, add a listener to the given ScrollPosition.",
    "    // Here the isScrollingNotifier will be used to inform when scrolling starts",
    "    // and stops and change the AppBar's color in response.",
    "    position.isScrollingNotifier.addListener(_handleScrollChange);",
    "  }",
    "",
    "  void _handlePositionDetach(ScrollPosition position) {",
    "    // From here, add a listener to the given ScrollPosition.",
    "    // Here the isScrollingNotifier will be used to inform when scrolling starts",
    "    // and stops and change the AppBar's color in response.",
    "    position.isScrollingNotifier.removeListener(_handleScrollChange);",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    _controller = ScrollController(",
    "      // These methods will be called in response to a scroll position",
    "      // being attached to or detached from this ScrollController. This happens",
    "      // when the Scrollable is built.",
    "      onAttach: _handlePositionAttach,",
    "      onDetach: _handlePositionDetach,",
    "    );",
    "    super.initState();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: Text(isScrolling ? 'Scrolling' : 'Not Scrolling'),",
    "          backgroundColor: isScrolling",
    "              ? Colors.green[800]!.withOpacity(.85)",
    "              : Colors.redAccent[700]!.withOpacity(.85),",
    "        ),",
    "        // ListView.builder works very similarly to this example with",
    "        // CustomScrollView & SliverList.",
    "        body: CustomScrollView(",
    "          // Provide the scroll controller to the scroll view.",
    "          controller: _controller,",
    "          slivers: <Widget>[",
    "            SliverList.builder(",
    "              itemCount: 50,",
    "              itemBuilder: (_, int index) {",
    "                return Padding(",
    "                  padding: const EdgeInsets.all(8.0),",
    "                  child: Center(",
    "                    child: DecoratedBox(",
    "                      decoration: BoxDecoration(",
    "                          color: Colors.blueGrey[50],",
    "                          boxShadow: const <BoxShadow>[",
    "                            BoxShadow(",
    "                              color: Colors.black12,",
    "                              offset: Offset(5, 5),",
    "                              blurRadius: 5,",
    "                            ),",
    "                          ],",
    "                          borderRadius:",
    "                              const BorderRadius.all(Radius.circular(10))),",
    "                      child: Padding(",
    "                        padding: const EdgeInsets.symmetric(",
    "                          vertical: 12.0,",
    "                          horizontal: 20.0,",
    "                        ),",
    "                        child: Text('Item $index'),",
    "                      ),",
    "                    ),",
    "                  ),",
    "                );",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ScrollController with Onscroll"
},
"Flutter CustomScrollView Example": {
  "prefix": "flutter-CustomScrollView",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [CustomScrollView].",
    "",
    "void main() => runApp(const CustomScrollViewExampleApp());",
    "",
    "class CustomScrollViewExampleApp extends StatelessWidget {",
    "  const CustomScrollViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: CustomScrollViewExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CustomScrollViewExample extends StatefulWidget {",
    "  const CustomScrollViewExample({super.key});",
    "",
    "  @override",
    "  State<CustomScrollViewExample> createState() =>",
    "      _CustomScrollViewExampleState();",
    "}",
    "",
    "class _CustomScrollViewExampleState extends State<CustomScrollViewExample> {",
    "  List<int> top = <int>[];",
    "  List<int> bottom = <int>[0];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    const Key centerKey = ValueKey<String>('bottom-sliver-list');",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Press on the plus to add items above and below'),",
    "        leading: IconButton(",
    "          icon: const Icon(Icons.add),",
    "          onPressed: () {",
    "            setState(() {",
    "              top.add(-top.length - 1);",
    "              bottom.add(bottom.length);",
    "            });",
    "          },",
    "        ),",
    "      ),",
    "      body: CustomScrollView(",
    "        center: centerKey,",
    "        slivers: <Widget>[",
    "          // Text(\"Custom SCROLL VIEW\"),",
    "          SliverToBoxAdapter(",
    "            child: Text(",
    "              \"Custom scroll View\",",
    "              style: TextStyle(fontFamily: \"Poppins\", fontSize: 27),",
    "            ),",
    "          ),",
    "          SliverList(",
    "            delegate: SliverChildBuilderDelegate(",
    "              (BuildContext context, int index) {",
    "                return Container(",
    "                  alignment: Alignment.center,",
    "                  color: Colors.blue[200 + top[index] % 4 * 100],",
    "                  height: 100 + top[index] % 4 * 20.0,",
    "                  child: Text('Item: ${top[index]}'),",
    "                );",
    "              },",
    "              childCount: top.length,",
    "            ),",
    "          ),",
    "          SliverList(",
    "            key: centerKey,",
    "            delegate: SliverChildBuilderDelegate(",
    "              (BuildContext context, int index) {",
    "                return Container(",
    "                  alignment: Alignment.center,",
    "                  color: Colors.blue[200 + bottom[index] % 4 * 100],",
    "                  height: 100 + bottom[index] % 4 * 20.0,",
    "                  child: Text('Item: ${bottom[index]}'),",
    "                );",
    "              },",
    "              childCount: bottom.length,",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CustomScrollView Example"
},
"Flutter ListTile To Grid Example": {
  "prefix": "flutter-ListTile_to_Grid",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ListTile] selection in a [ListView] or [GridView].",
    "",
    "void main() => runApp(const ListViewExampleApp());",
    "",
    "class ListViewExampleApp extends StatelessWidget {",
    "  const ListViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ListTileSelectExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListTileSelectExample extends StatefulWidget {",
    "  const ListTileSelectExample({super.key});",
    "",
    "  @override",
    "  ListTileSelectExampleState createState() => ListTileSelectExampleState();",
    "}",
    "",
    "class ListTileSelectExampleState extends State<ListTileSelectExample> {",
    "  bool isSelectionMode = false;",
    "  final int listLength = 30;",
    "  late List<bool> _selected;",
    "  bool _selectAll = false;",
    "  bool _isGridMode = false;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    initializeSelection();",
    "  }",
    "",
    "  void initializeSelection() {",
    "    _selected = List<bool>.generate(listLength, (_) => false);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _selected.clear();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text(",
    "            'ListTile To Grid selection',",
    "          ),",
    "          leading: isSelectionMode",
    "              ? IconButton(",
    "                  icon: const Icon(Icons.close),",
    "                  onPressed: () {",
    "                    setState(() {",
    "                      isSelectionMode = false;",
    "                    });",
    "                    initializeSelection();",
    "                  },",
    "                )",
    "              : const SizedBox(),",
    "          actions: <Widget>[",
    "            if (_isGridMode)",
    "              IconButton(",
    "                icon: const Icon(Icons.grid_on),",
    "                onPressed: () {",
    "                  setState(() {",
    "                    _isGridMode = false;",
    "                  });",
    "                },",
    "              )",
    "            else",
    "              IconButton(",
    "                icon: const Icon(Icons.list),",
    "                onPressed: () {",
    "                  setState(() {",
    "                    _isGridMode = true;",
    "                  });",
    "                },",
    "              ),",
    "            if (isSelectionMode)",
    "              TextButton(",
    "                  child: !_selectAll",
    "                      ? const Text(",
    "                          'select all',",
    "                          style: TextStyle(color: Colors.white),",
    "                        )",
    "                      : const Text(",
    "                          'unselect all',",
    "                          style: TextStyle(color: Colors.white),",
    "                        ),",
    "                  onPressed: () {",
    "                    _selectAll = !_selectAll;",
    "                    setState(() {",
    "                      _selected =",
    "                          List<bool>.generate(listLength, (_) => _selectAll);",
    "                    });",
    "                  }),",
    "          ],",
    "        ),",
    "        body: _isGridMode",
    "            ? GridBuilder(",
    "                isSelectionMode: isSelectionMode,",
    "                selectedList: _selected,",
    "                onSelectionChange: (bool x) {",
    "                  setState(() {",
    "                    isSelectionMode = x;",
    "                  });",
    "                },",
    "              )",
    "            : ListBuilder(",
    "                isSelectionMode: isSelectionMode,",
    "                selectedList: _selected,",
    "                onSelectionChange: (bool x) {",
    "                  setState(() {",
    "                    isSelectionMode = x;",
    "                  });",
    "                },",
    "              ));",
    "  }",
    "}",
    "",
    "class GridBuilder extends StatefulWidget {",
    "  const GridBuilder({",
    "    super.key,",
    "    required this.selectedList,",
    "    required this.isSelectionMode,",
    "    required this.onSelectionChange,",
    "  });",
    "",
    "  final bool isSelectionMode;",
    "  final Function(bool)? onSelectionChange;",
    "  final List<bool> selectedList;",
    "",
    "  @override",
    "  GridBuilderState createState() => GridBuilderState();",
    "}",
    "",
    "class GridBuilderState extends State<GridBuilder> {",
    "  void _toggle(int index) {",
    "    if (widget.isSelectionMode) {",
    "      setState(() {",
    "        widget.selectedList[index] = !widget.selectedList[index];",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return GridView.builder(",
    "        itemCount: widget.selectedList.length,",
    "        gridDelegate:",
    "            const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),",
    "        itemBuilder: (_, int index) {",
    "          return InkWell(",
    "            onTap: () => _toggle(index),",
    "            onLongPress: () {",
    "              if (!widget.isSelectionMode) {",
    "                setState(() {",
    "                  widget.selectedList[index] = true;",
    "                });",
    "                widget.onSelectionChange!(true);",
    "              }",
    "            },",
    "            child: GridTile(",
    "                child: Container(",
    "              child: widget.isSelectionMode",
    "                  ? Checkbox(",
    "                      onChanged: (bool? x) => _toggle(index),",
    "                      value: widget.selectedList[index])",
    "                  : const Icon(Icons.image),",
    "            )),",
    "          );",
    "        });",
    "  }",
    "}",
    "",
    "class ListBuilder extends StatefulWidget {",
    "  const ListBuilder({",
    "    super.key,",
    "    required this.selectedList,",
    "    required this.isSelectionMode,",
    "    required this.onSelectionChange,",
    "  });",
    "",
    "  final bool isSelectionMode;",
    "  final List<bool> selectedList;",
    "  final Function(bool)? onSelectionChange;",
    "",
    "  @override",
    "  State<ListBuilder> createState() => _ListBuilderState();",
    "}",
    "",
    "class _ListBuilderState extends State<ListBuilder> {",
    "  void _toggle(int index) {",
    "    if (widget.isSelectionMode) {",
    "      setState(() {",
    "        widget.selectedList[index] = !widget.selectedList[index];",
    "      });",
    "    }",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListView.builder(",
    "        itemCount: widget.selectedList.length,",
    "        itemBuilder: (_, int index) {",
    "          return ListTile(",
    "              onTap: () => _toggle(index),",
    "              onLongPress: () {",
    "                if (!widget.isSelectionMode) {",
    "                  setState(() {",
    "                    widget.selectedList[index] = true;",
    "                  });",
    "                  widget.onSelectionChange!(true);",
    "                }",
    "              },",
    "              trailing: widget.isSelectionMode",
    "                  ? Checkbox(",
    "                      value: widget.selectedList[index],",
    "                      onChanged: (bool? x) => _toggle(index),",
    "                    )",
    "                  : const SizedBox.shrink(),",
    "              title: Text('item $index'));",
    "        });",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListTile To Grid Example"
},
"Flutter RawScrollbar Example": {
  "prefix": "flutter-RawScrollbar",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RawScrollbar].",
    "",
    "void main() => runApp(const RawScrollbarExampleApp());",
    "",
    "class RawScrollbarExampleApp extends StatelessWidget {",
    "  const RawScrollbarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RawScrollbar Sample')),",
    "        body: const Center(",
    "          child: RawScrollbarExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RawScrollbarExample extends StatefulWidget {",
    "  const RawScrollbarExample({super.key});",
    "",
    "  @override",
    "  State<RawScrollbarExample> createState() => _RawScrollbarExampleState();",
    "}",
    "",
    "class _RawScrollbarExampleState extends State<RawScrollbarExample> {",
    "  final ScrollController _firstController = ScrollController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return LayoutBuilder(",
    "        builder: (BuildContext context, BoxConstraints constraints) {",
    "      return Row(",
    "        children: <Widget>[",
    "          SizedBox(",
    "              width: constraints.maxWidth / 2,",
    "              // When using the PrimaryScrollController and a Scrollbar",
    "              // together, only one ScrollPosition can be attached to the",
    "              // PrimaryScrollController at a time. Providing a",
    "              // unique scroll controller to this scroll view prevents it",
    "              // from attaching to the PrimaryScrollController.",
    "              child: Scrollbar(",
    "                thumbVisibility: true,",
    "                controller: _firstController,",
    "                child: ListView.builder(",
    "                    controller: _firstController,",
    "                    itemCount: 100,",
    "                    itemBuilder: (BuildContext context, int index) {",
    "                      return Padding(",
    "                        padding: const EdgeInsets.all(8.0),",
    "                        child: Text('Scrollable 1 : Index $index'),",
    "                      );",
    "                    }),",
    "              )),",
    "          SizedBox(",
    "              width: constraints.maxWidth / 2,",
    "              // This vertical scroll view has primary set to true, so it is",
    "              // using the PrimaryScrollController. On mobile platforms, the",
    "              // PrimaryScrollController automatically attaches to vertical",
    "              // ScrollViews, unlike on Desktop platforms, where the primary",
    "              // parameter is required.",
    "              child: Scrollbar(",
    "                thumbVisibility: true,",
    "                child: ListView.builder(",
    "                    primary: true,",
    "                    itemCount: 100,",
    "                    itemBuilder: (BuildContext context, int index) {",
    "                      return Container(",
    "                          height: 50,",
    "                          color: index.isEven",
    "                              ? Colors.amberAccent",
    "                              : Colors.blueAccent,",
    "                          child: Padding(",
    "                            padding: const EdgeInsets.all(8.0),",
    "                            child: Text('Scrollable 2 : Index $index'),",
    "                          ));",
    "                    }),",
    "              )),",
    "        ],",
    "      );",
    "    });",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RawScrollbar Example"
},
"Flutter RawScrollbar Example": {
  "prefix": "flutter-raw scrollbar",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RawScrollbar].",
    "",
    "void main() => runApp(const RawScrollbarExampleApp());",
    "",
    "class RawScrollbarExampleApp extends StatelessWidget {",
    "  const RawScrollbarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RawScrollbar Sample')),",
    "        body: const Center(",
    "          child: RawScrollbarExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RawScrollbarExample extends StatefulWidget {",
    "  const RawScrollbarExample({super.key});",
    "",
    "  @override",
    "  State<RawScrollbarExample> createState() => _RawScrollbarExampleState();",
    "}",
    "",
    "class _RawScrollbarExampleState extends State<RawScrollbarExample> {",
    "  final ScrollController _firstController = ScrollController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return LayoutBuilder(",
    "        builder: (BuildContext context, BoxConstraints constraints) {",
    "      return Row(",
    "        children: <Widget>[",
    "          SizedBox(",
    "              width: constraints.maxWidth / 2,",
    "              // When using the PrimaryScrollController and a Scrollbar",
    "              // together, only one ScrollPosition can be attached to the",
    "              // PrimaryScrollController at a time. Providing a",
    "              // unique scroll controller to this scroll view prevents it",
    "              // from attaching to the PrimaryScrollController.",
    "              child: Scrollbar(",
    "                thumbVisibility: true,",
    "                controller: _firstController,",
    "                child: ListView.builder(",
    "                    controller: _firstController,",
    "                    itemCount: 100,",
    "                    itemBuilder: (BuildContext context, int index) {",
    "                      return Padding(",
    "                        padding: const EdgeInsets.all(8.0),",
    "                        child: Text('Scrollable 1 : Index $index'),",
    "                      );",
    "                    }),",
    "              )),",
    "          SizedBox(",
    "              width: constraints.maxWidth / 2,",
    "              // This vertical scroll view has primary set to true, so it is",
    "              // using the PrimaryScrollController. On mobile platforms, the",
    "              // PrimaryScrollController automatically attaches to vertical",
    "              // ScrollViews, unlike on Desktop platforms, where the primary",
    "              // parameter is required.",
    "              child: Scrollbar(",
    "                thumbVisibility: true,",
    "                child: ListView.builder(",
    "                    primary: true,",
    "                    itemCount: 100,",
    "                    itemBuilder: (BuildContext context, int index) {",
    "                      return Container(",
    "                          height: 50,",
    "                          color: index.isEven",
    "                              ? Colors.amberAccent",
    "                              : Colors.blueAccent,",
    "                          child: Padding(",
    "                            padding: const EdgeInsets.all(8.0),",
    "                            child: Text('Scrollable 2 : Index $index'),",
    "                          ));",
    "                    }),",
    "              )),",
    "        ],",
    "      );",
    "    });",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RawScrollbar Example"
},
"Flutter RawScrollbar Example": {
  "prefix": "rawscrollbar",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RawScrollbar].",
    "",
    "void main() => runApp(const RawScrollbarExampleApp());",
    "",
    "class RawScrollbarExampleApp extends StatelessWidget {",
    "  const RawScrollbarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('RawScrollbar Sample')),",
    "        body: const RawScrollbarExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class RawScrollbarExample extends StatefulWidget {",
    "  const RawScrollbarExample({super.key});",
    "",
    "  @override",
    "  State<RawScrollbarExample> createState() => _RawScrollbarExampleState();",
    "}",
    "",
    "class _RawScrollbarExampleState extends State<RawScrollbarExample> {",
    "  final ScrollController _controllerOne = ScrollController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RawScrollbar(",
    "      controller: _controllerOne,",
    "      thumbVisibility: true,",
    "      child: GridView.builder(",
    "        controller: _controllerOne,",
    "        itemCount: 120,",
    "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),",
    "        itemBuilder: (BuildContext context, int index) {",
    "          return Center(",
    "            child: Text('item $index'),",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RawScrollbar Example"
},
"Flutter RawScrollbar  shape Example": {
  "prefix": "rawscrollbar shape",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RawScrollbar.shape].",
    "",
    "void main() => runApp(const ShapeExampleApp());",
    "",
    "class ShapeExampleApp extends StatelessWidget {",
    "  const ShapeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ShapeExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ShapeExample extends StatelessWidget {",
    "  const ShapeExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: RawScrollbar(",
    "        shape: const StadiumBorder(side: BorderSide(color: Colors.brown, width: 3.0)),",
    "        thickness: 15.0,",
    "        thumbColor: Colors.blue,",
    "        thumbVisibility: true,",
    "        child: ListView(",
    "          // On mobile platforms, setting primary to true is not required, as",
    "          // the PrimaryScrollController automatically attaches to vertical",
    "          // ScrollPositions. On desktop platforms however, using the",
    "          // PrimaryScrollController requires ScrollView.primary be set.",
    "          primary: true,",
    "          physics: const BouncingScrollPhysics(),",
    "          children: List<Text>.generate(100, (int index) => Text((index * index).toString())),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RawScrollbar  shape Example"
},
"Flutter SharedAppData Example": {
  "prefix": "sharedapp data",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SharedAppData].",
    "",
    "class ShowSharedValue extends StatelessWidget {",
    "  const ShowSharedValue({super.key, required this.appDataKey});",
    "",
    "  final String appDataKey;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    // The SharedAppData.getValue() call causes this widget to depend on the",
    "    // value of the SharedAppData's 'foo' key. If it's changed, with",
    "    // SharedAppData.setValue(), then this widget will be rebuilt.",
    "    final String value = SharedAppData.getValue<String, String>(context, appDataKey, () => 'initial');",
    "    return Text('$appDataKey: $value');",
    "  }",
    "}",
    "",
    "// Demonstrates that changes to the SharedAppData _only_ cause the dependent",
    "// widgets to be rebuilt. In this case that's the ShowSharedValue widget that's",
    "// displaying the value of a key whose value has been updated.",
    "class Home extends StatefulWidget {",
    "  const Home({super.key});",
    "",
    "  @override",
    "  State<Home> createState() => _HomeState();",
    "}",
    "",
    "class _HomeState extends State<Home> {",
    "  int _fooVersion = 0;",
    "  int _barVersion = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            const ShowSharedValue(appDataKey: 'foo'),",
    "            const SizedBox(height: 16),",
    "            const ShowSharedValue(appDataKey: 'bar'),",
    "            const SizedBox(height: 16),",
    "            ElevatedButton(",
    "              child: const Text('change foo'),",
    "              onPressed: () {",
    "                _fooVersion += 1;",
    "                // Changing the SharedAppData's value for 'foo' causes the",
    "                // widgets that depend on 'foo' to be rebuilt.",
    "                SharedAppData.setValue<String, String?>(",
    "                    context, 'foo', 'FOO $_fooVersion'); // no need to call setState()",
    "              },",
    "            ),",
    "            const SizedBox(height: 16),",
    "            ElevatedButton(",
    "              child: const Text('change bar'),",
    "              onPressed: () {",
    "                _barVersion += 1;",
    "                SharedAppData.setValue<String, String?>(",
    "                    context, 'bar', 'BAR $_barVersion'); // no need to call setState()",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "void main() {",
    "  runApp(const MaterialApp(home: Home()));",
    "}",
    ""
  ],
  "description": "Flutter SharedAppData Example"
},
"Flutter SharedAppData custom Example": {
  "prefix": "flutter-SharedAppData",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SharedAppData].",
    "",
    "// A single lazily-constructed object that's shared with the entire application",
    "// via `SharedObject.of(context)`. The value of the object can be changed with",
    "// `SharedObject.reset(context)`. Resetting the value will cause all of the",
    "// widgets that depend on it to be rebuilt.",
    "class SharedObject {",
    "  SharedObject._();",
    "",
    "  static final Object _sharedObjectKey = Object();",
    "",
    "  @override",
    "  String toString() => describeIdentity(this);",
    "",
    "  static void reset(BuildContext context) {",
    "    // Calling SharedAppData.setValue() causes dependent widgets to be rebuilt.",
    "    SharedAppData.setValue<Object, SharedObject>(",
    "        context, _sharedObjectKey, SharedObject._());",
    "  }",
    "",
    "  static SharedObject of(BuildContext context) {",
    "    // If a value for _sharedObjectKey has never been set then the third",
    "    // callback parameter is used to generate an initial value.",
    "    return SharedAppData.getValue<Object, SharedObject>(",
    "        context, _sharedObjectKey, () => SharedObject._());",
    "  }",
    "}",
    "",
    "// An example of a widget which depends on the SharedObject's value, which might",
    "// be provided - along with SharedObject - in a Dart package.",
    "class CustomWidget extends StatelessWidget {",
    "  const CustomWidget({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    // Will be rebuilt if the shared object's value is changed.",
    "    return ElevatedButton(",
    "      child: Text('Replace ${SharedObject.of(context)}'),",
    "      onPressed: () {",
    "        SharedObject.reset(context);",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "class Home extends StatelessWidget {",
    "  const Home({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"SHARED APP DATA WITH RESET\"),",
    "      ),",
    "      body: Center(child: CustomWidget()),",
    "    );",
    "  }",
    "}",
    "",
    "void main() {",
    "  runApp(const MaterialApp(home: Home()));",
    "}",
    ""
  ],
  "description": "Flutter SharedAppData custom Example"
},
"Flutter Shortcuts Example": {
  "prefix": "flutter-Shortcuts",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [Shortcuts].",
    "",
    "void main() => runApp(const ShortcutsExampleApp());",
    "",
    "class ShortcutsExampleApp extends StatelessWidget {",
    "  const ShortcutsExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Shortcuts Sample')),",
    "        body: const Center(",
    "          child: ShortcutsExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class IncrementIntent extends Intent {",
    "  const IncrementIntent();",
    "}",
    "",
    "class DecrementIntent extends Intent {",
    "  const DecrementIntent();",
    "}",
    "",
    "class ShortcutsExample extends StatefulWidget {",
    "  const ShortcutsExample({super.key});",
    "",
    "  @override",
    "  State<ShortcutsExample> createState() => _ShortcutsExampleState();",
    "}",
    "",
    "class _ShortcutsExampleState extends State<ShortcutsExample> {",
    "  int count = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Shortcuts(",
    "      shortcuts: const <ShortcutActivator, Intent>{",
    "        SingleActivator(LogicalKeyboardKey.arrowUp): IncrementIntent(),",
    "        SingleActivator(LogicalKeyboardKey.arrowDown): DecrementIntent(),",
    "      },",
    "      child: Actions(",
    "        actions: <Type, Action<Intent>>{",
    "          IncrementIntent: CallbackAction<IncrementIntent>(",
    "            onInvoke: (IncrementIntent intent) => setState(() {",
    "              count = count + 1;",
    "            }),",
    "          ),",
    "          DecrementIntent: CallbackAction<DecrementIntent>(",
    "            onInvoke: (DecrementIntent intent) => setState(() {",
    "              count = count - 1;",
    "            }),",
    "          ),",
    "        },",
    "        child: Focus(",
    "          autofocus: true,",
    "          child: Column(",
    "            children: <Widget>[",
    "              const Text('Add to the counter by pressing the up arrow key'),",
    "              const Text(",
    "                  'Subtract from the counter by pressing the down arrow key'),",
    "              Text('count: $count'),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Shortcuts Example"
},
"Flutter SingleChildScrollView Example": {
  "prefix": "flutter-SingleChildScrollView",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SingleChildScrollView].",
    "",
    "void main() => runApp(const SingleChildScrollViewExampleApp());",
    "",
    "class SingleChildScrollViewExampleApp extends StatelessWidget {",
    "  const SingleChildScrollViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SingleChildScrollViewExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SingleChildScrollViewExample extends StatelessWidget {",
    "  const SingleChildScrollViewExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTextStyle(",
    "      style: Theme.of(context).textTheme.bodyMedium!,",
    "      child: LayoutBuilder(",
    "        builder: (BuildContext context, BoxConstraints viewportConstraints) {",
    "          return SingleChildScrollView(",
    "            child: ConstrainedBox(",
    "              constraints: BoxConstraints(",
    "                minHeight: viewportConstraints.maxHeight,",
    "              ),",
    "              child: IntrinsicHeight(",
    "                child: Column(",
    "                  children: <Widget>[",
    "                    Container(",
    "                      // A fixed-height child.",
    "                      color: const Color(0xffeeee00), // Yellow",
    "                      height: 120.0,",
    "                      alignment: Alignment.center,",
    "                      child: const Text('Fixed Height Content'),",
    "                    ),",
    "                    Expanded(",
    "                      // A flexible child that will grow to fit the viewport but",
    "                      // still be at least as big as necessary to fit its contents.",
    "                      child: Container(",
    "                        color: const Color(0xffee0000), // Red",
    "                        height: 120.0,",
    "                        alignment: Alignment.center,",
    "                        child: const Text('Flexible Content'),",
    "                      ),",
    "                    ),",
    "                  ],",
    "                ),",
    "              ),",
    "            ),",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SingleChildScrollView Example"
},
"Flutter SliverDecoration Example": {
  "prefix": "flutter-SliverDecoration",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SliverDecorationExampleApp());",
    "",
    "class SliverDecorationExampleApp extends StatelessWidget {",
    "  const SliverDecorationExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverDecoration Sample')),",
    "        body: const SliverDecorationExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverDecorationExample extends StatelessWidget {",
    "  const SliverDecorationExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(",
    "      slivers: <Widget>[",
    "        DecoratedSliver(",
    "          decoration: const BoxDecoration(",
    "            gradient: RadialGradient(",
    "              center: Alignment(-0.5, -0.6),",
    "              radius: 0.15,",
    "              colors: <Color>[",
    "                Color(0xFFEEEEEE),",
    "                Color(0xFF111133),",
    "              ],",
    "              stops: <double>[0.9, 1.0],",
    "            ),",
    "          ),",
    "          sliver: SliverList(",
    "            delegate: SliverChildListDelegate(<Widget>[",
    "              const Text('Goodnight Moon'),",
    "            ]),",
    "          ),",
    "        ),",
    "        const DecoratedSliver(",
    "          decoration: BoxDecoration(",
    "              color: Colors.amber,",
    "              borderRadius: BorderRadius.all(Radius.circular(50))),",
    "          sliver: SliverToBoxAdapter(child: SizedBox(height: 300)),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverDecoration Example"
},
"Flutter SliverConstrained Example": {
  "prefix": "flutter-SliverConstrainedCrossAxis",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SliverConstrainedCrossAxisExampleApp());",
    "",
    "class SliverConstrainedCrossAxisExampleApp extends StatelessWidget {",
    "  const SliverConstrainedCrossAxisExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverConstrainedCrossAxis Sample')),",
    "        body: const SliverConstrainedCrossAxisExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverConstrainedCrossAxisExample extends StatelessWidget {",
    "  const SliverConstrainedCrossAxisExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(",
    "      slivers: <Widget>[",
    "        SliverConstrainedCrossAxis(",
    "          maxExtent: 200,",
    "          sliver: SliverList.builder(",
    "            itemBuilder: (BuildContext context, int index) {",
    "              return Container(",
    "                color: index.isEven ? Colors.amber[300] : Colors.blue[300],",
    "                height: 100.0,",
    "                child: Center(",
    "                  child: Text(",
    "                    'Item $index',",
    "                    style: const TextStyle(fontSize: 24),",
    "                  ),",
    "                ),",
    "              );",
    "            },",
    "            itemCount: 10,",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverConstrained Example"
},
"Flutter SliverCrossAxis Example": {
  "prefix": "flutter-SliverCrossAxisGroup",
  "body": [
    "",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SliverCrossAxisGroupExampleApp());",
    "",
    "class SliverCrossAxisGroupExampleApp extends StatelessWidget {",
    "  const SliverCrossAxisGroupExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverCrossAxisGroup Sample')),",
    "        body: const SliverCrossAxisGroupExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverCrossAxisGroupExample extends StatelessWidget {",
    "  const SliverCrossAxisGroupExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(",
    "      slivers: <Widget>[",
    "        SliverCrossAxisGroup(",
    "          slivers: <Widget>[",
    "            SliverList.builder(",
    "              itemBuilder: (BuildContext context, int index) {",
    "                return Container(",
    "                  color: index.isEven ? Colors.amber[300] : Colors.blue[300],",
    "                  height: 100.0,",
    "                  child: Center(",
    "                    child: Text(",
    "                      'Item $index',",
    "                      style: const TextStyle(fontSize: 24),",
    "                    ),",
    "                  ),",
    "                );",
    "              },",
    "              itemCount: 5,",
    "            ),",
    "            SliverConstrainedCrossAxis(",
    "              maxExtent: 100,",
    "              sliver: SliverList.builder(",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  return Container(",
    "                    color: index.isEven ? Colors.green[300] : Colors.red[300],",
    "                    height: 100.0,",
    "                    child: Center(",
    "                      child: Text(",
    "                        'Item ${index + 5}',",
    "                        style: const TextStyle(fontSize: 24),",
    "                      ),",
    "                    ),",
    "                  );",
    "                },",
    "                itemCount: 5,",
    "              ),",
    "            ),",
    "            SliverCrossAxisExpanded(",
    "              flex: 2,",
    "              sliver: SliverList.builder(",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  return Container(",
    "                    color:",
    "                        index.isEven ? Colors.purple[300] : Colors.orange[300],",
    "                    height: 100.0,",
    "                    child: Center(",
    "                      child: Text(",
    "                        'Item ${index + 10}',",
    "                        style: const TextStyle(fontSize: 24),",
    "                      ),",
    "                    ),",
    "                  );",
    "                },",
    "                itemCount: 5,",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverCrossAxis Example"
},
"Flutter SliverMainAxis Group Example": {
  "prefix": "flutter-SliverMainAxisGroup",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SliverMainAxisGroupExampleApp());",
    "",
    "class SliverMainAxisGroupExampleApp extends StatelessWidget {",
    "  const SliverMainAxisGroupExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverMainAxisGroup Sample')),",
    "        body: const SliverMainAxisGroupExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverMainAxisGroupExample extends StatelessWidget {",
    "  const SliverMainAxisGroupExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(",
    "      slivers: <Widget>[",
    "        SliverMainAxisGroup(",
    "          slivers: <Widget>[",
    "            const SliverAppBar(",
    "              title: Text('Section Title'),",
    "              expandedHeight: 70.0,",
    "              pinned: true,",
    "            ),",
    "            SliverList.builder(",
    "              itemBuilder: (BuildContext context, int index) {",
    "                return Container(",
    "                  color: index.isEven ? Colors.amber[300] : Colors.blue[300],",
    "                  height: 100.0,",
    "                  child: Center(",
    "                    child: Text(",
    "                      'Item $index',",
    "                      style: const TextStyle(fontSize: 24),",
    "                    ),",
    "                  ),",
    "                );",
    "              },",
    "              itemCount: 5,",
    "            ),",
    "            SliverToBoxAdapter(",
    "              child: Container(",
    "                color: Colors.cyan,",
    "                height: 100,",
    "                child: const Center(",
    "                  child: Text('Another sliver child',",
    "                      style: TextStyle(fontSize: 24)),",
    "                ),",
    "              ),",
    "            )",
    "          ],",
    "        ),",
    "        SliverToBoxAdapter(",
    "          child: Container(",
    "            height: 1000,",
    "            decoration: const BoxDecoration(color: Colors.greenAccent),",
    "            child: const Center(",
    "              child: Text('Hello World!', style: TextStyle(fontSize: 24)),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverMainAxis Group Example"
},
"Flutter SliverMainAxis Group Example": {
  "prefix": "flutter-SliverList.builder",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const SliverMainAxisGroupExampleApp());",
    "",
    "class SliverMainAxisGroupExampleApp extends StatelessWidget {",
    "  const SliverMainAxisGroupExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverMainAxisGroup Sample')),",
    "        body: const SliverMainAxisGroupExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverMainAxisGroupExample extends StatelessWidget {",
    "  const SliverMainAxisGroupExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(",
    "      slivers: <Widget>[",
    "        SliverMainAxisGroup(",
    "          slivers: <Widget>[",
    "            const SliverAppBar(",
    "              title: Text('Section Title'),",
    "              expandedHeight: 70.0,",
    "              pinned: true,",
    "            ),",
    "            SliverList.builder(",
    "              itemBuilder: (BuildContext context, int index) {",
    "                return Container(",
    "                  color: index.isEven ? Colors.amber[300] : Colors.blue[300],",
    "                  height: 100.0,",
    "                  child: Center(",
    "                    child: Text(",
    "                      'Item $index',",
    "                      style: const TextStyle(fontSize: 24),",
    "                    ),",
    "                  ),",
    "                );",
    "              },",
    "              itemCount: 5,",
    "            ),",
    "            SliverToBoxAdapter(",
    "              child: Container(",
    "                color: Colors.cyan,",
    "                height: 100,",
    "                child: const Center(",
    "                  child: Text('Another sliver child',",
    "                      style: TextStyle(fontSize: 24)),",
    "                ),",
    "              ),",
    "            )",
    "          ],",
    "        ),",
    "        SliverToBoxAdapter(",
    "          child: Container(",
    "            height: 1000,",
    "            decoration: const BoxDecoration(color: Colors.greenAccent),",
    "            child: const Center(",
    "              child: Text('Hello World!', style: TextStyle(fontSize: 24)),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverMainAxis Group Example"
},
"Flutter SliverOpacity Example": {
  "prefix": "flutter-SliverOpacity",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverOpacity].",
    "",
    "void main() => runApp(const SliverOpacityExampleApp());",
    "",
    "class SliverOpacityExampleApp extends StatelessWidget {",
    "  const SliverOpacityExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SliverOpacityExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverOpacityExample extends StatefulWidget {",
    "  const SliverOpacityExample({super.key});",
    "",
    "  @override",
    "  State<SliverOpacityExample> createState() => _SliverOpacityExampleState();",
    "}",
    "",
    "class _SliverOpacityExampleState extends State<SliverOpacityExample> {",
    "  static const List<Widget> _listItems = <Widget>[",
    "    ListTile(title: Text('Now you see me,')),",
    "    ListTile(title: Text(\"Now you don't!\")),",
    "  ];",
    "",
    "  bool _visible = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('SliverOpacity demo'),",
    "      ),",
    "      body: CustomScrollView(",
    "        slivers: <Widget>[",
    "          const SliverToBoxAdapter(",
    "            child: ListTile(",
    "                title:",
    "                    Text('Press on the button to toggle the list visibility.')),",
    "          ),",
    "          const SliverToBoxAdapter(",
    "            child: ListTile(title: Text('Before the list...')),",
    "          ),",
    "          SliverOpacity(",
    "            opacity: _visible ? 1.0 : 0.0,",
    "            sliver: SliverList(",
    "              delegate: SliverChildListDelegate(_listItems),",
    "            ),",
    "          ),",
    "          const SliverToBoxAdapter(",
    "            child: ListTile(title: Text('Before the list...')),",
    "          ),",
    "        ],",
    "      ),",
    "      floatingActionButton: FloatingActionButton(",
    "        child: const Icon(Icons.disabled_visible),",
    "        onPressed: () {",
    "          setState(() {",
    "            _visible = !_visible;",
    "          });",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverOpacity Example"
},
"Flutter SliverFillRemaining Example": {
  "prefix": "flutter-SliverFillRemaining",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverFillRemaining].",
    "",
    "void main() => runApp(const SliverFillRemainingExampleApp());",
    "",
    "class SliverFillRemainingExampleApp extends StatelessWidget {",
    "  const SliverFillRemainingExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverFillRemaining Sample')),",
    "        body: const SliverFillRemainingExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverFillRemainingExample extends StatelessWidget {",
    "  const SliverFillRemainingExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(",
    "      slivers: <Widget>[",
    "        SliverToBoxAdapter(",
    "          child: Container(",
    "            color: Colors.amber[300],",
    "            height: 150.0,",
    "          ),",
    "        ),",
    "        SliverFillRemaining(",
    "          hasScrollBody: false,",
    "          child: Container(",
    "            color: Colors.blue[100],",
    "            child: Icon(",
    "              Icons.sentiment_very_satisfied,",
    "              size: 75,",
    "              color: Colors.blue[900],",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverFillRemaining Example"
},
"Flutter SliverFillRemaining with SliverFixedExtentList  Example": {
  "prefix": "flutter-SliverFillRemaining_with_SliverFixedExtentList",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverFillRemaining] with [SliverFixedExtentList].",
    "",
    "void main() => runApp(const SliverFillRemainingExampleApp());",
    "",
    "class SliverFillRemainingExampleApp extends StatelessWidget {",
    "  const SliverFillRemainingExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "            title: const Text('SliverFillRemaining & SliverFixedExtentList')),",
    "        body: const SliverFillRemainingExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverFillRemainingExample extends StatelessWidget {",
    "  const SliverFillRemainingExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(",
    "      slivers: <Widget>[",
    "        SliverFixedExtentList(",
    "          itemExtent: 100.0,",
    "          delegate: SliverChildBuilderDelegate(",
    "            (BuildContext context, int index) {",
    "              return Container(",
    "                color: index.isEven ? Colors.amber[200] : Colors.blue[200],",
    "              );",
    "            },",
    "            childCount: 3,",
    "          ),",
    "        ),",
    "        SliverFillRemaining(",
    "          hasScrollBody: false,",
    "          child: Container(",
    "            color: Colors.orange[300],",
    "            child: const Padding(",
    "              padding: EdgeInsets.all(50.0),",
    "              child: FlutterLogo(size: 100),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverFillRemaining with SliverFixedExtentList  Example"
},
"Flutter SlottedMultiChildRenderObjectWidget  Example": {
  "prefix": "flutter-SlottedMultiChildRenderObjectWidget",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/rendering.dart';",
    "",
    "/// Flutter code sample for [SlottedMultiChildRenderObjectWidget].",
    "",
    "/// Slots used for the children of [Diagonal] and [RenderDiagonal].",
    "enum DiagonalSlot {",
    "  topLeft,",
    "  bottomRight,",
    "}",
    "",
    "/// A widget that demonstrates the usage of",
    "/// [SlottedMultiChildRenderObjectWidget] by providing slots for two",
    "/// children that will be arranged diagonally.",
    "class Diagonal",
    "    extends SlottedMultiChildRenderObjectWidget<DiagonalSlot, RenderBox> {",
    "  const Diagonal({",
    "    super.key,",
    "    this.topLeft,",
    "    this.bottomRight,",
    "    this.backgroundColor,",
    "  });",
    "",
    "  final Widget? topLeft;",
    "  final Widget? bottomRight;",
    "  final Color? backgroundColor;",
    "",
    "  @override",
    "  Iterable<DiagonalSlot> get slots => DiagonalSlot.values;",
    "",
    "  @override",
    "  Widget? childForSlot(DiagonalSlot slot) {",
    "    switch (slot) {",
    "      case DiagonalSlot.topLeft:",
    "        return topLeft;",
    "      case DiagonalSlot.bottomRight:",
    "        return bottomRight;",
    "    }",
    "  }",
    "",
    "  // The [createRenderObject] and [updateRenderObject] methods configure the",
    "  // [RenderObject] backing this widget with the configuration of the widget.",
    "  // They do not need to do anything with the children of the widget, though.",
    "  // The children of the widget are automatically configured on the",
    "  // [RenderObject] by [SlottedRenderObjectElement.mount] and",
    "  // [SlottedRenderObjectElement.update].",
    "",
    "  @override",
    "  SlottedContainerRenderObjectMixin<DiagonalSlot, RenderBox> createRenderObject(",
    "    BuildContext context,",
    "  ) {",
    "    return RenderDiagonal(",
    "      backgroundColor: backgroundColor,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void updateRenderObject(",
    "    BuildContext context,",
    "    SlottedContainerRenderObjectMixin<DiagonalSlot, RenderBox> renderObject,",
    "  ) {",
    "    (renderObject as RenderDiagonal).backgroundColor = backgroundColor;",
    "  }",
    "}",
    "",
    "/// A render object that demonstrates the usage of",
    "/// [SlottedContainerRenderObjectMixin] by providing slots for two children that",
    "/// will be arranged diagonally.",
    "class RenderDiagonal extends RenderBox",
    "    with",
    "        SlottedContainerRenderObjectMixin<DiagonalSlot, RenderBox>,",
    "        DebugOverflowIndicatorMixin {",
    "  RenderDiagonal({Color? backgroundColor}) : _backgroundColor = backgroundColor;",
    "",
    "  // Getters and setters to configure the [RenderObject] with the configuration",
    "  // of the [Widget]. These mostly contain boilerplate code, but depending on",
    "  // where the configuration value is used, the setter has to call",
    "  // [markNeedsLayout], [markNeedsPaint], or [markNeedsSemanticsUpdate].",
    "  Color? get backgroundColor => _backgroundColor;",
    "  Color? _backgroundColor;",
    "  set backgroundColor(Color? value) {",
    "    assert(value != null);",
    "    if (_backgroundColor == value) {",
    "      return;",
    "    }",
    "    _backgroundColor = value;",
    "    markNeedsPaint();",
    "  }",
    "",
    "  // Getters to simplify accessing the slotted children.",
    "  RenderBox? get _topLeft => childForSlot(DiagonalSlot.topLeft);",
    "  RenderBox? get _bottomRight => childForSlot(DiagonalSlot.bottomRight);",
    "",
    "  // The size this render object would have if the incoming constraints were",
    "  // unconstrained; calculated during performLayout used during paint for an",
    "  // assertion that checks for unintended overflow.",
    "  late Size _childrenSize;",
    "",
    "  // Returns children in hit test order.",
    "  @override",
    "  Iterable<RenderBox> get children {",
    "    return <RenderBox>[",
    "      if (_topLeft != null) _topLeft!,",
    "      if (_bottomRight != null) _bottomRight!,",
    "    ];",
    "  }",
    "",
    "  // LAYOUT",
    "",
    "  @override",
    "  void performLayout() {",
    "    // Children are allowed to be as big as they want (= unconstrained).",
    "    const BoxConstraints childConstraints = BoxConstraints();",
    "",
    "    // Lay out the top left child and position it at offset zero.",
    "    Size topLeftSize = Size.zero;",
    "    final RenderBox? topLeft = _topLeft;",
    "    if (topLeft != null) {",
    "      topLeft.layout(childConstraints, parentUsesSize: true);",
    "      _positionChild(topLeft, Offset.zero);",
    "      topLeftSize = topLeft.size;",
    "    }",
    "",
    "    // Lay out the bottom right child and position it at the bottom right corner",
    "    // of the top left child.",
    "    Size bottomRightSize = Size.zero;",
    "    final RenderBox? bottomRight = _bottomRight;",
    "    if (bottomRight != null) {",
    "      bottomRight.layout(childConstraints, parentUsesSize: true);",
    "      _positionChild(",
    "        bottomRight,",
    "        Offset(topLeftSize.width, topLeftSize.height),",
    "      );",
    "      bottomRightSize = bottomRight.size;",
    "    }",
    "",
    "    // Calculate the overall size and constrain it to the given constraints.",
    "    // Any overflow is marked (in debug mode) during paint.",
    "    _childrenSize = Size(",
    "      topLeftSize.width + bottomRightSize.width,",
    "      topLeftSize.height + bottomRightSize.height,",
    "    );",
    "    size = constraints.constrain(_childrenSize);",
    "  }",
    "",
    "  void _positionChild(RenderBox child, Offset offset) {",
    "    (child.parentData! as BoxParentData).offset = offset;",
    "  }",
    "",
    "  // PAINT",
    "",
    "  @override",
    "  void paint(PaintingContext context, Offset offset) {",
    "    // Paint the background.",
    "    if (backgroundColor != null) {",
    "      context.canvas.drawRect(",
    "        offset & size,",
    "        Paint()..color = backgroundColor!,",
    "      );",
    "    }",
    "",
    "    void paintChild(RenderBox child, PaintingContext context, Offset offset) {",
    "      final BoxParentData childParentData = child.parentData! as BoxParentData;",
    "      context.paintChild(child, childParentData.offset + offset);",
    "    }",
    "",
    "    // Paint the children at the offset calculated during layout.",
    "    final RenderBox? topLeft = _topLeft;",
    "    if (topLeft != null) {",
    "      paintChild(topLeft, context, offset);",
    "    }",
    "    final RenderBox? bottomRight = _bottomRight;",
    "    if (bottomRight != null) {",
    "      paintChild(bottomRight, context, offset);",
    "    }",
    "",
    "    // Paint an overflow indicator in debug mode if the children want to be",
    "    // larger than the incoming constraints allow.",
    "    assert(() {",
    "      paintOverflowIndicator(",
    "        context,",
    "        offset,",
    "        Offset.zero & size,",
    "        Offset.zero & _childrenSize,",
    "      );",
    "      return true;",
    "    }());",
    "  }",
    "",
    "  // HIT TEST",
    "",
    "  @override",
    "  bool hitTestChildren(BoxHitTestResult result, {required Offset position}) {",
    "    for (final RenderBox child in children) {",
    "      final BoxParentData parentData = child.parentData! as BoxParentData;",
    "      final bool isHit = result.addWithPaintOffset(",
    "        offset: parentData.offset,",
    "        position: position,",
    "        hitTest: (BoxHitTestResult result, Offset transformed) {",
    "          assert(transformed == position - parentData.offset);",
    "          return child.hitTest(result, position: transformed);",
    "        },",
    "      );",
    "      if (isHit) {",
    "        return true;",
    "      }",
    "    }",
    "    return false;",
    "  }",
    "",
    "  // INTRINSICS",
    "",
    "  // Incoming height/width are ignored as children are always laid out unconstrained.",
    "",
    "  @override",
    "  double computeMinIntrinsicWidth(double height) {",
    "    final double topLeftWidth =",
    "        _topLeft?.getMinIntrinsicWidth(double.infinity) ?? 0;",
    "    final double bottomRightWith =",
    "        _bottomRight?.getMinIntrinsicWidth(double.infinity) ?? 0;",
    "    return topLeftWidth + bottomRightWith;",
    "  }",
    "",
    "  @override",
    "  double computeMaxIntrinsicWidth(double height) {",
    "    final double topLeftWidth =",
    "        _topLeft?.getMaxIntrinsicWidth(double.infinity) ?? 0;",
    "    final double bottomRightWith =",
    "        _bottomRight?.getMaxIntrinsicWidth(double.infinity) ?? 0;",
    "    return topLeftWidth + bottomRightWith;",
    "  }",
    "",
    "  @override",
    "  double computeMinIntrinsicHeight(double width) {",
    "    final double topLeftHeight =",
    "        _topLeft?.getMinIntrinsicHeight(double.infinity) ?? 0;",
    "    final double bottomRightHeight =",
    "        _bottomRight?.getMinIntrinsicHeight(double.infinity) ?? 0;",
    "    return topLeftHeight + bottomRightHeight;",
    "  }",
    "",
    "  @override",
    "  double computeMaxIntrinsicHeight(double width) {",
    "    final double topLeftHeight =",
    "        _topLeft?.getMaxIntrinsicHeight(double.infinity) ?? 0;",
    "    final double bottomRightHeight =",
    "        _bottomRight?.getMaxIntrinsicHeight(double.infinity) ?? 0;",
    "    return topLeftHeight + bottomRightHeight;",
    "  }",
    "",
    "  @override",
    "  Size computeDryLayout(BoxConstraints constraints) {",
    "    const BoxConstraints childConstraints = BoxConstraints();",
    "    final Size topLeftSize =",
    "        _topLeft?.computeDryLayout(childConstraints) ?? Size.zero;",
    "    final Size bottomRightSize =",
    "        _bottomRight?.computeDryLayout(childConstraints) ?? Size.zero;",
    "    return constraints.constrain(Size(",
    "      topLeftSize.width + bottomRightSize.width,",
    "      topLeftSize.height + bottomRightSize.height,",
    "    ));",
    "  }",
    "}",
    "",
    "class ExampleWidget extends StatelessWidget {",
    "  const ExampleWidget({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Slotted RenderObject Example')),",
    "        body: Center(",
    "          child: Diagonal(",
    "            topLeft: Container(",
    "              color: Colors.green,",
    "              height: 100,",
    "              width: 200,",
    "              child: const Center(",
    "                child: Text('topLeft'),",
    "              ),",
    "            ),",
    "            bottomRight: Container(",
    "              color: Colors.yellow,",
    "              height: 60,",
    "              width: 30,",
    "              child: const Center(",
    "                child: Text('bottomRight'),",
    "              ),",
    "            ),",
    "            backgroundColor: Colors.blue,",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "void main() {",
    "  runApp(const ExampleWidget());",
    "}",
    ""
  ],
  "description": "Flutter SlottedMultiChildRenderObjectWidget  Example"
},
"Flutter Table  Example": {
  "prefix": "flutter-Table",
"scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Table].",
    "",
    "void main() => runApp(const TableExampleApp());",
    "",
    "class TableExampleApp extends StatelessWidget {",
    "  const TableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Table Sample')),",
    "        body: const TableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TableExample extends StatelessWidget {",
    "  const TableExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Table(",
    "      border: TableBorder.all(),",
    "      columnWidths: const <int, TableColumnWidth>{",
    "        0: IntrinsicColumnWidth(),",
    "        1: FlexColumnWidth(),",
    "        2: FixedColumnWidth(64),",
    "      },",
    "      defaultVerticalAlignment: TableCellVerticalAlignment.middle,",
    "      children: <TableRow>[",
    "        TableRow(",
    "          children: <Widget>[",
    "            Container(",
    "              height: 32,",
    "              color: Colors.green,",
    "            ),",
    "            TableCell(",
    "              verticalAlignment: TableCellVerticalAlignment.top,",
    "              child: Container(",
    "                height: 32,",
    "                width: 32,",
    "                color: Colors.red,",
    "              ),",
    "            ),",
    "            Container(",
    "              height: 64,",
    "              color: Colors.blue,",
    "            ),",
    "          ],",
    "        ),",
    "        TableRow(",
    "          decoration: const BoxDecoration(",
    "            color: Colors.grey,",
    "          ),",
    "          children: <Widget>[",
    "            Container(",
    "              height: 64,",
    "              width: 128,",
    "              color: Colors.purple,",
    "            ),",
    "            Container(",
    "              height: 32,",
    "              color: Colors.yellow,",
    "            ),",
    "            Center(",
    "              child: Container(",
    "                height: 32,",
    "                width: 32,",
    "                color: Colors.orange,",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Table  Example"
},
"Flutter TextFieldTapRegion  Example": {
  "prefix": "flutter-TextFieldTapRegion",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [TextFieldTapRegion].",
    "",
    "void main() => runApp(const TapRegionApp());",
    "",
    "class TapRegionApp extends StatelessWidget {",
    "  const TapRegionApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('TextFieldTapRegion Example')),",
    "        body: const TextFieldTapRegionExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TextFieldTapRegionExample extends StatefulWidget {",
    "  const TextFieldTapRegionExample({super.key});",
    "",
    "  @override",
    "  State<TextFieldTapRegionExample> createState() => _TextFieldTapRegionExampleState();",
    "}",
    "",
    "class _TextFieldTapRegionExampleState extends State<TextFieldTapRegionExample> {",
    "  int value = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListView(",
    "      children: <Widget>[",
    "        Center(",
    "          child: Padding(",
    "            padding: const EdgeInsets.all(20.0),",
    "            child: SizedBox(",
    "              width: 150,",
    "              height: 80,",
    "              child: IntegerSpinnerField(",
    "                value: value,",
    "                autofocus: true,",
    "                onChanged: (int newValue) {",
    "                  if (value == newValue) {",
    "                    // Avoid unnecessary redraws.",
    "                    return;",
    "                  }",
    "                  setState(() {",
    "                    // Update the value and redraw.",
    "                    value = newValue;",
    "                  });",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "/// An integer example of the generic [SpinnerField] that validates input and",
    "/// increments by a delta.",
    "class IntegerSpinnerField extends StatelessWidget {",
    "  const IntegerSpinnerField({",
    "    super.key,",
    "    required this.value,",
    "    this.autofocus = false,",
    "    this.delta = 1,",
    "    this.onChanged,",
    "  });",
    "",
    "  final int value;",
    "  final bool autofocus;",
    "  final int delta;",
    "  final ValueChanged<int>? onChanged;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SpinnerField<int>(",
    "      value: value,",
    "      onChanged: onChanged,",
    "      autofocus: autofocus,",
    "      fromString: (String stringValue) => int.tryParse(stringValue) ?? value,",
    "      increment: (int i) => i + delta,",
    "      decrement: (int i) => i - delta,",
    "      // Add a text formatter that only allows integer values and a leading",
    "      // minus sign.",
    "      inputFormatters: <TextInputFormatter>[",
    "        TextInputFormatter.withFunction(",
    "          (TextEditingValue oldValue, TextEditingValue newValue) {",
    "            String newString;",
    "            if (newValue.text.startsWith('-')) {",
    "              newString = '-${newValue.text.replaceAll(RegExp(r'\\D'), '')}';",
    "            } else {",
    "              newString = newValue.text.replaceAll(RegExp(r'\\D'), '');",
    "            }",
    "            return newValue.copyWith(",
    "              text: newString,",
    "              selection: newValue.selection.copyWith(",
    "                baseOffset: newValue.selection.baseOffset.clamp(0, newString.length),",
    "                extentOffset: newValue.selection.extentOffset.clamp(0, newString.length),",
    "              ),",
    "            );",
    "          },",
    "        )",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "/// A generic \"spinner\" field example which adds extra buttons next to a",
    "/// [TextField] to increment and decrement the value.",
    "///",
    "/// This widget uses [TextFieldTapRegion] to indicate that tapping on the",
    "/// spinner buttons should not cause the text field to lose focus.",
    "class SpinnerField<T> extends StatefulWidget {",
    "  SpinnerField({",
    "    super.key,",
    "    required this.value,",
    "    required this.fromString,",
    "    this.autofocus = false,",
    "    String Function(T value)? asString,",
    "    this.increment,",
    "    this.decrement,",
    "    this.onChanged,",
    "    this.inputFormatters = const <TextInputFormatter>[],",
    "  }) : asString = asString ?? ((T value) => value.toString());",
    "",
    "  final T value;",
    "  final T Function(T value)? increment;",
    "  final T Function(T value)? decrement;",
    "  final String Function(T value) asString;",
    "  final T Function(String value) fromString;",
    "  final ValueChanged<T>? onChanged;",
    "  final List<TextInputFormatter> inputFormatters;",
    "  final bool autofocus;",
    "",
    "  @override",
    "  State<SpinnerField<T>> createState() => _SpinnerFieldState<T>();",
    "}",
    "",
    "class _SpinnerFieldState<T> extends State<SpinnerField<T>> {",
    "  TextEditingController controller = TextEditingController();",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _updateText(widget.asString(widget.value));",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  void didUpdateWidget(covariant SpinnerField<T> oldWidget) {",
    "    super.didUpdateWidget(oldWidget);",
    "    if (oldWidget.asString != widget.asString || oldWidget.value != widget.value) {",
    "      final String newText = widget.asString(widget.value);",
    "      _updateText(newText);",
    "    }",
    "  }",
    "",
    "  void _updateText(String text, {bool collapsed = true}) {",
    "    if (text != controller.text) {",
    "      controller.value = TextEditingValue(",
    "        text: text,",
    "        selection: collapsed",
    "            ? TextSelection.collapsed(offset: text.length)",
    "            : TextSelection(baseOffset: 0, extentOffset: text.length),",
    "      );",
    "    }",
    "  }",
    "",
    "  void _spin(T Function(T value)? spinFunction) {",
    "    if (spinFunction == null) {",
    "      return;",
    "    }",
    "    final T newValue = spinFunction(widget.value);",
    "    widget.onChanged?.call(newValue);",
    "    _updateText(widget.asString(newValue), collapsed: false);",
    "  }",
    "",
    "  void _increment() {",
    "    _spin(widget.increment);",
    "  }",
    "",
    "  void _decrement() {",
    "    _spin(widget.decrement);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CallbackShortcuts(",
    "      bindings: <ShortcutActivator, VoidCallback>{",
    "        const SingleActivator(LogicalKeyboardKey.arrowUp): _increment,",
    "        const SingleActivator(LogicalKeyboardKey.arrowDown): _decrement,",
    "      },",
    "      child: Row(",
    "        children: <Widget>[",
    "          Expanded(",
    "            child: TextField(",
    "              autofocus: widget.autofocus,",
    "              inputFormatters: widget.inputFormatters,",
    "              decoration: const InputDecoration(",
    "                border: OutlineInputBorder(),",
    "              ),",
    "              onChanged: (String value) => widget.onChanged?.call(widget.fromString(value)),",
    "              controller: controller,",
    "              textAlign: TextAlign.center,",
    "            ),",
    "          ),",
    "          const SizedBox(width: 12),",
    "          // Without this TextFieldTapRegion, tapping on the buttons below would",
    "          // increment the value, but it would cause the text field to be",
    "          // unfocused, since tapping outside of a text field should unfocus it",
    "          // on non-mobile platforms.",
    "          TextFieldTapRegion(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Expanded(",
    "                  child: OutlinedButton(",
    "                    onPressed: _increment,",
    "                    child: const Icon(Icons.add),",
    "                  ),",
    "                ),",
    "                Expanded(",
    "                  child: OutlinedButton(",
    "                    onPressed: _decrement,",
    "                    child: const Icon(Icons.remove),",
    "                  ),",
    "                ),",
    "              ],",
    "            ),",
    "          )",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter TextFieldTapRegion  Example"
},
"Flutter Magnifier  Example": {
  "prefix": "flutter-Magnifier",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const TextMagnifierExampleApp(text: 'Hello world!'));",
    "",
    "class TextMagnifierExampleApp extends StatelessWidget {",
    "  const TextMagnifierExampleApp({",
    "    super.key,",
    "    this.textDirection = TextDirection.ltr,",
    "    required this.text,",
    "  });",
    "",
    "  final TextDirection textDirection;",
    "  final String text;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text(\"Magnifier Sample\"),",
    "        ),",
    "        body: Padding(",
    "          padding: const EdgeInsets.symmetric(horizontal: 48.0),",
    "          child: Center(",
    "            child: TextField(",
    "              textDirection: textDirection,",
    "              // Create a custom magnifier configuration that",
    "              // this `TextField` will use to build a magnifier with.",
    "              magnifierConfiguration: TextMagnifierConfiguration(",
    "                magnifierBuilder:",
    "                    (_, __, ValueNotifier<MagnifierInfo> magnifierInfo) =>",
    "                        CustomMagnifier(",
    "                  magnifierInfo: magnifierInfo,",
    "                ),",
    "              ),",
    "              controller: TextEditingController(text: text),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CustomMagnifier extends StatelessWidget {",
    "  const CustomMagnifier({super.key, required this.magnifierInfo});",
    "",
    "  static const Size magnifierSize = Size(200, 200);",
    "",
    "  // This magnifier will consume some text data and position itself",
    "  // based on the info in the magnifier.",
    "  final ValueNotifier<MagnifierInfo> magnifierInfo;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    // Use a value listenable builder because we want to rebuild",
    "    // every time the text selection info changes.",
    "    // `CustomMagnifier` could also be a `StatefulWidget` and call `setState`",
    "    // when `magnifierInfo` updates. This would be useful for more complex",
    "    // positioning cases.",
    "    return ValueListenableBuilder<MagnifierInfo>(",
    "        valueListenable: magnifierInfo,",
    "        builder: (BuildContext context, MagnifierInfo currentMagnifierInfo, _) {",
    "          // We want to position the magnifier at the global position of the gesture.",
    "          Offset magnifierPosition = currentMagnifierInfo.globalGesturePosition;",
    "",
    "          // You may use the `MagnifierInfo` however you'd like:",
    "          // In this case, we make sure the magnifier never goes out of the current line bounds.",
    "          magnifierPosition = Offset(",
    "            clampDouble(",
    "              magnifierPosition.dx,",
    "              currentMagnifierInfo.currentLineBoundaries.left,",
    "              currentMagnifierInfo.currentLineBoundaries.right,",
    "            ),",
    "            clampDouble(",
    "              magnifierPosition.dy,",
    "              currentMagnifierInfo.currentLineBoundaries.top,",
    "              currentMagnifierInfo.currentLineBoundaries.bottom,",
    "            ),",
    "          );",
    "",
    "          // Finally, align the magnifier to the bottom center. The initial anchor is",
    "          // the top left, so subtract bottom center alignment.",
    "          magnifierPosition -= Alignment.bottomCenter.alongSize(magnifierSize);",
    "",
    "          return Positioned(",
    "            left: magnifierPosition.dx,",
    "            top: magnifierPosition.dy,",
    "            child: RawMagnifier(",
    "              magnificationScale: 2,",
    "              // The focal point starts at the center of the magnifier.",
    "              // We probably want to point below the magnifier, so",
    "              // offset the focal point by half the magnifier height.",
    "              focalPointOffset: Offset(0, magnifierSize.height / 2),",
    "              // Decorate it however we'd like!",
    "              decoration: const MagnifierDecoration(",
    "                shape: StarBorder(",
    "                  side: BorderSide(",
    "                    color: Colors.green,",
    "                    width: 2,",
    "                  ),",
    "                ),",
    "              ),",
    "              size: magnifierSize,",
    "            ),",
    "          );",
    "        });",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Magnifier  Example"
},
"Flutter AlignTransition  Example": {
  "prefix": "flutter-AlignTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AlignTransition].",
    "",
    "void main() => runApp(const AlignTransitionExampleApp());",
    "",
    "class AlignTransitionExampleApp extends StatelessWidget {",
    "  const AlignTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: AlignTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AlignTransitionExample extends StatefulWidget {",
    "  const AlignTransitionExample({super.key});",
    "",
    "  @override",
    "  State<AlignTransitionExample> createState() => _AlignTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _AlignTransitionExampleState extends State<AlignTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  // Using `late final` for lazy initialization. See",
    "  // https://dart.dev/null-safety/understanding-null-safety#lazy-initialization.",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<AlignmentGeometry> _animation = Tween<AlignmentGeometry>(",
    "    begin: Alignment.bottomLeft,",
    "    end: Alignment.center,",
    "  ).animate(",
    "    CurvedAnimation(",
    "      parent: _controller,",
    "      curve: Curves.decelerate,",
    "    ),",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"Align Transition\"),",
    "      ),",
    "      body: ColoredBox(",
    "        color: Colors.white,",
    "        child: AlignTransition(",
    "          alignment: _animation,",
    "          child: const Padding(",
    "            padding: EdgeInsets.all(8),",
    "            child: FlutterLogo(size: 150.0),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AlignTransition  Example"
},
"Flutter AlignTransition  Example": {
  "prefix": "transition align",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AlignTransition].",
    "",
    "void main() => runApp(const AlignTransitionExampleApp());",
    "",
    "class AlignTransitionExampleApp extends StatelessWidget {",
    "  const AlignTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: AlignTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AlignTransitionExample extends StatefulWidget {",
    "  const AlignTransitionExample({super.key});",
    "",
    "  @override",
    "  State<AlignTransitionExample> createState() => _AlignTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _AlignTransitionExampleState extends State<AlignTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  // Using `late final` for lazy initialization. See",
    "  // https://dart.dev/null-safety/understanding-null-safety#lazy-initialization.",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<AlignmentGeometry> _animation = Tween<AlignmentGeometry>(",
    "    begin: Alignment.bottomLeft,",
    "    end: Alignment.center,",
    "  ).animate(",
    "    CurvedAnimation(",
    "      parent: _controller,",
    "      curve: Curves.decelerate,",
    "    ),",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"Align Transition\"),",
    "      ),",
    "      body: ColoredBox(",
    "        color: Colors.white,",
    "        child: AlignTransition(",
    "          alignment: _animation,",
    "          child: const Padding(",
    "            padding: EdgeInsets.all(8),",
    "            child: FlutterLogo(size: 150.0),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AlignTransition  Example"
},

"Flutter AnimatedBuilder  Example": {
  "prefix": "flutter-AnimatedBuilder",
  "body": [
    "",
    "import 'dart:math' as math;",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedBuilder].",
    "",
    "void main() => runApp(const AnimatedBuilderExampleApp());",
    "",
    "class AnimatedBuilderExampleApp extends StatelessWidget {",
    "  const AnimatedBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: AnimatedBuilderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedBuilderExample extends StatefulWidget {",
    "  const AnimatedBuilderExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedBuilderExample> createState() => _AnimatedBuilderExampleState();",
    "}",
    "",
    "/// AnimationControllers can be created with `vsync: this` because of",
    "/// TickerProviderStateMixin.",
    "class _AnimatedBuilderExampleState extends State<AnimatedBuilderExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 10),",
    "    vsync: this,",
    "  )..repeat();",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"Animated Builder\"),",
    "      ),",
    "      body: AnimatedBuilder(",
    "        animation: _controller,",
    "        child: Container(",
    "          width: 200.0,",
    "          height: 200.0,",
    "          color: Colors.green,",
    "          child: const Center(",
    "            child: Text('Whee!'),",
    "          ),",
    "        ),",
    "        builder: (BuildContext context, Widget? child) {",
    "          return Transform.rotate(",
    "            angle: _controller.value * 2.0 * math.pi,",
    "            child: child,",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedBuilder  Example"
},
"Flutter AnimatedWidget Example": {
  "prefix": "flutter-AnimatedWidget",
  "body": [
    "",
    "import 'dart:math' as math;",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AnimatedWidget].",
    "",
    "void main() => runApp(const AnimatedWidgetExampleApp());",
    "",
    "class AnimatedWidgetExampleApp extends StatelessWidget {",
    "  const AnimatedWidgetExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "          appBar: AppBar(",
    "            title: Text(\"Animated Widget\"),",
    "          ),",
    "          body: AnimatedWidgetExample()),",
    "    );",
    "  }",
    "}",
    "",
    "class SpinningContainer extends AnimatedWidget {",
    "  const SpinningContainer({",
    "    super.key,",
    "    required AnimationController controller,",
    "  }) : super(listenable: controller);",
    "",
    "  Animation<double> get _progress => listenable as Animation<double>;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Transform.rotate(",
    "      angle: _progress.value * 2.0 * math.pi,",
    "      child: Container(width: 200.0, height: 200.0, color: Colors.green),",
    "    );",
    "  }",
    "}",
    "",
    "class AnimatedWidgetExample extends StatefulWidget {",
    "  const AnimatedWidgetExample({super.key});",
    "",
    "  @override",
    "  State<AnimatedWidgetExample> createState() => _AnimatedWidgetExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _AnimatedWidgetExampleState extends State<AnimatedWidgetExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 10),",
    "    vsync: this,",
    "  )..repeat();",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SpinningContainer(controller: _controller);",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AnimatedWidget Example"
},
"Flutter DecoratedBoxTransition Example": {
  "prefix": "flutter-DecoratedBoxTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DecoratedBoxTransition].",
    "",
    "void main() => runApp(const DecoratedBoxTransitionExampleApp());",
    "",
    "class DecoratedBoxTransitionExampleApp extends StatelessWidget {",
    "  const DecoratedBoxTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "          appBar: AppBar(",
    "            title: Text(\"DecoratiedBox Transition\"),",
    "          ),",
    "          body: DecoratedBoxTransitionExample()),",
    "    );",
    "  }",
    "}",
    "",
    "class DecoratedBoxTransitionExample extends StatefulWidget {",
    "  const DecoratedBoxTransitionExample({super.key});",
    "",
    "  @override",
    "  State<DecoratedBoxTransitionExample> createState() =>",
    "      _DecoratedBoxTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _DecoratedBoxTransitionExampleState",
    "    extends State<DecoratedBoxTransitionExample> with TickerProviderStateMixin {",
    "  final DecorationTween decorationTween = DecorationTween(",
    "    begin: BoxDecoration(",
    "      color: const Color(0xFFFFFFFF),",
    "      border: Border.all(style: BorderStyle.none),",
    "      borderRadius: BorderRadius.circular(60.0),",
    "      boxShadow: const <BoxShadow>[",
    "        BoxShadow(",
    "          color: Color(0x66666666),",
    "          blurRadius: 10.0,",
    "          spreadRadius: 3.0,",
    "          offset: Offset(0, 6.0),",
    "        ),",
    "      ],",
    "    ),",
    "    end: BoxDecoration(",
    "      color: const Color(0xFFFFFFFF),",
    "      border: Border.all(",
    "        style: BorderStyle.none,",
    "      ),",
    "      borderRadius: BorderRadius.zero,",
    "      // No shadow.",
    "    ),",
    "  );",
    "",
    "  late final AnimationController _controller = AnimationController(",
    "    vsync: this,",
    "    duration: const Duration(seconds: 3),",
    "  )..repeat(reverse: true);",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ColoredBox(",
    "      color: Colors.white,",
    "      child: Center(",
    "        child: DecoratedBoxTransition(",
    "          decoration: decorationTween.animate(_controller),",
    "          child: Container(",
    "            width: 200,",
    "            height: 200,",
    "            padding: const EdgeInsets.all(10),",
    "            child: const FlutterLogo(),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DecoratedBoxTransition Example"
},
"Flutter DefaultTextStyleTransition Example": {
  "prefix": "flutter-DefaultTextStyleTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DefaultTextStyleTransition].",
    "",
    "void main() => runApp(const DefaultTextStyleTransitionExampleApp());",
    "",
    "class DefaultTextStyleTransitionExampleApp extends StatelessWidget {",
    "  const DefaultTextStyleTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: DefaultTextStyleTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class DefaultTextStyleTransitionExample extends StatefulWidget {",
    "  const DefaultTextStyleTransitionExample({super.key});",
    "",
    "  @override",
    "  State<DefaultTextStyleTransitionExample> createState() =>",
    "      _DefaultTextStyleTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _DefaultTextStyleTransitionExampleState",
    "    extends State<DefaultTextStyleTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late AnimationController _controller;",
    "  late TextStyleTween _styleTween;",
    "  late CurvedAnimation _curvedAnimation;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _controller = AnimationController(",
    "      duration: const Duration(seconds: 2),",
    "      vsync: this,",
    "    )..repeat(reverse: true);",
    "    _styleTween = TextStyleTween(",
    "      begin: const TextStyle(",
    "          fontSize: 50, color: Colors.blue, fontWeight: FontWeight.w900),",
    "      end: const TextStyle(",
    "          fontSize: 100, color: Colors.red, fontWeight: FontWeight.w100),",
    "    );",
    "    _curvedAnimation = CurvedAnimation(",
    "      parent: _controller,",
    "      curve: Curves.elasticInOut,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"default textstyle tween\"),",
    "      ),",
    "      body: Center(",
    "        child: DefaultTextStyleTransition(",
    "          style: _styleTween.animate(_curvedAnimation),",
    "          child: const Text('Flutter'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DefaultTextStyleTransition Example"
},
"Flutter DefaultTextStyleTransition Example": {
  "prefix": "transition textstyle",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [DefaultTextStyleTransition].",
    "",
    "void main() => runApp(const DefaultTextStyleTransitionExampleApp());",
    "",
    "class DefaultTextStyleTransitionExampleApp extends StatelessWidget {",
    "  const DefaultTextStyleTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: DefaultTextStyleTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class DefaultTextStyleTransitionExample extends StatefulWidget {",
    "  const DefaultTextStyleTransitionExample({super.key});",
    "",
    "  @override",
    "  State<DefaultTextStyleTransitionExample> createState() =>",
    "      _DefaultTextStyleTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _DefaultTextStyleTransitionExampleState",
    "    extends State<DefaultTextStyleTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late AnimationController _controller;",
    "  late TextStyleTween _styleTween;",
    "  late CurvedAnimation _curvedAnimation;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _controller = AnimationController(",
    "      duration: const Duration(seconds: 2),",
    "      vsync: this,",
    "    )..repeat(reverse: true);",
    "    _styleTween = TextStyleTween(",
    "      begin: const TextStyle(",
    "          fontSize: 50, color: Colors.blue, fontWeight: FontWeight.w900),",
    "      end: const TextStyle(",
    "          fontSize: 100, color: Colors.red, fontWeight: FontWeight.w100),",
    "    );",
    "    _curvedAnimation = CurvedAnimation(",
    "      parent: _controller,",
    "      curve: Curves.elasticInOut,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"default textstyle tween\"),",
    "      ),",
    "      body: Center(",
    "        child: DefaultTextStyleTransition(",
    "          style: _styleTween.animate(_curvedAnimation),",
    "          child: const Text('Flutter'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter DefaultTextStyleTransition Example"
},
"Flutter FadeTransition Example": {
  "prefix": "flutter-FadeTransition",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FadeTransition].",
    "",
    "void main() => runApp(const FadeTransitionExampleApp());",
    "",
    "class FadeTransitionExampleApp extends StatelessWidget {",
    "  const FadeTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: FadeTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class FadeTransitionExample extends StatefulWidget {",
    "  const FadeTransitionExample({super.key});",
    "",
    "  @override",
    "  State<FadeTransitionExample> createState() => _FadeTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _FadeTransitionExampleState extends State<FadeTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.easeIn,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ColoredBox(",
    "      color: Colors.white,",
    "      child: FadeTransition(",
    "        opacity: _animation,",
    "        child: const Padding(padding: EdgeInsets.all(8), child: FlutterLogo()),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FadeTransition Example"
},
"Flutter FadeTransition Example": {
  "prefix": "transition fade",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [FadeTransition].",
    "",
    "void main() => runApp(const FadeTransitionExampleApp());",
    "",
    "class FadeTransitionExampleApp extends StatelessWidget {",
    "  const FadeTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: FadeTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class FadeTransitionExample extends StatefulWidget {",
    "  const FadeTransitionExample({super.key});",
    "",
    "  @override",
    "  State<FadeTransitionExample> createState() => _FadeTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _FadeTransitionExampleState extends State<FadeTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.easeIn,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ColoredBox(",
    "      color: Colors.white,",
    "      child: FadeTransition(",
    "        opacity: _animation,",
    "        child: const Padding(padding: EdgeInsets.all(8), child: FlutterLogo()),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter FadeTransition Example"
},
"Flutter ListenableBuilder Example": {
  "prefix": "flutter-ListenableBuilder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ListenableBuilder].",
    "",
    "void main() => runApp(const ListenableBuilderExample());",
    "",
    "/// This widget listens for changes in the focus state of the subtree defined by",
    "/// its [child] widget, changing the border and color of the container it is in",
    "/// when it has focus.",
    "///",
    "/// A [FocusListenerContainer] swaps out the [BorderSide] of a border around the",
    "/// child widget with [focusedSide], and the background color with",
    "/// [focusedColor], when a widget that is a descendant of this widget has focus.",
    "class FocusListenerContainer extends StatefulWidget {",
    "  const FocusListenerContainer({",
    "    super.key,",
    "    this.border,",
    "    this.padding,",
    "    this.focusedSide,",
    "    this.focusedColor = Colors.black12,",
    "    required this.child,",
    "  });",
    "",
    "  /// This is the border that will be used when not focused, and which defines",
    "  /// all the attributes except for the [OutlinedBorder.side] when focused.",
    "  final OutlinedBorder? border;",
    "",
    "  /// This is the [BorderSide] that will be used for [border] when the [child]",
    "  /// subtree is focused.",
    "  final BorderSide? focusedSide;",
    "",
    "  /// This is the [Color] that will be used as the fill color for the background",
    "  /// of the [child] when a descendant widget is focused.",
    "  final Color? focusedColor;",
    "",
    "  /// The padding around the inside of the container.",
    "  final EdgeInsetsGeometry? padding;",
    "",
    "  /// This is defines the subtree to listen to for focus changes.",
    "  final Widget child;",
    "",
    "  @override",
    "  State<FocusListenerContainer> createState() => _FocusListenerContainerState();",
    "}",
    "",
    "class _FocusListenerContainerState extends State<FocusListenerContainer> {",
    "  final FocusNode _focusNode = FocusNode();",
    "",
    "  @override",
    "  void dispose() {",
    "    _focusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final OutlinedBorder effectiveBorder =",
    "        widget.border ?? const RoundedRectangleBorder();",
    "    return ListenableBuilder(",
    "      listenable: _focusNode,",
    "      child: Focus(",
    "        focusNode: _focusNode,",
    "        skipTraversal: true,",
    "        canRequestFocus: false,",
    "        child: widget.child,",
    "      ),",
    "      builder: (BuildContext context, Widget? child) {",
    "        return Container(",
    "          padding: widget.padding,",
    "          decoration: ShapeDecoration(",
    "            color: _focusNode.hasFocus ? widget.focusedColor : null,",
    "            shape: effectiveBorder.copyWith(",
    "              side: _focusNode.hasFocus ? widget.focusedSide : null,",
    "            ),",
    "          ),",
    "          child: child,",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "class MyField extends StatefulWidget {",
    "  const MyField({super.key, required this.label});",
    "",
    "  final String label;",
    "",
    "  @override",
    "  State<MyField> createState() => _MyFieldState();",
    "}",
    "",
    "class _MyFieldState extends State<MyField> {",
    "  final TextEditingController controller = TextEditingController();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: <Widget>[",
    "        Expanded(child: Text(widget.label)),",
    "        Expanded(",
    "          flex: 2,",
    "          child: TextField(",
    "            controller: controller,",
    "            onEditingComplete: () {",
    "              debugPrint(",
    "                  'Field ${widget.label} changed to ${controller.value}');",
    "            },",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class ListenableBuilderExample extends StatelessWidget {",
    "  const ListenableBuilderExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ListenableBuilder Example')),",
    "        body: Center(",
    "          child: SizedBox(",
    "            width: 300,",
    "            child: Padding(",
    "              padding: const EdgeInsets.all(8.0),",
    "              child: Column(",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  const Padding(",
    "                    padding: EdgeInsets.only(bottom: 8),",
    "                    child: MyField(label: 'Company'),",
    "                  ),",
    "                  FocusListenerContainer(",
    "                    padding: const EdgeInsets.all(8),",
    "                    border: const RoundedRectangleBorder(",
    "                      side: BorderSide(",
    "                        strokeAlign: BorderSide.strokeAlignOutside,",
    "                      ),",
    "                      borderRadius: BorderRadius.all(",
    "                        Radius.circular(5),",
    "                      ),",
    "                    ),",
    "                    // The border side will get wider when the subtree has focus.",
    "                    focusedSide: const BorderSide(",
    "                      width: 4,",
    "                      strokeAlign: BorderSide.strokeAlignOutside,",
    "                    ),",
    "                    // The container background will change color to this when",
    "                    // the subtree has focus.",
    "                    focusedColor: Colors.blue.shade50,",
    "                    child: const Column(",
    "                      crossAxisAlignment: CrossAxisAlignment.start,",
    "                      children: <Widget>[",
    "                        Text('Owner:'),",
    "                        MyField(label: 'First Name'),",
    "                        MyField(label: 'Last Name'),",
    "                      ],",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ListenableBuilder Example"
},
"Flutter ValueNotifier Example": {
  "prefix": "flutter-ValueNotifier",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for a [ValueNotifier] with a [ListenableBuilder].",
    "",
    "void main() {",
    "  runApp(const ListenableBuilderExample());",
    "}",
    "",
    "class ListenableBuilderExample extends StatefulWidget {",
    "  const ListenableBuilderExample({super.key});",
    "",
    "  @override",
    "  State<ListenableBuilderExample> createState() =>",
    "      _ListenableBuilderExampleState();",
    "}",
    "",
    "class _ListenableBuilderExampleState extends State<ListenableBuilderExample> {",
    "  final ValueNotifier<int> _counter = ValueNotifier<int>(0);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "            title: const Text('ListenableBuilder&Value  Notifier Example')),",
    "        body: CounterBody(counterValueNotifier: _counter),",
    "        floatingActionButton: FloatingActionButton(",
    "          onPressed: () => _counter.value++,",
    "          child: const Icon(Icons.add),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CounterBody extends StatelessWidget {",
    "  const CounterBody({super.key, required this.counterValueNotifier});",
    "",
    "  final ValueNotifier<int> counterValueNotifier;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          const Text('Current counter value:'),",
    "          // Thanks to the ListenableBuilder, only the widget displaying the",
    "          // current count is rebuilt when counterValueNotifier notifies its",
    "          // listeners. The Text widget above and CounterBody itself aren't",
    "          // rebuilt.",
    "          ListenableBuilder(",
    "            listenable: counterValueNotifier,",
    "            builder: (BuildContext context, Widget? child) {",
    "              return Text('${counterValueNotifier.value}');",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ValueNotifier Example"
},
"Flutter ValueNotifier Example": {
  "prefix": "flutter-ValueNotifier_ListenableBuilder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for a [ValueNotifier] with a [ListenableBuilder].",
    "",
    "void main() {",
    "  runApp(const ListenableBuilderExample());",
    "}",
    "",
    "class ListenableBuilderExample extends StatefulWidget {",
    "  const ListenableBuilderExample({super.key});",
    "",
    "  @override",
    "  State<ListenableBuilderExample> createState() =>",
    "      _ListenableBuilderExampleState();",
    "}",
    "",
    "class _ListenableBuilderExampleState extends State<ListenableBuilderExample> {",
    "  final ValueNotifier<int> _counter = ValueNotifier<int>(0);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "            title: const Text('ListenableBuilder&Value  Notifier Example')),",
    "        body: CounterBody(counterValueNotifier: _counter),",
    "        floatingActionButton: FloatingActionButton(",
    "          onPressed: () => _counter.value++,",
    "          child: const Icon(Icons.add),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CounterBody extends StatelessWidget {",
    "  const CounterBody({super.key, required this.counterValueNotifier});",
    "",
    "  final ValueNotifier<int> counterValueNotifier;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          const Text('Current counter value:'),",
    "          // Thanks to the ListenableBuilder, only the widget displaying the",
    "          // current count is rebuilt when counterValueNotifier notifies its",
    "          // listeners. The Text widget above and CounterBody itself aren't",
    "          // rebuilt.",
    "          ListenableBuilder(",
    "            listenable: counterValueNotifier,",
    "            builder: (BuildContext context, Widget? child) {",
    "              return Text('${counterValueNotifier.value}');",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ValueNotifier Example"
},
"Flutter ChangeNotifier with ListenableBuilder  Example": {
  "prefix": "flutter-ChangeNotifier",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for a [ChangeNotifier] with a [ListenableBuilder].",
    "",
    "void main() {",
    "  runApp(const ListenableBuilderExample());",
    "}",
    "",
    "class CounterModel with ChangeNotifier {",
    "  int _count = 0;",
    "  int get count => _count;",
    "",
    "  void increment() {",
    "    _count += 1;",
    "    notifyListeners();",
    "  }",
    "}",
    "",
    "class ListenableBuilderExample extends StatefulWidget {",
    "  const ListenableBuilderExample({super.key});",
    "",
    "  @override",
    "  State<ListenableBuilderExample> createState() =>",
    "      _ListenableBuilderExampleState();",
    "}",
    "",
    "class _ListenableBuilderExampleState extends State<ListenableBuilderExample> {",
    "  final CounterModel _counter = CounterModel();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ListenableBuilder Example')),",
    "        body: CounterBody(counterNotifier: _counter),",
    "        floatingActionButton: FloatingActionButton(",
    "          onPressed: _counter.increment,",
    "          child: const Icon(Icons.add),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CounterBody extends StatelessWidget {",
    "  const CounterBody({super.key, required this.counterNotifier});",
    "",
    "  final CounterModel counterNotifier;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          const Text('Current counter value:'),",
    "          // Thanks to the ListenableBuilder, only the widget displaying the",
    "          // current count is rebuilt when counterValueNotifier notifies its",
    "          // listeners. The Text widget above and CounterBody itself aren't",
    "          // rebuilt.",
    "          ListenableBuilder(",
    "            listenable: counterNotifier,",
    "            builder: (BuildContext context, Widget? child) {",
    "              return Text('${counterNotifier.count}');",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ChangeNotifier with ListenableBuilder  Example"
},
"Flutter ChangeNotifier with ListenableBuilder  Example": {
  "prefix": "flutter-ListenableBuilder_two",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for a [ChangeNotifier] with a [ListenableBuilder].",
    "",
    "void main() {",
    "  runApp(const ListenableBuilderExample());",
    "}",
    "",
    "class CounterModel with ChangeNotifier {",
    "  int _count = 0;",
    "  int get count => _count;",
    "",
    "  void increment() {",
    "    _count += 1;",
    "    notifyListeners();",
    "  }",
    "}",
    "",
    "class ListenableBuilderExample extends StatefulWidget {",
    "  const ListenableBuilderExample({super.key});",
    "",
    "  @override",
    "  State<ListenableBuilderExample> createState() =>",
    "      _ListenableBuilderExampleState();",
    "}",
    "",
    "class _ListenableBuilderExampleState extends State<ListenableBuilderExample> {",
    "  final CounterModel _counter = CounterModel();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ListenableBuilder Example')),",
    "        body: CounterBody(counterNotifier: _counter),",
    "        floatingActionButton: FloatingActionButton(",
    "          onPressed: _counter.increment,",
    "          child: const Icon(Icons.add),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CounterBody extends StatelessWidget {",
    "  const CounterBody({super.key, required this.counterNotifier});",
    "",
    "  final CounterModel counterNotifier;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          const Text('Current counter value:'),",
    "          // Thanks to the ListenableBuilder, only the widget displaying the",
    "          // current count is rebuilt when counterValueNotifier notifies its",
    "          // listeners. The Text widget above and CounterBody itself aren't",
    "          // rebuilt.",
    "          ListenableBuilder(",
    "            listenable: counterNotifier,",
    "            builder: (BuildContext context, Widget? child) {",
    "              return Text('${counterNotifier.count}');",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ChangeNotifier with ListenableBuilder  Example"
},

"Flutter ChangeNotifier with ListenableBuilder  Example": {
  "prefix": "flutter-ChangeNotifier_ListenableBuilder",
  "body": [
    "import 'dart:math' as math;",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for a [ChangeNotifier] with a [ListenableBuilder].",
    "",
    "void main() {",
    "  runApp(const ListenableBuilderExample());",
    "}",
    "",
    "class ListModel with ChangeNotifier {",
    "  final List<int> _values = <int>[];",
    "  List<int> get values => _values.toList(); // O(N), makes a new copy each time.",
    "",
    "  void add(int value) {",
    "    _values.add(value);",
    "    notifyListeners();",
    "  }",
    "}",
    "",
    "class ListenableBuilderExample extends StatefulWidget {",
    "  const ListenableBuilderExample({super.key});",
    "",
    "  @override",
    "  State<ListenableBuilderExample> createState() =>",
    "      _ListenableBuilderExampleState();",
    "}",
    "",
    "class _ListenableBuilderExampleState extends State<ListenableBuilderExample> {",
    "  final ListModel _listNotifier = ListModel();",
    "  final math.Random _random = math.Random(0); // fixed seed for reproducability",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('ListenableBuilder Example')),",
    "        body: ListBody(listNotifier: _listNotifier),",
    "        floatingActionButton: FloatingActionButton(",
    "          onPressed: () => _listNotifier.add(_random",
    "              .nextInt(1 << 32)), // 1 << 32 is the maximum supported value",
    "          child: const Icon(Icons.add),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListBody extends StatelessWidget {",
    "  const ListBody({super.key, required this.listNotifier});",
    "",
    "  final ListModel listNotifier;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        crossAxisAlignment: CrossAxisAlignment.stretch,",
    "        children: <Widget>[",
    "          const Text('Current values:'),",
    "          Expanded(",
    "            child: ListenableBuilder(",
    "              listenable: listNotifier,",
    "              builder: (BuildContext context, Widget? child) {",
    "                // We rebuild the ListView each time the list changes,",
    "                // so that the framework knows to update the rendering.",
    "                final List<int> values = listNotifier.values; // copy the list",
    "                return ListView.builder(",
    "                  itemBuilder: (BuildContext context, int index) => ListTile(",
    "                    title: Text('${values[index]}'),",
    "                  ),",
    "                  itemCount: values.length,",
    "                );",
    "              },",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ChangeNotifier with ListenableBuilder  Example"
},
"Flutter RelativePositionedTransition Example": {
  "prefix": "flutter-RelativePositionedTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RelativePositionedTransition].",
    "",
    "void main() => runApp(const RelativePositionedTransitionExampleApp());",
    "",
    "class RelativePositionedTransitionExampleApp extends StatelessWidget {",
    "  const RelativePositionedTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RelativePositionedTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class RelativePositionedTransitionExample extends StatefulWidget {",
    "  const RelativePositionedTransitionExample({super.key});",
    "",
    "  @override",
    "  State<RelativePositionedTransitionExample> createState() =>",
    "      _RelativePositionedTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _RelativePositionedTransitionExampleState",
    "    extends State<RelativePositionedTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    const double smallLogo = 100;",
    "    const double bigLogo = 200;",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"RelativePositionedTransition\")),",
    "      body: LayoutBuilder(",
    "        builder: (BuildContext context, BoxConstraints constraints) {",
    "          final Size biggest = constraints.biggest;",
    "          return Stack(",
    "            children: <Widget>[",
    "              RelativePositionedTransition(",
    "                size: biggest,",
    "                rect: RectTween(",
    "                  begin: const Rect.fromLTWH(0, 0, bigLogo, bigLogo),",
    "                  end: Rect.fromLTWH(",
    "                    biggest.width - smallLogo,",
    "                    biggest.height - smallLogo,",
    "                    smallLogo,",
    "                    smallLogo,",
    "                  ),",
    "                ).animate(CurvedAnimation(",
    "                  parent: _controller,",
    "                  curve: Curves.elasticInOut,",
    "                )),",
    "                child: const Padding(",
    "                  padding: EdgeInsets.all(8),",
    "                  child: FlutterLogo(),",
    "                ),",
    "              ),",
    "            ],",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RelativePositionedTransition Example"
},
"Flutter RelativePositionedTransition Example": {
  "prefix": "transition positioned relative ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RelativePositionedTransition].",
    "",
    "void main() => runApp(const RelativePositionedTransitionExampleApp());",
    "",
    "class RelativePositionedTransitionExampleApp extends StatelessWidget {",
    "  const RelativePositionedTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RelativePositionedTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class RelativePositionedTransitionExample extends StatefulWidget {",
    "  const RelativePositionedTransitionExample({super.key});",
    "",
    "  @override",
    "  State<RelativePositionedTransitionExample> createState() =>",
    "      _RelativePositionedTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _RelativePositionedTransitionExampleState",
    "    extends State<RelativePositionedTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    const double smallLogo = 100;",
    "    const double bigLogo = 200;",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"RelativePositionedTransition\")),",
    "      body: LayoutBuilder(",
    "        builder: (BuildContext context, BoxConstraints constraints) {",
    "          final Size biggest = constraints.biggest;",
    "          return Stack(",
    "            children: <Widget>[",
    "              RelativePositionedTransition(",
    "                size: biggest,",
    "                rect: RectTween(",
    "                  begin: const Rect.fromLTWH(0, 0, bigLogo, bigLogo),",
    "                  end: Rect.fromLTWH(",
    "                    biggest.width - smallLogo,",
    "                    biggest.height - smallLogo,",
    "                    smallLogo,",
    "                    smallLogo,",
    "                  ),",
    "                ).animate(CurvedAnimation(",
    "                  parent: _controller,",
    "                  curve: Curves.elasticInOut,",
    "                )),",
    "                child: const Padding(",
    "                  padding: EdgeInsets.all(8),",
    "                  child: FlutterLogo(),",
    "                ),",
    "              ),",
    "            ],",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RelativePositionedTransition Example"
},
"Flutter RotationTransition Example": {
  "prefix": "flutter-RotationTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RotationTransition].",
    "",
    "void main() => runApp(const RotationTransitionExampleApp());",
    "",
    "class RotationTransitionExampleApp extends StatelessWidget {",
    "  const RotationTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RotationTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class RotationTransitionExample extends StatefulWidget {",
    "  const RotationTransitionExample({super.key});",
    "",
    "  @override",
    "  State<RotationTransitionExample> createState() =>",
    "      _RotationTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _RotationTransitionExampleState extends State<RotationTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.elasticOut,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"rotated transition\")),",
    "      body: Center(",
    "        child: RotationTransition(",
    "          turns: _animation,",
    "          child: const Padding(",
    "            padding: EdgeInsets.all(8.0),",
    "            child: FlutterLogo(size: 150.0),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RotationTransition Example"
},
"Flutter RotationTransition Example": {
  "prefix": "transition rotation",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [RotationTransition].",
    "",
    "void main() => runApp(const RotationTransitionExampleApp());",
    "",
    "class RotationTransitionExampleApp extends StatelessWidget {",
    "  const RotationTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: RotationTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class RotationTransitionExample extends StatefulWidget {",
    "  const RotationTransitionExample({super.key});",
    "",
    "  @override",
    "  State<RotationTransitionExample> createState() =>",
    "      _RotationTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _RotationTransitionExampleState extends State<RotationTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.elasticOut,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"rotated transition\")),",
    "      body: Center(",
    "        child: RotationTransition(",
    "          turns: _animation,",
    "          child: const Padding(",
    "            padding: EdgeInsets.all(8.0),",
    "            child: FlutterLogo(size: 150.0),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter RotationTransition Example"
},
"Flutter ScaleTransition Example": {
  "prefix": "flutter-ScaleTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaleTransition].",
    "",
    "void main() => runApp(const ScaleTransitionExampleApp());",
    "",
    "class ScaleTransitionExampleApp extends StatelessWidget {",
    "  const ScaleTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ScaleTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ScaleTransitionExample extends StatefulWidget {",
    "  const ScaleTransitionExample({super.key});",
    "",
    "  @override",
    "  State<ScaleTransitionExample> createState() => _ScaleTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _ScaleTransitionExampleState extends State<ScaleTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.fastOutSlowIn,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"Scale Transition\")),",
    "      body: Center(",
    "        child: ScaleTransition(",
    "          scale: _animation,",
    "          child: const Padding(",
    "            padding: EdgeInsets.all(8.0),",
    "            child: FlutterLogo(size: 150.0),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ScaleTransition Example"
},
"Flutter ScaleTransition Example": {
  "prefix": "transition scale",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ScaleTransition].",
    "",
    "void main() => runApp(const ScaleTransitionExampleApp());",
    "",
    "class ScaleTransitionExampleApp extends StatelessWidget {",
    "  const ScaleTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: ScaleTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ScaleTransitionExample extends StatefulWidget {",
    "  const ScaleTransitionExample({super.key});",
    "",
    "  @override",
    "  State<ScaleTransitionExample> createState() => _ScaleTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _ScaleTransitionExampleState extends State<ScaleTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.fastOutSlowIn,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"Scale Transition\")),",
    "      body: Center(",
    "        child: ScaleTransition(",
    "          scale: _animation,",
    "          child: const Padding(",
    "            padding: EdgeInsets.all(8.0),",
    "            child: FlutterLogo(size: 150.0),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ScaleTransition Example"
},
"Flutter SizeTransition Example": {
  "prefix": "flutter-SizeTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SizeTransition].",
    "",
    "void main() => runApp(const SizeTransitionExampleApp());",
    "",
    "class SizeTransitionExampleApp extends StatelessWidget {",
    "  const SizeTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SizeTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SizeTransitionExample extends StatefulWidget {",
    "  const SizeTransitionExample({super.key});",
    "",
    "  @override",
    "  State<SizeTransitionExample> createState() => _SizeTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _SizeTransitionExampleState extends State<SizeTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 3),",
    "    vsync: this,",
    "  )..repeat();",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.fastOutSlowIn,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"SizeTransition\")),",
    "      body: SizeTransition(",
    "        sizeFactor: _animation,",
    "        axis: Axis.horizontal,",
    "        axisAlignment: -1,",
    "        child: const Center(",
    "          child: FlutterLogo(size: 200.0),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SizeTransition Example"
},
"Flutter SizeTransition Example": {
  "prefix": "transition size",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SizeTransition].",
    "",
    "void main() => runApp(const SizeTransitionExampleApp());",
    "",
    "class SizeTransitionExampleApp extends StatelessWidget {",
    "  const SizeTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SizeTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SizeTransitionExample extends StatefulWidget {",
    "  const SizeTransitionExample({super.key});",
    "",
    "  @override",
    "  State<SizeTransitionExample> createState() => _SizeTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _SizeTransitionExampleState extends State<SizeTransitionExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 3),",
    "    vsync: this,",
    "  )..repeat();",
    "  late final Animation<double> _animation = CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.fastOutSlowIn,",
    "  );",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(title: Text(\"SizeTransition\")),",
    "      body: SizeTransition(",
    "        sizeFactor: _animation,",
    "        axis: Axis.horizontal,",
    "        axisAlignment: -1,",
    "        child: const Center(",
    "          child: FlutterLogo(size: 200.0),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SizeTransition Example"
},"Flutter SlideTransition Example": {
  "prefix": "flutter-SlideTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SlideTransition].",
    "",
    "void main() => runApp(const SlideTransitionExampleApp());",
    "",
    "class SlideTransitionExampleApp extends StatelessWidget {",
    "  const SlideTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SlideTransition Sample')),",
    "        body: const Center(",
    "          child: SlideTransitionExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SlideTransitionExample extends StatefulWidget {",
    "  const SlideTransitionExample({super.key});",
    "",
    "  @override",
    "  State<SlideTransitionExample> createState() => _SlideTransitionExampleState();",
    "}",
    "",
    "class _SlideTransitionExampleState extends State<SlideTransitionExample>",
    "    with SingleTickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<Offset> _offsetAnimation = Tween<Offset>(",
    "    begin: Offset.zero,",
    "    end: const Offset(1.5, 0.0),",
    "  ).animate(CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.elasticIn,",
    "  ));",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SlideTransition(",
    "      position: _offsetAnimation,",
    "      child: const Padding(",
    "        padding: EdgeInsets.all(8.0),",
    "        child: FlutterLogo(size: 150.0),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SlideTransition Example"
},"Flutter SlideTransition Example": {
  "prefix": "transition slide",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SlideTransition].",
    "",
    "void main() => runApp(const SlideTransitionExampleApp());",
    "",
    "class SlideTransitionExampleApp extends StatelessWidget {",
    "  const SlideTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SlideTransition Sample')),",
    "        body: const Center(",
    "          child: SlideTransitionExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SlideTransitionExample extends StatefulWidget {",
    "  const SlideTransitionExample({super.key});",
    "",
    "  @override",
    "  State<SlideTransitionExample> createState() => _SlideTransitionExampleState();",
    "}",
    "",
    "class _SlideTransitionExampleState extends State<SlideTransitionExample>",
    "    with SingleTickerProviderStateMixin {",
    "  late final AnimationController _controller = AnimationController(",
    "    duration: const Duration(seconds: 2),",
    "    vsync: this,",
    "  )..repeat(reverse: true);",
    "  late final Animation<Offset> _offsetAnimation = Tween<Offset>(",
    "    begin: Offset.zero,",
    "    end: const Offset(1.5, 0.0),",
    "  ).animate(CurvedAnimation(",
    "    parent: _controller,",
    "    curve: Curves.elasticIn,",
    "  ));",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return SlideTransition(",
    "      position: _offsetAnimation,",
    "      child: const Padding(",
    "        padding: EdgeInsets.all(8.0),",
    "        child: FlutterLogo(size: 150.0),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SlideTransition Example"
},
"Flutter SliverFadeTransition": {
  "prefix": "flutter-SliverFadeTransition",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverFadeTransition].",
    "",
    "void main() => runApp(const SliverFadeTransitionExampleApp());",
    "",
    "class SliverFadeTransitionExampleApp extends StatelessWidget {",
    "  const SliverFadeTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverFadeTransition Sample')),",
    "        body: const Center(",
    "          child: SliverFadeTransitionExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverFadeTransitionExample extends StatefulWidget {",
    "  const SliverFadeTransitionExample({super.key});",
    "",
    "  @override",
    "  State<SliverFadeTransitionExample> createState() =>",
    "      _SliverFadeTransitionExampleState();",
    "}",
    "",
    "class _SliverFadeTransitionExampleState",
    "    extends State<SliverFadeTransitionExample>",
    "    with SingleTickerProviderStateMixin {",
    "  late final AnimationController controller = AnimationController(",
    "    duration: const Duration(milliseconds: 1000),",
    "    vsync: this,",
    "  );",
    "  late final Animation<double> animation = CurvedAnimation(",
    "    parent: controller,",
    "    curve: Curves.easeIn,",
    "  );",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    animation.addStatusListener((AnimationStatus status) {",
    "      if (status == AnimationStatus.completed) {",
    "        controller.reverse();",
    "      } else if (status == AnimationStatus.dismissed) {",
    "        controller.forward();",
    "      }",
    "    });",
    "    controller.forward();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(slivers: <Widget>[",
    "      SliverFadeTransition(",
    "        opacity: animation,",
    "        sliver: SliverFixedExtentList(",
    "          itemExtent: 100.0,",
    "          delegate: SliverChildBuilderDelegate(",
    "            (BuildContext context, int index) {",
    "              return Container(",
    "                color: index.isEven ? Colors.indigo[200] : Colors.orange[200],",
    "              );",
    "            },",
    "            childCount: 5,",
    "          ),",
    "        ),",
    "      ),",
    "    ]);",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverFadeTransition"
},"Flutter SliverFadeTransition": {
  "prefix": "transition sliverfade",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverFadeTransition].",
    "",
    "void main() => runApp(const SliverFadeTransitionExampleApp());",
    "",
    "class SliverFadeTransitionExampleApp extends StatelessWidget {",
    "  const SliverFadeTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('SliverFadeTransition Sample')),",
    "        body: const Center(",
    "          child: SliverFadeTransitionExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverFadeTransitionExample extends StatefulWidget {",
    "  const SliverFadeTransitionExample({super.key});",
    "",
    "  @override",
    "  State<SliverFadeTransitionExample> createState() =>",
    "      _SliverFadeTransitionExampleState();",
    "}",
    "",
    "class _SliverFadeTransitionExampleState",
    "    extends State<SliverFadeTransitionExample>",
    "    with SingleTickerProviderStateMixin {",
    "  late final AnimationController controller = AnimationController(",
    "    duration: const Duration(milliseconds: 1000),",
    "    vsync: this,",
    "  );",
    "  late final Animation<double> animation = CurvedAnimation(",
    "    parent: controller,",
    "    curve: Curves.easeIn,",
    "  );",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    animation.addStatusListener((AnimationStatus status) {",
    "      if (status == AnimationStatus.completed) {",
    "        controller.reverse();",
    "      } else if (status == AnimationStatus.dismissed) {",
    "        controller.forward();",
    "      }",
    "    });",
    "    controller.forward();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomScrollView(slivers: <Widget>[",
    "      SliverFadeTransition(",
    "        opacity: animation,",
    "        sliver: SliverFixedExtentList(",
    "          itemExtent: 100.0,",
    "          delegate: SliverChildBuilderDelegate(",
    "            (BuildContext context, int index) {",
    "              return Container(",
    "                color: index.isEven ? Colors.indigo[200] : Colors.orange[200],",
    "              );",
    "            },",
    "            childCount: 5,",
    "          ),",
    "        ),",
    "      ),",
    "    ]);",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverFadeTransition"
},
"Flutter TweenAnimationBuilder Example": {
  "prefix": "flutter-TweenAnimationBuilder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TweenAnimationBuilder].",
    "",
    "void main() => runApp(const TweenAnimationBuilderExampleApp());",
    "",
    "class TweenAnimationBuilderExampleApp extends StatelessWidget {",
    "  const TweenAnimationBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('TweenAnimationBuilder Sample')),",
    "        body: const Center(",
    "          child: TweenAnimationBuilderExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TweenAnimationBuilderExample extends StatefulWidget {",
    "  const TweenAnimationBuilderExample({super.key});",
    "",
    "  @override",
    "  State<TweenAnimationBuilderExample> createState() =>",
    "      _TweenAnimationBuilderExampleState();",
    "}",
    "",
    "class _TweenAnimationBuilderExampleState",
    "    extends State<TweenAnimationBuilderExample> {",
    "  double targetValue = 24.0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TweenAnimationBuilder<double>(",
    "      tween: Tween<double>(begin: 0, end: targetValue),",
    "      duration: const Duration(seconds: 1),",
    "      builder: (BuildContext context, double size, Widget? child) {",
    "        return IconButton(",
    "          iconSize: size,",
    "          color: Colors.blue,",
    "          icon: child!,",
    "          onPressed: () {",
    "            setState(() {",
    "              targetValue = targetValue == 24.0 ? 48.0 : 24.0;",
    "            });",
    "          },",
    "        );",
    "      },",
    "      child: const Icon(Icons.aspect_ratio),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter TweenAnimationBuilder Example"
},"Flutter Animation Example": {
  "prefix": "flutter-Animation",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TweenAnimationBuilder].",
    "",
    "void main() => runApp(const TweenAnimationBuilderExampleApp());",
    "",
    "class TweenAnimationBuilderExampleApp extends StatelessWidget {",
    "  const TweenAnimationBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('TweenAnimationBuilder Sample')),",
    "        body: const Center(",
    "          child: TweenAnimationBuilderExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TweenAnimationBuilderExample extends StatefulWidget {",
    "  const TweenAnimationBuilderExample({super.key});",
    "",
    "  @override",
    "  State<TweenAnimationBuilderExample> createState() =>",
    "      _TweenAnimationBuilderExampleState();",
    "}",
    "",
    "class _TweenAnimationBuilderExampleState",
    "    extends State<TweenAnimationBuilderExample> {",
    "  double targetValue = 24.0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TweenAnimationBuilder<double>(",
    "      tween: Tween<double>(begin: 0, end: targetValue),",
    "      duration: const Duration(seconds: 1),",
    "      builder: (BuildContext context, double size, Widget? child) {",
    "        return IconButton(",
    "          iconSize: size,",
    "          color: Colors.blue,",
    "          icon: child!,",
    "          onPressed: () {",
    "            setState(() {",
    "              targetValue = targetValue == 24.0 ? 48.0 : 24.0;",
    "            });",
    "          },",
    "        );",
    "      },",
    "      child: const Icon(Icons.aspect_ratio),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Animation Example"
},
"Flutter UndoHistoryController Example": {
  "prefix": "flutter-UndoHistoryController",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:developer';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [UndoHistoryController].",
    "",
    "void main() {",
    "  runApp(const UndoHistoryControllerExampleApp());",
    "}",
    "",
    "class UndoHistoryControllerExampleApp extends StatelessWidget {",
    "  const UndoHistoryControllerExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MyHomePage(),",
    "    );",
    "  }",
    "}",
    "",
    "class MyHomePage extends StatefulWidget {",
    "  const MyHomePage({super.key});",
    "",
    "  @override",
    "  State<MyHomePage> createState() => _MyHomePageState();",
    "}",
    "",
    "class _MyHomePageState extends State<MyHomePage> {",
    "  final TextEditingController _controller = TextEditingController();",
    "  final FocusNode _focusNode = FocusNode();",
    "  final UndoHistoryController _undoController = UndoHistoryController();",
    "",
    "  TextStyle? get enabledStyle => Theme.of(context).textTheme.bodyMedium;",
    "  TextStyle? get disabledStyle =>",
    "      Theme.of(context).textTheme.bodyMedium?.copyWith(color: Colors.grey);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"Undo Redo Example\"),",
    "      ),",
    "      body: Center(",
    "        child: Padding(",
    "          padding: const EdgeInsets.all(8.0),",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              TextField(",
    "                maxLines: 2,",
    "                controller: _controller,",
    "                focusNode: _focusNode,",
    "                undoController: _undoController,",
    "                onChanged: (value) {",
    "                  log(value, name: \"textcontroller value\");",
    "                },",
    "                decoration: const InputDecoration(",
    "                    filled: true,",
    "                    fillColor: Colors.white,",
    "                    border: InputBorder.none,",
    "                    labelText: \"Undo Redo\",",
    "                    focusedBorder: OutlineInputBorder()),",
    "              ),",
    "              ValueListenableBuilder<UndoHistoryValue>(",
    "                valueListenable: _undoController,",
    "                builder: (BuildContext context, UndoHistoryValue value,",
    "                    Widget? child) {",
    "                  return Row(",
    "                    children: <Widget>[",
    "                      TextButton(",
    "                        child: Text('Undo',",
    "                            style:",
    "                                value.canUndo ? enabledStyle : disabledStyle),",
    "                        onPressed: () {",
    "                          _undoController.undo();",
    "                        },",
    "                      ),",
    "                      TextButton(",
    "                        child: Text('Redo',",
    "                            style:",
    "                                value.canRedo ? enabledStyle : disabledStyle),",
    "                        onPressed: () {",
    "                          _undoController.redo();",
    "                        },",
    "                      ),",
    "                    ],",
    "                  );",
    "                },",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter UndoHistoryController Example"
},
"Flutter contextmenu Example": {
  "prefix": "flutter-ContextMenu",
  "scope":"dart",
  "body": [
    "",
    "// This example demonstrates showing the default buttons, but customizing their",
    "// appearance.",
    "",
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "void main() => runApp(const EditableTextToolbarBuilderExampleApp());",
    "",
    "class EditableTextToolbarBuilderExampleApp extends StatefulWidget {",
    "  const EditableTextToolbarBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  State<EditableTextToolbarBuilderExampleApp> createState() =>",
    "      _EditableTextToolbarBuilderExampleAppState();",
    "}",
    "",
    "class _EditableTextToolbarBuilderExampleAppState",
    "    extends State<EditableTextToolbarBuilderExampleApp> {",
    "  final TextEditingController _controller = TextEditingController(",
    "    text:",
    "        'Right click (desktop) or long press (mobile) to see the menu with custom buttons.',",
    "  );",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    // On web, disable the browser's context menu since this example uses a custom",
    "    // Flutter-rendered context menu.",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.disableContextMenu();",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.enableContextMenu();",
    "    }",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('context menu button appearance'),",
    "        ),",
    "        body: Center(",
    "          child: Column(",
    "            children: <Widget>[",
    "              const SizedBox(height: 20.0),",
    "              TextField(",
    "                controller: _controller,",
    "                contextMenuBuilder: (BuildContext context,",
    "                    EditableTextState editableTextState) {",
    "                  return AdaptiveTextSelectionToolbar(",
    "                    anchors: editableTextState.contextMenuAnchors,",
    "                    // Build the default buttons, but make them look custom.",
    "                    // In a real project you may want to build different",
    "                    // buttons depending on the platform.",
    "                    children: editableTextState.contextMenuButtonItems",
    "                        .map((ContextMenuButtonItem buttonItem) {",
    "                      return CupertinoButton(",
    "                        borderRadius: null,",
    "                        color: const Color(0xffaaaa00),",
    "                        disabledColor: const Color(0xffaaaaff),",
    "                        onPressed: buttonItem.onPressed,",
    "                        padding: const EdgeInsets.all(10.0),",
    "                        pressedOpacity: 0.7,",
    "                        child: SizedBox(",
    "                          width: 200.0,",
    "                          child: Text(",
    "                            CupertinoTextSelectionToolbarButton.getButtonLabel(",
    "                                context, buttonItem),",
    "                          ),",
    "                        ),",
    "                      );",
    "                    }).toList(),",
    "                  );",
    "                },",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter contextmenu Example"
},
"Flutter WillPopScope Example": {
  "prefix": "flutter-WillPopScope",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [WillPopScope].",
    "",
    "void main() => runApp(const WillPopScopeExampleApp());",
    "",
    "class WillPopScopeExampleApp extends StatelessWidget {",
    "  const WillPopScopeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: WillPopScopeExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class WillPopScopeExample extends StatefulWidget {",
    "  const WillPopScopeExample({super.key});",
    "",
    "  @override",
    "  State<WillPopScopeExample> createState() => _WillPopScopeExampleState();",
    "}",
    "",
    "class _WillPopScopeExampleState extends State<WillPopScopeExample> {",
    "  bool shouldPop = true;",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return WillPopScope(",
    "      onWillPop: () async {",
    "        return shouldPop;",
    "      },",
    "      child: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Flutter WillPopScope demo'),",
    "        ),",
    "        body: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              OutlinedButton(",
    "                child: const Text('Push'),",
    "                onPressed: () {",
    "                  Navigator.of(context).push<void>(",
    "                    MaterialPageRoute<void>(",
    "                      builder: (BuildContext context) {",
    "                        return const WillPopScopeExample();",
    "                      },",
    "                    ),",
    "                  );",
    "                },",
    "              ),",
    "              OutlinedButton(",
    "                child: Text('shouldPop: $shouldPop'),",
    "                onPressed: () {",
    "                  setState(",
    "                    () {",
    "                      shouldPop = !shouldPop;",
    "                    },",
    "                  );",
    "                },",
    "              ),",
    "              const Text('Push to a new screen, then tap on shouldPop '",
    "                  'button to toggle its value. Press the back '",
    "                  'button in the appBar to check its behavior '",
    "                  'for different values of shouldPop'),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter WillPopScope Example"
},
"Flutter ServicesBinding.handleRequestAppExit Example": {
  "prefix": "flutter-AppExit",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:ui';",
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [ServicesBinding.handleRequestAppExit].",
    "",
    "void main() {",
    "  runApp(const ApplicationExitExample());",
    "}",
    "",
    "class ApplicationExitExample extends StatelessWidget {",
    "  const ApplicationExitExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "          appBar: AppBar(",
    "            title: Text(\"App Exit Example\"),",
    "          ),",
    "          body: Body()),",
    "    );",
    "  }",
    "}",
    "",
    "class Body extends StatefulWidget {",
    "  const Body({super.key});",
    "",
    "  @override",
    "  State<Body> createState() => _BodyState();",
    "}",
    "",
    "class _BodyState extends State<Body> with WidgetsBindingObserver {",
    "  bool _shouldExit = false;",
    "  String lastResponse = 'No exit requested yet';",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    WidgetsBinding.instance.addObserver(this);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    WidgetsBinding.instance.removeObserver(this);",
    "    super.dispose();",
    "  }",
    "",
    "  Future<void> _quit() async {",
    "    final AppExitType exitType =",
    "        _shouldExit ? AppExitType.required : AppExitType.cancelable;",
    "    setState(() {",
    "      lastResponse = 'App requesting ${exitType.name} exit';",
    "    });",
    "    await ServicesBinding.instance.exitApplication(exitType);",
    "  }",
    "",
    "  @override",
    "  Future<AppExitResponse> didRequestAppExit() async {",
    "    final AppExitResponse response =",
    "        _shouldExit ? AppExitResponse.exit : AppExitResponse.cancel;",
    "    setState(() {",
    "      lastResponse = 'App responded ${response.name} to exit request';",
    "    });",
    "    return response;",
    "  }",
    "",
    "  void _radioChanged(bool? value) {",
    "    value ??= true;",
    "    if (_shouldExit == value) {",
    "      return;",
    "    }",
    "    setState(() {",
    "      _shouldExit = value!;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: SizedBox(",
    "        width: 300,",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            RadioListTile<bool>(",
    "              title: const Text('Do Not Allow Exit'),",
    "              groupValue: _shouldExit,",
    "              value: false,",
    "              onChanged: _radioChanged,",
    "            ),",
    "            RadioListTile<bool>(",
    "              title: const Text('Allow Exit'),",
    "              groupValue: _shouldExit,",
    "              value: true,",
    "              onChanged: _radioChanged,",
    "            ),",
    "            const SizedBox(height: 30),",
    "            ElevatedButton(",
    "              onPressed: _quit,",
    "              child: const Text('Quit'),",
    "            ),",
    "            const SizedBox(height: 30),",
    "            Text(lastResponse),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ServicesBinding.handleRequestAppExit Example"
},
"Flutter LogicalKeyboardKey Example": {
  "prefix": "flutter-LogicalKeyboardKey",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [LogicalKeyboardKey].",
    "",
    "void main() => runApp(const KeyExampleApp());",
    "",
    "class KeyExampleApp extends StatelessWidget {",
    "  const KeyExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Key Handling Example')),",
    "        body: const MyKeyExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MyKeyExample extends StatefulWidget {",
    "  const MyKeyExample({super.key});",
    "",
    "  @override",
    "  State<MyKeyExample> createState() => _MyKeyExampleState();",
    "}",
    "",
    "class _MyKeyExampleState extends State<MyKeyExample> {",
    "  // The node used to request the keyboard focus.",
    "  final FocusNode _focusNode = FocusNode();",
    "  // The message to display.",
    "  String? _message;",
    "",
    "  // Focus nodes need to be disposed.",
    "  @override",
    "  void dispose() {",
    "    _focusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  // Handles the key events from the Focus widget and updates the",
    "  // _message.",
    "  KeyEventResult _handleKeyEvent(FocusNode node, RawKeyEvent event) {",
    "    setState(() {",
    "      if (event.logicalKey == LogicalKeyboardKey.keyQ) {",
    "        _message = 'Pressed the \"Q\" key!';",
    "      } else {",
    "        if (kReleaseMode) {",
    "          _message =",
    "              'Not a Q: Pressed 0x${event.logicalKey.keyId.toRadixString(16)}';",
    "        } else {",
    "          // As the name implies, the debugName will only print useful",
    "          // information in debug mode.",
    "          _message = 'Not a Q: Pressed ${event.logicalKey.debugName}';",
    "        }",
    "      }",
    "    });",
    "    return event.logicalKey == LogicalKeyboardKey.keyQ",
    "        ? KeyEventResult.handled",
    "        : KeyEventResult.ignored;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "    return Container(",
    "      color: Colors.white,",
    "      alignment: Alignment.center,",
    "      child: DefaultTextStyle(",
    "        style: textTheme.headlineMedium!,",
    "        child: Focus(",
    "          focusNode: _focusNode,",
    "          onKey: _handleKeyEvent,",
    "          child: ListenableBuilder(",
    "            listenable: _focusNode,",
    "            builder: (BuildContext context, Widget? child) {",
    "              if (!_focusNode.hasFocus) {",
    "                return GestureDetector(",
    "                  onTap: () {",
    "                    FocusScope.of(context).requestFocus(_focusNode);",
    "                  },",
    "                  child: const Text('Click to focus'),",
    "                );",
    "              }",
    "              return Text(_message ?? 'Press a key');",
    "            },",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter LogicalKeyboardKey Example"
},
"Flutter PhysicalKeyboardKey Example": {
  "prefix": "flutter-PhysicalKeyboardKey",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [PhysicalKeyboardKey].",
    "",
    "void main() => runApp(const KeyExampleApp());",
    "",
    "class KeyExampleApp extends StatelessWidget {",
    "  const KeyExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('PhysicalKeyboardKey Example')),",
    "        body: const MyPhysicalKeyExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MyPhysicalKeyExample extends StatefulWidget {",
    "  const MyPhysicalKeyExample({super.key});",
    "",
    "  @override",
    "  State<MyPhysicalKeyExample> createState() => _MyPhysicalKeyExampleState();",
    "}",
    "",
    "class _MyPhysicalKeyExampleState extends State<MyPhysicalKeyExample> {",
    "// The node used to request the keyboard focus.",
    "  final FocusNode _focusNode = FocusNode();",
    "// The message to display.",
    "  String? _message;",
    "",
    "// Focus nodes need to be disposed.",
    "  @override",
    "  void dispose() {",
    "    _focusNode.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "// Handles the key events from the RawKeyboardListener and update the",
    "// _message.",
    "  KeyEventResult _handleKeyEvent(FocusNode node, RawKeyEvent event) {",
    "    setState(() {",
    "      if (event.physicalKey == PhysicalKeyboardKey.keyA) {",
    "        _message = 'Pressed the key next to CAPS LOCK!';",
    "      } else {",
    "        if (kReleaseMode) {",
    "          _message =",
    "              'Not the key next to CAPS LOCK: Pressed 0x${event.physicalKey.usbHidUsage.toRadixString(16)}';",
    "        } else {",
    "          // As the name implies, the debugName will only print useful",
    "          // information in debug mode.",
    "          _message =",
    "              'Not the key next to CAPS LOCK: Pressed ${event.physicalKey.debugName}';",
    "        }",
    "      }",
    "    });",
    "    return event.physicalKey == PhysicalKeyboardKey.keyA",
    "        ? KeyEventResult.handled",
    "        : KeyEventResult.ignored;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextTheme textTheme = Theme.of(context).textTheme;",
    "    return Container(",
    "      color: Colors.white,",
    "      alignment: Alignment.center,",
    "      child: DefaultTextStyle(",
    "        style: textTheme.headlineMedium!,",
    "        child: Focus(",
    "          focusNode: _focusNode,",
    "          onKey: _handleKeyEvent,",
    "          child: ListenableBuilder(",
    "            listenable: _focusNode,",
    "            builder: (BuildContext context, Widget? child) {",
    "              if (!_focusNode.hasFocus) {",
    "                return GestureDetector(",
    "                  onTap: () {",
    "                    FocusScope.of(context).requestFocus(_focusNode);",
    "                  },",
    "                  child: const Text('Click to focus'),",
    "                );",
    "              }",
    "              return Text(_message ?? 'Press a key');",
    "            },",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter PhysicalKeyboardKey Example"
},
"Flutter MouseCursor Example": {
  "prefix": "flutter-MouseCursor",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MouseCursor].",
    "",
    "void main() => runApp(const MouseCursorExampleApp());",
    "",
    "class MouseCursorExampleApp extends StatelessWidget {",
    "  const MouseCursorExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MouseCursor Code Sample')),",
    "        body: const MouseCursorExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MouseCursorExample extends StatelessWidget {",
    "  const MouseCursorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: MouseRegion(",
    "        cursor: SystemMouseCursors.text,",
    "        child: Container(",
    "          width: 200,",
    "          height: 100,",
    "          decoration: BoxDecoration(",
    "            color: Colors.blue,",
    "            border: Border.all(color: Colors.yellow),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter MouseCursor Example"
},"Flutter Mouse Region Example": {
  "prefix": "flutter-MouseRegion",
  "body": [
    "",
    "import 'dart:developer';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MouseRegion].",
    "",
    "void main() => runApp(const MouseRegionExampleApp());",
    "",
    "class MouseRegionExampleApp extends StatelessWidget {",
    "  const MouseRegionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('MouseRegion Code Sample')),",
    "        body: const MouseRegionExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MouseRegionExample extends StatelessWidget {",
    "  const MouseRegionExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: MouseRegion(",
    "        cursor: SystemMouseCursors.text,",
    "        onEnter: (event) {",
    "          log(event.toString(), name: \"onEnter\");",
    "        },",
    "        child: Container(",
    "          width: 200,",
    "          height: 100,",
    "          decoration: BoxDecoration(",
    "            color: Colors.blue,",
    "            border: Border.all(color: Colors.yellow),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Mouse Region Example"
},
"Flutter systemOverlayStyle Example": {
  "prefix": "flutter-systemOverlayStyle",
  "body": [
    "",
    "import 'dart:math' as math;",
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [AppBar.systemOverlayStyle].",
    "",
    "void main() => runApp(const SystemOverlayStyleApp());",
    "",
    "class SystemOverlayStyleApp extends StatelessWidget {",
    "  const SystemOverlayStyleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        useMaterial3: true,",
    "        brightness: Brightness.light,",
    "      ),",
    "      home: const SystemOverlayStyleExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SystemOverlayStyleExample extends StatefulWidget {",
    "  const SystemOverlayStyleExample({super.key});",
    "",
    "  @override",
    "  State<SystemOverlayStyleExample> createState() =>",
    "      _SystemOverlayStyleExampleState();",
    "}",
    "",
    "class _SystemOverlayStyleExampleState extends State<SystemOverlayStyleExample> {",
    "  final math.Random _random = math.Random();",
    "  SystemUiOverlayStyle _currentStyle = SystemUiOverlayStyle.light;",
    "",
    "  void _changeColor() {",
    "    final Color color = Color.fromRGBO(",
    "      _random.nextInt(255),",
    "      _random.nextInt(255),",
    "      _random.nextInt(255),",
    "      1.0,",
    "    );",
    "    setState(() {",
    "      _currentStyle = SystemUiOverlayStyle.dark.copyWith(",
    "        statusBarColor: color,",
    "        systemNavigationBarColor: color,",
    "      );",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('SystemUiOverlayStyle Sample'),",
    "        systemOverlayStyle: _currentStyle,",
    "      ),",
    "      body: Center(",
    "        child: ElevatedButton(",
    "          onPressed: _changeColor,",
    "          child: const Text('Change Color'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter systemOverlayStyle Example"
}
,"Flutter TextInputControl Example": {
  "prefix": "flutter-TextInputControl",
  "scope":"dart",
  "body": [
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// Flutter code sample for [TextInputControl].",
    "",
    "void main() => runApp(const TextInputControlExampleApp());",
    "",
    "class TextInputControlExampleApp extends StatelessWidget {",
    "  const TextInputControlExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: TextInputControlExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TextInputControlExample extends StatefulWidget {",
    "  const TextInputControlExample({super.key});",
    "",
    "  @override",
    "  MyStatefulWidgetState createState() => MyStatefulWidgetState();",
    "}",
    "",
    "class MyStatefulWidgetState extends State<TextInputControlExample> {",
    "  final TextEditingController _controller = TextEditingController();",
    "  final FocusNode _focusNode = FocusNode();",
    "",
    "  @override",
    "  void dispose() {",
    "    super.dispose();",
    "    _controller.dispose();",
    "    _focusNode.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"TextInput Control\"),",
    "      ),",
    "      body: Center(",
    "        child: TextField(",
    "          autofocus: true,",
    "          controller: _controller,",
    "          focusNode: _focusNode,",
    "          decoration: InputDecoration(",
    "            suffix: IconButton(",
    "              icon: const Icon(Icons.clear),",
    "              tooltip: 'Clear and unfocus',",
    "              onPressed: () {",
    "                _controller.clear();",
    "                _focusNode.unfocus();",
    "              },",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "      bottomSheet: const MyVirtualKeyboard(),",
    "    );",
    "  }",
    "}",
    "",
    "class MyVirtualKeyboard extends StatefulWidget {",
    "  const MyVirtualKeyboard({super.key});",
    "",
    "  @override",
    "  MyVirtualKeyboardState createState() => MyVirtualKeyboardState();",
    "}",
    "",
    "class MyVirtualKeyboardState extends State<MyVirtualKeyboard> {",
    "  final MyTextInputControl _inputControl = MyTextInputControl();",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _inputControl.register();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    super.dispose();",
    "    _inputControl.unregister();",
    "  }",
    "",
    "  void _handleKeyPress(String key) {",
    "    _inputControl.processUserInput(key);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ValueListenableBuilder<bool>(",
    "      valueListenable: _inputControl.visible,",
    "      builder: (_, bool visible, __) {",
    "        return Visibility(",
    "          visible: visible,",
    "          child: FocusScope(",
    "            canRequestFocus: false,",
    "            child: TextFieldTapRegion(",
    "              child: Row(",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  for (final String key in <String>['A', 'B', 'C'])",
    "                    ElevatedButton(",
    "                      child: Text(key),",
    "                      onPressed: () => _handleKeyPress(key),",
    "                    ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "class MyTextInputControl with TextInputControl {",
    "  TextEditingValue _editingState = TextEditingValue.empty;",
    "  final ValueNotifier<bool> _visible = ValueNotifier<bool>(false);",
    "",
    "  /// The input control's visibility state for updating the visual presentation.",
    "  ValueListenable<bool> get visible => _visible;",
    "",
    "  /// Register the input control.",
    "  void register() => TextInput.setInputControl(this);",
    "",
    "  /// Restore the original platform input control.",
    "  void unregister() => TextInput.restorePlatformInputControl();",
    "",
    "  @override",
    "  void show() => _visible.value = true;",
    "",
    "  @override",
    "  void hide() => _visible.value = false;",
    "",
    "  @override",
    "  void setEditingState(TextEditingValue value) => _editingState = value;",
    "",
    "  /// Process user input.",
    "  ///",
    "  /// Updates the internal editing state by inserting the input text,",
    "  /// and by replacing the current selection if any.",
    "  void processUserInput(String input) {",
    "    _editingState = _editingState.copyWith(",
    "      text: _insertText(input),",
    "      selection: _replaceSelection(input),",
    "    );",
    "",
    "    // Request the attached client to update accordingly.",
    "    TextInput.updateEditingValue(_editingState);",
    "  }",
    "",
    "  String _insertText(String input) {",
    "    final String text = _editingState.text;",
    "    final TextSelection selection = _editingState.selection;",
    "    return text.replaceRange(selection.start, selection.end, input);",
    "  }",
    "",
    "  TextSelection _replaceSelection(String input) {",
    "    final TextSelection selection = _editingState.selection;",
    "    return TextSelection.collapsed(offset: selection.start + input.length);",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter TextInputControl Example"
},"Flutter BorderSide.stroke Example": {
  "prefix": "flutter-BorderSide.strokeAlign",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [BorderSide.strokeAlign].",
    "",
    "void main() => runApp(const StrokeAlignApp());",
    "",
    "class StrokeAlignApp extends StatelessWidget {",
    "  const StrokeAlignApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(home: StrokeAlignExample());",
    "  }",
    "}",
    "",
    "class StrokeAlignExample extends StatefulWidget {",
    "  const StrokeAlignExample({super.key});",
    "",
    "  @override",
    "  State<StrokeAlignExample> createState() => _StrokeAlignExampleState();",
    "}",
    "",
    "class _StrokeAlignExampleState extends State<StrokeAlignExample>",
    "    with TickerProviderStateMixin {",
    "  late final AnimationController animation;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    animation =",
    "        AnimationController(vsync: this, duration: const Duration(seconds: 1));",
    "    animation.repeat(reverse: true);",
    "    animation.addListener(_markDirty);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    animation.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _markDirty() {",
    "    setState(() {});",
    "  }",
    "",
    "  static const double borderWidth = 10;",
    "  static const double cornerRadius = 10;",
    "  static const Color borderColor = Color(0x8000b4fc);",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"Borderside Stroke\"),",
    "      ),",
    "      body: Material(",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "            children: <Widget>[",
    "              BorderedBox(",
    "                shape: StadiumBorder(",
    "                  side: BorderSide(",
    "                    color: borderColor,",
    "                    width: borderWidth,",
    "                    strokeAlign: (animation.value * 2) - 1,",
    "                  ),",
    "                ),",
    "              ),",
    "              Row(",
    "                mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "                children: <Widget>[",
    "                  BorderedBox(",
    "                    shape: CircleBorder(",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                  BorderedBox(",
    "                    shape: OvalBorder(",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "              Row(",
    "                mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "                children: <Widget>[",
    "                  BorderedBox(",
    "                    shape: BeveledRectangleBorder(",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                  BorderedBox(",
    "                    shape: BeveledRectangleBorder(",
    "                      borderRadius: BorderRadius.circular(cornerRadius),",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "              Row(",
    "                mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "                children: <Widget>[",
    "                  BorderedBox(",
    "                    shape: RoundedRectangleBorder(",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                  BorderedBox(",
    "                    shape: RoundedRectangleBorder(",
    "                      borderRadius: BorderRadius.circular(cornerRadius),",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "              Row(",
    "                mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "                children: <Widget>[",
    "                  BorderedBox(",
    "                    shape: StarBorder(",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                  BorderedBox(",
    "                    shape: StarBorder(",
    "                      pointRounding: 1,",
    "                      innerRadiusRatio: 0.5,",
    "                      points: 8,",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                  BorderedBox(",
    "                    shape: StarBorder.polygon(",
    "                      sides: 6,",
    "                      pointRounding: 0.5,",
    "                      side: BorderSide(",
    "                        color: borderColor,",
    "                        width: borderWidth,",
    "                        strokeAlign: (animation.value * 2) - 1,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class BorderedBox extends StatelessWidget {",
    "  const BorderedBox({",
    "    super.key,",
    "    required this.shape,",
    "  });",
    "",
    "  final ShapeBorder shape;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      width: 100,",
    "      height: 50,",
    "      decoration: ShapeDecoration(",
    "        color: const Color(0xff012677),",
    "        shape: shape,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter BorderSide.stroke Example"
},
"Flutter AxisDirection Example": {
  "prefix": "flutter-AxisDirection",
  "scope": "dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [AxisDirection]s.",
    "",
    "void main() => runApp(const ExampleApp());",
    "",
    "class ExampleApp extends StatelessWidget {",
    "  const ExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MyWidget(),",
    "    );",
    "  }",
    "}",
    "",
    "class MyWidget extends StatefulWidget {",
    "  const MyWidget({super.key});",
    "",
    "  @override",
    "  State<MyWidget> createState() => _MyWidgetState();",
    "}",
    "",
    "class _MyWidgetState extends State<MyWidget> {",
    "  final List<String> _alphabet = <String>[",
    "    'A',",
    "    'B',",
    "    'C',",
    "    'D',",
    "    'E',",
    "    'F',",
    "    'G',",
    "    'H',",
    "    'I',",
    "    'J',",
    "    'K',",
    "    'L',",
    "    'M',",
    "    'N',",
    "    'O',",
    "    'P',",
    "    'Q',",
    "    'R',",
    "    'S',",
    "    'T',",
    "    'U',",
    "    'V',",
    "    'W',",
    "    'X',",
    "    'Y',",
    "    'Z',",
    "  ];",
    "  final Widget _spacer = const SizedBox.square(dimension: 10);",
    "  AxisDirection _axisDirection = AxisDirection.down;",
    "",
    "  Widget _getArrows() {",
    "    final Widget arrow;",
    "    switch (_axisDirection) {",
    "      case AxisDirection.up:",
    "        arrow = const Icon(Icons.arrow_upward_rounded);",
    "        return Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.down:",
    "        arrow = const Icon(Icons.arrow_downward_rounded);",
    "        return Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.left:",
    "        arrow = const Icon(Icons.arrow_back_rounded);",
    "        return Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.right:",
    "        arrow = const Icon(Icons.arrow_forward_rounded);",
    "        return Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "    }",
    "  }",
    "",
    "  void _onAxisDirectionChanged(AxisDirection? axisDirection) {",
    "    if (axisDirection != null && axisDirection != _axisDirection) {",
    "      setState(() {",
    "        // Respond to change in axis direction.",
    "        _axisDirection = axisDirection;",
    "      });",
    "    }",
    "  }",
    "",
    "  Widget _getLeading() {",
    "    return Container(",
    "      color: Colors.blue[100],",
    "      padding: const EdgeInsets.all(8.0),",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceBetween,",
    "        children: <Widget>[",
    "          Text(axisDirectionToAxis(_axisDirection).toString()),",
    "          _spacer,",
    "          Text(_axisDirection.toString()),",
    "          _spacer,",
    "          const Text('GrowthDirection.forward'),",
    "          _spacer,",
    "          _getArrows(),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _getRadioRow() {",
    "    return DefaultTextStyle(",
    "      style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.white),",
    "      child: RadioTheme(",
    "        data: RadioThemeData(",
    "          fillColor: MaterialStateProperty.all<Color>(Colors.white),",
    "        ),",
    "        child: Padding(",
    "          padding: const EdgeInsets.all(8.0),",
    "          child: Row(",
    "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "            children: <Widget>[",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.up,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('up'),",
    "              _spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.down,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('down'),",
    "              _spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.left,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('left'),",
    "              _spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.right,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('right'),",
    "              _spacer,",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('AxisDirections'),",
    "        bottom: PreferredSize(",
    "          preferredSize: const Size.fromHeight(50),",
    "          child: Padding(",
    "            padding: const EdgeInsets.all(8.0),",
    "            child: _getRadioRow(),",
    "          ),",
    "        ),",
    "      ),",
    "      // Also works for ListView.builder, which creates a SliverList for itself.",
    "      // A CustomScrollView allows multiple slivers to be composed together.",
    "      body: CustomScrollView(",
    "        // This method is available to conveniently determine if an scroll",
    "        // view is reversed by its AxisDirection.",
    "        reverse: axisDirectionIsReversed(_axisDirection),",
    "        // This method is available to conveniently convert an AxisDirection",
    "        // into its Axis.",
    "        scrollDirection: axisDirectionToAxis(_axisDirection),",
    "        slivers: <Widget>[",
    "          SliverList.builder(",
    "            itemCount: 27,",
    "            itemBuilder: (BuildContext context, int index) {",
    "              final Widget child;",
    "              if (index == 0) {",
    "                child = _getLeading();",
    "              } else {",
    "                child = Container(",
    "                  color: index.isEven ? Colors.amber[100] : Colors.amberAccent,",
    "                  padding: const EdgeInsets.all(8.0),",
    "                  child: Center(child: Text(_alphabet[index - 1])),",
    "                );",
    "              }",
    "              return Padding(",
    "                padding: const EdgeInsets.all(8.0),",
    "                child: child,",
    "              );",
    "            },",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AxisDirection Example"
},
"Flutter LinearGradient Example": {
  "prefix": "flutter-LinearGradient",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [LinearGradient].",
    "",
    "void main() => runApp(const LinearGradientExampleApp());",
    "",
    "class LinearGradientExampleApp extends StatelessWidget {",
    "  const LinearGradientExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(home: MoodyGradient());",
    "  }",
    "}",
    "",
    "class MoodyGradient extends StatelessWidget {",
    "  const MoodyGradient({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"Linear Gradient\"),",
    "      ),",
    "      body: Material(",
    "        child: Container(",
    "          decoration: const BoxDecoration(",
    "            gradient: LinearGradient(",
    "              begin: Alignment.topLeft,",
    "              end: Alignment(0.8, 1),",
    "              colors: <Color>[",
    "                Color(0xff1f005c),",
    "                Color(0xff5b0060),",
    "                Color(0xff870160),",
    "                Color(0xffac255e),",
    "                Color(0xffca485c),",
    "                Color(0xffe16b5c),",
    "                Color(0xfff39060),",
    "                Color(0xffffb56b),",
    "              ], // Gradient from https://learnui.design/tools/gradient-generator.html",
    "              tileMode: TileMode.mirror,",
    "            ),",
    "          ),",
    "          child: const Center(",
    "            child: Text(",
    "              'From Night to Day',",
    "              style: TextStyle(fontSize: 24, color: Colors.white),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter LinearGradient Example"
},"Flutter Linear Border Example": {
  "prefix": "flutter-LinearBorder",
  "body": [
    "// Examples of LinearBorder and LinearBorderEdge.",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() {",
    "  runApp(const ExampleApp());",
    "}",
    "",
    "class ExampleApp extends StatelessWidget {",
    "  const ExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData.light(useMaterial3: true),",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: Text(\"Linear Border\"),",
    "        ),",
    "        body: const Directionality(",
    "          textDirection: TextDirection.ltr, // Or try rtl.",
    "          child: Home(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SampleCard extends StatelessWidget {",
    "  const SampleCard(",
    "      {super.key,",
    "      required this.title,",
    "      required this.subtitle,",
    "      required this.children});",
    "",
    "  final String title;",
    "  final String subtitle;",
    "  final List<Widget> children;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData theme = Theme.of(context);",
    "    final TextTheme textTheme = theme.textTheme;",
    "    final ColorScheme colorScheme = theme.colorScheme;",
    "",
    "    return Card(",
    "      child: Padding(",
    "        padding: const EdgeInsets.all(16),",
    "        child: Column(",
    "          crossAxisAlignment: CrossAxisAlignment.start,",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            Text(title, style: textTheme.titleMedium),",
    "            Text(subtitle,",
    "                style: textTheme.bodyMedium!",
    "                    .copyWith(color: colorScheme.secondary)),",
    "            const SizedBox(height: 16),",
    "            Row(",
    "              children:",
    "                  List<Widget>.generate(children.length * 2 - 1, (int index) {",
    "                return index.isEven",
    "                    ? children[index ~/ 2]",
    "                    : const SizedBox(width: 16);",
    "              }),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class Home extends StatefulWidget {",
    "  const Home({super.key});",
    "",
    "  @override",
    "  State<Home> createState() => _HomeState();",
    "}",
    "",
    "class _HomeState extends State<Home> {",
    "  final LinearBorder shape0 = LinearBorder.top();",
    "  final LinearBorder shape1 = LinearBorder.top(size: 0);",
    "  late LinearBorder shape = shape0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ColorScheme colorScheme = Theme.of(context).colorScheme;",
    "    final BorderSide primarySide0 =",
    "        BorderSide(width: 0, color: colorScheme.inversePrimary); // hairline",
    "    final BorderSide primarySide2 =",
    "        BorderSide(width: 2, color: colorScheme.onPrimaryContainer);",
    "    final BorderSide primarySide3 =",
    "        BorderSide(width: 3, color: colorScheme.inversePrimary);",
    "",
    "    return Scaffold(",
    "      body: SingleChildScrollView(",
    "        child: Padding(",
    "          padding: const EdgeInsets.all(16),",
    "          child: Column(",
    "            mainAxisSize: MainAxisSize.min,",
    "            children: <Widget>[",
    "              // Demonstrates using LinearBorder.bottom() to define",
    "              // an underline border for the standard button types.",
    "              // The underline's color and width is defined by the ButtonStyle's",
    "              // side parameter. The side can also be specified as a",
    "              // LinearBorder parameter and if both are specified then the",
    "              // ButtonStyle's side is used. This set up makes it possible",
    "              // for a button theme to specify the shape and for individual",
    "              // buttons to specify the shape border's color and width.",
    "              SampleCard(",
    "                title: 'LinearBorder.bottom()',",
    "                subtitle: 'Standard button widgets',",
    "                children: <Widget>[",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide3,",
    "                      shape: LinearBorder.bottom(),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Text'),",
    "                  ),",
    "                  OutlinedButton(",
    "                    style: OutlinedButton.styleFrom(",
    "                      side: primarySide3,",
    "                      shape: LinearBorder.bottom(),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Outlined'),",
    "                  ),",
    "                  ElevatedButton(",
    "                    style: ElevatedButton.styleFrom(",
    "                      side: primarySide3,",
    "                      shape: LinearBorder.bottom(),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Elevated'),",
    "                  ),",
    "                ],",
    "              ),",
    "              const SizedBox(height: 32),",
    "              // Demonstrates creating LinearBorders with a single edge",
    "              // by using the convenience constructors like LinearBorder.start().",
    "              // The edges are drawn with a BorderSide with width:0, which",
    "              // means that a \"hairline\" line is stroked. Wider borders are",
    "              // drawn with filled rectangles.",
    "              SampleCard(",
    "                title: 'LinearBorder',",
    "                subtitle: 'Convenience constructors',",
    "                children: <Widget>[",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide0,",
    "                      shape: LinearBorder.start(),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Start()'),",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide0,",
    "                      shape: LinearBorder.end(),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('End()'),",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide0,",
    "                      shape: LinearBorder.top(),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Top()'),",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide0,",
    "                      shape: LinearBorder.bottom(),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Bottom()'),",
    "                  ),",
    "                ],",
    "              ),",
    "              const SizedBox(height: 32),",
    "              // Demonstrates creating LinearBorders with a single edge",
    "              // that's smaller than the button's bounding box. The size",
    "              // parameter specifies a percentage of the available space",
    "              // and alignment is -1 for start-alignment, 0 for centered,",
    "              // and 1 for end-alignment.",
    "              SampleCard(",
    "                title: 'LinearBorder',",
    "                subtitle: 'Size and alignment parameters',",
    "                children: <Widget>[",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide2,",
    "                      shape: LinearBorder.bottom(",
    "                        size: 0.5,",
    "                      ),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Center'),",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide2,",
    "                      shape: LinearBorder.bottom(",
    "                        size: 0.75,",
    "                        alignment: -1,",
    "                      ),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Start'),",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide2,",
    "                      shape: LinearBorder.bottom(",
    "                        size: 0.75,",
    "                        alignment: 1,",
    "                      ),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('End'),",
    "                  ),",
    "                ],",
    "              ),",
    "              const SizedBox(height: 32),",
    "              // Demonstrates creating LinearBorders with more than one edge.",
    "              // In these cases the default constructor is used and each edge",
    "              // is defined with one LinearBorderEdge object.",
    "              SampleCard(",
    "                title: 'LinearBorder',",
    "                subtitle: 'LinearBorderEdge parameters',",
    "                children: <Widget>[",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide0,",
    "                      shape: const LinearBorder(",
    "                        top: LinearBorderEdge(),",
    "                        bottom: LinearBorderEdge(),",
    "                      ),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Horizontal'),",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide0,",
    "                      shape: const LinearBorder(",
    "                        start: LinearBorderEdge(),",
    "                        end: LinearBorderEdge(),",
    "                      ),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Vertical'),",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide0,",
    "                      shape: const LinearBorder(",
    "                        start: LinearBorderEdge(),",
    "                        bottom: LinearBorderEdge(),",
    "                      ),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Corner'),",
    "                  ),",
    "                ],",
    "              ),",
    "              const SizedBox(height: 32),",
    "              // Demonstrates that changing properties of LinearBorders",
    "              // causes them to animate to their new configuration.",
    "              SampleCard(",
    "                title: 'Interpolation',",
    "                subtitle: 'LinearBorder.top() => LinearBorder.top(size: 0)',",
    "                children: <Widget>[",
    "                  IconButton(",
    "                    icon: const Icon(Icons.play_arrow),",
    "                    onPressed: () {",
    "                      setState(() {",
    "                        shape = shape == shape0 ? shape1 : shape0;",
    "                      });",
    "                    },",
    "                  ),",
    "                  TextButton(",
    "                    style: TextButton.styleFrom(",
    "                      side: primarySide3,",
    "                      shape: shape,",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Press Play'),",
    "                  ),",
    "                  TextButton(",
    "                    style: ButtonStyle(",
    "                      side: MaterialStateProperty.resolveWith<BorderSide?>(",
    "                          (Set<MaterialState> states) {",
    "                        return states.contains(MaterialState.hovered)",
    "                            ? primarySide3",
    "                            : null;",
    "                      }),",
    "                      shape: MaterialStateProperty.resolveWith<OutlinedBorder>(",
    "                          (Set<MaterialState> states) {",
    "                        return states.contains(MaterialState.hovered)",
    "                            ? shape0",
    "                            : shape1;",
    "                      }),",
    "                    ),",
    "                    onPressed: () {},",
    "                    child: const Text('Hover'),",
    "                  ),",
    "                ],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Linear Border Example"
},
"Flutter StarBorder Example": {
  "prefix": "flutter-StarBorder",
  "scope":"dart",
  "body": [
    "",
    "// An example showing usage of [StarBorder].",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "const int _kParameterPrecision = 2;",
    "",
    "void main() => runApp(const StarBorderApp());",
    "",
    "class StarBorderApp extends StatelessWidget {",
    "  const StarBorderApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('StarBorder Example'),",
    "          backgroundColor: const Color(0xff323232),",
    "        ),",
    "        body: const StarBorderExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class StarBorderExample extends StatefulWidget {",
    "  const StarBorderExample({super.key});",
    "",
    "  @override",
    "  State<StarBorderExample> createState() => _StarBorderExampleState();",
    "}",
    "",
    "class _StarBorderExampleState extends State<StarBorderExample> {",
    "  final OptionModel _model = OptionModel();",
    "  final TextEditingController _textController = TextEditingController();",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _model.addListener(_modelChanged);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _model.removeListener(_modelChanged);",
    "    _textController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  void _modelChanged() {",
    "    setState(() {});",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DefaultTextStyle(",
    "      style: const TextStyle(",
    "        color: Colors.black,",
    "        fontSize: 14.0,",
    "        fontFamily: 'Roboto',",
    "        fontStyle: FontStyle.normal,",
    "      ),",
    "      child: ListView(",
    "        children: <Widget>[",
    "          ColoredBox(",
    "            color: Colors.grey.shade200,",
    "            child: Options(_model),",
    "          ),",
    "          Padding(",
    "            padding: const EdgeInsets.all(18.0),",
    "            child: Row(",
    "              mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "              children: <Widget>[",
    "                Expanded(",
    "                  child: ExampleBorder(",
    "                    border: StarBorder(",
    "                      side: const BorderSide(),",
    "                      points: _model.points,",
    "                      innerRadiusRatio: _model.innerRadiusRatio,",
    "                      pointRounding: _model.pointRounding,",
    "                      valleyRounding: _model.valleyRounding,",
    "                      rotation: _model.rotation,",
    "                      squash: _model.squash,",
    "                    ),",
    "                    title: 'Star',",
    "                  ),",
    "                ),",
    "                Expanded(",
    "                  child: ExampleBorder(",
    "                    border: StarBorder.polygon(",
    "                      side: const BorderSide(),",
    "                      sides: _model.points,",
    "                      pointRounding: _model.pointRounding,",
    "                      rotation: _model.rotation,",
    "                      squash: _model.squash,",
    "                    ),",
    "                    title: 'Polygon',",
    "                  ),",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "          Row(",
    "            crossAxisAlignment: CrossAxisAlignment.start,",
    "            children: <Widget>[",
    "              Expanded(",
    "                child: Container(",
    "                  color: Colors.black12,",
    "                  margin: const EdgeInsets.all(16.0),",
    "                  padding: const EdgeInsets.all(16.0),",
    "                  child: SelectableText(_model.starCode),",
    "                ),",
    "              ),",
    "              Expanded(",
    "                child: Container(",
    "                  color: Colors.black12,",
    "                  margin: const EdgeInsets.all(16.0),",
    "                  padding: const EdgeInsets.all(16.0),",
    "                  child: SelectableText(_model.polygonCode),",
    "                ),",
    "              ),",
    "            ],",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ExampleBorder extends StatelessWidget {",
    "  const ExampleBorder({",
    "    super.key,",
    "    required this.border,",
    "    required this.title,",
    "  });",
    "",
    "  final StarBorder border;",
    "  final String title;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      alignment: Alignment.center,",
    "      padding: const EdgeInsets.all(20),",
    "      width: 150,",
    "      height: 100,",
    "      decoration: ShapeDecoration(",
    "        color: Colors.blue.shade100,",
    "        shape: border,",
    "      ),",
    "      child: Text(title),",
    "    );",
    "  }",
    "}",
    "",
    "class Options extends StatefulWidget {",
    "  const Options(this.model, {super.key});",
    "",
    "  final OptionModel model;",
    "",
    "  @override",
    "  State<Options> createState() => _OptionsState();",
    "}",
    "",
    "class _OptionsState extends State<Options> {",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    widget.model.addListener(_modelChanged);",
    "  }",
    "",
    "  @override",
    "  void didUpdateWidget(Options oldWidget) {",
    "    super.didUpdateWidget(oldWidget);",
    "    if (widget.model != oldWidget.model) {",
    "      oldWidget.model.removeListener(_modelChanged);",
    "      widget.model.addListener(_modelChanged);",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    super.dispose();",
    "    widget.model.removeListener(_modelChanged);",
    "  }",
    "",
    "  void _modelChanged() {",
    "    setState(() {});",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.fromLTRB(5.0, 0.0, 5.0, 10.0),",
    "      child: Column(",
    "        mainAxisSize: MainAxisSize.min,",
    "        children: <Widget>[",
    "          Row(",
    "            children: <Widget>[",
    "              Expanded(",
    "                child: ControlSlider(",
    "                  label: 'Point Rounding',",
    "                  value: widget.model.pointRounding,",
    "                  onChanged: (double value) {",
    "                    widget.model.pointRounding = value;",
    "                  },",
    "                ),",
    "              ),",
    "              Expanded(",
    "                child: ControlSlider(",
    "                  label: 'Valley Rounding',",
    "                  value: widget.model.valleyRounding,",
    "                  onChanged: (double value) {",
    "                    widget.model.valleyRounding = value;",
    "                  },",
    "                ),",
    "              ),",
    "            ],",
    "          ),",
    "          Row(",
    "            children: <Widget>[",
    "              Expanded(",
    "                child: ControlSlider(",
    "                  label: 'Squash',",
    "                  value: widget.model.squash,",
    "                  onChanged: (double value) {",
    "                    widget.model.squash = value;",
    "                  },",
    "                ),",
    "              ),",
    "              Expanded(",
    "                child: ControlSlider(",
    "                  label: 'Rotation',",
    "                  value: widget.model.rotation,",
    "                  max: 360,",
    "                  onChanged: (double value) {",
    "                    widget.model.rotation = value;",
    "                  },",
    "                ),",
    "              ),",
    "            ],",
    "          ),",
    "          Row(",
    "            children: <Widget>[",
    "              Expanded(",
    "                child: Row(",
    "                  children: <Widget>[",
    "                    Expanded(",
    "                      child: ControlSlider(",
    "                        label: 'Points',",
    "                        value: widget.model.points,",
    "                        min: 3,",
    "                        max: 20,",
    "                        precision: 1,",
    "                        onChanged: (double value) {",
    "                          widget.model.points = value;",
    "                        },",
    "                      ),",
    "                    ),",
    "                    Tooltip(",
    "                      message:",
    "                          'Round the number of points to the nearest integer.',",
    "                      child: Padding(",
    "                        padding: const EdgeInsets.all(8.0),",
    "                        child: OutlinedButton(",
    "                          child: const Text('Nearest'),",
    "                          onPressed: () {",
    "                            widget.model.points =",
    "                                widget.model.points.roundToDouble();",
    "                          },",
    "                        ),",
    "                      ),",
    "                    ),",
    "                  ],",
    "                ),",
    "              ),",
    "              Expanded(",
    "                child: ControlSlider(",
    "                  label: 'Inner Radius',",
    "                  value: widget.model.innerRadiusRatio,",
    "                  onChanged: (double value) {",
    "                    widget.model.innerRadiusRatio = value;",
    "                  },",
    "                ),",
    "              ),",
    "            ],",
    "          ),",
    "          ElevatedButton(",
    "            onPressed: () {",
    "              widget.model.reset();",
    "            },",
    "            child: const Text('Reset'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class OptionModel extends ChangeNotifier {",
    "  double get pointRounding => _pointRounding;",
    "  double _pointRounding = 0.0;",
    "  set pointRounding(double value) {",
    "    if (value != _pointRounding) {",
    "      _pointRounding = value;",
    "      if (_valleyRounding + _pointRounding > 1) {",
    "        _valleyRounding = 1.0 - _pointRounding;",
    "      }",
    "      notifyListeners();",
    "    }",
    "  }",
    "",
    "  double get valleyRounding => _valleyRounding;",
    "  double _valleyRounding = 0.0;",
    "  set valleyRounding(double value) {",
    "    if (value != _valleyRounding) {",
    "      _valleyRounding = value;",
    "      if (_valleyRounding + _pointRounding > 1) {",
    "        _pointRounding = 1.0 - _valleyRounding;",
    "      }",
    "      notifyListeners();",
    "    }",
    "  }",
    "",
    "  double get squash => _squash;",
    "  double _squash = 0.0;",
    "  set squash(double value) {",
    "    if (value != _squash) {",
    "      _squash = value;",
    "      notifyListeners();",
    "    }",
    "  }",
    "",
    "  double get rotation => _rotation;",
    "  double _rotation = 0.0;",
    "  set rotation(double value) {",
    "    if (value != _rotation) {",
    "      _rotation = value;",
    "      notifyListeners();",
    "    }",
    "  }",
    "",
    "  double get innerRadiusRatio => _innerRadiusRatio;",
    "  double _innerRadiusRatio = 0.4;",
    "  set innerRadiusRatio(double value) {",
    "    if (value != _innerRadiusRatio) {",
    "      _innerRadiusRatio = value.clamp(0.0001, double.infinity);",
    "      notifyListeners();",
    "    }",
    "  }",
    "",
    "  double get points => _points;",
    "  double _points = 5;",
    "  set points(double value) {",
    "    if (value != _points) {",
    "      _points = value;",
    "      notifyListeners();",
    "    }",
    "  }",
    "",
    "  String get starCode {",
    "    return 'Container(\\n'",
    "        '  decoration: ShapeDecoration(\\n'",
    "        '    shape: StarBorder(\\n'",
    "        '      points: ${points.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      rotation: ${rotation.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      innerRadiusRatio: ${innerRadiusRatio.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      pointRounding: ${pointRounding.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      valleyRounding: ${valleyRounding.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      squash: ${squash.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '    ),\\n'",
    "        '  ),\\n'",
    "        ');';",
    "  }",
    "",
    "  String get polygonCode {",
    "    return 'Container(\\n'",
    "        '  decoration: ShapeDecoration(\\n'",
    "        '    shape: StarBorder.polygon(\\n'",
    "        '      sides: ${points.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      rotation: ${rotation.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      cornerRounding: ${pointRounding.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '      squash: ${squash.toStringAsFixed(_kParameterPrecision)},\\n'",
    "        '    ),\\n'",
    "        '  ),\\n'",
    "        ');';",
    "  }",
    "",
    "  void reset() {",
    "    final OptionModel defaultModel = OptionModel();",
    "    _pointRounding = defaultModel.pointRounding;",
    "    _valleyRounding = defaultModel.valleyRounding;",
    "    _rotation = defaultModel.rotation;",
    "    _squash = defaultModel.squash;",
    "    _innerRadiusRatio = defaultModel._innerRadiusRatio;",
    "    _points = defaultModel.points;",
    "    notifyListeners();",
    "  }",
    "}",
    "",
    "class ControlSlider extends StatelessWidget {",
    "  const ControlSlider({",
    "    super.key,",
    "    required this.label,",
    "    required this.value,",
    "    required this.onChanged,",
    "    this.min = 0.0,",
    "    this.max = 1.0,",
    "    this.precision = _kParameterPrecision,",
    "  });",
    "",
    "  final String label;",
    "  final double value;",
    "  final void Function(double value) onChanged;",
    "  final double min;",
    "  final double max;",
    "  final int precision;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Padding(",
    "      padding: const EdgeInsets.all(4.0),",
    "      child: Row(",
    "        mainAxisSize: MainAxisSize.min,",
    "        children: <Widget>[",
    "          Expanded(",
    "            flex: 2,",
    "            child: Text(",
    "              label,",
    "              textAlign: TextAlign.end,",
    "            ),",
    "          ),",
    "          Expanded(",
    "            flex: 5,",
    "            child: Slider(",
    "              onChanged: onChanged,",
    "              min: min,",
    "              max: max,",
    "              value: value,",
    "            ),",
    "          ),",
    "          Expanded(",
    "            child: Text(",
    "              value.toStringAsFixed(precision),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter StarBorder Example"
},
"Flutter GrowthDirection Example": {
  "prefix": "flutter-GrowthDirection",
  "body": [
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/rendering.dart';",
    "",
    "/// Flutter code sample for [GrowthDirection]s.",
    "",
    "void main() => runApp(const ExampleApp());",
    "",
    "class ExampleApp extends StatelessWidget {",
    "  const ExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MyWidget(),",
    "    );",
    "  }",
    "}",
    "",
    "class MyWidget extends StatefulWidget {",
    "  const MyWidget({super.key});",
    "",
    "  @override",
    "  State<MyWidget> createState() => _MyWidgetState();",
    "}",
    "",
    "class _MyWidgetState extends State<MyWidget> {",
    "  final List<String> _alphabet = <String>[",
    "    'A',",
    "    'B',",
    "    'C',",
    "    'D',",
    "    'E',",
    "    'F',",
    "    'G',",
    "    'H',",
    "    'I',",
    "    'J',",
    "    'K',",
    "    'L',",
    "    'M',",
    "    'N',",
    "    'O',",
    "    'P',",
    "    'Q',",
    "    'R',",
    "    'S',",
    "    'T',",
    "    'U',",
    "    'V',",
    "    'W',",
    "    'X',",
    "    'Y',",
    "    'Z',",
    "  ];",
    "  final Widget _spacer = const SizedBox.square(dimension: 10);",
    "  final UniqueKey _center = UniqueKey();",
    "  AxisDirection _axisDirection = AxisDirection.down;",
    "",
    "  Widget _getArrows(AxisDirection axisDirection) {",
    "    final Widget arrow;",
    "    switch (axisDirection) {",
    "      case AxisDirection.up:",
    "        arrow = const Icon(Icons.arrow_upward_rounded);",
    "        return Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.down:",
    "        arrow = const Icon(Icons.arrow_downward_rounded);",
    "        return Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.left:",
    "        arrow = const Icon(Icons.arrow_back_rounded);",
    "        return Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.right:",
    "        arrow = const Icon(Icons.arrow_forward_rounded);",
    "        return Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "    }",
    "  }",
    "",
    "  void _onAxisDirectionChanged(AxisDirection? axisDirection) {",
    "    if (axisDirection != null && axisDirection != _axisDirection) {",
    "      setState(() {",
    "        // Respond to change in axis direction.",
    "        _axisDirection = axisDirection;",
    "      });",
    "    }",
    "  }",
    "",
    "  Widget _getLeading(SliverConstraints constraints, bool isForward) {",
    "    return Container(",
    "      color: isForward ? Colors.orange[300] : Colors.green[400],",
    "      padding: const EdgeInsets.all(8.0),",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceBetween,",
    "        children: <Widget>[",
    "          Text(constraints.axis.toString()),",
    "          _spacer,",
    "          Text(constraints.axisDirection.toString()),",
    "          _spacer,",
    "          Text(constraints.growthDirection.toString()),",
    "          _spacer,",
    "          _getArrows(",
    "            isForward",
    "                ? _axisDirection",
    "                // This method is available to conveniently flip an AxisDirection",
    "                // into its opposite direction.",
    "                : flipAxisDirection(_axisDirection),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _getRadioRow() {",
    "    return DefaultTextStyle(",
    "      style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.white),",
    "      child: RadioTheme(",
    "        data: RadioThemeData(",
    "          fillColor: MaterialStateProperty.all<Color>(Colors.white),",
    "        ),",
    "        child: Padding(",
    "          padding: const EdgeInsets.all(8.0),",
    "          child: Row(",
    "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "            children: <Widget>[",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.up,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('up'),",
    "              _spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.down,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('down'),",
    "              _spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.left,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('left'),",
    "              _spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.right,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('right'),",
    "              _spacer,",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _getList({required bool isForward}) {",
    "    // The SliverLayoutBuilder is not necessary, and is here to allow us to see",
    "    // the SliverConstraints & directional information that is provided to the",
    "    // SliverList when laying out.",
    "    return SliverLayoutBuilder(",
    "      builder: (BuildContext context, SliverConstraints constraints) {",
    "        return SliverList.builder(",
    "          itemCount: 27,",
    "          itemBuilder: (BuildContext context, int index) {",
    "            final Widget child;",
    "            if (index == 0) {",
    "              child = _getLeading(constraints, isForward);",
    "            } else {",
    "              child = Container(",
    "                color: isForward",
    "                    ? (index.isEven ? Colors.amber[100] : Colors.amberAccent)",
    "                    : (index.isEven ? Colors.green[100] : Colors.lightGreen),",
    "                padding: const EdgeInsets.all(8.0),",
    "                child: Center(child: Text(_alphabet[index - 1])),",
    "              );",
    "            }",
    "            return Padding(",
    "              padding: const EdgeInsets.all(8.0),",
    "              child: child,",
    "            );",
    "          },",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('GrowthDirections'),",
    "        bottom: PreferredSize(",
    "          preferredSize: const Size.fromHeight(50),",
    "          child: Padding(",
    "            padding: const EdgeInsets.all(8.0),",
    "            child: _getRadioRow(),",
    "          ),",
    "        ),",
    "      ),",
    "      body: CustomScrollView(",
    "        // This method is available to conveniently determine if an scroll",
    "        // view is reversed by its AxisDirection.",
    "        reverse: axisDirectionIsReversed(_axisDirection),",
    "        // This method is available to conveniently convert an AxisDirection",
    "        // into its Axis.",
    "        scrollDirection: axisDirectionToAxis(_axisDirection),",
    "        // Places the leading edge of the center sliver in the middle of the",
    "        // viewport. Changing this value between 0.0 (the default) and 1.0",
    "        // changes the position of the inflection point between GrowthDirections",
    "        // in the viewport when the slivers are laid out.",
    "        anchor: 0.5,",
    "        center: _center,",
    "        slivers: <Widget>[",
    "          _getList(isForward: false),",
    "          SliverToBoxAdapter(",
    "            // This sliver will be located at the anchor. The scroll position",
    "            // will progress in either direction from this point.",
    "            key: _center,",
    "            child: const Padding(",
    "              padding: EdgeInsets.all(8.0),",
    "              child: Center(",
    "                  child:",
    "                      Text('0', style: TextStyle(fontWeight: FontWeight.bold))),",
    "            ),",
    "          ),",
    "          _getList(isForward: true),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter GrowthDirection Example"
},
"Flutter ScrollDirection Example": {
  "prefix": "flutter-ScrollDirection",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/rendering.dart';",
    "",
    "/// Flutter code sample for [ScrollDirection].",
    "",
    "void main() => runApp(const ExampleApp());",
    "",
    "class ExampleApp extends StatelessWidget {",
    "  const ExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MyWidget(),",
    "    );",
    "  }",
    "}",
    "",
    "class MyWidget extends StatefulWidget {",
    "  const MyWidget({super.key});",
    "",
    "  @override",
    "  State<MyWidget> createState() => _MyWidgetState();",
    "}",
    "",
    "class _MyWidgetState extends State<MyWidget> {",
    "  final List<String> alphabet = <String>[",
    "    'A',",
    "    'B',",
    "    'C',",
    "    'D',",
    "    'E',",
    "    'F',",
    "    'G',",
    "    'H',",
    "    'I',",
    "    'J',",
    "    'K',",
    "    'L',",
    "    'M',",
    "    'N',",
    "    'O',",
    "    'P',",
    "    'Q',",
    "    'R',",
    "    'S',",
    "    'T',",
    "    'U',",
    "    'V',",
    "    'W',",
    "    'X',",
    "    'Y',",
    "    'Z',",
    "  ];",
    "  final Widget spacer = const SizedBox.square(dimension: 10);",
    "  ScrollDirection scrollDirection = ScrollDirection.idle;",
    "  AxisDirection _axisDirection = AxisDirection.down;",
    "",
    "  Widget _getArrows() {",
    "    final Widget arrow;",
    "    switch (_axisDirection) {",
    "      case AxisDirection.up:",
    "        arrow = const Icon(Icons.arrow_upward_rounded);",
    "        return Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.down:",
    "        arrow = const Icon(Icons.arrow_downward_rounded);",
    "        return Row(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.left:",
    "        arrow = const Icon(Icons.arrow_back_rounded);",
    "        return Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "      case AxisDirection.right:",
    "        arrow = const Icon(Icons.arrow_forward_rounded);",
    "        return Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[arrow, arrow],",
    "        );",
    "    }",
    "  }",
    "",
    "  void _onAxisDirectionChanged(AxisDirection? axisDirection) {",
    "    if (axisDirection != null && axisDirection != _axisDirection) {",
    "      setState(() {",
    "        // Respond to change in axis direction.",
    "        _axisDirection = axisDirection;",
    "      });",
    "    }",
    "  }",
    "",
    "  Widget _getLeading() {",
    "    return Container(",
    "      color: Colors.blue[100],",
    "      padding: const EdgeInsets.all(8.0),",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.spaceBetween,",
    "        children: <Widget>[",
    "          Text(axisDirectionToAxis(_axisDirection).toString()),",
    "          spacer,",
    "          Text(_axisDirection.toString()),",
    "          spacer,",
    "          const Text('GrowthDirection.forward'),",
    "          spacer,",
    "          Text(scrollDirection.toString()),",
    "          spacer,",
    "          _getArrows(),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget _getRadioRow() {",
    "    return DefaultTextStyle(",
    "      style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.white),",
    "      child: RadioTheme(",
    "        data: RadioThemeData(",
    "          fillColor: MaterialStateProperty.all<Color>(Colors.white),",
    "        ),",
    "        child: Padding(",
    "          padding: const EdgeInsets.all(8.0),",
    "          child: Row(",
    "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "            children: <Widget>[",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.up,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('up'),",
    "              spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.down,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('down'),",
    "              spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.left,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('left'),",
    "              spacer,",
    "              Radio<AxisDirection>(",
    "                value: AxisDirection.right,",
    "                groupValue: _axisDirection,",
    "                onChanged: _onAxisDirectionChanged,",
    "              ),",
    "              const Text('right'),",
    "              spacer,",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  bool _handleNotification(UserScrollNotification notification) {",
    "    if (notification.direction != scrollDirection) {",
    "      setState(() {",
    "        scrollDirection = notification.direction;",
    "      });",
    "    }",
    "    return false;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('ScrollDirections'),",
    "        bottom: PreferredSize(",
    "          preferredSize: const Size.fromHeight(50),",
    "          child: Padding(",
    "            padding: const EdgeInsets.all(8.0),",
    "            child: _getRadioRow(),",
    "          ),",
    "        ),",
    "      ),",
    "      body: NotificationListener<UserScrollNotification>(",
    "        onNotification: _handleNotification,",
    "        // Also works for ListView.builder, which creates a SliverList for itself.",
    "        // A CustomScrollView allows multiple slivers to be composed together.",
    "        child: CustomScrollView(",
    "          // This method is available to conveniently determine if an scroll",
    "          // view is reversed by its AxisDirection.",
    "          reverse: axisDirectionIsReversed(_axisDirection),",
    "          // This method is available to conveniently convert an AxisDirection",
    "          // into its Axis.",
    "          scrollDirection: axisDirectionToAxis(_axisDirection),",
    "          slivers: <Widget>[",
    "            SliverList.builder(",
    "              itemCount: 27,",
    "              itemBuilder: (BuildContext context, int index) {",
    "                final Widget child;",
    "                if (index == 0) {",
    "                  child = _getLeading();",
    "                } else {",
    "                  child = Container(",
    "                    color:",
    "                        index.isEven ? Colors.amber[100] : Colors.amberAccent,",
    "                    padding: const EdgeInsets.all(8.0),",
    "                    child: Center(child: Text(alphabet[index - 1])),",
    "                  );",
    "                }",
    "                return Padding(",
    "                  padding: const EdgeInsets.all(8.0),",
    "                  child: child,",
    "                );",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ScrollDirection Example"
},
"Flutter SliverGridDelegateWithFixedCrossAxisCount Example": {
  "prefix": "flutter-SliverGridDelegateWithFixedCrossAxisCount",
  "scope":"Dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [SliverGridDelegateWithFixedCrossAxisCount].",
    "",
    "void main() =>",
    "    runApp(const SliverGridDelegateWithFixedCrossAxisCountExampleApp());",
    "",
    "class SliverGridDelegateWithFixedCrossAxisCountExampleApp",
    "    extends StatelessWidget {",
    "  const SliverGridDelegateWithFixedCrossAxisCountExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "            title: const Text(",
    "          'SliverGridDelegateWithFixedCrossAxisCount Sample',",
    "          maxLines: 2,",
    "          textAlign: TextAlign.center,",
    "        )),",
    "        body: const SliverGridDelegateWithFixedCrossAxisCountExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverGridDelegateWithFixedCrossAxisCountExample extends StatelessWidget {",
    "  const SliverGridDelegateWithFixedCrossAxisCountExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return GridView(",
    "      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
    "        crossAxisCount: 4,",
    "        childAspectRatio: 0.5,",
    "      ),",
    "      children: List<Widget>.generate(20, (int i) {",
    "        return Builder(builder: (BuildContext context) {",
    "          return Text('$i');",
    "        });",
    "      }),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter SliverGridDelegateWithFixedCrossAxisCount Example"
}
,"Flutter CupertinoActivityIndicator Example": {
  "prefix": "flutter-CupertinoActivityIndicator",
  "Scope": "dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoActivityIndicator].",
    "",
    "void main() => runApp(const CupertinoIndicatorApp());",
    "",
    "class CupertinoIndicatorApp extends StatelessWidget {",
    "  const CupertinoIndicatorApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoIndicatorExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoIndicatorExample extends StatelessWidget {",
    "  const CupertinoIndicatorExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoPageScaffold(",
    "      navigationBar: CupertinoNavigationBar(",
    "        middle: Text('CupertinoActivityIndicator Sample'),",
    "      ),",
    "      child: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "          children: <Widget>[",
    "            Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                // Cupertino activity indicator with default properties.",
    "                CupertinoActivityIndicator(),",
    "                SizedBox(height: 10),",
    "                Text('Default'),",
    "              ],",
    "            ),",
    "            Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                // Cupertino activity indicator with custom radius and color.",
    "                CupertinoActivityIndicator(",
    "                    radius: 20.0, color: CupertinoColors.activeBlue),",
    "                SizedBox(height: 10),",
    "                Text(",
    "                  'radius: 20.0\\ncolor: CupertinoColors.activeBlue',",
    "                  textAlign: TextAlign.center,",
    "                ),",
    "              ],",
    "            ),",
    "            Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                // Cupertino activity indicator with custom radius and disabled",
    "                // animation.",
    "                CupertinoActivityIndicator(radius: 20.0, animating: false),",
    "                SizedBox(height: 10),",
    "                Text(",
    "                  'radius: 20.0\\nanimating: false',",
    "                  textAlign: TextAlign.center,",
    "                ),",
    "              ],",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoActivityIndicator Example"
},
"Flutter CupertinoTabBar Example": {
  "prefix": "flutter-CupertinoTabBar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTabBar].",
    "",
    "void main() => runApp(const CupertinoTabBarApp());",
    "",
    "class CupertinoTabBarApp extends StatelessWidget {",
    "  const CupertinoTabBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoTabBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoTabBarExample extends StatelessWidget {",
    "  const CupertinoTabBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: CupertinoNavigationBar(",
    "        // Try removing opacity to observe the lack of a blur effect and of sliding content.",
    "        backgroundColor: CupertinoColors.link,",
    "        middle: const Text('CupertinoNavigationBar Sample'),",
    "      ),",
    "      child: CupertinoTabScaffold(",
    "        tabBar: CupertinoTabBar(",
    "          items: const <BottomNavigationBarItem>[",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.star_fill),",
    "              label: 'Favorites',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.clock_solid),",
    "              label: 'Recents',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.person_alt_circle_fill),",
    "              label: 'Contacts',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.circle_grid_3x3_fill),",
    "              label: 'Keypad',",
    "            ),",
    "          ],",
    "        ),",
    "        tabBuilder: (BuildContext context, int index) {",
    "          return CupertinoTabView(",
    "            builder: (BuildContext context) {",
    "              return Center(",
    "                child: Text('Content of tab $index'),",
    "              );",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoTabBar Example"
},
"Flutter Cupertino AppBar Example": {
  "prefix": "cupertino appbar",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTabBar].",
    "",
    "void main() => runApp(const CupertinoTabBarApp());",
    "",
    "class CupertinoTabBarApp extends StatelessWidget {",
    "  const CupertinoTabBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoTabBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoTabBarExample extends StatelessWidget {",
    "  const CupertinoTabBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: CupertinoNavigationBar(",
    "        // Try removing opacity to observe the lack of a blur effect and of sliding content.",
    "        backgroundColor: CupertinoColors.link,",
    "        middle: const Text('CupertinoNavigationBar Sample'),",
    "      ),",
    "      child: CupertinoTabScaffold(",
    "        tabBar: CupertinoTabBar(",
    "          items: const <BottomNavigationBarItem>[",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.star_fill),",
    "              label: 'Favorites',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.clock_solid),",
    "              label: 'Recents',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.person_alt_circle_fill),",
    "              label: 'Contacts',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.circle_grid_3x3_fill),",
    "              label: 'Keypad',",
    "            ),",
    "          ],",
    "        ),",
    "        tabBuilder: (BuildContext context, int index) {",
    "          return CupertinoTabView(",
    "            builder: (BuildContext context) {",
    "              return Center(",
    "                child: Text('Content of tab $index'),",
    "              );",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Cupertino AppBar Example"
},
"Flutter Cupertino BottomNavigation Bar Example": {
  "prefix": "flutter-cupertino bottom navigation bar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTabBar].",
    "",
    "void main() => runApp(const CupertinoTabBarApp());",
    "",
    "class CupertinoTabBarApp extends StatelessWidget {",
    "  const CupertinoTabBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoTabBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoTabBarExample extends StatelessWidget {",
    "  const CupertinoTabBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: CupertinoNavigationBar(",
    "        // Try removing opacity to observe the lack of a blur effect and of sliding content.",
    "        backgroundColor: CupertinoColors.link,",
    "        middle: const Text('CupertinoNavigationBar Sample'),",
    "      ),",
    "      child: CupertinoTabScaffold(",
    "        tabBar: CupertinoTabBar(",
    "          items: const <BottomNavigationBarItem>[",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.star_fill),",
    "              label: 'Favorites',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.clock_solid),",
    "              label: 'Recents',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.person_alt_circle_fill),",
    "              label: 'Contacts',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.circle_grid_3x3_fill),",
    "              label: 'Keypad',",
    "            ),",
    "          ],",
    "        ),",
    "        tabBuilder: (BuildContext context, int index) {",
    "          return CupertinoTabView(",
    "            builder: (BuildContext context) {",
    "              return Center(",
    "                child: Text('Content of tab $index'),",
    "              );",
    "            },",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Cupertino BottomNavigation Bar Example"
},
"Flutter Cupertino Buttons Bar Example": {
  "prefix": "flutter-CupertinoButton",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoButton].",
    "",
    "void main() => runApp(const CupertinoButtonApp());",
    "",
    "class CupertinoButtonApp extends StatelessWidget {",
    "  const CupertinoButtonApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoButtonExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoButtonExample extends StatelessWidget {",
    "  const CupertinoButtonExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoButton Sample'),",
    "      ),",
    "      child: Center(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            const CupertinoButton(",
    "              onPressed: null,",
    "              child: Text('Disabled'),",
    "            ),",
    "            const SizedBox(height: 30),",
    "            const CupertinoButton.filled(",
    "              onPressed: null,",
    "              child: Text('Disabled'),",
    "            ),",
    "            const SizedBox(height: 30),",
    "            CupertinoButton(",
    "              onPressed: () {},",
    "              child: const Text('Enabled'),",
    "            ),",
    "            const SizedBox(height: 30),",
    "            CupertinoButton.filled(",
    "              onPressed: () {},",
    "              child: const Text('Enabled'),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Cupertino Buttons  Example"
},
"Flutter CupertinoContextMenu  Example": {
  "prefix": "flutter-CupertinoContextMenu",
  "scope":"dart".
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [CupertinoContextMenu].",
    "",
    "void main() => runApp(const ContextMenuApp());",
    "",
    "class ContextMenuApp extends StatelessWidget {",
    "  const ContextMenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: ContextMenuExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ContextMenuExample extends StatelessWidget {",
    "  const ContextMenuExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoContextMenu Sample'),",
    "      ),",
    "      child: Center(",
    "        child: SizedBox(",
    "          width: 100,",
    "          height: 100,",
    "          child: CupertinoContextMenu(",
    "            actions: <Widget>[",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                isDefaultAction: true,",
    "                trailingIcon: CupertinoIcons.doc_on_clipboard_fill,",
    "                child: const Text('Copy'),",
    "              ),",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                trailingIcon: CupertinoIcons.share,",
    "                child: const Text('Share'),",
    "              ),",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                trailingIcon: CupertinoIcons.heart,",
    "                child: const Text('Favorite'),",
    "              ),",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                isDestructiveAction: true,",
    "                trailingIcon: CupertinoIcons.delete,",
    "                child: const Text('Delete'),",
    "              ),",
    "            ],",
    "            child: const ColoredBox(",
    "              color: CupertinoColors.systemYellow,",
    "              child: FlutterLogo(size: 500.0),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoContextMenu  Example"
},
"Flutter CupertinoContextMenu  Builder Example": {
  "prefix": "flutter-CupertinoContextMenu.Builder",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [CupertinoContextMenu].",
    "",
    "final DecorationTween _tween = DecorationTween(",
    "  begin: BoxDecoration(",
    "    color: CupertinoColors.systemYellow,",
    "    boxShadow: const <BoxShadow>[],",
    "    borderRadius: BorderRadius.circular(20.0),",
    "  ),",
    "  end: BoxDecoration(",
    "    color: CupertinoColors.systemYellow,",
    "    boxShadow: CupertinoContextMenu.kEndBoxShadow,",
    "    borderRadius: BorderRadius.circular(20.0),",
    "  ),",
    ");",
    "",
    "void main() => runApp(const ContextMenuApp());",
    "",
    "class ContextMenuApp extends StatelessWidget {",
    "  const ContextMenuApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: ContextMenuExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ContextMenuExample extends StatelessWidget {",
    "  const ContextMenuExample({super.key});",
    "",
    "  // Or just do this inline in the builder below?",
    "  static Animation<Decoration> _boxDecorationAnimation(",
    "      Animation<double> animation) {",
    "    return _tween.animate(",
    "      CurvedAnimation(",
    "        parent: animation,",
    "        curve: Interval(",
    "          0.0,",
    "          CupertinoContextMenu.animationOpensAt,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoContextMenu Sample'),",
    "      ),",
    "      child: Center(",
    "        child: SizedBox(",
    "          width: 100,",
    "          height: 100,",
    "          child: CupertinoContextMenu.builder(",
    "            actions: <Widget>[",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                isDefaultAction: true,",
    "                trailingIcon: CupertinoIcons.doc_on_clipboard_fill,",
    "                child: const Text('Copy'),",
    "              ),",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                trailingIcon: CupertinoIcons.share,",
    "                child: const Text('Share'),",
    "              ),",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                trailingIcon: CupertinoIcons.heart,",
    "                child: const Text('Favorite'),",
    "              ),",
    "              CupertinoContextMenuAction(",
    "                onPressed: () {",
    "                  Navigator.pop(context);",
    "                },",
    "                isDestructiveAction: true,",
    "                trailingIcon: CupertinoIcons.delete,",
    "                child: const Text('Delete'),",
    "              ),",
    "            ],",
    "            builder: (BuildContext context, Animation<double> animation) {",
    "              final Animation<Decoration> boxDecorationAnimation =",
    "                  _boxDecorationAnimation(animation);",
    "",
    "              return Container(",
    "                decoration:",
    "                    animation.value < CupertinoContextMenu.animationOpensAt",
    "                        ? boxDecorationAnimation.value",
    "                        : null,",
    "                child: Container(",
    "                  decoration: BoxDecoration(",
    "                    color: CupertinoColors.systemYellow,",
    "                    borderRadius: BorderRadius.circular(20.0),",
    "                  ),",
    "                  child: const FlutterLogo(size: 500.0),",
    "                ),",
    "              );",
    "            },",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoContextMenu  Builder Example"
},
"Flutter CupertinoDatePicker  Example": {
  "prefix": "flutter-CupertinoDatePicker",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoDatePicker].",
    "",
    "void main() => runApp(const DatePickerApp());",
    "",
    "class DatePickerApp extends StatelessWidget {",
    "  const DatePickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: DatePickerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class DatePickerExample extends StatefulWidget {",
    "  const DatePickerExample({super.key});",
    "",
    "  @override",
    "  State<DatePickerExample> createState() => _DatePickerExampleState();",
    "}",
    "",
    "class _DatePickerExampleState extends State<DatePickerExample> {",
    "  DateTime date = DateTime(2016, 10, 26);",
    "  DateTime time = DateTime(2016, 5, 10, 22, 35);",
    "  DateTime dateTime = DateTime(2016, 8, 3, 17, 45);",
    "",
    "  // This function displays a CupertinoModalPopup with a reasonable fixed height",
    "  // which hosts CupertinoDatePicker.",
    "  void _showDialog(Widget child) {",
    "    showCupertinoModalPopup<void>(",
    "      context: context,",
    "      builder: (BuildContext context) => Container(",
    "        height: 216,",
    "        padding: const EdgeInsets.only(top: 6.0),",
    "        // The Bottom margin is provided to align the popup above the system",
    "        // navigation bar.",
    "        margin: EdgeInsets.only(",
    "          bottom: MediaQuery.of(context).viewInsets.bottom,",
    "        ),",
    "        // Provide a background color for the popup.",
    "        color: CupertinoColors.systemBackground.resolveFrom(context),",
    "        // Use a SafeArea widget to avoid system overlaps.",
    "        child: SafeArea(",
    "          top: false,",
    "          child: child,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoDatePicker Sample'),",
    "      ),",
    "      child: DefaultTextStyle(",
    "        style: TextStyle(",
    "          color: CupertinoColors.label.resolveFrom(context),",
    "          fontSize: 22.0,",
    "        ),",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              _DatePickerItem(",
    "                children: <Widget>[",
    "                  const Text('Date'),",
    "                  CupertinoButton(",
    "                    // Display a CupertinoDatePicker in date picker mode.",
    "                    onPressed: () => _showDialog(",
    "                      CupertinoDatePicker(",
    "                        initialDateTime: date,",
    "                        mode: CupertinoDatePickerMode.date,",
    "                        use24hFormat: true,",
    "                        // This shows day of week alongside day of month",
    "                        showDayOfWeek: true,",
    "                        // This is called when the user changes the date.",
    "                        onDateTimeChanged: (DateTime newDate) {",
    "                          setState(() => date = newDate);",
    "                        },",
    "                      ),",
    "                    ),",
    "                    // In this example, the date is formatted manually. You can",
    "                    // use the intl package to format the value based on the",
    "                    // user's locale settings.",
    "                    child: Text(",
    "                      '${date.month}-${date.day}-${date.year}',",
    "                      style: const TextStyle(",
    "                        fontSize: 22.0,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "              _DatePickerItem(",
    "                children: <Widget>[",
    "                  const Text('Time'),",
    "                  CupertinoButton(",
    "                    // Display a CupertinoDatePicker in time picker mode.",
    "                    onPressed: () => _showDialog(",
    "                      CupertinoDatePicker(",
    "                        initialDateTime: time,",
    "                        mode: CupertinoDatePickerMode.time,",
    "                        use24hFormat: true,",
    "                        // This is called when the user changes the time.",
    "                        onDateTimeChanged: (DateTime newTime) {",
    "                          setState(() => time = newTime);",
    "                        },",
    "                      ),",
    "                    ),",
    "                    // In this example, the time value is formatted manually.",
    "                    // You can use the intl package to format the value based on",
    "                    // the user's locale settings.",
    "                    child: Text(",
    "                      '${time.hour}:${time.minute}',",
    "                      style: const TextStyle(",
    "                        fontSize: 22.0,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "              _DatePickerItem(",
    "                children: <Widget>[",
    "                  const Text('DateTime'),",
    "                  CupertinoButton(",
    "                    // Display a CupertinoDatePicker in dateTime picker mode.",
    "                    onPressed: () => _showDialog(",
    "                      CupertinoDatePicker(",
    "                        initialDateTime: dateTime,",
    "                        use24hFormat: true,",
    "                        // This is called when the user changes the dateTime.",
    "                        onDateTimeChanged: (DateTime newDateTime) {",
    "                          setState(() => dateTime = newDateTime);",
    "                        },",
    "                      ),",
    "                    ),",
    "                    // In this example, the time value is formatted manually. You",
    "                    // can use the intl package to format the value based on the",
    "                    // user's locale settings.",
    "                    child: Text(",
    "                      '${dateTime.month}-${dateTime.day}-${dateTime.year} ${dateTime.hour}:${dateTime.minute}',",
    "                      style: const TextStyle(",
    "                        fontSize: 22.0,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This class simply decorates a row of widgets.",
    "class _DatePickerItem extends StatelessWidget {",
    "  const _DatePickerItem({required this.children});",
    "",
    "  final List<Widget> children;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DecoratedBox(",
    "      decoration: const BoxDecoration(",
    "        border: Border(",
    "          top: BorderSide(",
    "            color: CupertinoColors.inactiveGray,",
    "            width: 0.0,",
    "          ),",
    "          bottom: BorderSide(",
    "            color: CupertinoColors.inactiveGray,",
    "            width: 0.0,",
    "          ),",
    "        ),",
    "      ),",
    "      child: Padding(",
    "        padding: const EdgeInsets.symmetric(horizontal: 16.0),",
    "        child: Row(",
    "          mainAxisAlignment: MainAxisAlignment.spaceBetween,",
    "          children: children,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    " "
  ],
  "description": "Flutter CupertinoDatePicker  Example"
},
"Flutter CupertinoTimerPicker  Example": {
  "prefix": "flutter-CupertinoTimerPicker",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTimerPicker].",
    "",
    "void main() => runApp(const TimerPickerApp());",
    "",
    "class TimerPickerApp extends StatelessWidget {",
    "  const TimerPickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: TimerPickerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TimerPickerExample extends StatefulWidget {",
    "  const TimerPickerExample({super.key});",
    "",
    "  @override",
    "  State<TimerPickerExample> createState() => _TimerPickerExampleState();",
    "}",
    "",
    "class _TimerPickerExampleState extends State<TimerPickerExample> {",
    "  Duration duration = const Duration(hours: 1, minutes: 23);",
    "",
    "  // This shows a CupertinoModalPopup with a reasonable fixed height which hosts",
    "  // a CupertinoTimerPicker.",
    "  void _showDialog(Widget child) {",
    "    showCupertinoModalPopup<void>(",
    "      context: context,",
    "      builder: (BuildContext context) => Container(",
    "        height: 216,",
    "        padding: const EdgeInsets.only(top: 6.0),",
    "        // The bottom margin is provided to align the popup above the system",
    "        // navigation bar.",
    "        margin: EdgeInsets.only(",
    "          bottom: MediaQuery.of(context).viewInsets.bottom,",
    "        ),",
    "        // Provide a background color for the popup.",
    "        color: CupertinoColors.systemBackground.resolveFrom(context),",
    "        // Use a SafeArea widget to avoid system overlaps.",
    "        child: SafeArea(",
    "          top: false,",
    "          child: child,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoTimerPicker Sample'),",
    "      ),",
    "      child: DefaultTextStyle(",
    "        style: TextStyle(",
    "          color: CupertinoColors.label.resolveFrom(context),",
    "          fontSize: 22.0,",
    "        ),",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              _TimerPickerItem(",
    "                children: <Widget>[",
    "                  const Text('Timer'),",
    "                  CupertinoButton(",
    "                    // Display a CupertinoTimerPicker with hour/minute mode.",
    "                    onPressed: () => _showDialog(",
    "                      CupertinoTimerPicker(",
    "                        mode: CupertinoTimerPickerMode.hm,",
    "                        initialTimerDuration: duration,",
    "                        // This is called when the user changes the timer's",
    "                        // duration.",
    "                        onTimerDurationChanged: (Duration newDuration) {",
    "                          setState(() => duration = newDuration);",
    "                        },",
    "                      ),",
    "                    ),",
    "                    // In this example, the timer's value is formatted manually.",
    "                    // You can use the intl package to format the value based on",
    "                    // the user's locale settings.",
    "                    child: Text(",
    "                      '$duration',",
    "                      style: const TextStyle(",
    "                        fontSize: 22.0,",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// This class simply decorates a row of widgets.",
    "class _TimerPickerItem extends StatelessWidget {",
    "  const _TimerPickerItem({required this.children});",
    "",
    "  final List<Widget> children;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return DecoratedBox(",
    "      decoration: const BoxDecoration(",
    "        border: Border(",
    "          top: BorderSide(",
    "            color: CupertinoColors.inactiveGray,",
    "            width: 0.0,",
    "          ),",
    "          bottom: BorderSide(",
    "            color: CupertinoColors.inactiveGray,",
    "            width: 0.0,",
    "          ),",
    "        ),",
    "      ),",
    "      child: Padding(",
    "        padding: const EdgeInsets.symmetric(horizontal: 16.0),",
    "        child: Row(",
    "          mainAxisAlignment: MainAxisAlignment.spaceBetween,",
    "          children: children,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoTimerPicker  Example"
},
"Flutter CupertinoActionSheet  Example": {
  "prefix": "flutter-CupertinoActionSheet",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoActionSheet].",
    "",
    "void main() => runApp(const ActionSheetApp());",
    "",
    "class ActionSheetApp extends StatelessWidget {",
    "  const ActionSheetApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: ActionSheetExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ActionSheetExample extends StatelessWidget {",
    "  const ActionSheetExample({super.key});",
    "",
    "  // This shows a CupertinoModalPopup which hosts a CupertinoActionSheet.",
    "  void _showActionSheet(BuildContext context) {",
    "    showCupertinoModalPopup<void>(",
    "      context: context,",
    "      builder: (BuildContext context) => CupertinoActionSheet(",
    "        title: const Text('Title'),",
    "        message: const Text('Message'),",
    "        actions: <CupertinoActionSheetAction>[",
    "          CupertinoActionSheetAction(",
    "            /// This parameter indicates the action would be a default",
    "            /// default behavior, turns the action's text to bold text.",
    "            isDefaultAction: true,",
    "            onPressed: () {",
    "              Navigator.pop(context);",
    "            },",
    "            child: const Text('Default Action'),",
    "          ),",
    "          CupertinoActionSheetAction(",
    "            onPressed: () {",
    "              Navigator.pop(context);",
    "            },",
    "            child: const Text('Action'),",
    "          ),",
    "          CupertinoActionSheetAction(",
    "            /// This parameter indicates the action would perform",
    "            /// a destructive action such as delete or exit and turns",
    "            /// the action's text color to red.",
    "            isDestructiveAction: true,",
    "            onPressed: () {",
    "              Navigator.pop(context);",
    "            },",
    "            child: const Text('Destructive Action'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoActionSheet Sample'),",
    "      ),",
    "      child: Center(",
    "        child: CupertinoButton(",
    "          onPressed: () => _showActionSheet(context),",
    "          child: const Text('CupertinoActionSheet'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoActionSheet  Example"
},
"Flutter CupertinoAlertDialog  Example": {
  "prefix": "flutter-CupertinoAlertDialog",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoAlertDialog].",
    "",
    "void main() => runApp(const AlertDialogApp());",
    "",
    "class AlertDialogApp extends StatelessWidget {",
    "  const AlertDialogApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: AlertDialogExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class AlertDialogExample extends StatelessWidget {",
    "  const AlertDialogExample({super.key});",
    "",
    "  // This shows a CupertinoModalPopup which hosts a CupertinoAlertDialog.",
    "  void _showAlertDialog(BuildContext context) {",
    "    showCupertinoModalPopup<void>(",
    "      context: context,",
    "      builder: (BuildContext context) => CupertinoAlertDialog(",
    "        title: const Text('Alert'),",
    "        content: const Text('Proceed with destructive action?'),",
    "        actions: <CupertinoDialogAction>[",
    "          CupertinoDialogAction(",
    "            /// This parameter indicates this action is the default,",
    "            /// and turns the action's text to bold text.",
    "            isDefaultAction: true,",
    "            onPressed: () {",
    "              Navigator.pop(context);",
    "            },",
    "            child: const Text('No'),",
    "          ),",
    "          CupertinoDialogAction(",
    "            /// This parameter indicates the action would perform",
    "            /// a destructive action such as deletion, and turns",
    "            /// the action's text color to red.",
    "            isDestructiveAction: true,",
    "            onPressed: () {",
    "              Navigator.pop(context);",
    "            },",
    "            child: const Text('Yes'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoAlertDialog Sample'),",
    "      ),",
    "      child: Center(",
    "        child: CupertinoButton(",
    "          onPressed: () => _showAlertDialog(context),",
    "          child: const Text('CupertinoAlertDialog'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoAlertDialog  Example"
},
"Flutter CupertinoFormRow  Example": {
  "prefix": "flutter-CupertinoFormRow",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoFormRow].",
    "",
    "void main() => runApp(const CupertinoFormRowApp());",
    "",
    "class CupertinoFormRowApp extends StatelessWidget {",
    "  const CupertinoFormRowApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoFormRowExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoFormRowExample extends StatefulWidget {",
    "  const CupertinoFormRowExample({super.key});",
    "",
    "  @override",
    "  State<CupertinoFormRowExample> createState() =>",
    "      _CupertinoFormRowExampleState();",
    "}",
    "",
    "class _CupertinoFormRowExampleState extends State<CupertinoFormRowExample> {",
    "  bool airplaneMode = false;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoFormSection Sample'),",
    "      ),",
    "      // Add safe area widget to place the CupertinoFormSection below the navigation bar.",
    "      child: SafeArea(",
    "        child: CupertinoFormSection(",
    "          header: const Text('Connectivity'),",
    "          children: <Widget>[",
    "            CupertinoFormRow(",
    "              prefix: const PrefixWidget(",
    "                icon: CupertinoIcons.airplane,",
    "                title: 'Airplane Mode',",
    "                color: CupertinoColors.systemOrange,",
    "              ),",
    "              child: CupertinoSwitch(",
    "                value: airplaneMode,",
    "                onChanged: (bool value) {",
    "                  setState(() {",
    "                    airplaneMode = value;",
    "                  });",
    "                },",
    "              ),",
    "            ),",
    "            const CupertinoFormRow(",
    "              prefix: PrefixWidget(",
    "                icon: CupertinoIcons.wifi,",
    "                title: 'Wi-Fi',",
    "                color: CupertinoColors.systemBlue,",
    "              ),",
    "              error: Text('Home network unavailable'),",
    "              child: Row(",
    "                mainAxisAlignment: MainAxisAlignment.end,",
    "                children: <Widget>[",
    "                  Text('Not connected'),",
    "                  SizedBox(width: 5),",
    "                  Icon(CupertinoIcons.forward)",
    "                ],",
    "              ),",
    "            ),",
    "            const CupertinoFormRow(",
    "              prefix: PrefixWidget(",
    "                icon: CupertinoIcons.bluetooth,",
    "                title: 'Bluetooth',",
    "                color: CupertinoColors.activeBlue,",
    "              ),",
    "              helper: Padding(",
    "                padding: EdgeInsets.symmetric(vertical: 4.0),",
    "                child: Row(",
    "                  mainAxisAlignment: MainAxisAlignment.spaceBetween,",
    "                  children: <Widget>[",
    "                    Text('Headphone'),",
    "                    Text('Connected'),",
    "                  ],",
    "                ),",
    "              ),",
    "              child: Row(",
    "                mainAxisAlignment: MainAxisAlignment.end,",
    "                children: <Widget>[",
    "                  Text('On'),",
    "                  SizedBox(width: 5),",
    "                  Icon(CupertinoIcons.forward),",
    "                ],",
    "              ),",
    "            ),",
    "            const CupertinoFormRow(",
    "              prefix: PrefixWidget(",
    "                icon: CupertinoIcons.bluetooth,",
    "                title: 'Mobile Data',",
    "                color: CupertinoColors.systemGreen,",
    "              ),",
    "              child: Icon(CupertinoIcons.forward),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class PrefixWidget extends StatelessWidget {",
    "  const PrefixWidget({",
    "    super.key,",
    "    required this.icon,",
    "    required this.title,",
    "    required this.color,",
    "  });",
    "",
    "  final IconData icon;",
    "  final String title;",
    "  final Color color;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: <Widget>[",
    "        Container(",
    "          padding: const EdgeInsets.all(4.0),",
    "          decoration: BoxDecoration(",
    "            color: color,",
    "            borderRadius: BorderRadius.circular(4.0),",
    "          ),",
    "          child: Icon(icon, color: CupertinoColors.white),",
    "        ),",
    "        const SizedBox(width: 15),",
    "        Text(title)",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoFormRow  Example"
},
"Flutter CupertinoListTile  Example": {
  "prefix": "flutter-CupertinoListTile",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for base [CupertinoListSection] and [CupertinoListTile].",
    "",
    "void main() => runApp(const CupertinoListSectionBaseApp());",
    "",
    "class CupertinoListSectionBaseApp extends StatelessWidget {",
    "  const CupertinoListSectionBaseApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      home: ListSectionBaseExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListSectionBaseExample extends StatelessWidget {",
    "  const ListSectionBaseExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      child: CupertinoListSection(",
    "        header: const Text('My Reminders'),",
    "        children: <CupertinoListTile>[",
    "          CupertinoListTile(",
    "            title: const Text('Open pull request'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.activeGreen,",
    "            ),",
    "            trailing: const CupertinoListTileChevron(),",
    "            onTap: () => Navigator.of(context).push(",
    "              CupertinoPageRoute<void>(",
    "                builder: (BuildContext context) {",
    "                  return const _SecondPage(text: 'Open pull request');",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "          CupertinoListTile(",
    "            title: const Text('Push to master'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.systemRed,",
    "            ),",
    "            additionalInfo: const Text('Not available'),",
    "          ),",
    "          CupertinoListTile(",
    "            title: const Text('View last commit'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.activeOrange,",
    "            ),",
    "            additionalInfo: const Text('12 days ago'),",
    "            trailing: const CupertinoListTileChevron(),",
    "            onTap: () => Navigator.of(context).push(",
    "              CupertinoPageRoute<void>(",
    "                builder: (BuildContext context) {",
    "                  return const _SecondPage(text: 'Last commit');",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _SecondPage extends StatelessWidget {",
    "  const _SecondPage({required this.text});",
    "",
    "  final String text;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      child: Center(",
    "        child: Text(text),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoListTile  Example"
},
"Flutter CupertinoListTile  Example": {
  "prefix": "flutter-CupertinoListSection",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for base [CupertinoListSection] and [CupertinoListTile].",
    "",
    "void main() => runApp(const CupertinoListSectionBaseApp());",
    "",
    "class CupertinoListSectionBaseApp extends StatelessWidget {",
    "  const CupertinoListSectionBaseApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      home: ListSectionBaseExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListSectionBaseExample extends StatelessWidget {",
    "  const ListSectionBaseExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      child: CupertinoListSection(",
    "        header: const Text('My Reminders'),",
    "        children: <CupertinoListTile>[",
    "          CupertinoListTile(",
    "            title: const Text('Open pull request'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.activeGreen,",
    "            ),",
    "            trailing: const CupertinoListTileChevron(),",
    "            onTap: () => Navigator.of(context).push(",
    "              CupertinoPageRoute<void>(",
    "                builder: (BuildContext context) {",
    "                  return const _SecondPage(text: 'Open pull request');",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "          CupertinoListTile(",
    "            title: const Text('Push to master'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.systemRed,",
    "            ),",
    "            additionalInfo: const Text('Not available'),",
    "          ),",
    "          CupertinoListTile(",
    "            title: const Text('View last commit'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.activeOrange,",
    "            ),",
    "            additionalInfo: const Text('12 days ago'),",
    "            trailing: const CupertinoListTileChevron(),",
    "            onTap: () => Navigator.of(context).push(",
    "              CupertinoPageRoute<void>(",
    "                builder: (BuildContext context) {",
    "                  return const _SecondPage(text: 'Last commit');",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _SecondPage extends StatelessWidget {",
    "  const _SecondPage({required this.text});",
    "",
    "  final String text;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      child: Center(",
    "        child: Text(text),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoListTile  Example"
},
"Flutter CupertinoListTile  Example": {
  "prefix": "flutter-cupertino listtile with section",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for inset [CupertinoListSection] and [CupertinoListTile].",
    "",
    "void main() => runApp(const CupertinoListSectionInsetApp());",
    "",
    "class CupertinoListSectionInsetApp extends StatelessWidget {",
    "  const CupertinoListSectionInsetApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      home: ListSectionInsetExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListSectionInsetExample extends StatelessWidget {",
    "  const ListSectionInsetExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoListSection'),",
    "      ),",
    "      child: CupertinoListSection.insetGrouped(",
    "        header: const Text('My Reminders'),",
    "        children: <CupertinoListTile>[",
    "          CupertinoListTile.notched(",
    "            title: const Text('Open pull request'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.activeGreen,",
    "            ),",
    "            trailing: const CupertinoListTileChevron(),",
    "            onTap: () => Navigator.of(context).push(",
    "              CupertinoPageRoute<void>(",
    "                builder: (BuildContext context) {",
    "                  return const _SecondPage(text: 'Open pull request');",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "          CupertinoListTile.notched(",
    "            title: const Text('Push to master'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.systemRed,",
    "            ),",
    "            additionalInfo: const Text('Not available'),",
    "          ),",
    "          CupertinoListTile.notched(",
    "            title: const Text('View last commit'),",
    "            leading: Container(",
    "              width: double.infinity,",
    "              height: double.infinity,",
    "              color: CupertinoColors.activeOrange,",
    "            ),",
    "            additionalInfo: const Text('12 days ago'),",
    "            trailing: const CupertinoListTileChevron(),",
    "            onTap: () => Navigator.of(context).push(",
    "              CupertinoPageRoute<void>(",
    "                builder: (BuildContext context) {",
    "                  return const _SecondPage(text: 'Last commit');",
    "                },",
    "              ),",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _SecondPage extends StatelessWidget {",
    "  const _SecondPage({required this.text});",
    "",
    "  final String text;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      child: Center(",
    "        child: Text(text),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoListTile  Example"
},
"Flutter CupertinoNavigationBar Example": {
  "prefix": "flutter-CupertinoNavigationBar",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoNavigationBar].",
    "",
    "void main() => runApp(const NavBarApp());",
    "",
    "class NavBarApp extends StatelessWidget {",
    "  const NavBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: NavBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class NavBarExample extends StatefulWidget {",
    "  const NavBarExample({super.key});",
    "",
    "  @override",
    "  State<NavBarExample> createState() => _NavBarExampleState();",
    "}",
    "",
    "class _NavBarExampleState extends State<NavBarExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: CupertinoNavigationBar(",
    "        // Try removing opacity to observe the lack of a blur effect and of sliding content.",
    "        backgroundColor: CupertinoColors.activeOrange,",
    "        middle: const Text('CupertinoNavigationBar Sample'),",
    "      ),",
    "      child: Column(",
    "        children: <Widget>[",
    "          Container(height: 50, color: CupertinoColors.systemRed),",
    "          Container(height: 50, color: CupertinoColors.systemGreen),",
    "          Container(height: 50, color: CupertinoColors.systemBlue),",
    "          Container(height: 50, color: CupertinoColors.systemYellow),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoNavigationBar Example"
},
"Flutter CupertinoSliverNavigationBar Example": {
  "prefix": "flutter-CupertinoSliverNavigationBar",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSliverNavigationBar].",
    "",
    "void main() => runApp(const SliverNavBarApp());",
    "",
    "class SliverNavBarApp extends StatelessWidget {",
    "  const SliverNavBarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: SliverNavBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SliverNavBarExample extends StatelessWidget {",
    "  const SliverNavBarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      // A ScrollView that creates custom scroll effects using slivers.",
    "      child: CustomScrollView(",
    "        // A list of sliver widgets.",
    "        slivers: <Widget>[",
    "          const CupertinoSliverNavigationBar(",
    "            leading: Icon(CupertinoIcons.person_2),",
    "            // This title is visible in both collapsed and expanded states.",
    "            // When the \"middle\" parameter is omitted, the widget provided",
    "            // in the \"largeTitle\" parameter is used instead in the collapsed state.",
    "            largeTitle: Text(",
    "              'CupertinoSliverNavigationBar',",
    "              maxLines: 1,",
    "            ),",
    "            trailing: Icon(CupertinoIcons.add_circled),",
    "          ),",
    "          // This widget fills the remaining space in the viewport.",
    "          // Drag the scrollable area to collapse the CupertinoSliverNavigationBar.",
    "          SliverFillRemaining(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "              children: <Widget>[",
    "                const Text('Drag me up', textAlign: TextAlign.center),",
    "                CupertinoButton.filled(",
    "                  onPressed: () {",
    "                    Navigator.push(",
    "                      context,",
    "                      CupertinoPageRoute<Widget>(",
    "                        builder: (BuildContext context) {",
    "                          return const NextPage();",
    "                        },",
    "                      ),",
    "                    );",
    "                  },",
    "                  child: const Text('Go to Next Page'),",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class NextPage extends StatelessWidget {",
    "  const NextPage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final Brightness brightness = CupertinoTheme.brightnessOf(context);",
    "    return CupertinoPageScaffold(",
    "      child: CustomScrollView(",
    "        slivers: <Widget>[",
    "          CupertinoSliverNavigationBar(",
    "            backgroundColor: CupertinoColors.systemYellow,",
    "            border: Border(",
    "              bottom: BorderSide(",
    "                color: brightness == Brightness.light",
    "                    ? CupertinoColors.black",
    "                    : CupertinoColors.white,",
    "              ),",
    "            ),",
    "            // The middle widget is visible in both collapsed and expanded states.",
    "            middle: const Text('Contacts Group'),",
    "            // When the \"middle\" parameter is implemented, the largest title is only visible",
    "            // when the CupertinoSliverNavigationBar is fully expanded.",
    "            largeTitle: const Text('Family'),",
    "          ),",
    "          const SliverFillRemaining(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
    "              children: <Widget>[",
    "                Text('Drag me up', textAlign: TextAlign.center),",
    "                // When the \"leading\" parameter is omitted on a route that has a previous page,",
    "                // the back button is automatically added to the leading position.",
    "                Text('Tap on the leading button to navigate back',",
    "                    textAlign: TextAlign.center),",
    "              ],",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSliverNavigationBar Example"
},
"Flutter CupertinoPageScaffold Example": {
  "prefix": "flutter-CupertinoPageScaffold",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoPageScaffold].",
    "",
    "void main() => runApp(const PageScaffoldApp());",
    "",
    "class PageScaffoldApp extends StatelessWidget {",
    "  const PageScaffoldApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: PageScaffoldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class PageScaffoldExample extends StatefulWidget {",
    "  const PageScaffoldExample({super.key});",
    "",
    "  @override",
    "  State<PageScaffoldExample> createState() => _PageScaffoldExampleState();",
    "}",
    "",
    "class _PageScaffoldExampleState extends State<PageScaffoldExample> {",
    "  int _count = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      // Uncomment to change the background color",
    "      // backgroundColor: CupertinoColors.systemPink,",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoPageScaffold Sample'),",
    "      ),",
    "      child: Center(",
    "        child: Column(",
    "          mainAxisAlignment: MainAxisAlignment.center,",
    "          children: <Widget>[",
    "            Center(",
    "              child: Text('You have pressed the button $_count times.'),",
    "            ),",
    "            const SizedBox(height: 20.0),",
    "            Center(",
    "              child: CupertinoButton.filled(",
    "                onPressed: () => setState(() => _count++),",
    "                child: const Icon(CupertinoIcons.add),",
    "              ),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoPageScaffold Example"
},
"Flutter CupertinoPicker  Example": {
  "prefix": "flutter-CupertinoPicker",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoPicker].",
    "",
    "const double _kItemExtent = 32.0;",
    "const List<String> _fruitNames = <String>[",
    "  'Apple',",
    "  'Mango',",
    "  'Banana',",
    "  'Orange',",
    "  'Pineapple',",
    "  'Strawberry',",
    "];",
    "",
    "void main() => runApp(const CupertinoPickerApp());",
    "",
    "class CupertinoPickerApp extends StatelessWidget {",
    "  const CupertinoPickerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoPickerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoPickerExample extends StatefulWidget {",
    "  const CupertinoPickerExample({super.key});",
    "",
    "  @override",
    "  State<CupertinoPickerExample> createState() => _CupertinoPickerExampleState();",
    "}",
    "",
    "class _CupertinoPickerExampleState extends State<CupertinoPickerExample> {",
    "  int _selectedFruit = 0;",
    "",
    "  // This shows a CupertinoModalPopup with a reasonable fixed height which hosts CupertinoPicker.",
    "  void _showDialog(Widget child) {",
    "    showCupertinoModalPopup<void>(",
    "      context: context,",
    "      builder: (BuildContext context) => Container(",
    "        height: 216,",
    "        padding: const EdgeInsets.only(top: 6.0),",
    "        // The Bottom margin is provided to align the popup above the system navigation bar.",
    "        margin: EdgeInsets.only(",
    "          bottom: MediaQuery.of(context).viewInsets.bottom,",
    "        ),",
    "        // Provide a background color for the popup.",
    "        color: CupertinoColors.systemBackground.resolveFrom(context),",
    "        // Use a SafeArea widget to avoid system overlaps.",
    "        child: SafeArea(",
    "          top: false,",
    "          child: child,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoPicker Sample'),",
    "      ),",
    "      child: DefaultTextStyle(",
    "        style: TextStyle(",
    "          color: CupertinoColors.label.resolveFrom(context),",
    "          fontSize: 22.0,",
    "        ),",
    "        child: Center(",
    "          child: Row(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: <Widget>[",
    "              const Text('Selected fruit: '),",
    "              CupertinoButton(",
    "                padding: EdgeInsets.zero,",
    "                // Display a CupertinoPicker with list of fruits.",
    "                onPressed: () => _showDialog(",
    "                  CupertinoPicker(",
    "                    magnification: 1.22,",
    "                    squeeze: 1.2,",
    "                    useMagnifier: true,",
    "                    itemExtent: _kItemExtent,",
    "                    // This sets the initial item.",
    "                    scrollController: FixedExtentScrollController(",
    "                      initialItem: _selectedFruit,",
    "                    ),",
    "                    // This is called when selected item is changed.",
    "                    onSelectedItemChanged: (int selectedItem) {",
    "                      setState(() {",
    "                        _selectedFruit = selectedItem;",
    "                      });",
    "                    },",
    "                    children:",
    "                        List<Widget>.generate(_fruitNames.length, (int index) {",
    "                      return Center(child: Text(_fruitNames[index]));",
    "                    }),",
    "                  ),",
    "                ),",
    "                // This displays the selected fruit name.",
    "                child: Text(",
    "                  _fruitNames[_selectedFruit],",
    "                  style: const TextStyle(",
    "                    fontSize: 22.0,",
    "                  ),",
    "                ),",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoPicker  Example"
},
"Flutter CupertinoRadio Example": {
  "prefix": "cupertino radio ",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoRadio].",
    "",
    "void main() => runApp(const CupertinoRadioApp());",
    "",
    "class CupertinoRadioApp extends StatelessWidget {",
    "  const CupertinoRadioApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoPageScaffold(",
    "        navigationBar: CupertinoNavigationBar(",
    "          middle: Text('CupertinoRadio Example'),",
    "        ),",
    "        child: SafeArea(",
    "          child: CupertinoRadioExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "enum SingingCharacter { lafayette, jefferson }",
    "",
    "class CupertinoRadioExample extends StatefulWidget {",
    "  const CupertinoRadioExample({super.key});",
    "",
    "  @override",
    "  State<CupertinoRadioExample> createState() => _CupertinoRadioExampleState();",
    "}",
    "",
    "class _CupertinoRadioExampleState extends State<CupertinoRadioExample> {",
    "  SingingCharacter? _character = SingingCharacter.lafayette;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoListSection(",
    "      children: <Widget>[",
    "        CupertinoListTile(",
    "          title: const Text('Lafayette'),",
    "          leading: CupertinoRadio<SingingCharacter>(",
    "            value: SingingCharacter.lafayette,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "        CupertinoListTile(",
    "          title: const Text('Thomas Jefferson'),",
    "          leading: CupertinoRadio<SingingCharacter>(",
    "            value: SingingCharacter.jefferson,",
    "            groupValue: _character,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoRadio Example"
},
"Flutter CupertinoRadio Example": {
  "prefix": "cupertino radio toggleable ",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoRadio.toggleable].",
    "",
    "void main() => runApp(const CupertinoRadioApp());",
    "",
    "class CupertinoRadioApp extends StatelessWidget {",
    "  const CupertinoRadioApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      home: CupertinoPageScaffold(",
    "        navigationBar: CupertinoNavigationBar(",
    "          middle: Text('CupertinoRadio Toggleable Example'),",
    "        ),",
    "        child: SafeArea(",
    "          child: CupertinoRadioExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "enum SingingCharacter { mulligan, hamilton }",
    "",
    "class CupertinoRadioExample extends StatefulWidget {",
    "  const CupertinoRadioExample({super.key});",
    "",
    "  @override",
    "  State<CupertinoRadioExample> createState() => _CupertinoRadioExampleState();",
    "}",
    "",
    "class _CupertinoRadioExampleState extends State<CupertinoRadioExample> {",
    "  SingingCharacter? _character = SingingCharacter.mulligan;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoListSection(",
    "      children: <Widget>[",
    "        CupertinoListTile(",
    "          title: const Text('Hercules Mulligan'),",
    "          leading: CupertinoRadio<SingingCharacter>(",
    "            value: SingingCharacter.mulligan,",
    "            groupValue: _character,",
    "            // TRY THIS: Try setting the toggleable value to false and",
    "            // see how that changes the behavior of the widget.",
    "            toggleable: true,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "        CupertinoListTile(",
    "          title: const Text('Eliza Hamilton'),",
    "          leading: CupertinoRadio<SingingCharacter>(",
    "            value: SingingCharacter.hamilton,",
    "            groupValue: _character,",
    "            toggleable: true,",
    "            onChanged: (SingingCharacter? value) {",
    "              setState(() {",
    "                _character = value;",
    "              });",
    "            },",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoRadio Example"
},
"Flutter CupertinoSliverRefreshControl Example": {
  "prefix": "cupertino sliver refresh ",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSliverRefreshControl].",
    "",
    "void main() => runApp(const RefreshControlApp());",
    "",
    "class RefreshControlApp extends StatelessWidget {",
    "  const RefreshControlApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: RefreshControlExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class RefreshControlExample extends StatefulWidget {",
    "  const RefreshControlExample({super.key});",
    "",
    "  @override",
    "  State<RefreshControlExample> createState() => _RefreshControlExampleState();",
    "}",
    "",
    "class _RefreshControlExampleState extends State<RefreshControlExample> {",
    "  List<Color> colors = <Color>[",
    "    CupertinoColors.systemYellow,",
    "    CupertinoColors.systemOrange,",
    "    CupertinoColors.systemPink,",
    "  ];",
    "  List<Widget> items = <Widget>[",
    "    Container(color: CupertinoColors.systemPink, height: 100.0),",
    "    Container(color: CupertinoColors.systemOrange, height: 100.0),",
    "    Container(color: CupertinoColors.systemYellow, height: 100.0),",
    "  ];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoSliverRefreshControl Sample'),",
    "      ),",
    "      child: CustomScrollView(",
    "        physics: const BouncingScrollPhysics(",
    "          parent: AlwaysScrollableScrollPhysics(),",
    "        ),",
    "        slivers: <Widget>[",
    "          const CupertinoSliverNavigationBar(",
    "            largeTitle: Text('Scroll down'),",
    "          ),",
    "          CupertinoSliverRefreshControl(",
    "            onRefresh: () async {",
    "              await Future<void>.delayed(",
    "                const Duration(milliseconds: 1000),",
    "              );",
    "              setState(() {",
    "                items.insert(",
    "                  0,",
    "                  Container(color: colors[items.length % 3], height: 100.0),",
    "                );",
    "              });",
    "            },",
    "          ),",
    "          SliverList(",
    "            delegate: SliverChildBuilderDelegate(",
    "              (BuildContext context, int index) => items[index],",
    "              childCount: items.length,",
    "            ),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSliverRefreshControl Example"
},
"Flutter showCupertinoDialog Example": {
  "prefix": "cupertino Dialog ",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [showCupertinoDialog].",
    "",
    "void main() => runApp(const CupertinoDialogApp());",
    "",
    "class CupertinoDialogApp extends StatelessWidget {",
    "  const CupertinoDialogApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      restorationScopeId: 'app',",
    "      home: CupertinoDialogExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoDialogExample extends StatelessWidget {",
    "  const CupertinoDialogExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('Cupertino Dialog'),",
    "      ),",
    "      child: Center(",
    "        child: CupertinoButton(",
    "          onPressed: () {",
    "            Navigator.of(context).restorablePush(_dialogBuilder);",
    "          },",
    "          child: const Text('Open Dialog'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<Object?> _dialogBuilder(",
    "      BuildContext context, Object? arguments) {",
    "    return CupertinoDialogRoute<void>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return CupertinoAlertDialog(",
    "          title: const Text('Title'),",
    "          content: const Text('Content'),",
    "          actions: <Widget>[",
    "            CupertinoDialogAction(",
    "              onPressed: () {",
    "                Navigator.pop(context);",
    "              },",
    "              child: const Text('Yes'),",
    "            ),",
    "            CupertinoDialogAction(",
    "              onPressed: () {",
    "                Navigator.pop(context);",
    "              },",
    "              child: const Text('No'),",
    "            ),",
    "          ],",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showCupertinoDialog Example"
},
"Flutter showCupertinoModalPopup Example": {
  "prefix": "flutter-cupertino model popup ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [showCupertinoModalPopup].",
    "",
    "void main() => runApp(const ModalPopupApp());",
    "",
    "class ModalPopupApp extends StatelessWidget {",
    "  const ModalPopupApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      restorationScopeId: 'app',",
    "      home: ModalPopupExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ModalPopupExample extends StatelessWidget {",
    "  const ModalPopupExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('Cupertino Action Sheet'),",
    "      ),",
    "      child: Center(",
    "        child: CupertinoButton(",
    "          onPressed: () {",
    "            Navigator.of(context).restorablePush(_modalBuilder);",
    "          },",
    "          child: const Text('Open Modal'),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  @pragma('vm:entry-point')",
    "  static Route<void> _modalBuilder(BuildContext context, Object? arguments) {",
    "    return CupertinoModalPopupRoute<void>(",
    "      builder: (BuildContext context) {",
    "        return CupertinoActionSheet(",
    "          title: const Text('Title'),",
    "          message: const Text('Message'),",
    "          actions: <CupertinoActionSheetAction>[",
    "            CupertinoActionSheetAction(",
    "              child: const Text('Action One'),",
    "              onPressed: () {",
    "                Navigator.pop(context);",
    "              },",
    "            ),",
    "            CupertinoActionSheetAction(",
    "              child: const Text('Action Two'),",
    "              onPressed: () {",
    "                Navigator.pop(context);",
    "              },",
    "            ),",
    "          ],",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter showCupertinoModalPopup Example"
},
"Flutter CupertinoScrollbar  Example": {
  "prefix": "cupertino scrollbar ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoScrollbar].",
    "",
    "void main() => runApp(const ScrollbarApp());",
    "",
    "class ScrollbarApp extends StatelessWidget {",
    "  const ScrollbarApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: ScrollbarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ScrollbarExample extends StatelessWidget {",
    "  const ScrollbarExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoScrollbar Sample'),",
    "      ),",
    "      child: CupertinoScrollbar(",
    "        thickness: 6.0,",
    "        thicknessWhileDragging: 10.0,",
    "        radius: const Radius.circular(34.0),",
    "        radiusWhileDragging: Radius.zero,",
    "        child: ListView.builder(",
    "          itemCount: 120,",
    "          itemBuilder: (BuildContext context, int index) {",
    "            return Center(",
    "              child: Padding(",
    "                padding: const EdgeInsets.all(8.0),",
    "                child: Text('Item $index'),",
    "              ),",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoScrollbar  Example"
},
"Flutter CupertinoSearchTextField  Example": {
  "prefix": "cupertino search textfield ",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSearchTextField].",
    "",
    "void main() => runApp(const SearchTextFieldApp());",
    "",
    "class SearchTextFieldApp extends StatelessWidget {",
    "  const SearchTextFieldApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: SearchTextFieldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SearchTextFieldExample extends StatefulWidget {",
    "  const SearchTextFieldExample({super.key});",
    "",
    "  @override",
    "  State<SearchTextFieldExample> createState() => _SearchTextFieldExampleState();",
    "}",
    "",
    "class _SearchTextFieldExampleState extends State<SearchTextFieldExample> {",
    "  late TextEditingController textController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    textController = TextEditingController(text: 'initial text');",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    textController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoSearchTextField Sample'),",
    "      ),",
    "      child: Center(",
    "        child: Padding(",
    "          padding: const EdgeInsets.all(16.0),",
    "          child: CupertinoSearchTextField(",
    "            controller: textController,",
    "            placeholder: 'Search',",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSearchTextField  Example"
},
"Flutter CupertinoSegmentedControl  Example": {
  "prefix": "cupertino segmented control ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSegmentedControl].",
    "",
    "enum Sky { midnight, viridian, cerulean }",
    "",
    "Map<Sky, Color> skyColors = <Sky, Color>{",
    "  Sky.midnight: const Color(0xff191970),",
    "  Sky.viridian: const Color(0xff40826d),",
    "  Sky.cerulean: const Color(0xff007ba7),",
    "};",
    "",
    "void main() => runApp(const SegmentedControlApp());",
    "",
    "class SegmentedControlApp extends StatelessWidget {",
    "  const SegmentedControlApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: SegmentedControlExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SegmentedControlExample extends StatefulWidget {",
    "  const SegmentedControlExample({super.key});",
    "",
    "  @override",
    "  State<SegmentedControlExample> createState() =>",
    "      _SegmentedControlExampleState();",
    "}",
    "",
    "class _SegmentedControlExampleState extends State<SegmentedControlExample> {",
    "  Sky _selectedSegment = Sky.midnight;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      backgroundColor: skyColors[_selectedSegment],",
    "      navigationBar: CupertinoNavigationBar(",
    "        // This Cupertino segmented control has the enum \"Sky\" as the type.",
    "        middle: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          mainAxisAlignment: MainAxisAlignment.start,",
    "          children: [",
    "            CupertinoSegmentedControl<Sky>(",
    "              selectedColor: skyColors[_selectedSegment],",
    "              // Provide horizontal padding around the children.",
    "              padding: const EdgeInsets.symmetric(horizontal: 12),",
    "              // This represents a currently selected segmented control.",
    "              groupValue: _selectedSegment,",
    "              // Callback that sets the selected segmented control.",
    "              onValueChanged: (Sky value) {",
    "                setState(() {",
    "                  _selectedSegment = value;",
    "                });",
    "              },",
    "",
    "              children: const <Sky, Widget>{",
    "                Sky.midnight: Padding(",
    "                  padding: EdgeInsets.symmetric(horizontal: 20),",
    "                  child: Text('Midnight'),",
    "                ),",
    "                Sky.viridian: Padding(",
    "                  padding: EdgeInsets.symmetric(horizontal: 20),",
    "                  child: Row(",
    "                    children: [",
    "                      Text('Viridian'),",
    "                    ],",
    "                  ),",
    "                ),",
    "                Sky.cerulean: Padding(",
    "                  padding: EdgeInsets.symmetric(horizontal: 20),",
    "                  child: Text('Cerulean'),",
    "                ),",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "      child: SafeArea(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: [",
    "            Text(",
    "              'Cupertino Segmented Control',",
    "              textAlign: TextAlign.center,",
    "              style:",
    "                  const TextStyle(color: CupertinoColors.white, fontSize: 40),",
    "            ),",
    "            Text(",
    "              'Selected Segment: ${_selectedSegment.name}',",
    "              style: const TextStyle(color: CupertinoColors.white),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSegmentedControl  Example"
},
"Flutter CupertinoSlidingSegmentedControl  Example": {
  "prefix": "cupertino segmented sliding control ",
  "scope":"dart",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSlidingSegmentedControl].",
    "",
    "enum Sky { midnight, viridian, cerulean }",
    "",
    "Map<Sky, Color> skyColors = <Sky, Color>{",
    "  Sky.midnight: const Color(0xff191970),",
    "  Sky.viridian: const Color(0xff40826d),",
    "  Sky.cerulean: const Color(0xff007ba7),",
    "};",
    "",
    "void main() => runApp(const SegmentedControlApp());",
    "",
    "class SegmentedControlApp extends StatelessWidget {",
    "  const SegmentedControlApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: SegmentedControlExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SegmentedControlExample extends StatefulWidget {",
    "  const SegmentedControlExample({super.key});",
    "",
    "  @override",
    "  State<SegmentedControlExample> createState() =>",
    "      _SegmentedControlExampleState();",
    "}",
    "",
    "class _SegmentedControlExampleState extends State<SegmentedControlExample> {",
    "  Sky _selectedSegment = Sky.midnight;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      backgroundColor: skyColors[_selectedSegment],",
    "      navigationBar: CupertinoNavigationBar(",
    "        // This Cupertino segmented control has the enum \"Sky\" as the type.",
    "        middle: CupertinoSlidingSegmentedControl<Sky>(",
    "          backgroundColor: CupertinoColors.systemGrey2,",
    "          thumbColor: skyColors[_selectedSegment]!,",
    "          // This represents the currently selected segmented control.",
    "          groupValue: _selectedSegment,",
    "          // Callback that sets the selected segmented control.",
    "          onValueChanged: (Sky? value) {",
    "            if (value != null) {",
    "              setState(() {",
    "                _selectedSegment = value;",
    "              });",
    "            }",
    "          },",
    "          children: const <Sky, Widget>{",
    "            Sky.midnight: Padding(",
    "              padding: EdgeInsets.symmetric(horizontal: 20),",
    "              child: Text(",
    "                'Midnight',",
    "                style: TextStyle(color: CupertinoColors.white),",
    "              ),",
    "            ),",
    "            Sky.viridian: Padding(",
    "              padding: EdgeInsets.symmetric(horizontal: 20),",
    "              child: Text(",
    "                'Viridian',",
    "                style: TextStyle(color: CupertinoColors.white),",
    "              ),",
    "            ),",
    "            Sky.cerulean: Padding(",
    "              padding: EdgeInsets.symmetric(horizontal: 20),",
    "              child: Text(",
    "                'Cerulean',",
    "                style: TextStyle(color: CupertinoColors.white),",
    "              ),",
    "            ),",
    "          },",
    "        ),",
    "      ),",
    "      child: Center(",
    "        child: Text(",
    "          'Selected Segment: ${_selectedSegment.name}',",
    "          style: const TextStyle(color: CupertinoColors.white),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSlidingSegmentedControl  Example"
},
"Flutter CupertinoSlidingSegmentedControl  Example": {
  "prefix": "cupertino sliding segmented control ",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSlidingSegmentedControl].",
    "",
    "enum Sky { midnight, viridian, cerulean }",
    "",
    "Map<Sky, Color> skyColors = <Sky, Color>{",
    "  Sky.midnight: const Color(0xff191970),",
    "  Sky.viridian: const Color(0xff40826d),",
    "  Sky.cerulean: const Color(0xff007ba7),",
    "};",
    "",
    "void main() => runApp(const SegmentedControlApp());",
    "",
    "class SegmentedControlApp extends StatelessWidget {",
    "  const SegmentedControlApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: SegmentedControlExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class SegmentedControlExample extends StatefulWidget {",
    "  const SegmentedControlExample({super.key});",
    "",
    "  @override",
    "  State<SegmentedControlExample> createState() =>",
    "      _SegmentedControlExampleState();",
    "}",
    "",
    "class _SegmentedControlExampleState extends State<SegmentedControlExample> {",
    "  Sky _selectedSegment = Sky.midnight;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      backgroundColor: skyColors[_selectedSegment],",
    "      navigationBar: CupertinoNavigationBar(",
    "        // This Cupertino segmented control has the enum \"Sky\" as the type.",
    "        middle: CupertinoSlidingSegmentedControl<Sky>(",
    "          backgroundColor: CupertinoColors.systemGrey2,",
    "          thumbColor: skyColors[_selectedSegment]!,",
    "          // This represents the currently selected segmented control.",
    "          groupValue: _selectedSegment,",
    "          // Callback that sets the selected segmented control.",
    "          onValueChanged: (Sky? value) {",
    "            if (value != null) {",
    "              setState(() {",
    "                _selectedSegment = value;",
    "              });",
    "            }",
    "          },",
    "          children: const <Sky, Widget>{",
    "            Sky.midnight: Padding(",
    "              padding: EdgeInsets.symmetric(horizontal: 20),",
    "              child: Text(",
    "                'Midnight',",
    "                style: TextStyle(color: CupertinoColors.white),",
    "              ),",
    "            ),",
    "            Sky.viridian: Padding(",
    "              padding: EdgeInsets.symmetric(horizontal: 20),",
    "              child: Text(",
    "                'Viridian',",
    "                style: TextStyle(color: CupertinoColors.white),",
    "              ),",
    "            ),",
    "            Sky.cerulean: Padding(",
    "              padding: EdgeInsets.symmetric(horizontal: 20),",
    "              child: Text(",
    "                'Cerulean',",
    "                style: TextStyle(color: CupertinoColors.white),",
    "              ),",
    "            ),",
    "          },",
    "        ),",
    "      ),",
    "      child: Center(",
    "        child: Text(",
    "          'Selected Segment: ${_selectedSegment.name}', Segmented Sliding",
    "          style: const TextStyle(color: CupertinoColors.white),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSlidingSegmentedControl  Example"
},
"Flutter CupertinoSlider  Example": {
  "prefix": "cupertino slider ",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSlider].",
    "",
    "void main() => runApp(const CupertinoSliderApp());",
    "",
    "class CupertinoSliderApp extends StatelessWidget {",
    "  const CupertinoSliderApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoSliderExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoSliderExample extends StatefulWidget {",
    "  const CupertinoSliderExample({super.key});",
    "",
    "  @override",
    "  State<CupertinoSliderExample> createState() => _CupertinoSliderExampleState();",
    "}",
    "",
    "class _CupertinoSliderExampleState extends State<CupertinoSliderExample> {",
    "  double _currentSliderValue = 0.0;",
    "  String? _sliderStatus;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoSlider Sample'),",
    "      ),",
    "      child: Center(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            // Display the current slider value.",
    "            Text('$_currentSliderValue'),",
    "            CupertinoSlider(",
    "              key: const Key('slider'),",
    "              value: _currentSliderValue,",
    "              // This allows the slider to jump between divisions.",
    "              // If null, the slide movement is continuous.",
    "              divisions: 5,",
    "              // The maximum slider value",
    "              max: 100,",
    "              activeColor: CupertinoColors.systemPurple,",
    "              thumbColor: CupertinoColors.systemPurple,",
    "              // This is called when sliding is started.",
    "              onChangeStart: (double value) {",
    "                setState(() {",
    "                  _sliderStatus = 'Sliding';",
    "                });",
    "              },",
    "              // This is called when sliding has ended.",
    "              onChangeEnd: (double value) {",
    "                setState(() {",
    "                  _sliderStatus = 'Finished sliding';",
    "                });",
    "              },",
    "              // This is called when slider value is changed.",
    "              onChanged: (double value) {",
    "                setState(() {",
    "                  _currentSliderValue = value;",
    "                });",
    "              },",
    "            ),",
    "            Text(",
    "              _sliderStatus ?? '',",
    "              style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(",
    "                    fontSize: 12,",
    "                  ),",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSlider  Example"
},
"Flutter UserAccountsDrawerHeader  Example": {
  "prefix": "user-accounts-drawer-header",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "void main() {",
    "  runApp(const MyApp());",
    "}",
    "",
    "class MyApp extends StatelessWidget {",
    "  const MyApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "        fontFamily: \"Poppins\",",
    "        colorScheme: ColorScheme.fromSeed(",
    "            primary: const Color(0xff9298FF),",
    "            seedColor: const Color(0xffF6F5FA)),",
    "        useMaterial3: true,",
    "      ),",
    "      debugShowCheckedModeBanner: false,",
    "      home: const HomeScreen(),",
    "    );",
    "  }",
    "}",
    "",
    "class HomeScreen extends StatefulWidget {",
    "  const HomeScreen({super.key});",
    "",
    "  @override",
    "  State<HomeScreen> createState() => _HomeScreenState();",
    "}",
    "",
    "class _HomeScreenState extends State<HomeScreen> {",
    "  int currentPageIndex = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "        backgroundColor: const Color(0xffF6F5FA),",
    "        appBar: AppBar(",
    "          title: const Text(",
    "            \"User Accounts Drawer Header\",",
    "            maxLines: 2,",
    "            style: TextStyle(fontSize: 20),",
    "          ),",
    "          actions: [",
    "            const Icon(",
    "              Icons.search,",
    "              size: 30,",
    "            ),",
    "          ],",
    "        ),",
    "        drawer: const Drawer(",
    "          child: DrawerHeader(",
    "            child: Column(",
    "              children: [",
    "                Text(",
    "                  \"User Accounts Drawer Header\",",
    "                  style: TextStyle(fontSize: 30),",
    "                ),",
    "                UserAccountsDrawerHeader(",
    "                  accountName: Text(\"accountName\"),",
    "                  accountEmail: Text(\"sample@gmail.com\"),",
    "                  currentAccountPicture: CircleAvatar(",
    "                    radius: 15,",
    "                    child: Text(\"AM\"),",
    "                  ),",
    "                  otherAccountsPictures: [",
    "                    Icon(Icons.edit),",
    "                    Icon(Icons.remove_circle),",
    "                  ],",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "        ),",
    "        body: const Center(",
    "          child: Text(\"UserAccountsDrawerHeader\"),",
    "        ));",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter UserAccountsDrawerHeader  Example"
},
"Flutter CupertinoSwitch  Example": {
  "prefix": "cupertino switch",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoSwitch].",
    "",
    "void main() => runApp(const CupertinoSwitchApp());",
    "",
    "class CupertinoSwitchApp extends StatelessWidget {",
    "  const CupertinoSwitchApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoSwitchExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoSwitchExample extends StatefulWidget {",
    "  const CupertinoSwitchExample({super.key});",
    "",
    "  @override",
    "  State<CupertinoSwitchExample> createState() => _CupertinoSwitchExampleState();",
    "}",
    "",
    "class _CupertinoSwitchExampleState extends State<CupertinoSwitchExample> {",
    "  bool switchValue = true;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoSwitch Sample'),",
    "      ),",
    "      child: Center(",
    "        child: CupertinoSwitch(",
    "          // This bool value toggles the switch.",
    "          value: switchValue,",
    "          activeColor: CupertinoColors.activeBlue,",
    "          onChanged: (bool? value) {",
    "            // This is called when the user toggles the switch.",
    "            setState(() {",
    "              switchValue = value ?? false;",
    "            });",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoSwitch  Example"
},
"Flutter CupertinoTab  Example": {
  "prefix": "cupertino tab bar",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTabController].",
    "",
    "void main() => runApp(const TabControllerApp());",
    "",
    "class TabControllerApp extends StatelessWidget {",
    "  const TabControllerApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: TabControllerExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TabControllerExample extends StatefulWidget {",
    "  const TabControllerExample({super.key});",
    "",
    "  @override",
    "  State<TabControllerExample> createState() => _TabControllerExampleState();",
    "}",
    "",
    "class _TabControllerExampleState extends State<TabControllerExample> {",
    "  final CupertinoTabController controller = CupertinoTabController();",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text(\"CupertinoTabBar\"),",
    "      ),",
    "      child: CupertinoTabScaffold(",
    "        controller: controller,",
    "        tabBar: CupertinoTabBar(",
    "          items: const <BottomNavigationBarItem>[",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.square_grid_2x2_fill),",
    "              label: 'Browse',",
    "            ),",
    "            BottomNavigationBarItem(",
    "              icon: Icon(CupertinoIcons.star_circle_fill),",
    "              label: 'Starred',",
    "            ),",
    "          ],",
    "        ),",
    "        tabBuilder: (BuildContext context, int index) {",
    "          return Center(",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                Text('Content of tab $index'),",
    "                const SizedBox(height: 10),",
    "                CupertinoButton(",
    "                  onPressed: () => controller.index = 0,",
    "                  child: const Text('Go to first tab'),",
    "                ),",
    "              ],",
    "            ),",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoTab  Example"
},
"Flutter CupertinoTabScaffold  Example": {
  "prefix": "cupertino tab scaffold",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTabScaffold].",
    "",
    "void main() => runApp(const TabScaffoldApp());",
    "",
    "class TabScaffoldApp extends StatelessWidget {",
    "  const TabScaffoldApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: TabScaffoldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class TabScaffoldExample extends StatefulWidget {",
    "  const TabScaffoldExample({super.key});",
    "",
    "  @override",
    "  State<TabScaffoldExample> createState() => _TabScaffoldExampleState();",
    "}",
    "",
    "class _TabScaffoldExampleState extends State<TabScaffoldExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoTabScaffold(",
    "      tabBar: CupertinoTabBar(",
    "        items: const <BottomNavigationBarItem>[",
    "          BottomNavigationBarItem(",
    "            icon: Icon(CupertinoIcons.home),",
    "            label: 'Home',",
    "          ),",
    "          BottomNavigationBarItem(",
    "            icon: Icon(CupertinoIcons.search_circle_fill),",
    "            label: 'Explore',",
    "          ),",
    "        ],",
    "      ),",
    "      tabBuilder: (BuildContext context, int index) {",
    "        return CupertinoTabView(",
    "          builder: (BuildContext context) {",
    "            return CupertinoPageScaffold(",
    "              navigationBar: CupertinoNavigationBar(",
    "                middle: Text('Page 1 of tab $index'),",
    "              ),",
    "              child: Center(",
    "                child: CupertinoButton(",
    "                  child: const Text('Next page'),",
    "                  onPressed: () {",
    "                    Navigator.of(context).push(",
    "                      CupertinoPageRoute<void>(",
    "                        builder: (BuildContext context) {",
    "                          return CupertinoPageScaffold(",
    "                            navigationBar: CupertinoNavigationBar(",
    "                              middle: Text('Page 2 of tab $index'),",
    "                            ),",
    "                            child: Center(",
    "                              child: CupertinoButton(",
    "                                child: const Text('Back'),",
    "                                onPressed: () {",
    "                                  Navigator.of(context).pop();",
    "                                },",
    "                              ),",
    "                            ),",
    "                          );",
    "                        },",
    "                      ),",
    "                    );",
    "                  },",
    "                ),",
    "              ),",
    "            );",
    "          },",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoTabScaffold  Example"
},
"Flutter CupertinoTextField  Example": {
  "prefix": "cupertino textfield",
  "body": [
    "",
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTextField].",
    "",
    "void main() => runApp(const CupertinoTextFieldApp());",
    "",
    "class CupertinoTextFieldApp extends StatelessWidget {",
    "  const CupertinoTextFieldApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: CupertinoTextFieldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class CupertinoTextFieldExample extends StatefulWidget {",
    "  const CupertinoTextFieldExample({super.key});",
    "",
    "  @override",
    "  State<CupertinoTextFieldExample> createState() =>",
    "      _CupertinoTextFieldExampleState();",
    "}",
    "",
    "class _CupertinoTextFieldExampleState extends State<CupertinoTextFieldExample> {",
    "  late TextEditingController _textController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _textController = TextEditingController(text: 'initial text');",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _textController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoTextField Sample'),",
    "      ),",
    "      child: Center(",
    "        child: CupertinoTextField(",
    "          controller: _textController,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoTextField  Example"
},
"Flutter CupertinoTextFormFieldRow  Example": {
  "prefix": "cupertino textformfield row",
  "body": [
    "import 'package:flutter/cupertino.dart';",
    "",
    "/// Flutter code sample for [CupertinoTextFormFieldRow].",
    "",
    "void main() => runApp(const FormSectionApp());",
    "",
    "class FormSectionApp extends StatelessWidget {",
    "  const FormSectionApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const CupertinoApp(",
    "      theme: CupertinoThemeData(brightness: Brightness.light),",
    "      home: FromSectionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class FromSectionExample extends StatelessWidget {",
    "  const FromSectionExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CupertinoPageScaffold(",
    "      navigationBar: const CupertinoNavigationBar(",
    "        middle: Text('CupertinoFormSection Sample'),",
    "      ),",
    "      // Add safe area widget to place the CupertinoFormSection below the navigation bar.",
    "      child: SafeArea(",
    "        child: Form(",
    "          autovalidateMode: AutovalidateMode.always,",
    "          onChanged: () {",
    "            Form.maybeOf(primaryFocus!.context!)?.save();",
    "          },",
    "          child: CupertinoFormSection.insetGrouped(",
    "            header: const Text('SECTION 1'),",
    "            children: List<Widget>.generate(5, (int index) {",
    "              return CupertinoTextFormFieldRow(",
    "                prefix: const Text('Enter text'),",
    "                placeholder: 'Enter text',",
    "                validator: (String? value) {",
    "                  if (value == null || value.isEmpty) {",
    "                    return 'Please enter a value';",
    "                  }",
    "                  return null;",
    "                },",
    "              );",
    "            }),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter CupertinoTextFormFieldRow  Example"
},
"Flutter Example for input chip": {
  "prefix": "flutter-input-chip-one",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:async';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "const List<String> _pizzaToppings = <String>[",
    "  'Olives',",
    "  'Tomato',",
    "  'Cheese',",
    "  'Pepperoni',",
    "  'Bacon',",
    "  'Onion',",
    "  'Jalapeno',",
    "  'Mushrooms',",
    "  'Pineapple',",
    "];",
    "",
    "void main() => runApp(const EditableChipFieldApp());",
    "",
    "class EditableChipFieldApp extends StatelessWidget {",
    "  const EditableChipFieldApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const EditableChipFieldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class EditableChipFieldExample extends StatefulWidget {",
    "  const EditableChipFieldExample({super.key});",
    "",
    "  @override",
    "  EditableChipFieldExampleState createState() {",
    "    return EditableChipFieldExampleState();",
    "  }",
    "}",
    "",
    "class EditableChipFieldExampleState extends State<EditableChipFieldExample> {",
    "  final FocusNode _chipFocusNode = FocusNode();",
    "  List<String> _toppings = <String>[_pizzaToppings.first];",
    "  List<String> _suggestions = <String>[];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Editable Chip Field Sample'),",
    "      ),",
    "      body: Column(",
    "        children: <Widget>[",
    "          Padding(",
    "            padding: const EdgeInsets.symmetric(horizontal: 16),",
    "            child: ChipsInput<String>(",
    "              values: _toppings,",
    "              decoration: const InputDecoration(",
    "                prefixIcon: Icon(Icons.local_pizza_rounded),",
    "                hintText: 'Search for toppings',",
    "              ),",
    "              strutStyle: const StrutStyle(fontSize: 15),",
    "              onChanged: _onChanged,",
    "              onSubmitted: _onSubmitted,",
    "              chipBuilder: _chipBuilder,",
    "              onTextChanged: _onSearchChanged,",
    "            ),",
    "          ),",
    "          if (_suggestions.isNotEmpty)",
    "            Expanded(",
    "              child: ListView.builder(",
    "                itemCount: _suggestions.length,",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  return ToppingSuggestion(",
    "                    _suggestions[index],",
    "                    onTap: _selectSuggestion,",
    "                  );",
    "                },",
    "              ),",
    "            ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  Future<void> _onSearchChanged(String value) async {",
    "    final List<String> results = await _suggestionCallback(value);",
    "    setState(() {",
    "      _suggestions = results",
    "          .where((String topping) => !_toppings.contains(topping))",
    "          .toList();",
    "    });",
    "  }",
    "",
    "  Widget _chipBuilder(BuildContext context, String topping) {",
    "    return ToppingInputChip(",
    "      topping: topping,",
    "      onDeleted: _onChipDeleted,",
    "      onSelected: _onChipTapped,",
    "    );",
    "  }",
    "",
    "  void _selectSuggestion(String topping) {",
    "    setState(() {",
    "      _toppings.add(topping);",
    "      _suggestions = <String>[];",
    "    });",
    "  }",
    "",
    "  void _onChipTapped(String topping) {}",
    "",
    "  void _onChipDeleted(String topping) {",
    "    setState(() {",
    "      _toppings.remove(topping);",
    "      _suggestions = <String>[];",
    "    });",
    "  }",
    "",
    "  void _onSubmitted(String text) {",
    "    if (text.trim().isNotEmpty) {",
    "      setState(() {",
    "        _toppings = <String>[..._toppings, text.trim()];",
    "      });",
    "    } else {",
    "      _chipFocusNode.unfocus();",
    "      setState(() {",
    "        _toppings = <String>[];",
    "      });",
    "    }",
    "  }",
    "",
    "  void _onChanged(List<String> data) {",
    "    setState(() {",
    "      _toppings = data;",
    "    });",
    "  }",
    "",
    "  FutureOr<List<String>> _suggestionCallback(String text) {",
    "    if (text.isNotEmpty) {",
    "      return _pizzaToppings.where((String topping) {",
    "        return topping.toLowerCase().contains(text.toLowerCase());",
    "      }).toList();",
    "    }",
    "    return const <String>[];",
    "  }",
    "}",
    "",
    "class ChipsInput<T> extends StatefulWidget {",
    "  const ChipsInput({",
    "    super.key,",
    "    required this.values,",
    "    this.decoration = const InputDecoration(),",
    "    this.style,",
    "    this.strutStyle,",
    "    required this.chipBuilder,",
    "    required this.onChanged,",
    "    this.onChipTapped,",
    "    this.onSubmitted,",
    "    this.onTextChanged,",
    "  });",
    "",
    "  final List<T> values;",
    "  final InputDecoration decoration;",
    "  final TextStyle? style;",
    "  final StrutStyle? strutStyle;",
    "",
    "  final ValueChanged<List<T>> onChanged;",
    "  final ValueChanged<T>? onChipTapped;",
    "  final ValueChanged<String>? onSubmitted;",
    "  final ValueChanged<String>? onTextChanged;",
    "",
    "  final Widget Function(BuildContext context, T data) chipBuilder;",
    "",
    "  @override",
    "  ChipsInputState<T> createState() => ChipsInputState<T>();",
    "}",
    "",
    "class ChipsInputState<T> extends State<ChipsInput<T>> {",
    "  @visibleForTesting",
    "  late final ChipsInputEditingController<T> controller;",
    "",
    "  String _previousText = '';",
    "  TextSelection? _previousSelection;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "",
    "    controller = ChipsInputEditingController<T>(",
    "      <T>[...widget.values],",
    "      widget.chipBuilder,",
    "    );",
    "    controller.addListener(_textListener);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.removeListener(_textListener);",
    "    controller.dispose();",
    "",
    "    super.dispose();",
    "  }",
    "",
    "  void _textListener() {",
    "    final String currentText = controller.text;",
    "",
    "    if (_previousSelection != null) {",
    "      final int currentNumber = countReplacements(currentText);",
    "      final int previousNumber = countReplacements(_previousText);",
    "",
    "      final int cursorEnd = _previousSelection!.extentOffset;",
    "      final int cursorStart = _previousSelection!.baseOffset;",
    "",
    "      final List<T> values = <T>[...widget.values];",
    "",
    "      // If the current number and the previous number of replacements are different, then",
    "      // the user has deleted the InputChip using the keyboard. In this case, we trigger",
    "      // the onChanged callback. We need to be sure also that the current number of",
    "      // replacements is different from the input chip to avoid double-deletion.",
    "      if (currentNumber < previousNumber && currentNumber != values.length) {",
    "        if (cursorStart == cursorEnd) {",
    "          values.removeRange(cursorStart - 1, cursorEnd);",
    "        } else {",
    "          if (cursorStart > cursorEnd) {",
    "            values.removeRange(cursorEnd, cursorStart);",
    "          } else {",
    "            values.removeRange(cursorStart, cursorEnd);",
    "          }",
    "        }",
    "        widget.onChanged(values);",
    "      }",
    "    }",
    "",
    "    _previousText = currentText;",
    "    _previousSelection = controller.selection;",
    "  }",
    "",
    "  static int countReplacements(String text) {",
    "    return text.codeUnits",
    "      .where((int u) => u == ChipsInputEditingController.kObjectReplacementChar)",
    "      .length;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    controller.updateValues(<T>[...widget.values]);",
    "",
    "    return TextField(",
    "      minLines: 1,",
    "      maxLines: 3,",
    "      textInputAction: TextInputAction.done,",
    "      style: widget.style,",
    "      strutStyle: widget.strutStyle,",
    "      controller: controller,",
    "      onChanged: (String value) =>",
    "          widget.onTextChanged?.call(controller.textWithoutReplacements),",
    "      onSubmitted: (String value) =>",
    "          widget.onSubmitted?.call(controller.textWithoutReplacements),",
    "    );",
    "  }",
    "}",
    "",
    "class ChipsInputEditingController<T> extends TextEditingController {",
    "  ChipsInputEditingController(this.values, this.chipBuilder)",
    "      : super(",
    "          text: String.fromCharCode(kObjectReplacementChar) * values.length,",
    "        );",
    "",
    "  // This constant character acts as a placeholder in the TextField text value.",
    "  // There will be one character for each of the InputChip displayed.",
    "  static const int kObjectReplacementChar = 0xFFFE;",
    "",
    "  List<T> values;",
    "",
    "  final Widget Function(BuildContext context, T data) chipBuilder;",
    "",
    "  /// Called whenever chip is either added or removed",
    "  /// from the outside the context of the text field.",
    "  void updateValues(List<T> values) {",
    "    if (values.length != this.values.length) {",
    "      final String char = String.fromCharCode(kObjectReplacementChar);",
    "      final int length = values.length;",
    "      value = TextEditingValue(",
    "        text: char * length,",
    "        selection: TextSelection.collapsed(offset: length),",
    "      );",
    "      this.values = values;",
    "    }",
    "  }",
    "",
    "  String get textWithoutReplacements {",
    "    final String char = String.fromCharCode(kObjectReplacementChar);",
    "    return text.replaceAll(RegExp(char), '');",
    "  }",
    "",
    "  String get textWithReplacements => text;",
    "",
    "  @override",
    "  TextSpan buildTextSpan(",
    "      {required BuildContext context, TextStyle? style, required bool withComposing}) {",
    "",
    "    final Iterable<WidgetSpan> chipWidgets =",
    "        values.map((T v) => WidgetSpan(child: chipBuilder(context, v)));",
    "",
    "    return TextSpan(",
    "      style: style,",
    "      children: <InlineSpan>[",
    "        ...chipWidgets,",
    "        if (textWithoutReplacements.isNotEmpty)",
    "          TextSpan(text: textWithoutReplacements)",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class ToppingSuggestion extends StatelessWidget {",
    "  const ToppingSuggestion(this.topping, {super.key, this.onTap});",
    "",
    "  final String topping;",
    "  final ValueChanged<String>? onTap;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListTile(",
    "      key: ObjectKey(topping),",
    "      leading: CircleAvatar(",
    "        child: Text(",
    "          topping[0].toUpperCase(),",
    "        ),",
    "      ),",
    "      title: Text(topping),",
    "      onTap: () => onTap?.call(topping),",
    "    );",
    "  }",
    "}",
    "",
    "class ToppingInputChip extends StatelessWidget {",
    "  const ToppingInputChip({",
    "    super.key,",
    "    required this.topping,",
    "    required this.onDeleted,",
    "    required this.onSelected,",
    "  });",
    "",
    "  final String topping;",
    "  final ValueChanged<String> onDeleted;",
    "  final ValueChanged<String> onSelected;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      margin: const EdgeInsets.only(right: 3),",
    "      child: InputChip(",
    "        key: ObjectKey(topping),",
    "        label: Text(topping),",
    "        avatar: CircleAvatar(",
    "          child: Text(topping[0].toUpperCase()),",
    "        ),",
    "        onDeleted: () => onDeleted(topping),",
    "        onSelected: (bool value) => onSelected(topping),",
    "        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,",
    "        padding: const EdgeInsets.all(2),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Example for input chip"
},
"Flutter Tap and Drag Example": {
  "prefix": "flutter-tap-and-drag",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/gestures.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [TapAndPanGestureRecognizer].",
    "",
    "void main() {",
    "  runApp(const TapAndDragToZoomApp());",
    "}",
    "",
    "class TapAndDragToZoomApp extends StatelessWidget {",
    "  const TapAndDragToZoomApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: Text(\"Tap and DRAG\"),",
    "        ),",
    "        body: Center(",
    "          child: TapAndDragToZoomWidget(",
    "            child: MyBoxWidget(),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class MyBoxWidget extends StatelessWidget {",
    "  const MyBoxWidget({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      color: Colors.blueAccent,",
    "      height: 100.0,",
    "      width: 100.0,",
    "    );",
    "  }",
    "}",
    "",
    "// This widget will scale its child up when it detects a drag up, after a",
    "// double tap/click. It will scale the widget down when it detects a drag down,",
    "// after a double tap. Dragging down and then up after a double tap/click will",
    "// zoom the child in/out. The scale of the child will be reset when the drag ends.",
    "class TapAndDragToZoomWidget extends StatefulWidget {",
    "  const TapAndDragToZoomWidget({super.key, required this.child});",
    "",
    "  final Widget child;",
    "",
    "  @override",
    "  State<TapAndDragToZoomWidget> createState() => _TapAndDragToZoomWidgetState();",
    "}",
    "",
    "class _TapAndDragToZoomWidgetState extends State<TapAndDragToZoomWidget> {",
    "  final double scaleMultiplier = -0.0001;",
    "  double _currentScale = 1.0;",
    "  Offset? _previousDragPosition;",
    "",
    "  static double _keepScaleWithinBounds(double scale) {",
    "    const double minScale = 0.1;",
    "    const double maxScale = 30;",
    "    if (scale <= 0) {",
    "      return minScale;",
    "    }",
    "    if (scale >= 30) {",
    "      return maxScale;",
    "    }",
    "    return scale;",
    "  }",
    "",
    "  void _zoomLogic(Offset currentDragPosition) {",
    "    final double dx =",
    "        (_previousDragPosition!.dx - currentDragPosition.dx).abs();",
    "    final double dy =",
    "        (_previousDragPosition!.dy - currentDragPosition.dy).abs();",
    "",
    "    if (dx > dy) {",
    "      // Ignore horizontal drags.",
    "      _previousDragPosition = currentDragPosition;",
    "      return;",
    "    }",
    "",
    "    if (currentDragPosition.dy < _previousDragPosition!.dy) {",
    "      // Zoom out on drag up.",
    "      setState(() {",
    "        _currentScale += currentDragPosition.dy * scaleMultiplier;",
    "        _currentScale = _keepScaleWithinBounds(_currentScale);",
    "      });",
    "    } else {",
    "      // Zoom in on drag down.",
    "      setState(() {",
    "        _currentScale -= currentDragPosition.dy * scaleMultiplier;",
    "        _currentScale = _keepScaleWithinBounds(_currentScale);",
    "      });",
    "    }",
    "    _previousDragPosition = currentDragPosition;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return RawGestureDetector(",
    "      gestures: <Type, GestureRecognizerFactory>{",
    "        TapAndPanGestureRecognizer:",
    "            GestureRecognizerFactoryWithHandlers<TapAndPanGestureRecognizer>(",
    "                () => TapAndPanGestureRecognizer(),",
    "                (TapAndPanGestureRecognizer instance) {",
    "          instance",
    "            ..onTapDown = (TapDragDownDetails details) {",
    "              _previousDragPosition = details.globalPosition;",
    "            }",
    "            ..onDragStart = (TapDragStartDetails details) {",
    "              if (details.consecutiveTapCount == 2) {",
    "                _zoomLogic(details.globalPosition);",
    "              }",
    "            }",
    "            ..onDragUpdate = (TapDragUpdateDetails details) {",
    "              if (details.consecutiveTapCount == 2) {",
    "                _zoomLogic(details.globalPosition);",
    "              }",
    "            }",
    "            ..onDragEnd = (TapDragEndDetails details) {",
    "              if (details.consecutiveTapCount == 2) {",
    "                setState(() {",
    "                  _currentScale = 1.0;",
    "                });",
    "                _previousDragPosition = null;",
    "              }",
    "            };",
    "        }),",
    "      },",
    "      child: Transform.scale(",
    "        scale: _currentScale,",
    "        child: widget.child,",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Tap and Drag Example"
},
"Flutter [NavigationBar] with nested [Navigator] destinations": {
  "prefix": "flutter-navigationbar with nested navigator",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [NavigationBar] with nested [Navigator] destinations.",
    "",
    "void main() {",
    "  runApp(const MaterialApp(home: Home()));",
    "}",
    "",
    "class Home extends StatefulWidget {",
    "  const Home({super.key});",
    "",
    "  @override",
    "  State<Home> createState() => _HomeState();",
    "}",
    "",
    "class _HomeState extends State<Home> with TickerProviderStateMixin<Home> {",
    "  static const List<Destination> allDestinations = <Destination>[",
    "    Destination(0, 'Teal', Icons.home, Colors.teal),",
    "    Destination(1, 'Cyan', Icons.business, Colors.cyan),",
    "    Destination(2, 'Orange', Icons.school, Colors.orange),",
    "    Destination(3, 'Blue', Icons.flight, Colors.blue),",
    "  ];",
    "",
    "  late final List<GlobalKey<NavigatorState>> navigatorKeys;",
    "  late final List<GlobalKey> destinationKeys;",
    "  late final List<AnimationController> destinationFaders;",
    "  late final List<Widget> destinationViews;",
    "  int selectedIndex = 0;",
    "",
    "  AnimationController buildFaderController() {",
    "    final AnimationController controller = AnimationController(",
    "        vsync: this, duration: const Duration(milliseconds: 200));",
    "    controller.addStatusListener((AnimationStatus status) {",
    "      if (status == AnimationStatus.dismissed) {",
    "        setState(() {}); // Rebuild unselected destinations offstage.",
    "      }",
    "    });",
    "    return controller;",
    "  }",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    navigatorKeys = List<GlobalKey<NavigatorState>>.generate(",
    "        allDestinations.length, (int index) => GlobalKey()).toList();",
    "    destinationFaders = List<AnimationController>.generate(",
    "        allDestinations.length, (int index) => buildFaderController()).toList();",
    "    destinationFaders[selectedIndex].value = 1.0;",
    "    destinationViews = allDestinations.map((Destination destination) {",
    "      return FadeTransition(",
    "        opacity: destinationFaders[destination.index]",
    "            .drive(CurveTween(curve: Curves.fastOutSlowIn)),",
    "        child: DestinationView(",
    "          destination: destination,",
    "          navigatorKey: navigatorKeys[destination.index],",
    "        ),",
    "      );",
    "    }).toList();",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    for (final AnimationController controller in destinationFaders) {",
    "      controller.dispose();",
    "    }",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return NavigatorPopHandler(",
    "      onPop: () {",
    "        final NavigatorState navigator =",
    "            navigatorKeys[selectedIndex].currentState!;",
    "        navigator.pop();",
    "      },",
    "      child: Scaffold(",
    "        body: SafeArea(",
    "          top: false,",
    "          child: Stack(",
    "            fit: StackFit.expand,",
    "            children: allDestinations.map((Destination destination) {",
    "              final int index = destination.index;",
    "              final Widget view = destinationViews[index];",
    "              if (index == selectedIndex) {",
    "                destinationFaders[index].forward();",
    "                return Offstage(offstage: false, child: view);",
    "              } else {",
    "                destinationFaders[index].reverse();",
    "                if (destinationFaders[index].isAnimating) {",
    "                  return IgnorePointer(child: view);",
    "                }",
    "                return Offstage(child: view);",
    "              }",
    "            }).toList(),",
    "          ),",
    "        ),",
    "        bottomNavigationBar: NavigationBar(",
    "          selectedIndex: selectedIndex,",
    "          onDestinationSelected: (int index) {",
    "            setState(() {",
    "              selectedIndex = index;",
    "            });",
    "          },",
    "          destinations: allDestinations.map((Destination destination) {",
    "            return NavigationDestination(",
    "              icon: Icon(destination.icon, color: destination.color),",
    "              label: destination.title,",
    "            );",
    "          }).toList(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class Destination {",
    "  const Destination(this.index, this.title, this.icon, this.color);",
    "  final int index;",
    "  final String title;",
    "  final IconData icon;",
    "  final MaterialColor color;",
    "}",
    "",
    "class RootPage extends StatelessWidget {",
    "  const RootPage({super.key, required this.destination});",
    "",
    "  final Destination destination;",
    "",
    "  Widget _buildDialog(BuildContext context) {",
    "    return AlertDialog(",
    "      title: Text('${destination.title} AlertDialog'),",
    "      actions: <Widget>[",
    "        TextButton(",
    "          onPressed: () {",
    "            Navigator.pop(context);",
    "          },",
    "          child: const Text('OK'),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final TextStyle headlineSmall = Theme.of(context).textTheme.headlineSmall!;",
    "    final ButtonStyle buttonStyle = ElevatedButton.styleFrom(",
    "      backgroundColor: destination.color,",
    "      visualDensity: VisualDensity.comfortable,",
    "      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),",
    "      textStyle: headlineSmall,",
    "    );",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text('${destination.title} RootPage - /'),",
    "        backgroundColor: destination.color,",
    "      ),",
    "      backgroundColor: destination.color[50],",
    "      body: Center(",
    "        child: Column(",
    "          mainAxisSize: MainAxisSize.min,",
    "          children: <Widget>[",
    "            ElevatedButton(",
    "              style: buttonStyle,",
    "              onPressed: () {",
    "                Navigator.pushNamed(context, '/list');",
    "              },",
    "              child: const Text('Push /list'),",
    "            ),",
    "            const SizedBox(height: 16),",
    "            ElevatedButton(",
    "              style: buttonStyle,",
    "              onPressed: () {",
    "                showDialog<void>(",
    "                  context: context,",
    "                  useRootNavigator: false,",
    "                  builder: _buildDialog,",
    "                );",
    "              },",
    "              child: const Text('Local Dialog'),",
    "            ),",
    "            const SizedBox(height: 16),",
    "            ElevatedButton(",
    "              style: buttonStyle,",
    "              onPressed: () {",
    "                showDialog<void>(",
    "                  context: context,",
    "                  useRootNavigator:",
    "                      true, // ignore: avoid_redundant_argument_values",
    "                  builder: _buildDialog,",
    "                );",
    "              },",
    "              child: const Text('Root Dialog'),",
    "            ),",
    "            const SizedBox(height: 16),",
    "            Builder(",
    "              builder: (BuildContext context) {",
    "                return ElevatedButton(",
    "                  style: buttonStyle,",
    "                  onPressed: () {",
    "                    showBottomSheet<void>(",
    "                      context: context,",
    "                      builder: (BuildContext context) {",
    "                        return Container(",
    "                          padding: const EdgeInsets.all(16),",
    "                          width: double.infinity,",
    "                          child: Text(",
    "                            '${destination.title} BottomSheet\\n'",
    "                            'Tap the back button to dismiss',",
    "                            style: headlineSmall,",
    "                            softWrap: true,",
    "                            textAlign: TextAlign.center,",
    "                          ),",
    "                        );",
    "                      },",
    "                    );",
    "                  },",
    "                  child: const Text('Local BottomSheet'),",
    "                );",
    "              },",
    "            ),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class ListPage extends StatelessWidget {",
    "  const ListPage({super.key, required this.destination});",
    "",
    "  final Destination destination;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    const int itemCount = 50;",
    "    final ButtonStyle buttonStyle = OutlinedButton.styleFrom(",
    "      foregroundColor: destination.color,",
    "      fixedSize: const Size.fromHeight(128),",
    "      textStyle: Theme.of(context).textTheme.headlineSmall,",
    "    );",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text('${destination.title} ListPage - /list'),",
    "        backgroundColor: destination.color,",
    "      ),",
    "      backgroundColor: destination.color[50],",
    "      body: SizedBox.expand(",
    "        child: ListView.builder(",
    "          itemCount: itemCount,",
    "          itemBuilder: (BuildContext context, int index) {",
    "            return Padding(",
    "              padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),",
    "              child: OutlinedButton(",
    "                style: buttonStyle.copyWith(",
    "                  backgroundColor: MaterialStatePropertyAll<Color>(",
    "                    Color.lerp(destination.color[100], Colors.white,",
    "                        index / itemCount)!,",
    "                  ),",
    "                ),",
    "                onPressed: () {",
    "                  Navigator.pushNamed(context, '/text');",
    "                },",
    "                child: Text('Push /text [$index]'),",
    "              ),",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class TextPage extends StatefulWidget {",
    "  const TextPage({super.key, required this.destination});",
    "",
    "  final Destination destination;",
    "",
    "  @override",
    "  State<TextPage> createState() => _TextPageState();",
    "}",
    "",
    "class _TextPageState extends State<TextPage> {",
    "  late final TextEditingController textController;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    textController = TextEditingController(text: 'Sample Text');",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    textController.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData theme = Theme.of(context);",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text('${widget.destination.title} TextPage - /list/text'),",
    "        backgroundColor: widget.destination.color,",
    "      ),",
    "      backgroundColor: widget.destination.color[50],",
    "      body: Container(",
    "        padding: const EdgeInsets.all(32.0),",
    "        alignment: Alignment.center,",
    "        child: TextField(",
    "          controller: textController,",
    "          style: theme.primaryTextTheme.headlineMedium?.copyWith(",
    "            color: widget.destination.color,",
    "          ),",
    "          decoration: InputDecoration(",
    "            focusedBorder: UnderlineInputBorder(",
    "              borderSide: BorderSide(",
    "                color: widget.destination.color,",
    "                width: 3.0,",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DestinationView extends StatefulWidget {",
    "  const DestinationView({",
    "    super.key,",
    "    required this.destination,",
    "    required this.navigatorKey,",
    "  });",
    "",
    "  final Destination destination;",
    "  final Key navigatorKey;",
    "",
    "  @override",
    "  State<DestinationView> createState() => _DestinationViewState();",
    "}",
    "",
    "class _DestinationViewState extends State<DestinationView> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Navigator(",
    "      key: widget.navigatorKey,",
    "      onGenerateRoute: (RouteSettings settings) {",
    "        return MaterialPageRoute<void>(",
    "          settings: settings,",
    "          builder: (BuildContext context) {",
    "            switch (settings.name) {",
    "              case '/':",
    "                return RootPage(destination: widget.destination);",
    "              case '/list':",
    "                return ListPage(destination: widget.destination);",
    "              case '/text':",
    "                return TextPage(destination: widget.destination);",
    "            }",
    "            assert(false);",
    "            return const SizedBox();",
    "          },",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter [NavigationBar] with nested [Navigator] destinations"
},
"Flutter PaginatedDataTable Example": {
  "prefix": "flutter-paginated-data-table-one",
  "sccope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PaginatedDataTable].",
    "",
    "class MyDataSource extends DataTableSource {",
    "  @override",
    "  int get rowCount => 3;",
    "",
    "  @override",
    "  DataRow? getRow(int index) {",
    "    switch (index) {",
    "      case 0:",
    "        return const DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Sarah')),",
    "            DataCell(Text('19')),",
    "            DataCell(Text('Student')),",
    "          ],",
    "        );",
    "      case 1:",
    "        return const DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('Janine')),",
    "            DataCell(Text('43')),",
    "            DataCell(Text('Professor')),",
    "          ],",
    "        );",
    "      case 2:",
    "        return const DataRow(",
    "          cells: <DataCell>[",
    "            DataCell(Text('William')),",
    "            DataCell(Text('27')),",
    "            DataCell(Text('Associate Professor')),",
    "          ],",
    "        );",
    "      default:",
    "        return null;",
    "    }",
    "  }",
    "",
    "  @override",
    "  bool get isRowCountApproximate => false;",
    "",
    "  @override",
    "  int get selectedRowCount => 0;",
    "}",
    "",
    "final DataTableSource dataSource = MyDataSource();",
    "",
    "void main() => runApp(const DataTableExampleApp());",
    "",
    "class DataTableExampleApp extends StatelessWidget {",
    "  const DataTableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SingleChildScrollView(",
    "        padding: EdgeInsets.all(12.0),",
    "        child: DataTableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DataTableExample extends StatelessWidget {",
    "  const DataTableExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return PaginatedDataTable(",
    "      columns: const <DataColumn>[",
    "        DataColumn(",
    "          label: Text('Name'),",
    "        ),",
    "        DataColumn(",
    "          label: Text('Age'),",
    "        ),",
    "        DataColumn(",
    "          label: Text('Role'),",
    "        ),",
    "      ],",
    "      source: dataSource,",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter PaginatedDataTable Example"
},
"Flutter PaginatedDataTable Example": {
  "prefix": "flutter-paginated-data-table-two",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [PaginatedDataTable].",
    "",
    "class MyDataSource extends DataTableSource {",
    "  static const List<int> _displayIndexToRawIndex = <int>[0, 3, 4, 5, 6];",
    "",
    "  late List<List<Comparable<Object>>> sortedData;",
    "  void setData(List<List<Comparable<Object>>> rawData, int sortColumn,",
    "      bool sortAscending) {",
    "    sortedData = rawData.toList()",
    "      ..sort((List<Comparable<Object>> a, List<Comparable<Object>> b) {",
    "        final Comparable<Object> cellA = a[_displayIndexToRawIndex[sortColumn]];",
    "        final Comparable<Object> cellB = b[_displayIndexToRawIndex[sortColumn]];",
    "        return cellA.compareTo(cellB) * (sortAscending ? 1 : -1);",
    "      });",
    "    notifyListeners();",
    "  }",
    "",
    "  @override",
    "  int get rowCount => sortedData.length;",
    "",
    "  static DataCell cellFor(Object data) {",
    "    String value;",
    "    if (data is DateTime) {",
    "      value =",
    "          '${data.year}-${data.month.toString().padLeft(2, '0')}-${data.day.toString().padLeft(2, '0')}';",
    "    } else {",
    "      value = data.toString();",
    "    }",
    "    return DataCell(Text(value));",
    "  }",
    "",
    "  @override",
    "  DataRow? getRow(int index) {",
    "    return DataRow.byIndex(",
    "      index: sortedData[index][0] as int,",
    "      cells: <DataCell>[",
    "        cellFor(",
    "            'S${sortedData[index][1]}E${sortedData[index][2].toString().padLeft(2, '0')}'),",
    "        cellFor(sortedData[index][3]),",
    "        cellFor(sortedData[index][4]),",
    "        cellFor(sortedData[index][5]),",
    "        cellFor(sortedData[index][6]),",
    "      ],",
    "    );",
    "  }",
    "",
    "  @override",
    "  bool get isRowCountApproximate => false;",
    "",
    "  @override",
    "  int get selectedRowCount => 0;",
    "}",
    "",
    "void main() => runApp(const DataTableExampleApp());",
    "",
    "class DataTableExampleApp extends StatelessWidget {",
    "  const DataTableExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: SingleChildScrollView(",
    "        padding: EdgeInsets.all(12.0),",
    "        child: DataTableExample(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class DataTableExample extends StatefulWidget {",
    "  const DataTableExample({super.key});",
    "",
    "  @override",
    "  State<DataTableExample> createState() => _DataTableExampleState();",
    "}",
    "",
    "class _DataTableExampleState extends State<DataTableExample> {",
    "  final MyDataSource dataSource = MyDataSource()..setData(episodes, 0, true);",
    "",
    "  int _columnIndex = 0;",
    "  bool _columnAscending = true;",
    "",
    "  void _sort(int columnIndex, bool ascending) {",
    "    setState(() {",
    "      _columnIndex = columnIndex;",
    "      _columnAscending = ascending;",
    "      dataSource.setData(episodes, _columnIndex, _columnAscending);",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return PaginatedDataTable(",
    "      sortColumnIndex: _columnIndex,",
    "      sortAscending: _columnAscending,",
    "      columns: <DataColumn>[",
    "        DataColumn(",
    "          label: const Text('Episode'),",
    "          onSort: _sort,",
    "        ),",
    "        DataColumn(",
    "          label: const Text('Title'),",
    "          onSort: _sort,",
    "        ),",
    "        DataColumn(",
    "          label: const Text('Director'),",
    "          onSort: _sort,",
    "        ),",
    "        DataColumn(",
    "          label: const Text('Writer(s)'),",
    "          onSort: _sort,",
    "        ),",
    "        DataColumn(",
    "          label: const Text('Air Date'),",
    "          onSort: _sort,",
    "        ),",
    "      ],",
    "      source: dataSource,",
    "    );",
    "  }",
    "}",
    "",
    "final List<List<Comparable<Object>>> episodes = <List<Comparable<Object>>>[",
    "  <Comparable<Object>>[",
    "    1,",
    "    1,",
    "    1,",
    "    'Strange New Worlds',",
    "    'Akiva Goldsman',",
    "    'Akiva Goldsman, Alex Kurtzman, Jenny Lumet',",
    "    DateTime(2022, 5, 5),",
    "  ],",
    "  <Comparable<Object>>[",
    "    2,",
    "    1,",
    "    2,",
    "    'Children of the Comet',",
    "    'Maja Vrvilo',",
    "    'Henry Alonso Myers, Sarah Tarkoff',",
    "    DateTime(2022, 5, 12),",
    "  ],",
    "  <Comparable<Object>>[",
    "    3,",
    "    1,",
    "    3,",
    "    'Ghosts of Illyria',",
    "    'Leslie Hope',",
    "    'Akela Cooper, Bill Wolkoff',",
    "    DateTime(2022, 5, 19),",
    "  ],",
    "  <Comparable<Object>>[",
    "    4,",
    "    1,",
    "    4,",
    "    'Memento Mori',",
    "    'Dan Liu',",
    "    'Davy Perez, Beau DeMayo',",
    "    DateTime(2022, 5, 26),",
    "  ],",
    "  <Comparable<Object>>[",
    "    5,",
    "    1,",
    "    5,",
    "    'Spock Amok',",
    "    'Rachel Leiterman',",
    "    'Henry Alonso Myers, Robin Wasserman',",
    "    DateTime(2022, 6, 2),",
    "  ],",
    "  <Comparable<Object>>[",
    "    6,",
    "    1,",
    "    6,",
    "    'Lift Us Where Suffering Cannot Reach',",
    "    'Andi Armaganian',",
    "    'Robin Wasserman, Bill Wolkoff',",
    "    DateTime(2022, 6, 9),",
    "  ],",
    "  <Comparable<Object>>[",
    "    7,",
    "    1,",
    "    7,",
    "    'The Serene Squall',",
    "    'Sydney Freeland',",
    "    'Beau DeMayo, Sarah Tarkoff',",
    "    DateTime(2022, 6, 16),",
    "  ],",
    "  <Comparable<Object>>[",
    "    8,",
    "    1,",
    "    8,",
    "    'The Elysian Kingdom',",
    "    'Amanda Row',",
    "    'Akela Cooper, Onitra Johnson',",
    "    DateTime(2022, 6, 23),",
    "  ],",
    "  <Comparable<Object>>[",
    "    9,",
    "    1,",
    "    9,",
    "    'All Those Who Wander',",
    "    'Christopher J. Byrne',",
    "    'Davy Perez',",
    "    DateTime(2022, 6, 30),",
    "  ],",
    "  <Comparable<Object>>[",
    "    10,",
    "    2,",
    "    10,",
    "    'A Quality of Mercy',",
    "    'Chris Fisher',",
    "    'Henry Alonso Myers, Akiva Goldsman',",
    "    DateTime(2022, 7, 7),",
    "  ],",
    "  <Comparable<Object>>[",
    "    11,",
    "    2,",
    "    1,",
    "    'The Broken Circle',",
    "    'Chris Fisher',",
    "    'Henry Alonso Myers, Akiva Goldsman',",
    "    DateTime(2023, 6, 15),",
    "  ],",
    "  <Comparable<Object>>[",
    "    12,",
    "    2,",
    "    2,",
    "    'Ad Astra per Aspera',",
    "    'Valerie Weiss',",
    "    'Dana Horgan',",
    "    DateTime(2023, 6, 22),",
    "  ],",
    "  <Comparable<Object>>[",
    "    13,",
    "    2,",
    "    3,",
    "    'Tomorrow and Tomorrow and Tomorrow',",
    "    'Amanda Row',",
    "    'David Reed',",
    "    DateTime(2023, 6, 29),",
    "  ],",
    "  <Comparable<Object>>[",
    "    14,",
    "    2,",
    "    4,",
    "    'Among the Lotus Eaters',",
    "    'Eduardo Sánchez',",
    "    'Kirsten Beyer, Davy Perez',",
    "    DateTime(2023, 7, 6),",
    "  ],",
    "  <Comparable<Object>>[",
    "    15,",
    "    2,",
    "    5,",
    "    'Charades',",
    "    'Jordan Canning',",
    "    'Kathryn Lyn, Henry Alonso Myers',",
    "    DateTime(2023, 7, 13),",
    "  ],",
    "  <Comparable<Object>>[",
    "    16,",
    "    2,",
    "    6,",
    "    'Lost in Translation',",
    "    'Dan Liu',",
    "    'Onitra Johnson, David Reed',",
    "    DateTime(2023, 7, 20),",
    "  ],",
    "  <Comparable<Object>>[",
    "    17,",
    "    2,",
    "    7,",
    "    'Those Old Scientists',",
    "    'Jonathan Frakes',",
    "    'Kathryn Lyn, Bill Wolkoff',",
    "    DateTime(2023, 7, 22),",
    "  ],",
    "  <Comparable<Object>>[",
    "    18,",
    "    2,",
    "    8,",
    "    'Under the Cloak of War',",
    "    '',",
    "    'Davy Perez',",
    "    DateTime(2023, 7, 27),",
    "  ],",
    "  <Comparable<Object>>[",
    "    19,",
    "    2,",
    "    9,",
    "    'Subspace Rhapsody',",
    "    '',",
    "    'Dana Horgan, Bill Wolkoff',",
    "    DateTime(2023, 8, 3),",
    "  ],",
    "  <Comparable<Object>>[",
    "    20,",
    "    2,",
    "    10,",
    "    'Hegemony',",
    "    '',",
    "    'Henry Alonso Myers',",
    "    DateTime(2023, 8, 10),",
    "  ],",
    "];",
    ""
  ],
  "description": "Flutter PaginatedDataTable Example"
},
"Flutter ThemeData Example": {
  "prefix": "flutter-themedata-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "void main() {",
    "  runApp(const ThemeDataExampleApp());",
    "}",
    "",
    "// This app's theme specifies an overall ColorScheme as well as overrides",
    "// for the default configuration of FloatingActionButtons. To customize",
    "// the appearance of other components, add additional component specific",
    "// themes, rather than tweaking the color scheme.",
    "//",
    "// Creating an entire color scheme from a single seed color is a good",
    "// way to ensure a visually appealing color palette where the default",
    "// component colors have sufficient contrast for accessibility. Another",
    "// good way to create an app's color scheme is to use",
    "// ColorScheme.fromImageProvider.",
    "//",
    "// The color scheme reflects the platform's light or dark setting",
    "// which is retrieved with `MediaQuery.platformBrightnessOf`. The color",
    "// scheme's colors will be different for light and dark settings although",
    "// they'll all be related to the seed color in both cases.",
    "//",
    "// Color scheme colors have been used where component defaults have",
    "// been overidden so that the app will look good and remain accessible",
    "// in both light and dark modes.",
    "//",
    "// Text styles are derived from the theme's textTheme (not the obsolete",
    "// primaryTextTheme property) and then customized using copyWith.",
    "// Using the _on_ version of a color scheme color as the foreground,",
    "// as in `tertiary` and `onTertiary`, guarantees sufficient contrast",
    "// for readability/accessibility.",
    "",
    "class ThemeDataExampleApp extends StatelessWidget {",
    "  const ThemeDataExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ColorScheme colorScheme = ColorScheme.fromSeed(",
    "      brightness: MediaQuery.platformBrightnessOf(context),",
    "      seedColor: Colors.indigo,",
    "    );",
    "    return MaterialApp(",
    "      title: 'ThemeData Demo',",
    "      theme: ThemeData(",
    "        colorScheme: colorScheme,",
    "        floatingActionButtonTheme: FloatingActionButtonThemeData(",
    "          backgroundColor: colorScheme.tertiary,",
    "          foregroundColor: colorScheme.onTertiary,",
    "        ),",
    "      ),",
    "      home: const Home(),",
    "    );",
    "  }",
    "}",
    "",
    "class Home extends StatefulWidget {",
    "  const Home({super.key});",
    "",
    "  @override",
    "  State<Home> createState() => _HomeState();",
    "}",
    "",
    "class _HomeState extends State<Home> {",
    "  int buttonPressCount = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final ThemeData theme = Theme.of(context);",
    "    final ColorScheme colorScheme = theme.colorScheme;",
    "    final double pointCount = 8 + (buttonPressCount % 6);",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Column(",
    "          children: [",
    "            // const Text('Press the + Button'),",
    "            const Text('Theme Data '),",
    "          ],",
    "        ),",
    "      ),",
    "      // An AnimatedContainer makes the decoration changes entertaining.",
    "      body: AnimatedContainer(",
    "        duration: const Duration(milliseconds: 500),",
    "        margin: const EdgeInsets.all(32),",
    "        alignment: Alignment.center,",
    "        decoration: ShapeDecoration(",
    "          color: colorScheme.tertiaryContainer,",
    "          shape: StarBorder(",
    "            points: pointCount,",
    "            pointRounding: 0.4,",
    "            valleyRounding: 0.6,",
    "            side: BorderSide(width: 9, color: colorScheme.tertiary),",
    "          ),",
    "        ),",
    "        child: Text(",
    "          '${pointCount.toInt()} Points',",
    "          style: theme.textTheme.headlineMedium!.copyWith(",
    "            color: colorScheme.onPrimaryContainer,",
    "          ),",
    "        ),",
    "      ),",
    "      floatingActionButton: FloatingActionButton(",
    "        onPressed: () {",
    "          setState(() {",
    "            buttonPressCount += 1;",
    "          });",
    "        },",
    "        tooltip: \"Change the shape's point count\",",
    "        child: const Icon(Icons.add),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ThemeData Example"
},
"Flutter ImageProvider Example": {
  "prefix": "flutter-image-provider",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:async';",
    "import 'dart:io';",
    "import 'dart:ui' as ui;",
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "",
    "@immutable",
    "class CustomNetworkImage extends ImageProvider<Uri> {",
    "  const CustomNetworkImage(this.url);",
    "",
    "  final String url;",
    "",
    "  @override",
    "  Future<Uri> obtainKey(ImageConfiguration configuration) {",
    "    final Uri result = Uri.parse(url).replace(",
    "      queryParameters: <String, String>{",
    "        'dpr': '${configuration.devicePixelRatio}',",
    "        'locale': '${configuration.locale?.toLanguageTag()}',",
    "        'platform': '${configuration.platform?.name}',",
    "        'width': '${configuration.size?.width}',",
    "        'height': '${configuration.size?.height}',",
    "        'bidi': '${configuration.textDirection?.name}',",
    "      },",
    "    );",
    "    return SynchronousFuture<Uri>(result);",
    "  }",
    "",
    "  static HttpClient get _httpClient {",
    "    HttpClient? client;",
    "    assert(() {",
    "      if (debugNetworkImageHttpClientProvider != null) {",
    "        client = debugNetworkImageHttpClientProvider!();",
    "      }",
    "      return true;",
    "    }());",
    "    return client ?? HttpClient()",
    "      ..autoUncompress = false;",
    "  }",
    "",
    "  @override",
    "  ImageStreamCompleter loadImage(Uri key, ImageDecoderCallback decode) {",
    "    final StreamController<ImageChunkEvent> chunkEvents =",
    "        StreamController<ImageChunkEvent>();",
    "    debugPrint('Fetching \"$key\"...');",
    "    return MultiFrameImageStreamCompleter(",
    "      codec: _httpClient",
    "          .getUrl(key)",
    "          .then<HttpClientResponse>(",
    "              (HttpClientRequest request) => request.close())",
    "          .then<Uint8List>((HttpClientResponse response) {",
    "            return consolidateHttpClientResponseBytes(",
    "              response,",
    "              onBytesReceived: (int cumulative, int? total) {",
    "                chunkEvents.add(ImageChunkEvent(",
    "                  cumulativeBytesLoaded: cumulative,",
    "                  expectedTotalBytes: total,",
    "                ));",
    "              },",
    "            );",
    "          })",
    "          .catchError((Object e, StackTrace stack) {",
    "            scheduleMicrotask(() {",
    "              PaintingBinding.instance.imageCache.evict(key);",
    "            });",
    "            return Future<Uint8List>.error(e, stack);",
    "          })",
    "          .whenComplete(chunkEvents.close)",
    "          .then<ui.ImmutableBuffer>(ui.ImmutableBuffer.fromUint8List)",
    "          .then<ui.Codec>(decode),",
    "      chunkEvents: chunkEvents.stream,",
    "      scale: 1.0,",
    "      debugLabel: '\"key\"',",
    "      informationCollector: () => <DiagnosticsNode>[",
    "        DiagnosticsProperty<ImageProvider>('Image provider', this),",
    "        DiagnosticsProperty<Uri>('URL', key),",
    "      ],",
    "    );",
    "  }",
    "",
    "  @override",
    "  String toString() =>",
    "      '${objectRuntimeType(this, 'CustomNetworkImage')}(\"$url\")';",
    "}",
    "",
    "void main() => runApp(const ExampleApp());",
    "",
    "class ExampleApp extends StatelessWidget {",
    "  const ExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "          colorScheme: ColorScheme.fromSeed(seedColor: Color(0xff292929))),",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: Text(\"Image Provider\"),",
    "        ),",
    "        body: LayoutBuilder(",
    "          builder: (BuildContext context, BoxConstraints constraints) {",
    "            return Image(",
    "              image: const CustomNetworkImage(",
    "                  'https://flutter.github.io/assets-for-api-docs/assets/widgets/flamingos.jpg'),",
    "              width: constraints.hasBoundedWidth ? constraints.maxWidth : null,",
    "              height:",
    "                  constraints.hasBoundedHeight ? constraints.maxHeight : null,",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ImageProvider Example"
},
"Flutter ImageProvider Actions": {
  "prefix": "flutter-actions-example",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [Actions].",
    "",
    "void main() => runApp(const ActionsExampleApp());",
    "",
    "class ActionsExampleApp extends StatelessWidget {",
    "  const ActionsExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(title: const Text('Actions Sample')),",
    "        body: const Center(",
    "          child: ActionsExample(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "// A simple model class that notifies listeners when it changes.",
    "class Model {",
    "  ValueNotifier<bool> isDirty = ValueNotifier<bool>(false);",
    "  ValueNotifier<int> data = ValueNotifier<int>(0);",
    "",
    "  int save() {",
    "    if (isDirty.value) {",
    "      debugPrint('Saved Data: ${data.value}');",
    "      isDirty.value = false;",
    "    }",
    "    return data.value;",
    "  }",
    "",
    "  void setValue(int newValue) {",
    "    isDirty.value = data.value != newValue;",
    "    data.value = newValue;",
    "  }",
    "}",
    "",
    "class ModifyIntent extends Intent {",
    "  const ModifyIntent(this.value);",
    "",
    "  final int value;",
    "}",
    "",
    "// An Action that modifies the model by setting it to the value that it gets",
    "// from the Intent passed to it when invoked.",
    "class ModifyAction extends Action<ModifyIntent> {",
    "  ModifyAction(this.model);",
    "",
    "  final Model model;",
    "",
    "  @override",
    "  void invoke(covariant ModifyIntent intent) {",
    "    model.setValue(intent.value);",
    "  }",
    "}",
    "",
    "// An intent for saving data.",
    "class SaveIntent extends Intent {",
    "  const SaveIntent();",
    "}",
    "",
    "// An Action that saves the data in the model it is created with.",
    "class SaveAction extends Action<SaveIntent> {",
    "  SaveAction(this.model);",
    "",
    "  final Model model;",
    "",
    "  @override",
    "  int invoke(covariant SaveIntent intent) => model.save();",
    "}",
    "",
    "class SaveButton extends StatefulWidget {",
    "  const SaveButton(this.valueNotifier, {super.key});",
    "",
    "  final ValueNotifier<bool> valueNotifier;",
    "",
    "  @override",
    "  State<SaveButton> createState() => _SaveButtonState();",
    "}",
    "",
    "class _SaveButtonState extends State<SaveButton> {",
    "  int savedValue = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListenableBuilder(",
    "      listenable: widget.valueNotifier,",
    "      builder: (BuildContext context, Widget? child) {",
    "        return TextButton.icon(",
    "          icon: const Icon(Icons.save),",
    "          label: Text('$savedValue'),",
    "          style: ButtonStyle(",
    "            foregroundColor: MaterialStatePropertyAll<Color>(",
    "              widget.valueNotifier.value ? Colors.red : Colors.green,",
    "            ),",
    "          ),",
    "          onPressed: () {",
    "            setState(() {",
    "              savedValue = Actions.invoke(context, const SaveIntent())! as int;",
    "            });",
    "          },",
    "        );",
    "      },",
    "    );",
    "  }",
    "}",
    "",
    "class ActionsExample extends StatefulWidget {",
    "  const ActionsExample({super.key});",
    "",
    "  @override",
    "  State<ActionsExample> createState() => _ActionsExampleState();",
    "}",
    "",
    "class _ActionsExampleState extends State<ActionsExample> {",
    "  Model model = Model();",
    "  int count = 0;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Actions(",
    "      actions: <Type, Action<Intent>>{",
    "        ModifyIntent: ModifyAction(model),",
    "        SaveIntent: SaveAction(model),",
    "      },",
    "      child: Builder(",
    "        builder: (BuildContext context) {",
    "          return Row(",
    "            mainAxisAlignment: MainAxisAlignment.spaceAround,",
    "            children: <Widget>[",
    "              const Spacer(),",
    "              Column(",
    "                mainAxisAlignment: MainAxisAlignment.center,",
    "                children: <Widget>[",
    "                  IconButton(",
    "                    icon: const Icon(Icons.exposure_plus_1),",
    "                    onPressed: () {",
    "                      Actions.invoke(context, ModifyIntent(++count));",
    "                    },",
    "                  ),",
    "                  ListenableBuilder(",
    "                      listenable: model.data,",
    "                      builder: (BuildContext context, Widget? child) {",
    "                        return Padding(",
    "                          padding: const EdgeInsets.all(8.0),",
    "                          child: Text('${model.data.value}', style: Theme.of(context).textTheme.headlineMedium),",
    "                        );",
    "                      }),",
    "                  IconButton(",
    "                    icon: const Icon(Icons.exposure_minus_1),",
    "                    onPressed: () {",
    "                      Actions.invoke(context, ModifyIntent(--count));",
    "                    },",
    "                  ),",
    "                ],",
    "              ),",
    "              SaveButton(model.isDirty),",
    "              const Spacer(),",
    "            ],",
    "          );",
    "        },",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ImageProvider Actions"
},
"Flutter Form with Confirmation Dialog": {
  "prefix": "flutter-form-with-confirm-dialog",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "/// This sample demonstrates showing a confirmation dialog when the user",
    "/// attempts to navigate away from a page with unsaved [Form] data.",
    "",
    "void main() => runApp(const FormApp());",
    "",
    "class FormApp extends StatelessWidget {",
    "  const FormApp({",
    "    super.key,",
    "  });",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Confirmation Dialog Example'),",
    "        ),",
    "        body: Center(",
    "          child: _SaveableForm(),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class _SaveableForm extends StatefulWidget {",
    "  @override",
    "  State<_SaveableForm> createState() => _SaveableFormState();",
    "}",
    "",
    "class _SaveableFormState extends State<_SaveableForm> {",
    "  final TextEditingController _controller = TextEditingController();",
    "  String _savedValue = '';",
    "  bool _isDirty = false;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _controller.addListener(_onChanged);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.removeListener(_onChanged);",
    "    super.dispose();",
    "  }",
    "",
    "  void _onChanged() {",
    "    final bool nextIsDirty = _savedValue != _controller.text;",
    "    if (nextIsDirty == _isDirty) {",
    "      return;",
    "    }",
    "    setState(() {",
    "      _isDirty = nextIsDirty;",
    "    });",
    "  }",
    "",
    "  Future<void> _showDialog() async {",
    "    final bool? shouldDiscard = await showDialog<bool>(",
    "      context: context,",
    "      builder: (BuildContext context) {",
    "        return AlertDialog(",
    "          title: const Text('Are you sure?'),",
    "          content: const Text('Any unsaved changes will be lost!'),",
    "          actions: <Widget>[",
    "            TextButton(",
    "              child: const Text('Yes, discard my changes'),",
    "              onPressed: () {",
    "                Navigator.pop(context, true);",
    "              },",
    "            ),",
    "            TextButton(",
    "              child: const Text('No, continue editing'),",
    "              onPressed: () {",
    "                Navigator.pop(context, false);",
    "              },",
    "            ),",
    "          ],",
    "        );",
    "      },",
    "    );",
    "",
    "    if (shouldDiscard ?? false) {",
    "      // Since this is the root route, quit the app where possible by invoking",
    "      // the SystemNavigator. If this wasn't the root route, then",
    "      // Navigator.maybePop could be used instead.",
    "      // See https://github.com/flutter/flutter/issues/11490",
    "      await SystemNavigator.pop();",
    "    }",
    "  }",
    "",
    "  void _save(String? value) {",
    "    setState(() {",
    "      _savedValue = value ?? '';",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Column(",
    "        mainAxisAlignment: MainAxisAlignment.center,",
    "        children: <Widget>[",
    "          const Text(",
    "              'If the field below is unsaved, a confirmation dialog will be shown on back.'),",
    "          const SizedBox(height: 20.0),",
    "          Form(",
    "            canPop: !_isDirty,",
    "            onPopInvoked: (didPop) {",
    "              if (didPop) {",
    "                return;",
    "              }",
    "              _showDialog();",
    "            },",
    "            autovalidateMode: AutovalidateMode.always,",
    "            child: Column(",
    "              mainAxisAlignment: MainAxisAlignment.center,",
    "              children: <Widget>[",
    "                TextFormField(",
    "                  controller: _controller,",
    "                  onFieldSubmitted: (String? value) {",
    "                    _save(value);",
    "                  },",
    "                ),",
    "                TextButton(",
    "                  onPressed: () {",
    "                    _save(_controller.text);",
    "                  },",
    "                  child: Row(",
    "                    children: <Widget>[",
    "                      const Text('Save'),",
    "                      if (_controller.text.isNotEmpty)",
    "                        Icon(",
    "                          _isDirty ? Icons.warning : Icons.check,",
    "                        ),",
    "                    ],",
    "                  ),",
    "                ),",
    "              ],",
    "            ),",
    "          ),",
    "          TextButton(",
    "            onPressed: () {",
    "              if (_isDirty) {",
    "                _showDialog();",
    "                return;",
    "              }",
    "              // Since this is the root route, quit the app where possible by",
    "              // invoking the SystemNavigator. If this wasn't the root route,",
    "              // then Navigator.maybePop could be used instead.",
    "              // See https://github.com/flutter/flutter/issues/11490",
    "              SystemNavigator.pop();",
    "            },",
    "            child: const Text('Go back'),",
    "          ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Form with Confirmation Dialog"
},
"Flutter Constraints Example": {
  "prefix": "flutter-constraints-example",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const HomePage());",
    "",
    "const red = Colors.red;",
    "const green = Colors.green;",
    "const blue = Colors.blue;",
    "const big = TextStyle(fontSize: 30);",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class HomePage extends StatelessWidget {",
    "  const HomePage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const FlutterLayoutArticle([",
    "      Example1(),",
    "      Example2(),",
    "      Example3(),",
    "      Example4(),",
    "      Example5(),",
    "      Example6(),",
    "      Example7(),",
    "      Example8(),",
    "      Example9(),",
    "      Example10(),",
    "      Example11(),",
    "      Example12(),",
    "      Example13(),",
    "      Example14(),",
    "      Example15(),",
    "      Example16(),",
    "      Example17(),",
    "      Example18(),",
    "      Example19(),",
    "      Example20(),",
    "      Example21(),",
    "      Example22(),",
    "      Example23(),",
    "      Example24(),",
    "      Example25(),",
    "      Example26(),",
    "      Example27(),",
    "      Example28(),",
    "      Example29(),",
    "    ]);",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "abstract class Example extends StatelessWidget {",
    "  const Example({super.key});",
    "",
    "  String get code;",
    "",
    "  String get explanation;",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class FlutterLayoutArticle extends StatefulWidget {",
    "  const FlutterLayoutArticle(",
    "    this.examples, {",
    "    super.key,",
    "  });",
    "",
    "  final List<Example> examples;",
    "",
    "  @override",
    "  State<FlutterLayoutArticle> createState() => _FlutterLayoutArticleState();",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class _FlutterLayoutArticleState extends State<FlutterLayoutArticle> {",
    "  late int count;",
    "  late Widget example;",
    "  late String code;",
    "  late String explanation;",
    "",
    "  @override",
    "  void initState() {",
    "    count = 1;",
    "    code = const Example1().code;",
    "    explanation = const Example1().explanation;",
    "",
    "    super.initState();",
    "  }",
    "",
    "  @override",
    "  void didUpdateWidget(FlutterLayoutArticle oldWidget) {",
    "    super.didUpdateWidget(oldWidget);",
    "    var example = widget.examples[count - 1];",
    "    code = example.code;",
    "    explanation = example.explanation;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "      title: 'Flutter Layout Article',",
    "      home: SafeArea(",
    "        child: Material(",
    "          color: Colors.black,",
    "          child: FittedBox(",
    "            child: Container(",
    "              width: 400,",
    "              height: 670,",
    "              color: const Color(0xFFCCCCCC),",
    "              child: Column(",
    "                crossAxisAlignment: CrossAxisAlignment.center,",
    "                children: [",
    "                  Expanded(",
    "                      child: ConstrainedBox(",
    "                          constraints: const BoxConstraints.tightFor(",
    "                              width: double.infinity, height: double.infinity),",
    "                          child: widget.examples[count - 1])),",
    "                  Container(",
    "                    height: 50,",
    "                    width: double.infinity,",
    "                    color: Colors.black,",
    "                    child: SingleChildScrollView(",
    "                      scrollDirection: Axis.horizontal,",
    "                      child: Row(",
    "                        mainAxisSize: MainAxisSize.min,",
    "                        children: [",
    "                          for (int i = 0; i < widget.examples.length; i++)",
    "                            Container(",
    "                              width: 58,",
    "                              padding: const EdgeInsets.only(left: 4, right: 4),",
    "                              child: button(i + 1),",
    "                            ),",
    "                        ],",
    "                      ),",
    "                    ),",
    "                  ),",
    "                  Container(",
    "                    height: 273,",
    "                    color: Colors.grey[50],",
    "                    child: Scrollbar(",
    "                      child: SingleChildScrollView(",
    "                        key: ValueKey(count),",
    "                        child: Padding(",
    "                          padding: const EdgeInsets.all(10),",
    "                          child: Column(",
    "                            children: [",
    "                              Center(child: Text(code)),",
    "                              const SizedBox(height: 15),",
    "                              Text(",
    "                                explanation,",
    "                                style: TextStyle(",
    "                                    color: Colors.blue[900],",
    "                                    fontStyle: FontStyle.italic),",
    "                              ),",
    "                            ],",
    "                          ),",
    "                        ),",
    "                      ),",
    "                    ),",
    "                  ),",
    "                ],",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "",
    "  Widget button(int exampleNumber) {",
    "    return Button(",
    "      key: ValueKey('button$exampleNumber'),",
    "      isSelected: count == exampleNumber,",
    "      exampleNumber: exampleNumber,",
    "      onPressed: () {",
    "        showExample(",
    "          exampleNumber,",
    "          widget.examples[exampleNumber - 1].code,",
    "          widget.examples[exampleNumber - 1].explanation,",
    "        );",
    "      },",
    "    );",
    "  }",
    "",
    "  void showExample(int exampleNumber, String code, String explanation) {",
    "    setState(() {",
    "      count = exampleNumber;",
    "      this.code = code;",
    "      this.explanation = explanation;",
    "    });",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Button extends StatelessWidget {",
    "  final bool isSelected;",
    "  final int exampleNumber;",
    "  final VoidCallback onPressed;",
    "",
    "  const Button({",
    "    super.key,",
    "    required this.isSelected,",
    "    required this.exampleNumber,",
    "    required this.onPressed,",
    "  });",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return TextButton(",
    "      style: TextButton.styleFrom(",
    "        foregroundColor: Colors.white,",
    "        backgroundColor: isSelected ? Colors.grey : Colors.grey[800],",
    "      ),",
    "      child: Text(exampleNumber.toString()),",
    "      onPressed: () {",
    "        Scrollable.ensureVisible(",
    "          context,",
    "          duration: const Duration(milliseconds: 350),",
    "          curve: Curves.easeOut,",
    "          alignment: 0.5,",
    "        );",
    "        onPressed();",
    "      },",
    "    );",
    "  }",
    "}",
    "//////////////////////////////////////////////////",
    "",
    "class Example1 extends Example {",
    "  const Example1({super.key});",
    "",
    "  @override",
    "  final code = 'Container(color: red)';",
    "",
    "  @override",
    "  final explanation = 'The screen is the parent of the Container, '",
    "      'and it forces the Container to be exactly the same size as the screen.'",
    "      '\\n\\n'",
    "      'So the Container fills the screen and paints it red.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(color: red);",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example2 extends Example {",
    "  const Example2({super.key});",
    "",
    "  @override",
    "  final code = 'Container(width: 100, height: 100, color: red)';",
    "  @override",
    "  final String explanation =",
    "      'The red Container wants to be 100x100, but it can\\'t, '",
    "      'because the screen forces it to be exactly the same size as the screen.'",
    "      '\\n\\n'",
    "      'So the Container fills the screen.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(width: 100, height: 100, color: red);",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example3 extends Example {",
    "  const Example3({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: Container(width: 100, height: 100, color: red))';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the Center to be exactly the same size as the screen, '",
    "      'so the Center fills the screen.'",
    "      '\\n\\n'",
    "      'The Center tells the Container that it can be any size it wants, but not bigger than the screen.'",
    "      'Now the Container can indeed be 100x100.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Container(width: 100, height: 100, color: red),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example4 extends Example {",
    "  const Example4({super.key});",
    "",
    "  @override",
    "  final code = 'Align(\\n'",
    "      '   alignment: Alignment.bottomRight,\\n'",
    "      '   child: Container(width: 100, height: 100, color: red))';",
    "  @override",
    "  final String explanation =",
    "      'This is different from the previous example in that it uses Align instead of Center.'",
    "      '\\n\\n'",
    "      'Align also tells the Container that it can be any size it wants, but if there is empty space it won\\'t center the Container. '",
    "      'Instead, it aligns the Container to the bottom-right of the available space.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Align(",
    "      alignment: Alignment.bottomRight,",
    "      child: Container(width: 100, height: 100, color: red),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example5 extends Example {",
    "  const Example5({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: Container(\\n'",
    "      '              color: red,\\n'",
    "      '              width: double.infinity,\\n'",
    "      '              height: double.infinity))';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the Center to be exactly the same size as the screen, '",
    "      'so the Center fills the screen.'",
    "      '\\n\\n'",
    "      'The Center tells the Container that it can be any size it wants, but not bigger than the screen.'",
    "      'The Container wants to be of infinite size, but since it can\\'t be bigger than the screen, it just fills the screen.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Container(",
    "          width: double.infinity, height: double.infinity, color: red),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example6 extends Example {",
    "  const Example6({super.key});",
    "",
    "  @override",
    "  final code = 'Center(child: Container(color: red))';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the Center to be exactly the same size as the screen, '",
    "      'so the Center fills the screen.'",
    "      '\\n\\n'",
    "      'The Center tells the Container that it can be any size it wants, but not bigger than the screen.'",
    "      '\\n\\n'",
    "      'Since the Container has no child and no fixed size, it decides it wants to be as big as possible, so it fills the whole screen.'",
    "      '\\n\\n'",
    "      'But why does the Container decide that? '",
    "      'Simply because that\\'s a design decision by those who created the Container widget. '",
    "      'It could have been created differently, and you have to read the Container documentation to understand how it behaves, depending on the circumstances. ';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Container(color: red),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example7 extends Example {",
    "  const Example7({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: Container(color: red\\n'",
    "      '      child: Container(color: green, width: 30, height: 30)))';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the Center to be exactly the same size as the screen, '",
    "      'so the Center fills the screen.'",
    "      '\\n\\n'",
    "      'The Center tells the red Container that it can be any size it wants, but not bigger than the screen.'",
    "      'Since the red Container has no size but has a child, it decides it wants to be the same size as its child.'",
    "      '\\n\\n'",
    "      'The red Container tells its child that it can be any size it wants, but not bigger than the screen.'",
    "      '\\n\\n'",
    "      'The child is a green Container that wants to be 30x30.'",
    "      '\\n\\n'",
    "      'Since the red `Container` has no size but has a child, it decides it wants to be the same size as its child. '",
    "      'The red color isn\\'t visible, since the green Container entirely covers all of the red Container.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Container(",
    "        color: red,",
    "        child: Container(color: green, width: 30, height: 30),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example8 extends Example {",
    "  const Example8({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: Container(color: red\\n'",
    "      '      padding: const EdgeInsets.all(20),\\n'",
    "      '      child: Container(color: green, width: 30, height: 30)))';",
    "  @override",
    "  final String explanation =",
    "      'The red Container sizes itself to its children size, but it takes its own padding into consideration. '",
    "      'So it is also 30x30 plus padding. '",
    "      'The red color is visible because of the padding, and the green Container has the same size as in the previous example.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: Container(",
    "        padding: const EdgeInsets.all(20),",
    "        color: red,",
    "        child: Container(color: green, width: 30, height: 30),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example9 extends Example {",
    "  const Example9({super.key});",
    "",
    "  @override",
    "  final code = 'ConstrainedBox(\\n'",
    "      '   constraints: BoxConstraints(\\n'",
    "      '              minWidth: 70, minHeight: 70,\\n'",
    "      '              maxWidth: 150, maxHeight: 150),\\n'",
    "      '      child: Container(color: red, width: 10, height: 10)))';",
    "  @override",
    "  final String explanation =",
    "      'You might guess that the Container has to be between 70 and 150 pixels, but you would be wrong. '",
    "      'The ConstrainedBox only imposes ADDITIONAL constraints from those it receives from its parent.'",
    "      '\\n\\n'",
    "      'Here, the screen forces the ConstrainedBox to be exactly the same size as the screen, '",
    "      'so it tells its child Container to also assume the size of the screen, '",
    "      'thus ignoring its \\'constraints\\' parameter.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ConstrainedBox(",
    "      constraints: const BoxConstraints(",
    "        minWidth: 70,",
    "        minHeight: 70,",
    "        maxWidth: 150,",
    "        maxHeight: 150,",
    "      ),",
    "      child: Container(color: red, width: 10, height: 10),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example10 extends Example {",
    "  const Example10({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: ConstrainedBox(\\n'",
    "      '      constraints: BoxConstraints(\\n'",
    "      '                 minWidth: 70, minHeight: 70,\\n'",
    "      '                 maxWidth: 150, maxHeight: 150),\\n'",
    "      '        child: Container(color: red, width: 10, height: 10))))';",
    "  @override",
    "  final String explanation =",
    "      'Now, Center allows ConstrainedBox to be any size up to the screen size.'",
    "      '\\n\\n'",
    "      'The ConstrainedBox imposes ADDITIONAL constraints from its \\'constraints\\' parameter onto its child.'",
    "      '\\n\\n'",
    "      'The Container must be between 70 and 150 pixels. It wants to have 10 pixels, so it will end up having 70 (the MINIMUM).';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: ConstrainedBox(",
    "        constraints: const BoxConstraints(",
    "          minWidth: 70,",
    "          minHeight: 70,",
    "          maxWidth: 150,",
    "          maxHeight: 150,",
    "        ),",
    "        child: Container(color: red, width: 10, height: 10),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example11 extends Example {",
    "  const Example11({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: ConstrainedBox(\\n'",
    "      '      constraints: BoxConstraints(\\n'",
    "      '                 minWidth: 70, minHeight: 70,\\n'",
    "      '                 maxWidth: 150, maxHeight: 150),\\n'",
    "      '        child: Container(color: red, width: 1000, height: 1000))))';",
    "  @override",
    "  final String explanation =",
    "      'Center allows ConstrainedBox to be any size up to the screen size.'",
    "      'The ConstrainedBox imposes ADDITIONAL constraints from its \\'constraints\\' parameter onto its child'",
    "      '\\n\\n'",
    "      'The Container must be between 70 and 150 pixels. It wants to have 1000 pixels, so it ends up having 150 (the MAXIMUM).';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: ConstrainedBox(",
    "        constraints: const BoxConstraints(",
    "          minWidth: 70,",
    "          minHeight: 70,",
    "          maxWidth: 150,",
    "          maxHeight: 150,",
    "        ),",
    "        child: Container(color: red, width: 1000, height: 1000),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example12 extends Example {",
    "  const Example12({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: ConstrainedBox(\\n'",
    "      '      constraints: BoxConstraints(\\n'",
    "      '                 minWidth: 70, minHeight: 70,\\n'",
    "      '                 maxWidth: 150, maxHeight: 150),\\n'",
    "      '        child: Container(color: red, width: 100, height: 100))))';",
    "  @override",
    "  final String explanation =",
    "      'Center allows ConstrainedBox to be any size up to the screen size.'",
    "      'ConstrainedBox imposes ADDITIONAL constraints from its \\'constraints\\' parameter onto its child.'",
    "      '\\n\\n'",
    "      'The Container must be between 70 and 150 pixels. It wants to have 100 pixels, and that\\'s the size it has, since that\\'s between 70 and 150.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Center(",
    "      child: ConstrainedBox(",
    "        constraints: const BoxConstraints(",
    "          minWidth: 70,",
    "          minHeight: 70,",
    "          maxWidth: 150,",
    "          maxHeight: 150,",
    "        ),",
    "        child: Container(color: red, width: 100, height: 100),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example13 extends Example {",
    "  const Example13({super.key});",
    "",
    "  @override",
    "  final code = 'UnconstrainedBox(\\n'",
    "      '   child: Container(color: red, width: 20, height: 50));';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the UnconstrainedBox to be exactly the same size as the screen.'",
    "      'However, the UnconstrainedBox lets its child Container be any size it wants.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return UnconstrainedBox(",
    "      child: Container(color: red, width: 20, height: 50),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example14 extends Example {",
    "  const Example14({super.key});",
    "",
    "  @override",
    "  final code = 'UnconstrainedBox(\\n'",
    "      '   child: Container(color: red, width: 4000, height: 50));';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the UnconstrainedBox to be exactly the same size as the screen, '",
    "      'and UnconstrainedBox lets its child Container be any size it wants.'",
    "      '\\n\\n'",
    "      'Unfortunately, in this case the Container has 4000 pixels of width and is too big to fit in the UnconstrainedBox, '",
    "      'so the UnconstrainedBox displays the much dreaded \"overflow warning\".';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return UnconstrainedBox(",
    "      child: Container(color: red, width: 4000, height: 50),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example15 extends Example {",
    "  const Example15({super.key});",
    "",
    "  @override",
    "  final code = 'OverflowBox(\\n'",
    "      '   minWidth: 0,'",
    "      '   minHeight: 0,'",
    "      '   maxWidth: double.infinity,'",
    "      '   maxHeight: double.infinity,'",
    "      '   child: Container(color: red, width: 4000, height: 50));';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the OverflowBox to be exactly the same size as the screen, '",
    "      'and OverflowBox lets its child Container be any size it wants.'",
    "      '\\n\\n'",
    "      'OverflowBox is similar to UnconstrainedBox, and the difference is that it won\\'t display any warnings if the child doesn\\'t fit the space.'",
    "      '\\n\\n'",
    "      'In this case the Container is 4000 pixels wide, and is too big to fit in the OverflowBox, '",
    "      'but the OverflowBox simply shows as much as it can, with no warnings given.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return OverflowBox(",
    "      minWidth: 0,",
    "      minHeight: 0,",
    "      maxWidth: double.infinity,",
    "      maxHeight: double.infinity,",
    "      child: Container(color: red, width: 4000, height: 50),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example16 extends Example {",
    "  const Example16({super.key});",
    "",
    "  @override",
    "  final code = 'UnconstrainedBox(\\n'",
    "      '   child: Container(color: Colors.red, width: double.infinity, height: 100));';",
    "  @override",
    "  final String explanation =",
    "      'This won\\'t render anything, and you\\'ll see an error in the console.'",
    "      '\\n\\n'",
    "      'The UnconstrainedBox lets its child be any size it wants, '",
    "      'however its child is a Container with infinite size.'",
    "      '\\n\\n'",
    "      'Flutter can\\'t render infinite sizes, so it throws an error with the following message: '",
    "      '\"BoxConstraints forces an infinite width.\"';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return UnconstrainedBox(",
    "      child: Container(color: Colors.red, width: double.infinity, height: 100),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example17 extends Example {",
    "  const Example17({super.key});",
    "",
    "  @override",
    "  final code = 'UnconstrainedBox(\\n'",
    "      '   child: LimitedBox(maxWidth: 100,\\n'",
    "      '      child: Container(color: Colors.red,\\n'",
    "      '                       width: double.infinity, height: 100));';",
    "  @override",
    "  final String explanation = 'Here you won\\'t get an error anymore, '",
    "      'because when the LimitedBox is given an infinite size by the UnconstrainedBox, '",
    "      'it passes a maximum width of 100 down to its child.'",
    "      '\\n\\n'",
    "      'If you swap the UnconstrainedBox for a Center widget, '",
    "      'the LimitedBox won\\'t apply its limit anymore (since its limit is only applied when it gets infinite constraints), '",
    "      'and the width of the Container is allowed to grow past 100.'",
    "      '\\n\\n'",
    "      'This explains the difference between a LimitedBox and a ConstrainedBox.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return UnconstrainedBox(",
    "      child: LimitedBox(",
    "        maxWidth: 100,",
    "        child: Container(",
    "          color: Colors.red,",
    "          width: double.infinity,",
    "          height: 100,",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example18 extends Example {",
    "  const Example18({super.key});",
    "",
    "  @override",
    "  final code = 'FittedBox(\\n'",
    "      '   child: Text(\\'Some Example Text.\\'));';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the FittedBox to be exactly the same size as the screen.'",
    "      'The Text has some natural width (also called its intrinsic width) that depends on the amount of text, its font size, and so on.'",
    "      '\\n\\n'",
    "      'The FittedBox lets the Text be any size it wants, '",
    "      'but after the Text tells its size to the FittedBox, '",
    "      'the FittedBox scales the Text until it fills all of the available width.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const FittedBox(",
    "      child: Text('Some Example Text.'),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example19 extends Example {",
    "  const Example19({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: FittedBox(\\n'",
    "      '      child: Text(\\'Some Example Text.\\')));';",
    "  @override",
    "  final String explanation =",
    "      'But what happens if you put the FittedBox inside of a Center widget? '",
    "      'The Center lets the FittedBox be any size it wants, up to the screen size.'",
    "      '\\n\\n'",
    "      'The FittedBox then sizes itself to the Text, and lets the Text be any size it wants.'",
    "      '\\n\\n'",
    "      'Since both FittedBox and the Text have the same size, no scaling happens.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const Center(",
    "      child: FittedBox(",
    "        child: Text('Some Example Text.'),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "////////////////////////////////////////////////////",
    "",
    "class Example20 extends Example {",
    "  const Example20({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: FittedBox(\\n'",
    "      '      child: Text(\\'…\\')));';",
    "  @override",
    "  final String explanation =",
    "      'However, what happens if FittedBox is inside of a Center widget, but the Text is too large to fit the screen?'",
    "      '\\n\\n'",
    "      'FittedBox tries to size itself to the Text, but it can\\'t be bigger than the screen. '",
    "      'It then assumes the screen size, and resizes Text so that it fits the screen, too.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const Center(",
    "      child: FittedBox(",
    "        child: Text(",
    "            'This is some very very very large text that is too big to fit a regular screen in a single line.'),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example21 extends Example {",
    "  const Example21({super.key});",
    "",
    "  @override",
    "  final code = 'Center(\\n'",
    "      '   child: Text(\\'…\\'));';",
    "  @override",
    "  final String explanation = 'If, however, you remove the FittedBox, '",
    "      'the Text gets its maximum width from the screen, '",
    "      'and breaks the line so that it fits the screen.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const Center(",
    "      child: Text(",
    "          'This is some very very very large text that is too big to fit a regular screen in a single line.'),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example22 extends Example {",
    "  const Example22({super.key});",
    "",
    "  @override",
    "  final code = 'FittedBox(\\n'",
    "      '   child: Container(\\n'",
    "      '      height: 20, width: double.infinity));';",
    "  @override",
    "  final String explanation =",
    "      'FittedBox can only scale a widget that is BOUNDED (has non-infinite width and height).'",
    "      'Otherwise, it won\\'t render anything, and you\\'ll see an error in the console.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return FittedBox(",
    "      child: Container(",
    "        height: 20,",
    "        width: double.infinity,",
    "        color: Colors.red,",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example23 extends Example {",
    "  const Example23({super.key});",
    "",
    "  @override",
    "  final code = 'Row(children:[\\n'",
    "      '   Container(color: red, child: Text(\\'Hello!\\'))\\n'",
    "      '   Container(color: green, child: Text(\\'Goodbye!\\'))]';",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the Row to be exactly the same size as the screen.'",
    "      '\\n\\n'",
    "      'Just like an UnconstrainedBox, the Row won\\'t impose any constraints onto its children, '",
    "      'and instead lets them be any size they want.'",
    "      '\\n\\n'",
    "      'The Row then puts them side-by-side, and any extra space remains empty.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: [",
    "        Container(color: red, child: const Text('Hello!', style: big)),",
    "        Container(color: green, child: const Text('Goodbye!', style: big)),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example24 extends Example {",
    "  const Example24({super.key});",
    "",
    "  @override",
    "  final code = 'Row(children:[\\n'",
    "      '   Container(color: red, child: Text(\\'…\\'))\\n'",
    "      '   Container(color: green, child: Text(\\'Goodbye!\\'))]';",
    "  @override",
    "  final String explanation =",
    "      'Since the Row won\\'t impose any constraints onto its children, '",
    "      'it\\'s quite possible that the children might be too big to fit the available width of the Row.'",
    "      'In this case, just like an UnconstrainedBox, the Row displays the \"overflow warning\".';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: [",
    "        Container(",
    "          color: red,",
    "          child: const Text(",
    "            'This is a very long text that '",
    "            'won\\'t fit the line.',",
    "            style: big,",
    "          ),",
    "        ),",
    "        Container(color: green, child: const Text('Goodbye!', style: big)),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example25 extends Example {",
    "  const Example25({super.key});",
    "",
    "  @override",
    "  final code = 'Row(children:[\\n'",
    "      '   Expanded(\\n'",
    "      '       child: Container(color: red, child: Text(\\'…\\')))\\n'",
    "      '   Container(color: green, child: Text(\\'Goodbye!\\'))]';",
    "  @override",
    "  final String explanation =",
    "      'When a Row\\'s child is wrapped in an Expanded widget, the Row won\\'t let this child define its own width anymore.'",
    "      '\\n\\n'",
    "      'Instead, it defines the Expanded width according to the other children, and only then the Expanded widget forces the original child to have the Expanded\\'s width.'",
    "      '\\n\\n'",
    "      'In other words, once you use Expanded, the original child\\'s width becomes irrelevant, and is ignored.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: [",
    "        Expanded(",
    "          child: Center(",
    "            child: Container(",
    "              color: red,",
    "              child: const Text(",
    "                'This is a very long text that won\\'t fit the line.',",
    "                style: big,",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "        Container(color: green, child: const Text('Goodbye!', style: big)),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example26 extends Example {",
    "  const Example26({super.key});",
    "",
    "  @override",
    "  final code = 'Row(children:[\\n'",
    "      '   Expanded(\\n'",
    "      '       child: Container(color: red, child: Text(\\'…\\')))\\n'",
    "      '   Expanded(\\n'",
    "      '       child: Container(color: green, child: Text(\\'Goodbye!\\'))]';",
    "  @override",
    "  final String explanation =",
    "      'If all of Row\\'s children are wrapped in Expanded widgets, each Expanded has a size proportional to its flex parameter, '",
    "      'and only then each Expanded widget forces its child to have the Expanded\\'s width.'",
    "      '\\n\\n'",
    "      'In other words, Expanded ignores the preffered width of its children.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: [",
    "        Expanded(",
    "          child: Container(",
    "            color: red,",
    "            child: const Text(",
    "              'This is a very long text that won\\'t fit the line.',",
    "              style: big,",
    "            ),",
    "          ),",
    "        ),",
    "        Expanded(",
    "          child: Container(",
    "            color: green,",
    "            child: const Text(",
    "              'Goodbye!',",
    "              style: big,",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example27 extends Example {",
    "  const Example27({super.key});",
    "",
    "  @override",
    "  final code = 'Row(children:[\\n'",
    "      '   Flexible(\\n'",
    "      '       child: Container(color: red, child: Text(\\'…\\')))\\n'",
    "      '   Flexible(\\n'",
    "      '       child: Container(color: green, child: Text(\\'Goodbye!\\'))]';",
    "  @override",
    "  final String explanation =",
    "      'The only difference if you use Flexible instead of Expanded, '",
    "      'is that Flexible lets its child be SMALLER than the Flexible width, '",
    "      'while Expanded forces its child to have the same width of the Expanded.'",
    "      '\\n\\n'",
    "      'But both Expanded and Flexible ignore their children\\'s width when sizing themselves.'",
    "      '\\n\\n'",
    "      'This means that it\\'s IMPOSSIBLE to expand Row children proportionally to their sizes. '",
    "      'The Row either uses the exact child\\'s width, or ignores it completely when you use Expanded or Flexible.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Row(",
    "      children: [",
    "        Flexible(",
    "          child: Container(",
    "            color: red,",
    "            child: const Text(",
    "              'This is a very long text that won\\'t fit the line.',",
    "              style: big,",
    "            ),",
    "          ),",
    "        ),",
    "        Flexible(",
    "          child: Container(",
    "            color: green,",
    "            child: const Text(",
    "              'Goodbye!',",
    "              style: big,",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example28 extends Example {",
    "  const Example28({super.key});",
    "",
    "  @override",
    "  final code = 'Scaffold(\\n'",
    "      '   body: Container(color: blue,\\n'",
    "      '   child: Column(\\n'",
    "      '      children: [\\n'",
    "      '         Text(\\'Hello!\\'),\\n'",
    "      '         Text(\\'Goodbye!\\')])))';",
    "",
    "  @override",
    "  final String explanation =",
    "      'The screen forces the Scaffold to be exactly the same size as the screen, '",
    "      'so the Scaffold fills the screen.'",
    "      '\\n\\n'",
    "      'The Scaffold tells the Container that it can be any size it wants, but not bigger than the screen.'",
    "      '\\n\\n'",
    "      'When a widget tells its child that it can be smaller than a certain size, '",
    "      'we say the widget supplies \"loose\" constraints to its child. More on that later.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: Container(",
    "        color: blue,",
    "        child: const Column(",
    "          children: [",
    "            Text('Hello!'),",
    "            Text('Goodbye!'),",
    "          ],",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "//////////////////////////////////////////////////",
    "",
    "class Example29 extends Example {",
    "  const Example29({super.key});",
    "",
    "  @override",
    "  final code = 'Scaffold(\\n'",
    "      '   body: Container(color: blue,\\n'",
    "      '   child: SizedBox.expand(\\n'",
    "      '      child: Column(\\n'",
    "      '         children: [\\n'",
    "      '            Text(\\'Hello!\\'),\\n'",
    "      '            Text(\\'Goodbye!\\')]))))';",
    "",
    "  @override",
    "  final String explanation =",
    "      'If you want the Scaffold\\'s child to be exactly the same size as the Scaffold itself, '",
    "      'you can wrap its child with SizedBox.expand.'",
    "      '\\n\\n'",
    "      'When a widget tells its child that it must be of a certain size, '",
    "      'we say the widget supplies \"tight\" constraints to its child. More on that later.';",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      body: SizedBox.expand(",
    "        child: Container(",
    "          color: blue,",
    "          child: const Column(",
    "            children: [",
    "              Text('Hello!'),",
    "              Text('Goodbye!'),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
  ],
  "description": "Flutter Constraints Example"
},
"Flutter Chip Input with search": {
  "prefix": "flutter-chip-input-search",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:async';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "const List<String> _pizzaToppings = <String>[",
    "  'Olives',",
    "  'Tomato',",
    "  'Cheese',",
    "  'Pepperoni',",
    "  'Bacon',",
    "  'Onion',",
    "  'Jalapeno',",
    "  'Mushrooms',",
    "  'Pineapple',",
    "];",
    "",
    "void main() => runApp(const EditableChipFieldApp());",
    "",
    "class EditableChipFieldApp extends StatelessWidget {",
    "  const EditableChipFieldApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const EditableChipFieldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class EditableChipFieldExample extends StatefulWidget {",
    "  const EditableChipFieldExample({super.key});",
    "",
    "  @override",
    "  EditableChipFieldExampleState createState() {",
    "    return EditableChipFieldExampleState();",
    "  }",
    "}",
    "",
    "class EditableChipFieldExampleState extends State<EditableChipFieldExample> {",
    "  final FocusNode _chipFocusNode = FocusNode();",
    "  List<String> _toppings = <String>[_pizzaToppings.first];",
    "  List<String> _suggestions = <String>[];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Editable Chip Field Sample'),",
    "      ),",
    "      body: Column(",
    "        children: <Widget>[",
    "          Padding(",
    "            padding: const EdgeInsets.symmetric(horizontal: 16),",
    "            child: ChipsInput<String>(",
    "              values: _toppings,",
    "              decoration: const InputDecoration(",
    "                prefixIcon: Icon(Icons.local_pizza_rounded),",
    "                hintText: 'Search for toppings',",
    "              ),",
    "              strutStyle: const StrutStyle(fontSize: 15),",
    "              onChanged: _onChanged,",
    "              onSubmitted: _onSubmitted,",
    "              chipBuilder: _chipBuilder,",
    "              onTextChanged: _onSearchChanged,",
    "            ),",
    "          ),",
    "          if (_suggestions.isNotEmpty)",
    "            Expanded(",
    "              child: ListView.builder(",
    "                itemCount: _suggestions.length,",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  return ToppingSuggestion(",
    "                    _suggestions[index],",
    "                    onTap: _selectSuggestion,",
    "                  );",
    "                },",
    "              ),",
    "            ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  Future<void> _onSearchChanged(String value) async {",
    "    final List<String> results = await _suggestionCallback(value);",
    "    setState(() {",
    "      _suggestions = results",
    "          .where((String topping) => !_toppings.contains(topping))",
    "          .toList();",
    "    });",
    "  }",
    "",
    "  Widget _chipBuilder(BuildContext context, String topping) {",
    "    return ToppingInputChip(",
    "      topping: topping,",
    "      onDeleted: _onChipDeleted,",
    "      onSelected: _onChipTapped,",
    "    );",
    "  }",
    "",
    "  void _selectSuggestion(String topping) {",
    "    setState(() {",
    "      _toppings.add(topping);",
    "      _suggestions = <String>[];",
    "    });",
    "  }",
    "",
    "  void _onChipTapped(String topping) {}",
    "",
    "  void _onChipDeleted(String topping) {",
    "    setState(() {",
    "      _toppings.remove(topping);",
    "      _suggestions = <String>[];",
    "    });",
    "  }",
    "",
    "  void _onSubmitted(String text) {",
    "    if (text.trim().isNotEmpty) {",
    "      setState(() {",
    "        _toppings = <String>[..._toppings, text.trim()];",
    "      });",
    "    } else {",
    "      _chipFocusNode.unfocus();",
    "      setState(() {",
    "        _toppings = <String>[];",
    "      });",
    "    }",
    "  }",
    "",
    "  void _onChanged(List<String> data) {",
    "    setState(() {",
    "      _toppings = data;",
    "    });",
    "  }",
    "",
    "  FutureOr<List<String>> _suggestionCallback(String text) {",
    "    if (text.isNotEmpty) {",
    "      return _pizzaToppings.where((String topping) {",
    "        return topping.toLowerCase().contains(text.toLowerCase());",
    "      }).toList();",
    "    }",
    "    return const <String>[];",
    "  }",
    "}",
    "",
    "class ChipsInput<T> extends StatefulWidget {",
    "  const ChipsInput({",
    "    super.key,",
    "    required this.values,",
    "    this.decoration = const InputDecoration(),",
    "    this.style,",
    "    this.strutStyle,",
    "    required this.chipBuilder,",
    "    required this.onChanged,",
    "    this.onChipTapped,",
    "    this.onSubmitted,",
    "    this.onTextChanged,",
    "  });",
    "",
    "  final List<T> values;",
    "  final InputDecoration decoration;",
    "  final TextStyle? style;",
    "  final StrutStyle? strutStyle;",
    "",
    "  final ValueChanged<List<T>> onChanged;",
    "  final ValueChanged<T>? onChipTapped;",
    "  final ValueChanged<String>? onSubmitted;",
    "  final ValueChanged<String>? onTextChanged;",
    "",
    "  final Widget Function(BuildContext context, T data) chipBuilder;",
    "",
    "  @override",
    "  ChipsInputState<T> createState() => ChipsInputState<T>();",
    "}",
    "",
    "class ChipsInputState<T> extends State<ChipsInput<T>> {",
    "  @visibleForTesting",
    "  late final ChipsInputEditingController<T> controller;",
    "",
    "  String _previousText = '';",
    "  TextSelection? _previousSelection;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "",
    "    controller = ChipsInputEditingController<T>(",
    "      <T>[...widget.values],",
    "      widget.chipBuilder,",
    "    );",
    "    controller.addListener(_textListener);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.removeListener(_textListener);",
    "    controller.dispose();",
    "",
    "    super.dispose();",
    "  }",
    "",
    "  void _textListener() {",
    "    final String currentText = controller.text;",
    "",
    "    if (_previousSelection != null) {",
    "      final int currentNumber = countReplacements(currentText);",
    "      final int previousNumber = countReplacements(_previousText);",
    "",
    "      final int cursorEnd = _previousSelection!.extentOffset;",
    "      final int cursorStart = _previousSelection!.baseOffset;",
    "",
    "      final List<T> values = <T>[...widget.values];",
    "",
    "      // If the current number and the previous number of replacements are different, then",
    "      // the user has deleted the InputChip using the keyboard. In this case, we trigger",
    "      // the onChanged callback. We need to be sure also that the current number of",
    "      // replacements is different from the input chip to avoid double-deletion.",
    "      if (currentNumber < previousNumber && currentNumber != values.length) {",
    "        if (cursorStart == cursorEnd) {",
    "          values.removeRange(cursorStart - 1, cursorEnd);",
    "        } else {",
    "          if (cursorStart > cursorEnd) {",
    "            values.removeRange(cursorEnd, cursorStart);",
    "          } else {",
    "            values.removeRange(cursorStart, cursorEnd);",
    "          }",
    "        }",
    "        widget.onChanged(values);",
    "      }",
    "    }",
    "",
    "    _previousText = currentText;",
    "    _previousSelection = controller.selection;",
    "  }",
    "",
    "  static int countReplacements(String text) {",
    "    return text.codeUnits",
    "      .where((int u) => u == ChipsInputEditingController.kObjectReplacementChar)",
    "      .length;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    controller.updateValues(<T>[...widget.values]);",
    "",
    "    return TextField(",
    "      minLines: 1,",
    "      maxLines: 3,",
    "      textInputAction: TextInputAction.done,",
    "      style: widget.style,",
    "      strutStyle: widget.strutStyle,",
    "      controller: controller,",
    "      onChanged: (String value) =>",
    "          widget.onTextChanged?.call(controller.textWithoutReplacements),",
    "      onSubmitted: (String value) =>",
    "          widget.onSubmitted?.call(controller.textWithoutReplacements),",
    "    );",
    "  }",
    "}",
    "",
    "class ChipsInputEditingController<T> extends TextEditingController {",
    "  ChipsInputEditingController(this.values, this.chipBuilder)",
    "      : super(",
    "          text: String.fromCharCode(kObjectReplacementChar) * values.length,",
    "        );",
    "",
    "  // This constant character acts as a placeholder in the TextField text value.",
    "  // There will be one character for each of the InputChip displayed.",
    "  static const int kObjectReplacementChar = 0xFFFE;",
    "",
    "  List<T> values;",
    "",
    "  final Widget Function(BuildContext context, T data) chipBuilder;",
    "",
    "  /// Called whenever chip is either added or removed",
    "  /// from the outside the context of the text field.",
    "  void updateValues(List<T> values) {",
    "    if (values.length != this.values.length) {",
    "      final String char = String.fromCharCode(kObjectReplacementChar);",
    "      final int length = values.length;",
    "      value = TextEditingValue(",
    "        text: char * length,",
    "        selection: TextSelection.collapsed(offset: length),",
    "      );",
    "      this.values = values;",
    "    }",
    "  }",
    "",
    "  String get textWithoutReplacements {",
    "    final String char = String.fromCharCode(kObjectReplacementChar);",
    "    return text.replaceAll(RegExp(char), '');",
    "  }",
    "",
    "  String get textWithReplacements => text;",
    "",
    "  @override",
    "  TextSpan buildTextSpan(",
    "      {required BuildContext context, TextStyle? style, required bool withComposing}) {",
    "",
    "    final Iterable<WidgetSpan> chipWidgets =",
    "        values.map((T v) => WidgetSpan(child: chipBuilder(context, v)));",
    "",
    "    return TextSpan(",
    "      style: style,",
    "      children: <InlineSpan>[",
    "        ...chipWidgets,",
    "        if (textWithoutReplacements.isNotEmpty)",
    "          TextSpan(text: textWithoutReplacements)",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class ToppingSuggestion extends StatelessWidget {",
    "  const ToppingSuggestion(this.topping, {super.key, this.onTap});",
    "",
    "  final String topping;",
    "  final ValueChanged<String>? onTap;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListTile(",
    "      key: ObjectKey(topping),",
    "      leading: CircleAvatar(",
    "        child: Text(",
    "          topping[0].toUpperCase(),",
    "        ),",
    "      ),",
    "      title: Text(topping),",
    "      onTap: () => onTap?.call(topping),",
    "    );",
    "  }",
    "}",
    "",
    "class ToppingInputChip extends StatelessWidget {",
    "  const ToppingInputChip({",
    "    super.key,",
    "    required this.topping,",
    "    required this.onDeleted,",
    "    required this.onSelected,",
    "  });",
    "",
    "  final String topping;",
    "  final ValueChanged<String> onDeleted;",
    "  final ValueChanged<String> onSelected;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      margin: const EdgeInsets.only(right: 3),",
    "      child: InputChip(",
    "        key: ObjectKey(topping),",
    "        label: Text(topping),",
    "        avatar: CircleAvatar(",
    "          child: Text(topping[0].toUpperCase()),",
    "        ),",
    "        onDeleted: () => onDeleted(topping),",
    "        onSelected: (bool value) => onSelected(topping),",
    "        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,",
    "        padding: const EdgeInsets.all(2),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Chip Input with search"
},
"Flutter Chip Input with search": {
  "prefix": "flutter-input-chip-search",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:async';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "const List<String> _pizzaToppings = <String>[",
    "  'Olives',",
    "  'Tomato',",
    "  'Cheese',",
    "  'Pepperoni',",
    "  'Bacon',",
    "  'Onion',",
    "  'Jalapeno',",
    "  'Mushrooms',",
    "  'Pineapple',",
    "];",
    "",
    "void main() => runApp(const EditableChipFieldApp());",
    "",
    "class EditableChipFieldApp extends StatelessWidget {",
    "  const EditableChipFieldApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(useMaterial3: true),",
    "      home: const EditableChipFieldExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class EditableChipFieldExample extends StatefulWidget {",
    "  const EditableChipFieldExample({super.key});",
    "",
    "  @override",
    "  EditableChipFieldExampleState createState() {",
    "    return EditableChipFieldExampleState();",
    "  }",
    "}",
    "",
    "class EditableChipFieldExampleState extends State<EditableChipFieldExample> {",
    "  final FocusNode _chipFocusNode = FocusNode();",
    "  List<String> _toppings = <String>[_pizzaToppings.first];",
    "  List<String> _suggestions = <String>[];",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Editable Chip Field Sample'),",
    "      ),",
    "      body: Column(",
    "        children: <Widget>[",
    "          Padding(",
    "            padding: const EdgeInsets.symmetric(horizontal: 16),",
    "            child: ChipsInput<String>(",
    "              values: _toppings,",
    "              decoration: const InputDecoration(",
    "                prefixIcon: Icon(Icons.local_pizza_rounded),",
    "                hintText: 'Search for toppings',",
    "              ),",
    "              strutStyle: const StrutStyle(fontSize: 15),",
    "              onChanged: _onChanged,",
    "              onSubmitted: _onSubmitted,",
    "              chipBuilder: _chipBuilder,",
    "              onTextChanged: _onSearchChanged,",
    "            ),",
    "          ),",
    "          if (_suggestions.isNotEmpty)",
    "            Expanded(",
    "              child: ListView.builder(",
    "                itemCount: _suggestions.length,",
    "                itemBuilder: (BuildContext context, int index) {",
    "                  return ToppingSuggestion(",
    "                    _suggestions[index],",
    "                    onTap: _selectSuggestion,",
    "                  );",
    "                },",
    "              ),",
    "            ),",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "",
    "  Future<void> _onSearchChanged(String value) async {",
    "    final List<String> results = await _suggestionCallback(value);",
    "    setState(() {",
    "      _suggestions = results",
    "          .where((String topping) => !_toppings.contains(topping))",
    "          .toList();",
    "    });",
    "  }",
    "",
    "  Widget _chipBuilder(BuildContext context, String topping) {",
    "    return ToppingInputChip(",
    "      topping: topping,",
    "      onDeleted: _onChipDeleted,",
    "      onSelected: _onChipTapped,",
    "    );",
    "  }",
    "",
    "  void _selectSuggestion(String topping) {",
    "    setState(() {",
    "      _toppings.add(topping);",
    "      _suggestions = <String>[];",
    "    });",
    "  }",
    "",
    "  void _onChipTapped(String topping) {}",
    "",
    "  void _onChipDeleted(String topping) {",
    "    setState(() {",
    "      _toppings.remove(topping);",
    "      _suggestions = <String>[];",
    "    });",
    "  }",
    "",
    "  void _onSubmitted(String text) {",
    "    if (text.trim().isNotEmpty) {",
    "      setState(() {",
    "        _toppings = <String>[..._toppings, text.trim()];",
    "      });",
    "    } else {",
    "      _chipFocusNode.unfocus();",
    "      setState(() {",
    "        _toppings = <String>[];",
    "      });",
    "    }",
    "  }",
    "",
    "  void _onChanged(List<String> data) {",
    "    setState(() {",
    "      _toppings = data;",
    "    });",
    "  }",
    "",
    "  FutureOr<List<String>> _suggestionCallback(String text) {",
    "    if (text.isNotEmpty) {",
    "      return _pizzaToppings.where((String topping) {",
    "        return topping.toLowerCase().contains(text.toLowerCase());",
    "      }).toList();",
    "    }",
    "    return const <String>[];",
    "  }",
    "}",
    "",
    "class ChipsInput<T> extends StatefulWidget {",
    "  const ChipsInput({",
    "    super.key,",
    "    required this.values,",
    "    this.decoration = const InputDecoration(),",
    "    this.style,",
    "    this.strutStyle,",
    "    required this.chipBuilder,",
    "    required this.onChanged,",
    "    this.onChipTapped,",
    "    this.onSubmitted,",
    "    this.onTextChanged,",
    "  });",
    "",
    "  final List<T> values;",
    "  final InputDecoration decoration;",
    "  final TextStyle? style;",
    "  final StrutStyle? strutStyle;",
    "",
    "  final ValueChanged<List<T>> onChanged;",
    "  final ValueChanged<T>? onChipTapped;",
    "  final ValueChanged<String>? onSubmitted;",
    "  final ValueChanged<String>? onTextChanged;",
    "",
    "  final Widget Function(BuildContext context, T data) chipBuilder;",
    "",
    "  @override",
    "  ChipsInputState<T> createState() => ChipsInputState<T>();",
    "}",
    "",
    "class ChipsInputState<T> extends State<ChipsInput<T>> {",
    "  @visibleForTesting",
    "  late final ChipsInputEditingController<T> controller;",
    "",
    "  String _previousText = '';",
    "  TextSelection? _previousSelection;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "",
    "    controller = ChipsInputEditingController<T>(",
    "      <T>[...widget.values],",
    "      widget.chipBuilder,",
    "    );",
    "    controller.addListener(_textListener);",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    controller.removeListener(_textListener);",
    "    controller.dispose();",
    "",
    "    super.dispose();",
    "  }",
    "",
    "  void _textListener() {",
    "    final String currentText = controller.text;",
    "",
    "    if (_previousSelection != null) {",
    "      final int currentNumber = countReplacements(currentText);",
    "      final int previousNumber = countReplacements(_previousText);",
    "",
    "      final int cursorEnd = _previousSelection!.extentOffset;",
    "      final int cursorStart = _previousSelection!.baseOffset;",
    "",
    "      final List<T> values = <T>[...widget.values];",
    "",
    "      // If the current number and the previous number of replacements are different, then",
    "      // the user has deleted the InputChip using the keyboard. In this case, we trigger",
    "      // the onChanged callback. We need to be sure also that the current number of",
    "      // replacements is different from the input chip to avoid double-deletion.",
    "      if (currentNumber < previousNumber && currentNumber != values.length) {",
    "        if (cursorStart == cursorEnd) {",
    "          values.removeRange(cursorStart - 1, cursorEnd);",
    "        } else {",
    "          if (cursorStart > cursorEnd) {",
    "            values.removeRange(cursorEnd, cursorStart);",
    "          } else {",
    "            values.removeRange(cursorStart, cursorEnd);",
    "          }",
    "        }",
    "        widget.onChanged(values);",
    "      }",
    "    }",
    "",
    "    _previousText = currentText;",
    "    _previousSelection = controller.selection;",
    "  }",
    "",
    "  static int countReplacements(String text) {",
    "    return text.codeUnits",
    "      .where((int u) => u == ChipsInputEditingController.kObjectReplacementChar)",
    "      .length;",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    controller.updateValues(<T>[...widget.values]);",
    "",
    "    return TextField(",
    "      minLines: 1,",
    "      maxLines: 3,",
    "      textInputAction: TextInputAction.done,",
    "      style: widget.style,",
    "      strutStyle: widget.strutStyle,",
    "      controller: controller,",
    "      onChanged: (String value) =>",
    "          widget.onTextChanged?.call(controller.textWithoutReplacements),",
    "      onSubmitted: (String value) =>",
    "          widget.onSubmitted?.call(controller.textWithoutReplacements),",
    "    );",
    "  }",
    "}",
    "",
    "class ChipsInputEditingController<T> extends TextEditingController {",
    "  ChipsInputEditingController(this.values, this.chipBuilder)",
    "      : super(",
    "          text: String.fromCharCode(kObjectReplacementChar) * values.length,",
    "        );",
    "",
    "  // This constant character acts as a placeholder in the TextField text value.",
    "  // There will be one character for each of the InputChip displayed.",
    "  static const int kObjectReplacementChar = 0xFFFE;",
    "",
    "  List<T> values;",
    "",
    "  final Widget Function(BuildContext context, T data) chipBuilder;",
    "",
    "  /// Called whenever chip is either added or removed",
    "  /// from the outside the context of the text field.",
    "  void updateValues(List<T> values) {",
    "    if (values.length != this.values.length) {",
    "      final String char = String.fromCharCode(kObjectReplacementChar);",
    "      final int length = values.length;",
    "      value = TextEditingValue(",
    "        text: char * length,",
    "        selection: TextSelection.collapsed(offset: length),",
    "      );",
    "      this.values = values;",
    "    }",
    "  }",
    "",
    "  String get textWithoutReplacements {",
    "    final String char = String.fromCharCode(kObjectReplacementChar);",
    "    return text.replaceAll(RegExp(char), '');",
    "  }",
    "",
    "  String get textWithReplacements => text;",
    "",
    "  @override",
    "  TextSpan buildTextSpan(",
    "      {required BuildContext context, TextStyle? style, required bool withComposing}) {",
    "",
    "    final Iterable<WidgetSpan> chipWidgets =",
    "        values.map((T v) => WidgetSpan(child: chipBuilder(context, v)));",
    "",
    "    return TextSpan(",
    "      style: style,",
    "      children: <InlineSpan>[",
    "        ...chipWidgets,",
    "        if (textWithoutReplacements.isNotEmpty)",
    "          TextSpan(text: textWithoutReplacements)",
    "      ],",
    "    );",
    "  }",
    "}",
    "",
    "class ToppingSuggestion extends StatelessWidget {",
    "  const ToppingSuggestion(this.topping, {super.key, this.onTap});",
    "",
    "  final String topping;",
    "  final ValueChanged<String>? onTap;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ListTile(",
    "      key: ObjectKey(topping),",
    "      leading: CircleAvatar(",
    "        child: Text(",
    "          topping[0].toUpperCase(),",
    "        ),",
    "      ),",
    "      title: Text(topping),",
    "      onTap: () => onTap?.call(topping),",
    "    );",
    "  }",
    "}",
    "",
    "class ToppingInputChip extends StatelessWidget {",
    "  const ToppingInputChip({",
    "    super.key,",
    "    required this.topping,",
    "    required this.onDeleted,",
    "    required this.onSelected,",
    "  });",
    "",
    "  final String topping;",
    "  final ValueChanged<String> onDeleted;",
    "  final ValueChanged<String> onSelected;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Container(",
    "      margin: const EdgeInsets.only(right: 3),",
    "      child: InputChip(",
    "        key: ObjectKey(topping),",
    "        label: Text(topping),",
    "        avatar: CircleAvatar(",
    "          child: Text(topping[0].toUpperCase()),",
    "        ),",
    "        onDeleted: () => onDeleted(topping),",
    "        onSelected: (bool value) => onSelected(topping),",
    "        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,",
    "        padding: const EdgeInsets.all(2),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Chip Input with search"
},
"Flutter Custom GridView": {
  "prefix": "flutter-custom-gridview",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:math' as math;",
    "",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/rendering.dart';",
    "",
    "void main() => runApp(const GridViewExampleApp());",
    "",
    "class GridViewExampleApp extends StatelessWidget {",
    "  const GridViewExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: Text(\"custom GridView\"),",
    "        ),",
    "        body: Padding(",
    "          padding: const EdgeInsets.all(20.0),",
    "          child: Card(",
    "            elevation: 8.0,",
    "            child: GridView.builder(",
    "              padding: const EdgeInsets.all(12.0),",
    "              gridDelegate: CustomGridDelegate(dimension: 240.0),",
    "              // Try uncommenting some of these properties to see the effect on the grid:",
    "              // itemCount: 20, // The default is that the number of grid tiles is infinite.",
    "              // scrollDirection: Axis.horizontal, // The default is vertical.",
    "              // reverse: true, // The default is false, going down (or left to right).",
    "              itemBuilder: (BuildContext context, int index) {",
    "                final math.Random random = math.Random(index);",
    "                return GridTile(",
    "                  header: GridTileBar(",
    "                    title: Text('$index',",
    "                        style: const TextStyle(color: Colors.black)),",
    "                  ),",
    "                  child: Container(",
    "                    margin: const EdgeInsets.all(12.0),",
    "                    decoration: ShapeDecoration(",
    "                      shape: RoundedRectangleBorder(",
    "                        borderRadius: BorderRadius.circular(12.0),",
    "                      ),",
    "                      gradient: const RadialGradient(",
    "                        colors: <Color>[Color(0x0F88EEFF), Color(0x2F0099BB)],",
    "                      ),",
    "                    ),",
    "                    child: FlutterLogo(",
    "                      style: FlutterLogoStyle.values[",
    "                          random.nextInt(FlutterLogoStyle.values.length)],",
    "                    ),",
    "                  ),",
    "                );",
    "              },",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class CustomGridDelegate extends SliverGridDelegate {",
    "  CustomGridDelegate({required this.dimension});",
    "",
    "  // This is the desired height of each row (and width of each square).",
    "  // When there is not enough room, we shrink this to the width of the scroll view.",
    "  final double dimension;",
    "",
    "  // The layout is two rows of squares, then one very wide cell, repeat.",
    "",
    "  @override",
    "  SliverGridLayout getLayout(SliverConstraints constraints) {",
    "    // Determine how many squares we can fit per row.",
    "    int count = constraints.crossAxisExtent ~/ dimension;",
    "    if (count < 1) {",
    "      count = 1; // Always fit at least one regardless.",
    "    }",
    "    final double squareDimension = constraints.crossAxisExtent / count;",
    "    return CustomGridLayout(",
    "      crossAxisCount: count,",
    "      fullRowPeriod:",
    "          3, // Number of rows per block (one of which is the full row).",
    "      dimension: squareDimension,",
    "    );",
    "  }",
    "",
    "  @override",
    "  bool shouldRelayout(CustomGridDelegate oldDelegate) {",
    "    return dimension != oldDelegate.dimension;",
    "  }",
    "}",
    "",
    "class CustomGridLayout extends SliverGridLayout {",
    "  const CustomGridLayout({",
    "    required this.crossAxisCount,",
    "    required this.dimension,",
    "    required this.fullRowPeriod,",
    "  })  : assert(crossAxisCount > 0),",
    "        assert(fullRowPeriod > 1),",
    "        loopLength = crossAxisCount * (fullRowPeriod - 1) + 1,",
    "        loopHeight = fullRowPeriod * dimension;",
    "",
    "  final int crossAxisCount;",
    "  final double dimension;",
    "  final int fullRowPeriod;",
    "",
    "  // Computed values.",
    "  final int loopLength;",
    "  final double loopHeight;",
    "",
    "  @override",
    "  double computeMaxScrollOffset(int childCount) {",
    "    // This returns the scroll offset of the end side of the childCount'th child.",
    "    // In the case of this example, this method is not used, since the grid is",
    "    // infinite. However, if one set an itemCount on the GridView above, this",
    "    // function would be used to determine how far to allow the user to scroll.",
    "    if (childCount == 0 || dimension == 0) {",
    "      return 0;",
    "    }",
    "    return (childCount ~/ loopLength) * loopHeight +",
    "        ((childCount % loopLength) ~/ crossAxisCount) * dimension;",
    "  }",
    "",
    "  @override",
    "  SliverGridGeometry getGeometryForChildIndex(int index) {",
    "    // This returns the position of the index'th tile.",
    "    //",
    "    // The SliverGridGeometry object returned from this method has four",
    "    // properties. For a grid that scrolls down, as in this example, the four",
    "    // properties are equivalent to x,y,width,height. However, since the",
    "    // GridView is direction agnostic, the names used for SliverGridGeometry are",
    "    // also direction-agnostic.",
    "    //",
    "    // Try changing the scrollDirection and reverse properties on the GridView",
    "    // to see how this algorithm works in any direction (and why, therefore, the",
    "    // names are direction-agnostic).",
    "    final int loop = index ~/ loopLength;",
    "    final int loopIndex = index % loopLength;",
    "    if (loopIndex == loopLength - 1) {",
    "      // Full width case.",
    "      return SliverGridGeometry(",
    "        scrollOffset: (loop + 1) * loopHeight - dimension, // \"y\"",
    "        crossAxisOffset: 0, // \"x\"",
    "        mainAxisExtent: dimension, // \"height\"",
    "        crossAxisExtent: crossAxisCount * dimension, // \"width\"",
    "      );",
    "    }",
    "    // Square case.",
    "    final int rowIndex = loopIndex ~/ crossAxisCount;",
    "    final int columnIndex = loopIndex % crossAxisCount;",
    "    return SliverGridGeometry(",
    "      scrollOffset: (loop * loopHeight) + (rowIndex * dimension), // \"y\"",
    "      crossAxisOffset: columnIndex * dimension, // \"x\"",
    "      mainAxisExtent: dimension, // \"height\"",
    "      crossAxisExtent: dimension, // \"width\"",
    "    );",
    "  }",
    "",
    "  @override",
    "  int getMinChildIndexForScrollOffset(double scrollOffset) {",
    "    // This returns the first index that is visible for a given scrollOffset.",
    "    //",
    "    // The GridView only asks for the geometry of children that are visible",
    "    // between the scroll offset passed to getMinChildIndexForScrollOffset and",
    "    // the scroll offset passed to getMaxChildIndexForScrollOffset.",
    "    //",
    "    // It is the responsibility of the SliverGridLayout to ensure that",
    "    // getGeometryForChildIndex is consistent with getMinChildIndexForScrollOffset",
    "    // and getMaxChildIndexForScrollOffset.",
    "    //",
    "    // Not every child between the minimum child index and the maximum child",
    "    // index need be visible (some may have scroll offsets that are outside the",
    "    // view; this happens commonly when the grid view places tiles out of",
    "    // order). However, doing this means the grid view is less efficient, as it",
    "    // will do work for children that are not visible. It is preferred that the",
    "    // children are returned in the order that they are laid out.",
    "    final int rows = scrollOffset ~/ dimension;",
    "    final int loops = rows ~/ fullRowPeriod;",
    "    final int extra = rows % fullRowPeriod;",
    "    return loops * loopLength + extra * crossAxisCount;",
    "  }",
    "",
    "  @override",
    "  int getMaxChildIndexForScrollOffset(double scrollOffset) {",
    "    // (See commentary above.)",
    "    final int rows = scrollOffset ~/ dimension;",
    "    final int loops = rows ~/ fullRowPeriod;",
    "    final int extra = rows % fullRowPeriod;",
    "    final int count = loops * loopLength + extra * crossAxisCount;",
    "    if (extra == fullRowPeriod - 1) {",
    "      return count;",
    "    }",
    "    return count + crossAxisCount - 1;",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Custom GridView"
},
"Flutter MatrixTransition Example": {
  "prefix": "flutter-matrixTransision",
  "scope":"dart",
  "body": [
    "",
    "import 'dart:math';",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [MatrixTransition].",
    "",
    "void main() => runApp(const MatrixTransitionExampleApp());",
    "",
    "class MatrixTransitionExampleApp extends StatelessWidget {",
    "  const MatrixTransitionExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return const MaterialApp(",
    "      home: MatrixTransitionExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class MatrixTransitionExample extends StatefulWidget {",
    "  const MatrixTransitionExample({super.key});",
    "",
    "  @override",
    "  State<MatrixTransitionExample> createState() => _MatrixTransitionExampleState();",
    "}",
    "",
    "/// [AnimationController]s can be created with `vsync: this` because of",
    "/// [TickerProviderStateMixin].",
    "class _MatrixTransitionExampleState extends State<MatrixTransitionExample> with TickerProviderStateMixin {",
    "  late AnimationController _controller;",
    "  late Animation<double> _animation;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    _controller = AnimationController(",
    "      duration: const Duration(seconds: 2),",
    "      vsync: this,",
    "    )..repeat();",
    "    _animation = CurvedAnimation(",
    "      parent: _controller,",
    "      curve: Curves.linear,",
    "    );",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    _controller.dispose();",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar:AppBar(title:Text(\"MatrixTransition\")),",
    "      body: Center(",
    "        child: MatrixTransition(",
    "          animation: _animation,",
    "          child: const Padding(",
    "            padding: EdgeInsets.all(8.0),",
    "            child: FlutterLogo(size: 150.0),",
    "          ),",
    "          onTransform: (double value) {",
    "            return Matrix4.identity()",
    "              ..setEntry(3, 2, 0.004)",
    "              ..rotateY(pi * 2.0 * value);",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter MatrixTransition Example"
},
"Flutter AdaptiveTextSelectionToolbar Example": {
  "prefix": "flutter-adaptiveSelectionToolbar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/foundation.dart';",
    "import 'package:flutter/material.dart';",
    "import 'package:flutter/services.dart';",
    "",
    "void main() => runApp(const EditableTextToolbarBuilderExampleApp());",
    "",
    "class EditableTextToolbarBuilderExampleApp extends StatefulWidget {",
    "  const EditableTextToolbarBuilderExampleApp({super.key});",
    "",
    "  @override",
    "  State<EditableTextToolbarBuilderExampleApp> createState() =>",
    "      _EditableTextToolbarBuilderExampleAppState();",
    "}",
    "",
    "class _EditableTextToolbarBuilderExampleAppState",
    "    extends State<EditableTextToolbarBuilderExampleApp> {",
    "  final TextEditingController _controller = TextEditingController(",
    "    text:",
    "        'Right click (desktop) or long press (mobile) to see the menu with a custom toolbar.',",
    "  );",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    // On web, disable the browser's context menu since this example uses a custom",
    "    // Flutter-rendered context menu.",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.disableContextMenu();",
    "    }",
    "  }",
    "",
    "  @override",
    "  void dispose() {",
    "    if (kIsWeb) {",
    "      BrowserContextMenu.enableContextMenu();",
    "    }",
    "    super.dispose();",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      home: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('AdaptiveTextSelectionToolbar'),",
    "        ),",
    "        body: Center(",
    "          child: Column(",
    "            children: <Widget>[",
    "              const SizedBox(height: 20.0),",
    "              TextField(",
    "                controller: _controller,",
    "                contextMenuBuilder: (BuildContext context,",
    "                    EditableTextState editableTextState) {",
    "                  return _MyTextSelectionToolbar(",
    "                    anchor: editableTextState.contextMenuAnchors.primaryAnchor,",
    "                    // getAdaptiveButtons creates the default button widgets for",
    "                    // the current platform.",
    "                    children: AdaptiveTextSelectionToolbar.getAdaptiveButtons(",
    "                      context,",
    "                      // These buttons just close the menu when clicked.",
    "                      <ContextMenuButtonItem>[",
    "                        ContextMenuButtonItem(",
    "                          label: 'One',",
    "                          onPressed: () => ContextMenuController.removeAny(),",
    "                        ),",
    "                        ContextMenuButtonItem(",
    "                          label: 'Two',",
    "                          onPressed: () => ContextMenuController.removeAny(),",
    "                        ),",
    "                        ContextMenuButtonItem(",
    "                          label: 'Three',",
    "                          onPressed: () => ContextMenuController.removeAny(),",
    "                        ),",
    "                        ContextMenuButtonItem(",
    "                          label: 'Four',",
    "                          onPressed: () => ContextMenuController.removeAny(),",
    "                        ),",
    "                        ContextMenuButtonItem(",
    "                          label: 'Five',",
    "                          onPressed: () => ContextMenuController.removeAny(),",
    "                        ),",
    "                      ],",
    "                    ).toList(),",
    "                  );",
    "                },",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "/// A simple, yet totally custom, text selection toolbar.",
    "///",
    "/// Displays its children in a scrollable grid.",
    "class _MyTextSelectionToolbar extends StatelessWidget {",
    "  const _MyTextSelectionToolbar({",
    "    required this.anchor,",
    "    required this.children,",
    "  });",
    "",
    "  final Offset anchor;",
    "  final List<Widget> children;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Stack(",
    "      children: <Widget>[",
    "        Positioned(",
    "          top: anchor.dy,",
    "          left: anchor.dx,",
    "          child: Container(",
    "            width: 200.0,",
    "            height: 200.0,",
    "            color: Colors.cyanAccent.withOpacity(0.5),",
    "            child: GridView.count(",
    "              padding: const EdgeInsets.all(12.0),",
    "              crossAxisCount: 2,",
    "              children: children,",
    "            ),",
    "          ),",
    "        ),",
    "      ],",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter AdaptiveTextSelectionToolbar Example"
},
"Flutter ActionIconTheme Example": {
  "prefix": "flutter-actionIconTheme",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [ActionIconTheme].",
    "",
    "void main() {",
    "  runApp(const ActionIconThemeExampleApp());",
    "}",
    "",
    "class _CustomEndDrawerIcon extends StatelessWidget {",
    "  const _CustomEndDrawerIcon();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final MaterialLocalizations localization =",
    "        MaterialLocalizations.of(context);",
    "    return Icon(",
    "      Icons.more_horiz,",
    "      semanticLabel: localization.openAppDrawerTooltip,",
    "    );",
    "  }",
    "}",
    "",
    "class _CustomDrawerIcon extends StatelessWidget {",
    "  const _CustomDrawerIcon();",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final MaterialLocalizations localization =",
    "        MaterialLocalizations.of(context);",
    "    return Icon(",
    "      Icons.segment,",
    "      semanticLabel: localization.openAppDrawerTooltip,",
    "    );",
    "  }",
    "}",
    "",
    "class ActionIconThemeExampleApp extends StatelessWidget {",
    "  const ActionIconThemeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "      theme: ThemeData(",
    "        useMaterial3: true,",
    "        actionIconTheme: ActionIconThemeData(",
    "          backButtonIconBuilder: (BuildContext context) {",
    "            return const Icon(Icons.arrow_back_ios_new_rounded);",
    "          },",
    "          drawerButtonIconBuilder: (BuildContext context) {",
    "            return const _CustomDrawerIcon();",
    "          },",
    "          endDrawerButtonIconBuilder: (BuildContext context) {",
    "            return const _CustomEndDrawerIcon();",
    "          },",
    "        ),",
    "      ),",
    "      home: const MyHomePage(title: 'ActionIcon Theme'),",
    "    );",
    "  }",
    "}",
    "",
    "class MyHomePage extends StatelessWidget {",
    "  const MyHomePage({super.key, required this.title});",
    "",
    "  final String title;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(title),",
    "      ),",
    "      drawer: Drawer(",
    "        child: Column(",
    "          children: <Widget>[",
    "            TextButton(child: const Text('Drawer Item'), onPressed: () {}),",
    "          ],",
    "        ),",
    "      ),",
    "      body: const Center(",
    "        child: NextPageButton(),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "class NextPageButton extends StatelessWidget {",
    "  const NextPageButton({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return ElevatedButton.icon(",
    "      onPressed: () {",
    "        Navigator.of(context).push(",
    "          MaterialPageRoute<MySecondPage>(builder: (BuildContext context) {",
    "            return const MySecondPage();",
    "          }),",
    "        );",
    "      },",
    "      icon: const Icon(Icons.arrow_forward),",
    "      label: const Text('Next page'),",
    "    );",
    "  }",
    "}",
    "",
    "class MySecondPage extends StatelessWidget {",
    "  const MySecondPage({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text('Second page'),",
    "      ),",
    "      endDrawer: const Drawer(),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ActionIconTheme Example"
},
"Flutter GridTileBar Example": {
  "prefix": "flutter-gridTileBar",
  "scope":"dart",
  "body": [
    "",
    "import 'package:flutter/material.dart';",
    "",
    "/// Flutter code sample for [GridTileBar].",
    "",
    "void main() {",
    "  runApp(const GridTileBarExampleApp());",
    "}",
    "",
    "",
    "",
    "class GridTileBarExampleApp extends StatelessWidget {",
    "  const GridTileBarExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "     ",
    "      ",
    "      home: const GridTileBarExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class GridTileBarExample extends StatefulWidget {",
    "  const GridTileBarExample({super.key});",
    "",
    "  @override",
    "  State<GridTileBarExample> createState() => _GridTileBarExampleState();",
    "}",
    "",
    "class _GridTileBarExampleState extends State<GridTileBarExample> {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text(\"GridTileBar\"),",
    "      ),",
    "      body: Column(",
    "        children: [",
    "          GridTileBar(",
    "            title: Text(\"Grid Tile bAr\"),",
    "            subtitle: Text(\"dfghjkjhgfghjk\"),",
    "            trailing: Icon(",
    "              Icons.ad_units_outlined,",
    "              color: Colors.red,",
    "            ),",
    "            leading: CircleAvatar(),",
    "            backgroundColor: Colors.grey,",
    "          ),",
    "          ListTile(",
    "            title: Text(\"List Tile\"),",
    "            subtitle: Text(\"dfghjkjhgfghjk\"),",
    "            trailing: Icon(",
    "              Icons.ad_units_outlined,",
    "              color: Colors.red,",
    "            ),",
    "            leading: CircleAvatar(),",
    "          )",
    "        ],",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter GridTileBar Example"
},
"Flutter ButtonBar Example": {
  "prefix": "flutter-ButtonBar",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "void main() {",
    "  runApp(MyApp());",
    "}",
    "",
    "class MyApp extends StatelessWidget {",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      title: 'Custom Widget Demo',",
    "      theme: ThemeData(",
    "        primarySwatch: Colors.blue,",
    "      ),",
    "      home: ButtonBarScreen(),",
    "    );",
    "  }",
    "}",
    "",
    "class ButtonBarScreen extends StatefulWidget {",
    "  @override",
    "  _ButtonBarScreenState createState() => _ButtonBarScreenState();",
    "}",
    "",
    "class _ButtonBarScreenState extends State<ButtonBarScreen> {",
    "  Color _backgroundColor = Colors.white;",
    "",
    "  void _changeColor(Color color) {",
    "    setState(() {",
    "      _backgroundColor = color;",
    "    });",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: Text('ButtonBar Example'),",
    "      ),",
    "      body: Container(",
    "        color: _backgroundColor,",
    "        child: Center(",
    "          child: Column(",
    "            mainAxisAlignment: MainAxisAlignment.center,",
    "            children: [",
    "              ButtonBar(",
    "                alignment: MainAxisAlignment.center,",
    "                buttonMinWidth: 80.0, // Adjust the minimum width of buttons",
    "                buttonHeight: 40.0, // Adjust the height of buttons",
    "                children: [",
    "                  ElevatedButton(onPressed:null,child:Text(\"dfddjfdjfdfdfdfdfjjjjjj\")),",
    "                  ElevatedButton(onPressed:null,child:Text(\"Nadad\")),",
    "                  ElevatedButton(onPressed:null,child:Text(\"Nadad\")),",
    "                  ElevatedButton(onPressed:null,child:Text(\"Nadad\")),",
    "                 ",
    "                ],",
    "              ),",
    "            ],",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter ButtonBar Example"
},
"Flutter ChatBubbles Example": {
  "prefix": "flutter-chat-bubbles",
  "scope":"dart",
  "body": [
    "import 'dart:math';",
    "import 'dart:ui' as ui;",
    "",
    "import 'package:flutter/material.dart';",
    "",
    "void main() {",
    "  runApp(const App(home: ExampleGradientBubbles()));",
    "}",
    "",
    "@immutable",
    "class App extends StatelessWidget {",
    "  const App({super.key, this.home});",
    "",
    "  final Widget? home;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      debugShowCheckedModeBanner: false,",
    "      title: 'Flutter Chat',",
    "      theme: ThemeData.dark(useMaterial3: true),",
    "      home: home,",
    "    );",
    "  }",
    "}",
    "",
    "@immutable",
    "class ExampleGradientBubbles extends StatefulWidget {",
    "  const ExampleGradientBubbles({super.key});",
    "",
    "  @override",
    "  State<ExampleGradientBubbles> createState() => _ExampleGradientBubblesState();",
    "}",
    "",
    "class _ExampleGradientBubblesState extends State<ExampleGradientBubbles> {",
    "  late final List<Message> data;",
    "",
    "  @override",
    "  void initState() {",
    "    super.initState();",
    "    data = MessageGenerator.generate(60, 1337);",
    "  }",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return Theme(",
    "      data: ThemeData(",
    "        brightness: Brightness.dark,",
    "        primaryColor: const Color(0xFF4F4F4F),",
    "      ),",
    "      child: Scaffold(",
    "        appBar: AppBar(",
    "          title: const Text('Flutter Chat'),",
    "        ),",
    "        body: ListView.builder(",
    "          padding: const EdgeInsets.symmetric(vertical: 16.0),",
    "          reverse: true,",
    "          itemCount: data.length,",
    "          itemBuilder: (context, index) {",
    "            final message = data[index];",
    "            return MessageBubble(",
    "              message: message,",
    "              child: Text(message.text),",
    "            );",
    "          },",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "@immutable",
    "class MessageBubble extends StatelessWidget {",
    "  const MessageBubble({",
    "    super.key,",
    "    required this.message,",
    "    required this.child,",
    "  });",
    "",
    "  final Message message;",
    "  final Widget child;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    final messageAlignment =",
    "        message.isMine ? Alignment.topLeft : Alignment.topRight;",
    "",
    "    return FractionallySizedBox(",
    "      alignment: messageAlignment,",
    "      widthFactor: 0.8,",
    "      child: Align(",
    "        alignment: messageAlignment,",
    "        child: Padding(",
    "          padding: const EdgeInsets.symmetric(vertical: 6.0, horizontal: 20.0),",
    "          child: ClipRRect(",
    "            borderRadius: const BorderRadius.all(Radius.circular(16.0)),",
    "            child: BubbleBackground(",
    "              colors: [",
    "                if (message.isMine) ...const [",
    "                  Color(0xFF6C7689),",
    "                  Color(0xFF3A364B),",
    "                ] else ...const [",
    "                  Color(0xFF19B7FF),",
    "                  Color(0xFF491CCB),",
    "                ],",
    "              ],",
    "              child: DefaultTextStyle.merge(",
    "                style: const TextStyle(",
    "                  fontSize: 18.0,",
    "                  color: Colors.white,",
    "                ),",
    "                child: Padding(",
    "                  padding: const EdgeInsets.all(12.0),",
    "                  child: child,",
    "                ),",
    "              ),",
    "            ),",
    "          ),",
    "        ),",
    "      ),",
    "    );",
    "  }",
    "}",
    "",
    "@immutable",
    "class BubbleBackground extends StatelessWidget {",
    "  const BubbleBackground({",
    "    super.key,",
    "    required this.colors,",
    "    this.child,",
    "  });",
    "",
    "  final List<Color> colors;",
    "  final Widget? child;",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return CustomPaint(",
    "      painter: BubblePainter(",
    "        scrollable: Scrollable.of(context),",
    "        bubbleContext: context,",
    "        colors: colors,",
    "      ),",
    "      child: child,",
    "    );",
    "  }",
    "}",
    "",
    "class BubblePainter extends CustomPainter {",
    "  BubblePainter({",
    "    required ScrollableState scrollable,",
    "    required BuildContext bubbleContext,",
    "    required List<Color> colors,",
    "  })  : _scrollable = scrollable,",
    "        _bubbleContext = bubbleContext,",
    "        _colors = colors,",
    "        super(repaint: scrollable.position);",
    "",
    "  final ScrollableState _scrollable;",
    "  final BuildContext _bubbleContext;",
    "  final List<Color> _colors;",
    "",
    "  @override",
    "  void paint(Canvas canvas, Size size) {",
    "    final scrollableBox = _scrollable.context.findRenderObject() as RenderBox;",
    "    final scrollableRect = Offset.zero & scrollableBox.size;",
    "    final bubbleBox = _bubbleContext.findRenderObject() as RenderBox;",
    "",
    "    final origin =",
    "        bubbleBox.localToGlobal(Offset.zero, ancestor: scrollableBox);",
    "    final paint = Paint()",
    "      ..shader = ui.Gradient.linear(",
    "        scrollableRect.topCenter,",
    "        scrollableRect.bottomCenter,",
    "        _colors,",
    "        [0.0, 1.0],",
    "        TileMode.clamp,",
    "        Matrix4.translationValues(-origin.dx, -origin.dy, 0.0).storage,",
    "      );",
    "    canvas.drawRect(Offset.zero & size, paint);",
    "  }",
    "",
    "  @override",
    "  bool shouldRepaint(BubblePainter oldDelegate) {",
    "    return oldDelegate._scrollable != _scrollable ||",
    "        oldDelegate._bubbleContext != _bubbleContext ||",
    "        oldDelegate._colors != _colors;",
    "  }",
    "}",
    "",
    "enum MessageOwner { myself, other }",
    "",
    "@immutable",
    "class Message {",
    "  const Message({",
    "    required this.owner,",
    "    required this.text,",
    "  });",
    "",
    "  final MessageOwner owner;",
    "  final String text;",
    "",
    "  bool get isMine => owner == MessageOwner.myself;",
    "}",
    "",
    "class MessageGenerator {",
    "  static List<Message> generate(int count, [int? seed]) {",
    "    final random = Random(seed);",
    "    return List.unmodifiable(List<Message>.generate(count, (index) {",
    "      return Message(",
    "        owner: random.nextBool() ? MessageOwner.myself : MessageOwner.other,",
    "        text: _exampleData[random.nextInt(_exampleData.length)],",
    "      );",
    "    }));",
    "  }",
    "",
    "  static final _exampleData = [",
    "    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',",
    "    'In tempus mauris at velit egestas, sed blandit felis ultrices.',",
    "    'Ut molestie mauris et ligula finibus iaculis.',",
    "    'Sed a tempor ligula.',",
    "    'Test',",
    "    'Phasellus ullamcorper, mi ut imperdiet consequat, nibh augue condimentum nunc, vitae molestie massa augue nec erat.',",
    "    'Donec scelerisque, erat vel placerat facilisis, eros turpis egestas nulla, a sodales elit nibh et enim.',",
    "    'Mauris quis dignissim neque. In a odio leo. Aliquam egestas egestas tempor. Etiam at tortor metus.',",
    "    'Quisque lacinia imperdiet faucibus.',",
    "    'Proin egestas arcu non nisl laoreet, vitae iaculis enim volutpat. In vehicula convallis magna.',",
    "    'Phasellus at diam a sapien laoreet gravida.',",
    "    'Fusce maximus fermentum sem a scelerisque.',",
    "    'Nam convallis sapien augue, malesuada aliquam dui bibendum nec.',",
    "    'Quisque dictum tincidunt ex non lobortis.',",
    "    'In hac habitasse platea dictumst.',",
    "    'Ut pharetra ligula libero, sit amet imperdiet lorem luctus sit amet.',",
    "    'Sed ex lorem, lacinia et varius vitae, sagittis eget libero.',",
    "    'Vestibulum scelerisque velit sed augue ultricies, ut vestibulum lorem luctus.',",
    "    'Pellentesque et risus pretium, egestas ipsum at, facilisis lectus.',",
    "    'Praesent id eleifend lacus.',",
    "    'Fusce convallis eu tortor sit amet mattis.',",
    "    'Vivamus lacinia magna ut urna feugiat tincidunt.',",
    "    'Sed in diam ut dolor imperdiet vehicula non ac turpis.',",
    "    'Praesent at est hendrerit, laoreet tortor sed, varius mi.',",
    "    'Nunc in odio leo.',",
    "    'Praesent placerat semper libero, ut aliquet dolor.',",
    "    'Vestibulum elementum leo metus, vitae auctor lorem tincidunt ut.',",
    "  ];",
    "}"
  ],
  "description": "Flutter ChatBubbles Example"
},
"Flutter Example for Listenable.merge": {
  "prefix": "flutter-Listenable.merge",
  "scope":"dart",
  "body": [
    "import 'package:flutter/material.dart';",
    "",
    "void main() => runApp(const ListenableMergeExampleApp());",
    "",
    "class ListenableMergeExampleApp extends StatelessWidget {",
    "  const ListenableMergeExampleApp({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    return MaterialApp(",
    "      theme: ThemeData(",
    "          colorScheme: ColorScheme.fromSeed(",
    "              seedColor: const Color.fromARGB(255, 212, 83, 83)),",
    "          appBarTheme: const AppBarTheme(",
    "              backgroundColor: Color.fromARGB(255, 212, 83, 83))),",
    "      home: ListenableExample(),",
    "    );",
    "  }",
    "}",
    "",
    "class ListenableExample extends StatelessWidget {",
    "  final ValueNotifier<double> value1 = ValueNotifier(50.00);",
    "  final ValueNotifier<double> value2 = ValueNotifier(50.0);",
    "",
    "  ListenableExample({super.key});",
    "",
    "  @override",
    "  Widget build(BuildContext context) {",
    "    Listenable mergedListenable = Listenable.merge([value1, value2]);",
    "",
    "    return Scaffold(",
    "      appBar: AppBar(",
    "        title: const Text(\"Listenable.merge()\"),",
    "      ),",
    "      body: AnimatedBuilder(",
    "        animation: mergedListenable,",
    "        builder: (context, child) {",
    "          return Center(",
    "            child: Container(",
    "              width: value1.value,",
    "              height: value2.value,",
    "              color: Colors.blue,",
    "              alignment: Alignment.center,",
    "              child: Text(",
    "                \"width${value1.value}height${value2.value}\",",
    "                style: const TextStyle(fontSize: 12),",
    "              ),",
    "            ),",
    "          );",
    "        },",
    "      ),",
    "      floatingActionButton: FloatingActionButton.small(",
    "        onPressed: () {",
    "          value2.value = value2.value + 30;",
    "          value1.value = value1.value + 30;",
    "        },",
    "        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,",
    "        child: const Icon(Icons.add),",
    "      ),",
    "    );",
    "  }",
    "}",
    ""
  ],
  "description": "Flutter Example for Listenable.merge"
}
      }
