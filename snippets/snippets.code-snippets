{
  
    " Flutter AboutListTile Example": {
        "scope": "dart",
        "prefix": "flutter-about-list-tile",
        "body": [
          "void main() => runApp(const AboutListTileExampleApp());",
          "",
          "class AboutListTileExampleApp extends StatelessWidget {",
          "  const AboutListTileExampleApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return const MaterialApp(",
          "      home: AboutListTileExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class AboutListTileExample extends StatelessWidget {",
          "  const AboutListTileExample({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    final ThemeData theme = Theme.of(context);",
          "    final TextStyle textStyle = theme.textTheme.bodyMedium!;",
          "    final List<Widget> aboutBoxChildren = <Widget>[",
          "      const SizedBox(height: 24),",
          "      RichText(",
          "        text: TextSpan(",
          "          children: <TextSpan>[",
          "            TextSpan(",
          "                style: textStyle,",
          "                text: \"Flutter is Google's UI toolkit for building beautiful, \"",
          "                    'natively compiled applications for mobile, web, and desktop '",
          "                    'from a single codebase. Learn more about Flutter at '),",
          "            TextSpan(",
          "                style: textStyle.copyWith(color: theme.colorScheme.primary),",
          "                text: 'https://flutter.dev'),",
          "            TextSpan(style: textStyle, text: '.'),",
          "          ],",
          "        ),",
          "      ),",
          "    ];",
          "",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('Show About Example'),",
          "      ),",
          "      drawer: Drawer(",
          "        child: SingleChildScrollView(",
          "          child: SafeArea(",
          "            child: AboutListTile(",
          "              icon: const Icon(Icons.info),",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              aboutBoxChildren: aboutBoxChildren,",
          "            ),",
          "          ),",
          "        ),",
          "      ),",
          "      body: Center(",
          "        child: ElevatedButton(",
          "          child: const Text('Show About Example'),",
          "          onPressed: () {",
          "            showAboutDialog(",
          "              context: context,",
          "              applicationIcon: const FlutterLogo(),",
          "              applicationName: 'Show About Example',",
          "              applicationVersion: 'August 2019',",
          "              applicationLegalese: '\u{a9} 2014 The Flutter Authors',",
          "              children: aboutBoxChildren,",
          "            );",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AboutListTile Example "
      },
      "Dart Flutter ActionChip Example": {
        "scope": "dart",
        "prefix": "flutter-action-chip",
        "body": [
          "// Flutter code sample [ActionChip].",
          "import 'package:flutter/material.dart';",
          "",
          "void main() => runApp(const ChipApp());",
          "",
          "class ChipApp extends StatelessWidget {",
          "  const ChipApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),",
          "      home: const ActionChipExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class ActionChipExample extends StatefulWidget {",
          "  const ActionChipExample({super.key});",
          "",
          "  @override",
          "  State<ActionChipExample> createState() => _ActionChipExampleState();",
          "}",
          "",
          "class _ActionChipExampleState extends State<ActionChipExample> {",
          "  bool favorite = false;",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('ActionChip Sample'),",
          "      ),",
          "      body: Center(",
          "        child: ActionChip(",
          "          avatar: Icon(favorite ? Icons.favorite : Icons.favorite_border),",
          "          label: const Text('Save to favorites'),",
          "          onPressed: () {",
          "            setState(() {",
          "              favorite = !favorite;",
          "            });",
          "          },",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter ActionChip Example (Dart)"
      },

      "Flutter AnimatedIcon Example": {
        "scope": "dart",
        "prefix": "flutter-animated-icon",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "void main() {",
          "  runApp(const AnimatedIconApp());",
          "}",
          "",
          "class AnimatedIconApp extends StatelessWidget {",
          "  const AnimatedIconApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const Scaffold(",
          "        body: AnimatedIconExample(),",
          "      ),",
          "    );",
          "  }",
          "}",
          "",
          "class AnimatedIconExample extends StatefulWidget {",
          "  const AnimatedIconExample({super.key});",
          "",
          "  @override",
          "  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();",
          "}",
          "",
          "class _AnimatedIconExampleState extends State<AnimatedIconExample> with SingleTickerProviderStateMixin {",
          "  late AnimationController controller;",
          "  late Animation<double> animation;",
          "",
          "  @override",
          "  void initState() {",
          "    super.initState();",
          "    controller = AnimationController(",
          "      vsync: this,",
          "      duration: const Duration(seconds: 2),",
          "    )",
          "      ..forward()",
          "      ..repeat(reverse: true);",
          "    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);",
          "  }",
          "",
          "  @override",
          "  void dispose() {",
          "    controller.dispose();",
          "    super.dispose();",
          "  }",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      body: Center(",
          "        child: AnimatedIcon(",
          "          icon: AnimatedIcons.menu_arrow,",
          "          progress: animation,",
          "          size: 72.0,",
          "          semanticLabel: 'Show menu',",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AnimatedIcon Example "
      },
      "Dart Flutter AnimatedIcons Example": {
        "scope": "dart",
        "prefix": "flutter-animated-icons",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "// Define a map of AnimatedIcons.",
          "final Map<String, AnimatedIconData> iconsList = <String, AnimatedIconData>{",
          "  'add_event': AnimatedIcons.add_event,",
          "  'arrow_menu': AnimatedIcons.arrow_menu,",
          "  'close_menu': AnimatedIcons.close_menu,",
          "  'ellipsis_search': AnimatedIcons.ellipsis_search,",
          "  'event_add': AnimatedIcons.event_add,",
          "  'home_menu': AnimatedIcons.home_menu,",
          "  'list_view': AnimatedIcons.list_view,",
          "  'menu_arrow': AnimatedIcons.menu_arrow,",
          "  'menu_close': AnimatedIcons.menu_close,",
          "  'menu_home': AnimatedIcons.menu_home,",
          "  'pause_play': AnimatedIcons.pause_play,",
          "  'play_pause': AnimatedIcons.play_pause,",
          "  'search_ellipsis': AnimatedIcons.search_ellipsis,",
          "  'view_list': AnimatedIcons.view_list,",
          "};",
          "",
          "void main() {",
          "  runApp(const AnimatedIconApp());",
          "}",
          "",
          "class AnimatedIconApp extends StatelessWidget {",
          "  const AnimatedIconApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const Scaffold(",
          "        body: AnimatedIconExample(),",
          "      ),",
          "    );",
          "  }",
          "}",
          "",
          "class AnimatedIconExample extends StatefulWidget {",
          "  const AnimatedIconExample({super.key});",
          "",
          "  @override",
          "  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();",
          "}",
          "",
          "class _AnimatedIconExampleState extends State<AnimatedIconExample> with SingleTickerProviderStateMixin {",
          "  late AnimationController controller;",
          "  late Animation<double> animation;",
          "",
          "  @override",
          "  void initState() {",
          "    super.initState();",
          "    controller = AnimationController(",
          "      vsync: this,",
          "      duration: const Duration(seconds: 2),",
          "    )",
          "      ..forward()",
          "      ..repeat(reverse: true);",
          "    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);",
          "  }",
          "",
          "  @override",
          "  void dispose() {",
          "    controller.dispose();",
          "    super.dispose();",
          "  }",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return Scaffold(",
          "      body: GridView(",
          "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
          "          crossAxisCount: 4,",
          "        ),",
          "        children: iconsList.entries.map((MapEntry<String, AnimatedIconData> entry) {",
          "          return Card(",
          "            child: Center(",
          "              child: Column(",
          "                mainAxisAlignment: MainAxisAlignment.center,",
          "                children: <Widget>[",
          "                  AnimatedIcon(",
          "                    icon: entry.value,",
          "                    progress: animation,",
          "                    size: 72.0,",
          "                    semanticLabel: entry.key,",
          "                  ),",
          "                  const SizedBox(height: 8.0),",
          "                  Text(entry.key),",
          "                ],",
          "              ),",
          "            ),",
          "          );",
          "        }).toList(),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AnimatedIcons Example "
      },
      "Dart Flutter AppBar Example": {
        "scope": "dart",
        "prefix": "flutter-app-bar",
        "body": [
          "import 'package:flutter/material.dart';",
          "",
          "// Create a list of integers.",
          "final List<int> _items = List<int>.generate(51, (int index) => index);",
          "",
          "void main() => runApp(const AppBarApp());",
          "",
          "class AppBarApp extends StatelessWidget {",
          "  const AppBarApp({super.key});",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    return MaterialApp(",
          "      theme: ThemeData(",
          "        colorSchemeSeed: const Color(0xff6750a4),",
          "        useMaterial3: true,",
          "      ),",
          "      home: const AppBarExample(),",
          "    );",
          "  }",
          "}",
          "",
          "class AppBarExample extends StatefulWidget {",
          "  const AppBarExample({super.key});",
          "",
          "  @override",
          "  State<AppBarExample> createState() => _AppBarExampleState();",
          "}",
          "",
          "class _AppBarExampleState extends State<AppBarExample> {",
          "  bool shadowColor = false;",
          "  double? scrolledUnderElevation;",
          "",
          "  @override",
          "  Widget build(BuildContext context) {",
          "    final ColorScheme colorScheme = Theme.of(context).colorScheme;",
          "    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);",
          "    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);",
          "",
          "    return Scaffold(",
          "      appBar: AppBar(",
          "        title: const Text('AppBar Demo'),",
          "        scrolledUnderElevation: scrolledUnderElevation,",
          "        shadowColor: shadowColor ? Theme.of(context).colorScheme.shadow : null,",
          "      ),",
          "      body: GridView.builder(",
          "        itemCount: _items.length,",
          "        padding: const EdgeInsets.all(8.0),",
          "        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
          "          crossAxisCount: 3,",
          "          childAspectRatio: 2.0,",
          "          mainAxisSpacing: 10.0,",
          "          crossAxisSpacing: 10.0,",
          "        ),",
          "        itemBuilder: (BuildContext context, int index) {",
          "          if (index == 0) {",
          "            return Center(",
          "              child: Text(",
          "                'Scroll to see the AppBar in effect.',",
          "                style: Theme.of(context).textTheme.labelLarge,",
          "                textAlign: TextAlign.center,",
          "              ),",
          "            );",
          "          }",
          "          return Container(",
          "            alignment: Alignment.center,",
          "            decoration: BoxDecoration(",
          "              borderRadius: BorderRadius.circular(20.0),",
          "              color: _items[index].isOdd ? oddItemColor : evenItemColor,",
          "            ),",
          "            child: Text('Item $index'),",
          "          );",
          "        },",
          "      ),",
          "      bottomNavigationBar: BottomAppBar(",
          "        child: Padding(",
          "          padding: const EdgeInsets.all(8),",
          "          child: OverflowBar(",
          "            overflowAlignment: OverflowBarAlignment.center,",
          "            alignment: MainAxisAlignment.center,",
          "            overflowSpacing: 2.0,",
          "            children: <Widget>[",
          "              ElevatedButton.icon(",
          "                onPressed: () {",
          "                  setState(() {",
          "                    shadowColor = !shadowColor;",
          "                  });",
          "                },",
          "                icon: Icon(",
          "                  shadowColor ? Icons.visibility_off : Icons.visibility,",
          "                ),",
          "                label: const Text('shadow color'),",
          "              ),",
          "              const SizedBox(width: 5),",
          "              ElevatedButton(",
          "                onPressed: () {",
          "                  if (scrolledUnderElevation == null) {",
          "                    setState(() {",
          "                      // Default elevation is 3.0, increment by 1.0.",
          "                      scrolledUnderElevation = 4.0;",
          "                    });",
          "                  } else {",
          "                    setState(() {",
          "                      scrolledUnderElevation = scrolledUnderElevation! + 1.0;",
          "                    });",
          "                  }",
          "                },",
          "                child: Text(",
          "                  'scrolledUnderElevation: ${scrolledUnderElevation ?? 'default'}',",
          "                ),",
          "              ),",
          "            ],",
          "          ),",
          "        ),",
          "      ),",
          "    );",
          "  }",
          "}"
        ],
        "description": "Flutter AppBar Example "
      },
      {
        "EditableTextToolbarBuilder Example": {
          "scope": "dart",  // Specify the scope for Dart files
          "prefix": "flutter-editable-toolbar-builder",  // Choose a prefix to trigger the snippet
          "body": [
            "import 'package:flutter/foundation.dart';",
            "import 'package:flutter/material.dart';",
            "import 'package:flutter/services.dart';",
            "",
            "void main() => runApp(const EditableTextToolbarBuilderExampleApp());",
            "class EditableTextToolbarBuilderExampleApp extends StatefulWidget {",
            "  const EditableTextToolbarBuilderExampleApp({super.key});",
            "  @override",
            "  State<EditableTextToolbarBuilderExampleApp> createState() => _EditableTextToolbarBuilderExampleAppState();",
            "}",
            "class _EditableTextToolbarBuilderExampleAppState extends State<EditableTextToolbarBuilderExampleApp> {",
            "  final TextEditingController _controller = TextEditingController(",
            "    text: 'Right click (desktop) or long press (mobile) to see the menu with a custom toolbar.',",
            "  );",
            "",
            "  @override",
            "  void initState() {",
            "    super.initState();",
            "    // On web, disable the browser's context menu since this example uses a custom",
            "    // Flutter-rendered context menu.",
            "    if (kIsWeb) {",
            "      BrowserContextMenu.disableContextMenu();",
            "    }",
            "  }",
            "",
            "  @override",
            "  void dispose() {",
            "    if (kIsWeb) {",
            "      BrowserContextMenu.enableContextMenu();",
            "    }",
            "    super.dispose();",
            "  }",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return MaterialApp(",
            "      home: Scaffold(",
            "        appBar: AppBar(",
            "          title: const Text('Custom toolbar, default-looking buttons'),",
            "        ),",
            "        body: Center(",
            "          child: Column(",
            "            children: <Widget>[",
            "              const SizedBox(height: 20.0),",
            "              TextField(",
            "                controller: _controller,",
            "                contextMenuBuilder: (BuildContext context, EditableTextState editableTextState) {",
            "                  return _MyTextSelectionToolbar(",
            "                    anchor: editableTextState.contextMenuAnchors.primaryAnchor,",
            "                    // getAdaptiveButtons creates the default button widgets for",
            "                    // the current platform.",
            "                    children: AdaptiveTextSelectionToolbar.getAdaptiveButtons(",
            "                      context,",
            "                      // These buttons just close the menu when clicked.",
            "                      <ContextMenuButtonItem>[",
            "                        ContextMenuButtonItem(",
            "                          label: 'One',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Two',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Three',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Four',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                        ContextMenuButtonItem(",
            "                          label: 'Five',",
            "                          onPressed: () => ContextMenuController.removeAny(),",
            "                        ),",
            "                      ],",
            "                    ).toList(),",
            "                  );",
            "                },",
            "              ),",
            "            ],",
            "          ),",
            "        ),",
            "      ),",
            "    );",
            "  }",
            "}",
            "",
            "class _MyTextSelectionToolbar extends StatelessWidget {",
            "  const _MyTextSelectionToolbar({",
            "    required this.anchor,",
            "    required this.children,",
            "  });",
            "",
            "  final Offset anchor;",
            "  final List<Widget> children;",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Stack(",
            "      children: <Widget>[",
            "        Positioned(",
            "          top: anchor.dy,",
            "          left: anchor.dx,",
            "          child: Container(",
            "            width: 200.0,",
            "            height: 200.0,",
            "            color: Colors.cyanAccent.withOpacity(0.5),",
            "            child: GridView.count(",
            "              padding: const EdgeInsets.all(12.0),",
            "              crossAxisCount: 2,",
            "              children: children,",
            "            ),",
            "          ),",
            "        ),",
            "      ],",
            "    );",
            "  }",
            "}",
          ],
          "description": "Flutter editable toggle button snippet"
        }
      },
      {
  "flutter Autocomplete Example": {
    "scope": "dart", 
    "prefix": "flutter-autocomplete-example",  
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "const Duration fakeAPIDuration = Duration(seconds: 1);",
      "",
      "void main() => runApp(const AutocompleteExampleApp());",
      "",
      "class AutocompleteExampleApp extends StatelessWidget {",
      "  const AutocompleteExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Autocomplete - async'),",
      "        ),",
      "        body: Center(",
      "          child: Column(",
      "            mainAxisAlignment: MainAxisAlignment.center,",
      "            children: <Widget>[",
      "              Text('Type below to autocomplete the following possible results: \${_FakeAPI._kOptions}.'),",
      "              const _AsyncAutocomplete(),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _AsyncAutocomplete extends StatefulWidget {",
      "  const _AsyncAutocomplete();",
      "",
      "  @override",
      "  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();",
      "}",
      "",
      "class _AsyncAutocompleteState extends State<_AsyncAutocomplete> {",
      "  String? _searchingWithQuery;",
      "  late Iterable<String> _lastOptions = <String>[];",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Autocomplete<String>(",
      "      optionsBuilder: (TextEditingValue textEditingValue) async {",
      "        _searchingWithQuery = textEditingValue.text;",
      "        final Iterable<String> options = await _FakeAPI.search(_searchingWithQuery!);",
      "        if (_searchingWithQuery != textEditingValue.text) {",
      "          return _lastOptions;",
      "        }",
      "        _lastOptions = options;",
      "        return options;",
      "      },",
      "      onSelected: (String selection) {",
      "        debugPrint('You just selected $selection');",
      "      },",
      "    );",
      "  }",
      "}",
      "",
      "class _FakeAPI {",
      "  static const List<String> _kOptions = <String>[",
      "    'aardvark',",
      "    'bobcat',",
      "    'chameleon',",
      "  ];",
      "",
      "  static Future<Iterable<String>> search(String query) async {",
      "    await Future<void>.delayed(fakeAPIDuration);",
      "    if (query == '') {",
      "      return const Iterable<String>.empty();",
      "    }",
      "    return _kOptions.where((String option) {",
      "      return option.contains(query.toLowerCase());",
      "    });",
      "  }",
      "}",
    ],
    "description": "Flutter Autocomplete Example"
  }
},
{
  "Flutter Async Autocomplete Example": {
    "scope": "dart",  // Specify the scope for Dart files
    "prefix": "flutter-asyncautocomplete-example",  // Choose a prefix to trigger the snippet
    "body": [
      "import 'dart:async';",
      "import 'package:flutter/material.dart';",
      "",
      "const Duration fakeAPIDuration = Duration(seconds: 1);",
      "const Duration debounceDuration = Duration(milliseconds: 500);",
      "",
      "void main() => runApp(const AutocompleteExampleApp());",
      "",
      "class AutocompleteExampleApp extends StatelessWidget {",
      "  const AutocompleteExampleApp({Key? key}) : super(key: key);",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Autocomplete - async and debouncing'),",
      "        ),",
      "        body: Center(",
      "          child: Column(",
      "            mainAxisAlignment: MainAxisAlignment.center,",
      "            children: <Widget>[",
      "              Text('Type below to autocomplete the following possible results: \${_FakeAPI._kOptions}.'),",
      "              const _AsyncAutocomplete(),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class _AsyncAutocomplete extends StatefulWidget {",
      "  const _AsyncAutocomplete();",
      "",
      "  @override",
      "  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();",
      "}",
      "",
      "class _AsyncAutocompleteState extends State<_AsyncAutocomplete> {",
      "  String? _currentQuery;",
      "  late Iterable<String> _lastOptions = <String>[];",
      "",
      "  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;",
      "",
      "  Future<Iterable<String>?> _search(String query) async {",
      "    _currentQuery = query;",
      "    final Iterable<String> options = await _FakeAPI.search(_currentQuery!);",
      "    if (_currentQuery != query) {",
      "      return null;",
      "    }",
      "    _currentQuery = null;",
      "    return options;",
      "  }",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Autocomplete<String>(",
      "      optionsBuilder: (TextEditingValue textEditingValue) async {",
      "        final Iterable<String>? options = await _debouncedSearch(textEditingValue.text);",
      "        if (options == null) {",
      "          return _lastOptions;",
      "        }",
      "        _lastOptions = options;",
      "        return options;",
      "      },",
      "      onSelected: (String selection) {",
      "        debugPrint('You just selected $selection');",
      "      },",
      "    );",
      "  }",
      "}",
      "",
      "class _FakeAPI {",
      "  static const List<String> _kOptions = <String>[",
      "    'aardvark',",
      "    'bobcat',",
      "    'chameleon',",
      "  ];",
      "",
      "  static Future<Iterable<String>> search(String query) async {",
      "    await Future<void>.delayed(fakeAPIDuration);",
      "    if (query == '') {",
      "      return const Iterable<String>.empty();",
      "    }",
      "    return _kOptions.where((String option) {",
      "      return option.contains(query.toLowerCase());",
      "    });",
      "  }",
      "}",
      "",
      "typedef _Debounceable<S, T> = Future<S?> Function(T parameter);",
      "",
      "_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {",
      "  _DebounceTimer? debounceTimer;",
      "  return (T parameter) async {",
      "    if (debounceTimer != null && !debounceTimer!.isCompleted) {",
      "      debounceTimer!.cancel();",
      "    }",
      "    debounceTimer = _DebounceTimer();",
      "    try {",
      "      await debounceTimer!.future;",
      "    } catch (error) {",
      "      if (error is _CancelException) {",
      "        return null;",
      "      }",
      "      rethrow;",
      "    }",
      "    return function(parameter);",
      "  };",
      "}",
      "",
      "class _DebounceTimer {",
      "  _DebounceTimer() {",
      "    _timer = Timer(debounceDuration, _onComplete);",
      "  }",
      "",
      "  late final Timer _timer;",
      "  final Completer<void> _completer = Completer<void>();",
      "",
      "  void _onComplete() {",
      "    _completer.complete();",
      "  }",
      "",
      "  Future<void> get future => _completer.future;",
      "",
      "  bool get isCompleted => _completer.isCompleted;",
      "",
      "  void cancel() {",
      "    _timer.cancel();",
      "    _completer.completeError(const _CancelException());",
      "  }",
      "}",
      "",
      "class _CancelException implements Exception {",
       "  const _CancelException();",
      "}",
    ],
    "description": "flutter Async Autocomplete Example"
  }
},
{
  "Flutter Material Banner Example": {
    "prefix": "flutter-banner-example",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const MaterialBannerExampleApp());",
      "",
      "class MaterialBannerExampleApp extends StatelessWidget {",
      "  const MaterialBannerExampleApp({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const MaterialApp(",
      "      home: MaterialBannerExample(),",
      "    );",
      "  }",
      "}",
      "",
      "class MaterialBannerExample extends StatelessWidget {",
      "  const MaterialBannerExample({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('The MaterialBanner is below'),",
      "      ),",
      "      body: Center(",
      "        child: ElevatedButton(",
      "          child: const Text('Show MaterialBanner'),",
      "          onPressed: () => ScaffoldMessenger.of(context).showMaterialBanner(",
      "            const MaterialBanner(",
      "              content: Text('Hello, I am a Material Banner'),",
      "              leading: Icon(Icons.agriculture_outlined),",
      "              backgroundColor: Colors.green,",
      "              actions: <Widget>[",
      "                TextButton(",
      "                  onPressed: null,",
      "                  child: Text('DISMISS'),",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ],
    "description": "Flutter Material Banner Example in Dart"
  },
  {
    "Flutter BottomAppBar Demo": {
      "scope": "dart",
      "prefix": "flutter-bottomappbar-demo",
      "body": [
        "import 'package:flutter/material.dart';",
        "",
        "void main() {",
        "  runApp(const BottomAppBarDemo());",
        "}",
        "",
        "class BottomAppBarDemo extends StatefulWidget {",
        "  const BottomAppBarDemo({super.key});",
        "",
        "  @override",
        "  State createState() => _BottomAppBarDemoState();",
        "}",
        "",
        "class _BottomAppBarDemoState extends State<BottomAppBarDemo> {",
        "  bool _showFab = true;",
        "  bool _showNotch = true;",
        "  FloatingActionButtonLocation _fabLocation = FloatingActionButtonLocation.endDocked;",
        "",
        "  void _onShowNotchChanged(bool value) {",
        "    setState(() {",
        "      _showNotch = value;",
        "    });",
        "  }",
        "",
        "  void _onShowFabChanged(bool value) {",
        "    setState(() {",
        "      _showFab = value;",
        "    });",
        "  }",
        "",
        "  void _onFabLocationChanged(FloatingActionButtonLocation? value) {",
        "    setState(() {",
        "      _fabLocation = value ?? FloatingActionButtonLocation.endDocked;",
        "    });",
        "  }",
        "",
        "  @override",
        "  Widget build(BuildContext context) {",
        "    return MaterialApp(",
        "      home: Scaffold(",
        "        appBar: AppBar(",
        "          automaticallyImplyLeading: false,",
        "          title: const Text('Bottom App Bar Demo'),",
        "        ),",
        "        body: ListView(",
        "          padding: const EdgeInsets.only(bottom: 88),",
        "          children: <Widget>[",
        "            SwitchListTile(",
        "              title: const Text(",
        "                'Floating Action Button',",
        "              ),",
        "              value: _showFab,",
        "              onChanged: _onShowFabChanged,",
        "            ),",
        "            SwitchListTile(",
        "              title: const Text('Notch'),",
        "              value: _showNotch,",
        "              onChanged: _onShowNotchChanged,",
        "            ),",
        "            const Padding(",
        "              padding: EdgeInsets.all(16),",
        "              child: Text('Floating action button position'),",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Docked - End'),",
        "              value: FloatingActionButtonLocation.endDocked,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Docked - Center'),",
        "              value: FloatingActionButtonLocation.centerDocked,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Floating - End'),",
        "              value: FloatingActionButtonLocation.endFloat,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "            RadioListTile<FloatingActionButtonLocation>(",
        "              title: const Text('Floating - Center'),",
        "              value: FloatingActionButtonLocation.centerFloat,",
        "              groupValue: _fabLocation,",
        "              onChanged: _onFabLocationChanged,",
        "            ),",
        "          ],",
        "        ),",
        "        floatingActionButton: _showFab",
        "            ? FloatingActionButton(",
        "                onPressed: () {},",
        "                tooltip: 'Create',",
        "                child: const Icon(Icons.add),",
        "              )",
        "            : null,",
        "        floatingActionButtonLocation: _fabLocation,",
        "        bottomNavigationBar: _DemoBottomAppBar(",
        "          fabLocation: _fabLocation,",
        "          shape: _showNotch ? const CircularNotchedRectangle() : null,",
        "        ),",
        "      ),",
        "    );",
        "  }",
        "}",
        "",
        "class _DemoBottomAppBar extends StatelessWidget {",
        "  const _DemoBottomAppBar({",
        "    this.fabLocation = FloatingActionButtonLocation.endDocked,",
        "    this.shape = const CircularNotchedRectangle(),",
        "  });",
        "",
        "  final FloatingActionButtonLocation fabLocation;",
        "  final NotchedShape? shape;",
        "",
        "  static final List<FloatingActionButtonLocation> centerLocations = <FloatingActionButtonLocation>[",
        "    FloatingActionButtonLocation.centerDocked,",
        "    FloatingActionButtonLocation.centerFloat,",
        "  ];",
        "",
        "  @override",
        "  Widget build(BuildContext context) {",
        "    return BottomAppBar(",
        "      shape: shape,",
        "      color: Colors.blue,",
        "      child: IconTheme(",
        "        data: IconThemeData(color: Theme.of(context).colorScheme.onPrimary),",
        "        child: Row(",
        "          children: <Widget>[",
        "            IconButton(",
        "              tooltip: 'Open navigation menu',",
        "              icon: const Icon(Icons.menu),",
        "              onPressed: () {},",
        "            ),",
        "            if (centerLocations.contains(fabLocation)) const Spacer(),",
        "            IconButton(",
        "              tooltip: 'Search',",
        "              icon: const Icon(Icons.search),",
        "              onPressed: () {},",
        "            ),",
        "            IconButton(",
        "              tooltip: 'Favorite',",
        "              icon: const Icon(Icons.favorite),",
        "              onPressed: () {},",
        "            ),",
        "          ],",
        "        ),",
        "      ),",
        "    );",
        "  }",
        "}"
      ],
      "description": "Flutter BottomAppBar Demo in Dart"
    }
  }
  
}

     

  
  }